node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorDataset"
  op: "TensorDataset"
  input: "normalize_tensors/component_0"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "FlatMapDataset"
  op: "FlatMapDataset"
  input: "TensorDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_flat_map_flat_map_fn_45"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 15000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "FlatMapDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 20
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "padding_value"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "<pad>"
      }
    }
  }
}
node {
  name: "padding_value_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "padding_value_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "O"
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "PaddedBatchDatasetV2"
  op: "PaddedBatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "Const"
  input: "Const_1"
  input: "Const_2"
  input: "padding_value"
  input: "padding_value_1"
  input: "padding_value_2"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "PaddedBatchDatasetV2"
  input: "buffer_size_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "PrefetchDataset"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/asset_path"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../../data/model/vocab.words.txt"
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../../data/model/vocab.words.txt_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init/InitializeTableFromTextFileV2"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index/hash_table/hash_table"
  input: "string_to_index/hash_table/asset_path"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "hash_table_Lookup/hash_bucket"
  op: "StringToHashBucketFast"
  input: "IteratorGetNext"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 1
    }
  }
}
node {
  name: "hash_table_Lookup/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "string_to_index/hash_table/hash_table"
  input: "IteratorGetNext"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_Lookup/hash_table_Size/LookupTableSizeV2"
  op: "LookupTableSizeV2"
  input: "string_to_index/hash_table/hash_table"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "hash_table_Lookup/Add"
  op: "Add"
  input: "hash_table_Lookup/hash_bucket"
  input: "hash_table_Lookup/hash_table_Size/LookupTableSizeV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_Lookup/NotEqual"
  op: "NotEqual"
  input: "hash_table_Lookup/hash_table_Lookup/LookupTableFindV2"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_Lookup/Select"
  op: "Select"
  input: "hash_table_Lookup/NotEqual"
  input: "hash_table_Lookup/hash_table_Lookup/LookupTableFindV2"
  input: "hash_table_Lookup/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Variable/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
        tensor_contentt<w\370\233\276`\002W>\262d\256=I\363\007=\267E\031\276\314(\246\276F\266S>bgr?\366(\234=\253!\001?Ih+>\\\346\324\276\240\375\310=cz\302>\352x\014\276o\022\253?\240l\032\277\346\\\n\276\016\025\203\276\362\007\223\276\305\2547\276J{\243>/nC>\357\032\364<\n\242\356\275b\204\240\276\177\366c=\276\025\t=o\177n=\025\306\326>\267E\251\276\003\317\035>\231\022\251>\034\323\223>\221\355<>\314]\373>Ve\037>\005\213C>\343\031\224=(\016`\275\326\311\231\274\245L\312\275\333\367\250;\336\253\206\276@\367\345\274\250\251\245>\264\037\311>\234\341f>\236$]>P\032\252\275\226[\n?\341@\330\276\355\201v\276^h\316>\324\016\037>\325\317\233\276m\377J>$\264\225\276q\010\260;\304\316\344\276\027\240\215\275\232\231\371>J]\262<\207\277\366\276\347o\202>H\244\355<\205\316\013\276\315:\203=\023\014\307\275H\247\316>28J\276\017i\257;\356]\203<m\034\361=7\3048\275\355\330\210=\022\367\250>\212\034\302= ^w>g\177\240\274Dl0=\255k\264\275\306\026\302\276}\\\373\276\367u\030?\350\244G\277H1\300=|,-\277\310\265\261>\356Zb>}\256V\276\0265H\277\231*X>\021S2\277\246D\202\2761\323v>G\314,=)\352\214\275\256\ru>x\264Q\276oG8\276m\034\241>\005\214.=;p\236?\210\204\257=D\372\r>C\255)?\313\333\321>\361\327\264>_{\226\276X\377G\276%\351:>\t\376\037\277m\312U=\205\2316\276!\037\204\276\326\3423\276\270@\302\2757\303\315=\014<\027\276S\226\001\276\325!W\276R&u\275d\222\021\276\210\235\211>\347V\310=\275\030\232>\205\266\\>\336\002\311>\315;n>ni\365=%\370\360\273\017(\033=9\177\323\275~\000r>\374\035\272\276\007\231\324>\263)\027>e\341k<\'k\324=\000:,>\202V >\026\207s\276\374\336&>r\277\203\276\246\'\004\277\237\260$>\314\356\t\277\241J\275\276\374\377\270\274\304_S>\312\245\221=qZ\240\276*t\276=i\035u\276Q\240\017\276\220f\014?\301\312\261>\202\347\276\276.\305u\276\315u\372\276\231\360\013\276\253\317%\277\024\260\275\275<k\207\276q\003>=l&\317>E/c=\235\235\254>s\3272\276\177\373\252\276\317N&>3\033\344=\003\317]\276&\031\271>\3274\357\275\337\370\272>\235K\361\276\375\240\216=\247\"U\276\263\352S\276t]\230\275:#\212\276\221,\000\277\362\322\r\277 {m?p\261\">\262F\375\275\014\0371>s\234\033=g\355\366=\370\302d>V\361\246\276\275\343\204\276\220\332L\277\367X:>\252C\236>Wx\027?\347\030p\276\004!9\276\370\337\212\276\225({=|~\350>\371I%\277\262c\323>\267\234\013\276f\274\255<K\223\262\276\253x\263>\362\265\'\276\374\035\312>\345\270#\277:z|<\026\220,;\364\030\205=\343\342\310=\rq\214\277\253>W>\252\202\021\275n\027\212\276\232\316\316=AH\026\277\276j\305>\324`Z>\\U\366>,\016\307\276/\213i>\333\304I>\220\377\270\273=,\004\277&\374r>^h\016\276\r\303\007>}\350\002\276\262\272\205\276a\340\371\276S\\\005?\rl\325=\276\023\223\276\'\025\255\275\301\307\240\275\"\340\320=3\243\277\275\244\210\354\276\357\217W\276wg\335\276z\215}\276>\313\303\276\352>\220>\331\261q>I\203\333<\225}7\276\252\361r\276\002H\r>\030\3170?\311\002\306\276\354\300\251>+\207V>\362|\206\275\372\325<>\317k\214\275\273\362Y>\014\002\273\276x(\312\276\247\255\021<\240T\353\276\270\036\r?\223\214\034\277t\352\272>_\270s\275\266\204\354\276\361)\340>\350\367}\275\362AO\276\2549 \276\033\330J\276xE\020\277\206\254N>\244\245\022?\247\005\357=\260 \005?j\373\267\276@\366\002?\274\256\337\275\343\245{>[_\224\276\362\007\203>\316\302^>\\\311n\276\344\372R;\245I\371>rp)=0\360\314\276\254\034\n?\200\237q\276\341b\305\276\350\023y>\254\3773\276\220\367\212\276=\013B=>\3550\276\222A\356\274\300[`\276\230\241\226;\275\000\213\276&\307\355\276\025\312B\275\010w\177?q\217E\276MJi?\333m\267>\375\331\377\276h\317\245=\342\344\356>\220\332\004\276\323\274\303?\321\"\213\276\344\013\177;\331Z\037\276\010\224M\276H\026\300\276 $\353>\224\023\215>\222\2569>\331=9\276\372\320\005\276\035\003\262<\257_0\276\262\362K=\213\340\037\276M\370\305\276]P?>f\240\242>\217U\n\275\272\276\257=\036m\004?\361K\375\2757\375Y>\267y#=\013\243\017\274[%\270>\336\223G>\340\271W\276\337O-\276\242\264\307\276F\010\027?\236a\352\274\"\2134=\227\213X>\253\t\002\276\212\260\301>.r\317\274\344\300+\274\2652\321>&4I\275\336\002)\276$\200\233=\311\223\204\276\365\332\214\275\236)\034\277\322Ry>\275\304\230=\345\320\322\276\036\341\324\276\255\372|>{\333L\275*\306\331\276gaO>J{\003\2769E\247>\007\231d=w\326\356<#\277>\275\356|\037>\\\217\302>\351`}<7\216\310>8\241\020\276\242\264\207>\014\037\241\2769\214\223\273\243\006\323=\316S\215\276\347\214\350\276>\005\320>\324\324\002\277\302\243\215\276M-\273\276\262c\223>\273\320\034>\223n\313=\005\206\014\277\335^\302>\347\000\301\276\032Q\022\277\327i\204>\016\241\212=\242b\334=\025R>>\337\032X\276\241\2049\276\373\226\271>\032\277p\274\024\320\224?\254\220\022>\241J\275\276\212\223\023?+0\264>\377!]>\231G\036>J$\021\276\366E\262>\377\004\247\276\334\021\016>bg\n>q\254\013\276Yn\271\276\343\245{\276o\237\225\275!\260\362\276F\316\302>\177\373\032\276}\004>\275\017\014\240=\r\'\037\274\317kl>\242\356\223>[\316\005>\370\210\330>\3273D=\304\261\256=\261\2127>\341&c\275\352\"\205=\362\352\274=\261O@=\326V\004?-\354\251>\331x0\274\021\001\007>7\303\315>nn\234\276p\231s\276\215]\342>[\261\217\276\307\200\014\277\246\267\277\274P\215w\276+1\317\274\317\022\344\274,\267T\276\333\371\376<\351+H\276y\036\334=\016Oo\276S^+=\r\375\303>\344\332\010?\343\374\315<=D#\276w\204\203\276z\374\256\276\365J\351\276\007_\030\276\306\026\202\276\234\026\\\276\374\035\n?\037K\337>\304\010\241>\300!\264\276\204\360\350\275rPB>\2717\277\274Y\335\372\276\237v\310>]\207\312\275z\374\256>\340\242\023\2758\333\334=\335\265d\276\220f,\276\022\240\346\275x\n\271<mS<\275\026\023#\277\037\205#?q\217\225>\'\275\017\276>\313\363\271\023,n>{\332a>*\251\023>\237tb\275;p\316\276-\225\027\277J^\025\277\024\227\243\275\316\307\025?\206\2234=Q\300\226\275\200\324&\276\251\207H\276(\325\236>\306\026\302\276\273\320\334\275\t\244\004\275G\343\220=s\200\200\276\224M\271>\'\203\343\276\324\016\257>\313\241\365\276\003&\260>\365-\363\275\303\323\213>0F$=oGx\277\204\351\305\273\316\374\n>\341(\371<\273\324\250=p\316\310\276\017\326\'?\377\315\213\275\264\216J>\246\n\226\276\036\210\314=\266\240\227=\333m\207\276@\331\224\276\366b(>\246\362\366=\021\252\204>\273G6\275h\256\243\276\215\356`\276a\246m>^c\327=[B>\2764h(\276d#\200\276\017\321h>}\320\203\276\306\205\323\276\311\037L\276!\223,\276\324\267\254\276\032i!\277\224\245V=m\377\252>\325!\367=\344,l\276}\350\202\2764\235\235>\'\240\271>\253\262\037\277\235\237\242\275\233\376\234>\025W5\276\025\221\221>/kb=Lqu>\370\302\344\275\274\0052\276\031\004\346\276o\323?\276\37451?\0324\364\274|\270\224>L\211\004>X\255\334\276c(g>Y\335\332>\017\267\203=\335\014\367\275\211\323\211\275\277\361\035\277t\322\033>\032\372\007?\272\3670>\360\212\030?0\330\255\276d\003\311=iW\341\275\323\301\372\275U0J\276\263\007\232=\355\273\242>g\233[\276\277`\027\276\215\177\037\276\242\234\010>\211\352\r\277\204K\207=\216\222w\276\262c\243\276\023\nq>aT\222\275\341y\251\275\320\n,?\205w\031\276\317\025\205\275\033cg=\245\367\315>\276\3275;\360\205\251\276O#\235\276\223:\005@\244T\002=\344\206_<\361\364\232>B\240\351;f\367\024\277_\007\216\276\r\376~\275\243\222\222?\274\"x\276\221\355\374=\224\274\372\275\375\274\251>\232\352\311\273\263^\234\276$\264\005\276L\245_\275X\344\027=\221}\220\275]\334\026?:\222\233\276\252`\224>\366\013\026\276\231\201\212\276\252C\276>\254\377\243>\270\036\225\276\356\371\253;wJ\007\276\264\001X\275\010\344\262=H\212\210\276y\006-\276\njx<\2365\t\274oG\030\276\306\277o>\236)T\276\225(\273\275\033/\315>\020]0\276\007\3169>\271p\300>\022\332\222\276p\353\276>\002\274%\276\344f8>\010=\233>\363T\007\276\253\354;>K\035\304=Rc\302=\226\316\007<\203\335\360=\306P\256>$\234\026=\316\337\224\276 \317n=0\332\343\274\371\334\251=6\253>>\332\377\000\275\200H\217>Re\230\275B\354\014\276h\350_\276\256\2739>\223W\'=\213l\347\275\016\333v>\010=\273>\221\355\214\276\017\321h\275n\213\262>\034\265B<r\247\024>m\3056\277\375M\370>\251\237\027>it\037?\013\357R>Cs\025?\351\232\t\276\036\334\315>0\201;>\257w\217>\256\323\330\276\2034\203\276\317f5>\263{\n\277k\361)>\216\261\023\275=\017\256=1_&\277o\271\232=^\235\223\276P\001\320>`v\217\276\224\243\300=1\353\245>\362\230\221>\255\335\206\276\376\232\354=\277I\223=\245\275\361\276^\021<\276\310\265\261\276jj\231>\235F*\277z\343$;\266\276\330\276\207\334\214>\246a\270>O\006\'>0du>(\233r\275\224\366\246>/\206R>\306k\036=\217\251;\2750\326\267=\341\356\334>t^#\276A\274\256=t\014\210\2769\234\031\276#\236\254=\300&+\2764.\334\276\303\020y=\352[\006>)\350v\276\324`*?]\376\343>\272\2038\276\323\207\016\276P\001\020?=\270[>\305\311\355\276\245\020H\274e\251\365<\361GQ\275\262.N\2769\321N?\373\221\362>C\037l\275<\240\354>>\263$>\247\221V\276]P_\275\020u\037>/i\014\276R\325\004>6\217C\274pa]\273z6\013\276\317K\245\2752wM>\323i]=\"\302?=+\337s=^\200==\014\3155>\2073\237\276#\370\217>,ey\276\232\230\256=\023\'W\276\256dG\276\304\3442;\023D\355\276zp\027>\366]\241\276\007\013\207\275\343\343\023=\322\251\333>\231\330\254\276\201C(>\207\277\246>\327gN\275\210f^\275\214\204v>Q\245\326>->\005>C\312/\276\264\223\301\276nnl\276;\216\237\274M\370\225\276\242\321\235\276\342\036\233>5\007h\276E\020\247=\225\232=\276\3127[\2764\364\317>\315X\224\276\212\350\227=\20686\276\nh\222>\337N\"\275{\203o\276\263\230\270\276\003?\212\275I\200\272\275P\001p>\365n\207\273\366\317S;c^\354;\335}\016<\316S]>#hL=\n.\266>\217\307\014>K>\226=R\017\021>\"\375v>\205DZ\274\213\340\037>\250\303\252=\344\205\264=\222\222\236\274\373:\340>\277\363\253=j\373\347>y@\001\277\344\203\336\275\345a\201\276\347\343:\276\333PQ>\366b\010>o\201\004>\247;O=\354\335\037\276\315u\312\276\235c\000>\014\310~>&SE\276\200\016\243\276\030>\002\276[B\336>Q\240\237>\377+\206\273\364lV\276\230\302\243\275\326\305\355=_\rP\275?\036z<{\203\217\276\232\266\377\275\350\207q>{\203o>t\230\017\276$)\351<\017\271\021?\214\333(\276\2236\025\275\363\254$<\371,/\276\272\205.\2758-8=\356\353\340\276J\322\205\276\362\014\232>\020\354x\275X\377\347\276\227VC\276\306\277O\276\024\313\215>\262ey\275\365\234\364=S?\037?\204\022F\276\244\374\364>\266-\232\276\341As=\262e\231=p\"z=\304\261\356\276\224\023\315>\342\222C\276\333\277\022\276\255\244\225<\202\347>\276g\017T>\003C\266\276\375\244Z=\256)P\2758gD\276\202\305\301\276V\361\206\275;\252\212\276\243\255\n\2758kp<\236\322\021?I\200:\276\273~a\277\020\2230=N\227\345\276\227\342\"?\035Z\304?Dm\273=V\232\324=\236\014\276\276\344,\014>\232\316\276>\200`\216=\224\331`>\275\214b>\025\343|=\0010\336=\237\345\331>\036\033a\276\376\267\322=e\215Z>\2304\246\276Bx$?QkZ\276d\351\003>\025t;>\021\001\037?\013c\233\276\265\032\322\275N\227\005?:#j>\016g\036>\007BR>\373:\260>\\\217\202\277\005H\331;\241-g<CX\215\274&\001\312>\'\210\022?\346u\304<\211\267\216\275\353s\r\277\310{\025\277Y\372\020\276\021\375\232=\223\035\233>\267\356\246\275\263\263(=\332V\223=\234\304\220\276\330,\267=\372a\204>\200\273\314=\324\267\314>O\222\356\275Q\205\237=\330\232\255<\245N\200\276O\257\244\276h\\x>(|\266<\002\331\013>\346\"\356\276\221\234L\275\350Me>\317\370>\274Fz\321\274\276\207k>8\333\\\276\277`\227>\201\262\t\2764.\334\275\271\245\025>~tJ>?\035\217\276?\2516>@\275\231<\345\233\005?\273\325S>!\260z?\026\333\244<o\365\274>\327L\006\277\230M\000\275\007\261K?\037\242\201>\031V1>1|\344\276\343Q\252=c\227\010>\233\376d\277\270\220\307<\356\351*=\275\214\302>\222yL?\331\316\307\276\361\021\301>\264<\237>\257\224\205\276\256\240i\275-`\"\277\0216\264\277j\243z=y\256\217=r\371\317>}\320s\276R\266\210=\374\336^?5^\232\2769\362@=\0319\233\276\252\361\302>\321\006 =$\235\301\275\301\250$?\341\264\000>z\245\024?W= =pw\026\276\202\377\215\276\021S\n\277\241\241\237>Q\025\023=o\365\214\276\216\036\037\276\211\007t>\266\370\034?\311\345\017?8\276>?:X\237>D\250\022?P\307#\276\230n2\276L\303H? \357\245\2763\371\226>du\313>\372D~\276\323\336\000>\001\2446\276t\352\n\276\360m\252\276q\003\276\274\\\003;>b\020\370>|}\215=\032\213&\276\224\373\275>\036\306\244\274)\313P>\221a\325\276\216\257}\276\313\234\216\276p\316\330>*\253\211=\216\314\343=b\276\374=\266\020\244>\227\305\304\276H\376`\276\354\243K\277\"\032\235\276l\t\311>\'\216\362\273B\262`>n\2132\277\320~\364>\334\235\345>*t\336\276\013$\250\2753\304\t\277\257\010\376=\002U\222\273\276j\205>\241f\210=&6\037\276\361\200\022\276\24615\272\"l\350\276j\240\271==\nw\276\266L\306\275RG\307=%$\222=\257\316\321\276C\3413<1Bx>/\335\244\276\035\346;\277\233\004\217=h\320\020\276\305r+\276\330\236\271>\031\342 ?C\305\370\275\367\"\332\2744\242\324>\345~\207<\035\311\305\27605\235;\325[#>^\364\265\276\204\236\235>\322\337\013\275hu\262=\256\330\037>\345\233\005?\245kf\276\351\016\242\276W>+\276^K\250>\215\224R;\224\023->m\342d\276C\034\233?\345\233\215>\321\255\327\274\203L\222>E\360\007\277\312\246\334=|H\230=z\252S\277\255nu>,\267\344\276\330d\r\276\261\247\235>Sy\353>%;\366\275Jb\311<\213\341\312={k\360\276\356=\234\276r\371\237\276K\002D?\207\212\361\276\302\335\331\275\244m\374\274\034\323\323\276\335\007@\276P\001\360=\273\320\024\277[\353\033?s.e>>\355p>\221,\030?\024\320d>\201\262)\276\375j\016\276(Iw>\0015\325>\335A\374\276w\333\325>\234\371u>\231GV\277\354\030\262\273Zd\373\276vT\365\275\304B\r?m\034\221\276\002J\003\275$\264\245\2752\346\016\276\220\275\236\275h\263\n>R\362\n>\266\326\327\276&\001\232>\030CY\276\235c0?`\253,?7\216\330\276\250\000\030\277\033\022\327>\217R\211<\001\207\260>\350\331\254\276,\274\373\276\002\326*\274\013\322,\276\361\2358\276FB\033>\025\003d\275BC\317\276\220I\006>\264q\024\277lx2?\362\260\320=\177\331\335>B&9>\367\344\321>y\001.\277\004\220\022\277\247\256\214\276o\240@\275\345Be\275P\374\330\275\230L\205?\320\n\314>\013cK>r\371o>\346t\331=\250\251\345\275\222\350\035?<\210\025\277w\333\225>\273\270\235\277\372\270&?\313\276\213\275\300\320c\275\251\0238?\363q\235>=\270\213\276\231\360\013>\017\177%\277\347\251\316>\240\303\234\2760\330\315\275\272\201\002\274\255Q\317\275\265\211\223>ff\216\277\273D\005\277\236$]\276=D\323\276\266\271Q\276\240T\333>I\235p?\3274\237>\307\233\374\274\002\232@\277\220\332\304>\n\334\352>c\321\034?\301pn=\20737?\355\270\241=n\372C\277\374\214\333>\342Y\202\274\223\214|\276{\276\346<\033d\322\276>y\210?\"\340 \277\262\200I>\333\211\222\273l\225\240\276\330\201\303>\031s\227?\035\003r>\017\227\374\276Sy\273>;p\336\276.\204\346\272N\263\300=\002\274\235?n\303\210\275Z\365i?\273\362\031\275\252\361\322\275o\201\004=Mg\247\276\365\205P\275$\177\300>\216\"\213\275\335{\370>\021\307Z\277\3436\n\277\321\005\025>\344\367\346\2761\224c\277<fx\277\315#\257>\233\033\323>!\310\001\277\235\235l\276\305\346\303>J\265\317>2\217\254\276fN\367\276C\312\257\276\376` >l\262\006><\240\214\276\336\223W\277\212\037\223\277o\330\006?\207\277\346\276k`\233>\031\342x>_$<\277!\260\232?(\325\216\276\351eT?\202\347\376>\023,\276\276\205\320\001\275\334\233_=\351e\304\276M2\n?vO\216\276P\374\310\277\203i@?\027\267\021\276Z\360\002>\253\321\213=[\316\005>u\223\210>\253\tB\276\376`\200\276\032\250\274\276&\036P\276\262\200\251>\021\036\215>\254\255\330=\207h\031\274A}\253\276M\363\226?4\021\026>\300&\213=>\256->\231\177\364;\3436\372>6\315\313\276\006\022\234\277;\001\335\276#J+?p_\327?\374\306G?\347\251\376>\235\327(\277\001\301\314>H\334c=\217\245\337>j\301\213>C9!?\371\332\033?\2451\"\277\014\345$>\336\254\301\2747\034\361\273\310$\003>\342\036+\276\260\033\366\275\230n\202\276\220\024\001\277\344\203\216\2766g\216\273\365\276q\276\256\201}?\\=\007\276\322\3069?w\370\233\276\362\260\020>S?\357\275\0054Q\276o\360\025\277\215\177o?\221\266\361\274\304%\367>\263)\327>3\212\005>\262\327\353>\361F\326\276\006\r%\277\262\200I\276\365\241\273>\263E\322\274.\305M?\317\367\203?\010U\252\276u\315D?\262\205\300>\226\262\224\277\363\2539\275\222\221\023>\342\257A?\243#\211\277\224@\024<\351|x\275\244\302\230><\210U?g\270\341>vTU\276\\w\023\276\326sJ?f\240z?\356|\247?_)\263\277\303\266\225>\213\032t?\333P\321\276T:@?w\326\376>|\355Q?uY\014?`\345\000\277\004\004S>\2240c?\222\256\371\2760\r\223>(\270\030>\273\017\200>\263\352S>\236\230\305\2766\346\265\275\007_\210\276\\{\372\273\225\202\311\273y\257*\277\350\207\301>$\356\221\276\024\313u\277\254\220*\277\344I2>\360\334\033>\\\254\350=S\320\r\276\347:-?\177\331\335>\025\310\214\275V\361\326\276\321\313\370\276\002\267n\276=,\304>\352x\014\276\217\302\215?\200\237Y\277aq\210>\264\223\321>\242\356\363\276\210\200C\276\322:\332\276\201C\010\276\212\351B=\177\244\030\277\014t\355\274\010Zi\277J\322\225\276\\\033j\276\375\274\211\276\333P\261\276\234\334o;\300\225\354\275\252+O?)\256j\277\232\320\304=\266\275]\274\277\234\231=\303JE=n\372\203\276Ttd\276\252\232\360>d\311\234\274\252\200\273=@j\023\276u\315\224\276V\020\203=f\332V\277\006\236\273\276\303\266\305>\267z\016>b\276\374\275Z*\277>f\240\202>\217p\352\276\025t\003\277\3539\351\275\354/\273>\320\355\265>O\314Z\276(\'b?\305\346#>(,\021>_\357F\277\217S,\2779\321N?\374\0352\277>yX>\363\310\277>\326\305\275?\020z6>\207\304]>\236\265\373>\366@\213\276M\326\350=\240\246.?\003x\013\276\334FC?\214\370\376>\265\026\206\275\t\212\217?\321\"\223?\244\307o>+l\206<\255/B?bJ\264>\177\210\215<\360m\n?J{\223\276\357\376\230>\013^\364=w\333\245\276XVz>\302\335\271>\3377\036\276)?!?kH|>\202\342\'>\032\372g\276l\004\032\277\341E\217>u\037`\276\360\247^?\336q\222?\262\235O\276\311\037\214\276\240\340b>(D@>\263\315\r>ms\343>]\277\340=\024\"@\276\361\272\026\277\255\335\226\276\252e[?\226!.\277\205\005\227=m\034\361>\r\253\010?To\355\276\205\"\275\275\000\256\304>\261\247\355>Ou\210>B\225\332=1\3236\276y#\023>\257%\244\276\211\007\324>]k\357\274;S\350=\034\353\202\276/\2438>\003`<\2764.\034\277\347\373\351\275>\320\272>.\034\210\276\313]\225;\223:\231\277\177L\253\275\177\025\200=}\005I>?R\244\276w\204\323=T\035\302\276\213q\376\275P\302\334\276\354Q\200?%#\'\276\376\361~>N\177>?\335\230\316>\313\333\021\276\035\346\273\276\247\256<>{\024\236\276\017\177-\276\274\221\031\277\"\303\n>X\347\330\275\016\204\304>>\256\275>\247t0>\016\020\254\276,\271\n=&\0360\276\335\007\000>\376e\007\277\252`\014?fk]?\312\032E?\2657\200\277\240\246&\277\"\026\326;\371N\254\276\006L >\310\230\213>\377\t\356=i\035\325=7n\261\275\022\275$\277\270\006\366=\\9\233\275\341\311\270\273\027c`=\252\234v\275\212\315\367>]6\232=n4`\276\001M\214?W>K\276z\245\014>0\273\207>\235\327\270\276\332\222\025=?R\324>9\356T\276r\341`\276 y\347<6\253^>Ou(\276_FQ>\320D\210>$\271\254\276\342\257\211\276O\006\307\276b\326k>\311\223\224>\'\372<\275\263^\014>\325>}?V\202\365>4.\034>]N\311\275\177\275\302<\330\236\031>\261P+\276X\255\014\2765\007(\276\003x+\277\233;z<\217\374\001\276E/\303>2\217\374\2762\346\256?C\002F\275\243;(>\2029\022\277\211\357\244\276J\360\206\275JA\007? Fh\276\236\346\211\273\255/\n\277+\023\316>g~\265>\006/\252\276\344\017f?CW\242\275\3711\266\276\020\314\301><k\367\275\320a\376=\350\244\027\276.\347\022?I\272\036\277wgM>\334\272\213>[_\004>\355\273\"\275K\260x>\034Aj=5\013t\275\276M_>\314\270)=\355\266\333\276\007\316\231\276\257Z\251\276jj\031=\235\235\214>x\271\270\276\037LJ=?\310\262\275F\261\034>\336\253.?\000\251\r\276\370\031\267>\224\331\260>,+->\221\233\341=^\276\265\275\014\037\021=\370S\263>\2755P>\036\247\350=#\276s>\2235\312\276\320\270P\276\013c\333>\354\027\014>\212\260a\276\036\212\n\277\367\307\373\276\314]k\276\031sw>\372\320\345>\237\223\256\276\356Z\242\276\363\217\276<\336\002\251>\245h\305=\217\031\310=>\313\023\276\320C-\275C\034\013\276w\326\376>\266\271\021>\001\336\">\320\270\300\276\"O2>\202\034\324\275%;\266\274QN4\276e\033\270\273\272\236\350\274\321[\274\275(~\214\276vT\205\276\301t\332<\254\377\003\277\"\253;>\236\352\240\276\377\354\367>\202\305\341=\354L\341\275yW==\'\024\002>\353\220\013\277\236\007W\276B\225\252\276\332\341/\276Tt\264>\257\010^>\347\214\270>4\364\237>\t\033\336\275\335$\306>\355\360w>\021\253\177=\353VO>\r\303g>\341\267\241\275i\306\032?\376\322b=\350\237\000\276\034\360\331\276\247[6\275\342\224\231=B\310\036<\014!g\275\245f\317>\235\275\223=\017\326\037>N\264\233>\n\365\364\273\304|Y\276\251\301\224\276XY\333<\340g\334>\211\230R=j\301\003\277\017\235^\275\023~i\276_\007\276\276\3166\207\276\310\0144\276\014\007\002>\254\377\203\2760d\025\277\207\250\302<\274\226\020=T\035R>\016\370\234\276\004\347\014\276\\ \001?\2201G?\2132\273>\311\216\255\276t\352\272\276\307\364\004?\260\257u=\350\237\220\276\254\314\357;w-\301\276X\220F>\347\000I?#\203\234=^\205\224\276lC%>a\216~>\274y\332\276\264\037\311>\254\2558\276\241\333\313>!v\306>C\034\253>R\325\014?\000o\201\276>$|=\032\250\234>\026M\207\276m\306i=@\373\301>\352[&\277=\3251?6\310\004?I\242\027>\000R\033=1\224#\277\004\377#?\002\1778\275G\217\037?E\022E?\365\332\254\275\025\000c>\243\001<>\250\374+=\314\231\215\275\222\352\233\275P\031?>\355*\344\275)\226\213\276~t\252\276\312\211&?\251\366I\277\364R\221=\227\312\273>2\0035>P\001\000\277\231d\204\276\366\177\316>\324`\332>\351et>\340\241\010>#\363h\276\035XN=\351&q\276\310{\265>V\364\207=\315\374\017\274\337l\263\276\237\315\212>\355\360\247\276bJ\324\276\347:\r\276o\2730>G\217\317\276\231\016]\275\223:\201\2778g\004\276B\262@>\372~\n>\216\222\207\276Y4\335=k\361I\276\232\010;\276\365\276\031\277nn,?\324\356W\275\314\355\236=\035\3115?\373\005\213>Pp\221\276\356B\223\276\210\364\313>\t3\215\276\213mR\275(\n\024\277\252+\217>\351&\241\276]\247\201>0\201{>\347\000\001?H\341z\276!\345\207>\367w\226=\373\226y\275\"\032\235\276Y\213\007?\347\2140?M-K?\241-g\277J\007\273\276d?\213<,H\303\276lxz>\3269\006>\216\0019>\371\203a>r\207\215=\351\016Z\277T\376u=\275\030j\276\357\341\322=\277e.>\324qk\273[\261\377>\273\227\373:\274\263\206\276\230\335K?%#\347\275\202\342\227>\360\247\326>I\242W\276\345\214U:\313\020\267>\370kr\276\242\321\255\276&r\241\275L\340\326\275N\264K>\231J?=\244p\235>\200\016\203\276?\306<\276I\3642\276\256\236\223\274s]\035\273_)K=3\334 >BCW?\241\241_>6\345j>34\036=\220\332D>3\026\215>\307dq\275\300\2622\276Mf|=\254\377\013\277\014\222~\275\375\023<>\356_9>:;\331\276+\030\235?\231\273\026\275\353\255\301>]\3415\277H3\226\276[\266\326=\335{\010?#\363\270\276\3021\213=\034\360I\277R~r>\365\020->\366\n\253=\257%\034?C7\273\275\025\214\212\276\305\033\311>\3368)=\361\271\223\274~\306e\276\006\r\215>\030[\370\276z\302\322=j\300\240=v\032I>\245\203\365\275\366E\242>O\347\212=,+\315\275\007%\014>\330a\254\275\346tY\276\263\352\363\276\227\034\227\276@0\'>=a\211>Sy\373\275v\304a\275Y\026\014\275\355\266k>\rq<?\001M\224\276W&\314>\323\301\372=\323\301:>\216\353_<\272\371\241\273\320\325\026>\2613\245>\334\200O\274\035rS\276YL,>\265\377\301\275a\377u\275\305\376\022?\317\022\344\274\270#|\276b\370\030\277GU+\277\316\302>\276<1\353>\323\274\003?\332\252\204=p%\333\276\223\311\311=\"qO>{\332\341\275-1\005<\332\341\317\276(\266\202<\0258\231=\332 \243>\377\004\267>u\002Z>al\341\276\221\232v\275\311\343\251=.\347\202>p%\033\276\242z\253\275\201\262\251\276d;\037\276\266\363=\276\243XN\276\2341\314;\376C\312\276:\222\213>\001\023\310\276w-!>\227\002\322<\016\026\016=?\035/>*\214M>9E\327\276L\375\214\276\310A\231\276t\352\252\276\236\014\276>\215E3>X\250\225>#\363h>\014\223\231\276\241\326t>\332\033\\>\027\325b\275\241gs>9\264H>\266\017\231\275\227\342*?\331|\334\275\320(\275\275e\215\332\276n\243\001>\032\206\017>,\202\377\275\206\322M:\357 \366=->\205<\026\333$=\254\213\233>\350\370\250\275\353s\365\275b\020\350\276\344Ir>\253!\221>4,\306=\017\326\177\275\273\270\315\275\336T\224\276\207\376\231\276\3544\242\276\215\234\265\276\342\310\003\275\226\004\210\276$b\312\276\335\"\260=Xs\200>}?U>\256G\301\276\333\277\302\276\355\365\376>\204*\005?\032\372g>\216#\326\276\223V\234\2751_\026?\2754\005\275\356%\r\276_\014\345\275\230\335#\277\246\'\334>C\2559?\35442>Uj\266\276;S\230>\2716\324\275\037.9\276\r\253\270>\005\206L\276\303\r8>\332r\376\276(\'B?0\330\r?\004p\263\2748\241\020>\035Z\324\276\361) \276Z\273M\276\343\031\324>\020\351/?\271\307\222\2765\357\330>^.\202\276\373?\007>\247\005\317\276\277\016\334\275\233\311\227\276g\325\347?\014\223\231\276\024\017\003;Tq#=\3744\356<\214\274,<\274\\D>\340\333\224>\264v\233>\355\360W\274a\343z\275\003}\222>\200\237\241>\244\005C\273y#\363>1\231\312\276\211\352m\276h\320\320=x\360\223=\"U\264\275\226\347\301\276W&<>3T\245=\033L\343>K\345-\276\374\373\314>@\366\032\276\231\204\013=UN\273=d\257\227\276\223W\207>\020\346\266=\n\003\205:\232w\234\274\353\344\254=\247\"u\276\217m\231\275Vb\036\275nQ\006?\253\354\233>\233Zf?\021\307\232>/\243\350>\342\001\265>C8&\275vlD\276LqU>\030\262\032\277T\343\025\277\t\247\005>/i\274>\264w\241:x\234b>\032\372\017?\346$\024\275\315\314\314>6\310$>\235\327\330=\326V\254>\216\257\315>\031s\267>\345D\373=4h\350=d\222\361>\227o\"<\243\222\232\276\357\217\247\276R\232M<\374\306\207>[%\250>\004\255\340\2765$\356=\250\000\030>\360\212`>\307\327\336\275<\027\006=\r\340\255\276\366\t\240\274\233U\277\275\360\334[>\'\024\">\301\250D\276\003\317\335\276\316\303I=?\214\320=\310\267\227\275\205\264F\274{\365\361<\336q\242?\314\354\263\275~\307p\275ms\033?\262c#>\351`\375=\242\321\235\276\213\375\005>jjY>)?\211>X\312\022\276\264\220\000=\263y\034\275\300\317\230\276\346\221?>I\272f>\275R\226>\032i\311\275\322\030\355\275q\217\005\276\203\300\232>!>0<Bx\264>j\366 >b\025\257\275\360\026\230>\227\375\272\274\364O ?\364\303\250\276\240\337\227=^.B\276,\201\264=\202\305\361>\243@\217>\014\312t=\300\004\376\276MJ\201>\206r\302\275\024\t&\275a\216^>\375\242\304=v\246\000\277\343P\277\2748g\244>CV\227\276\242E6\276|\355\311\276\337\370\032\276jjY>8\370\222>\231*\030\276\\8\020\277\367;T\276\320\325\026>\271l\264=\327\212\266=\2132\273\276r\303\357\274\257\353\367\276_\014\025\277\217\337\213>\325x\211>H\017\215;\030\351\005\275\255N\016=#\204\'>\353\220\033\276l>\236\276\343\307\330=g\355V\276\n\334:>\3019C\276\271\210O>\024\\\374>[A\023=\263\230\270\275\240\2466?\366\231\223\275\010Z\221\276\323\274c\276\350\237\000\276\323\205\270=\361\021\321>\222\314\312\275\312TA\275\265T>\276:@\020>>y\030>\021QL\275%uB\276\221\233!><j\014\275O\351`>\313\274\265\275\223\237\236\2732\254:?0\r\003\276\245\241\246\275\235h\207>\013^<?\335\317\311={\275\273\276\305=\026\276f\256\302:t\264*\274=\325\221>\344\240D\276\337\375\021\276M\025\334\276\363\310\277>p\231\303>\272\367\020\276\254\312~\276\013\354\261\2741\224\323\275\301n\270>\341z\024=:@\220\276\177.\232=\357\376\330>]\334\206>\377\354\007?\224\275e\275\312\246\\=\334\327\001>\363q\275\276sK\253\2746\352\001>\271p\000>\r7\340=\242(\030\277\336\260\r\276\347\214\250<\245\332\'\276\010\347\263\275&Se\276\244\342\177<\352\225\362=(,q>\337\251\000\275|\'F\276\336qj>R\n\022?\231\360\213\276\221\017\372=\264W_\275\312\304\215\275\321\313h>*\035\354\275[_\364>t\007\341>\221~\313\276\206\033\240\276\261\210!\275\230\243g>\332U\010>t\230\237>\005\027+\276\324}@=\331Z\337\276\230\276\027\275\2557\305;\324} >\321\313\210\276|\'\266\276\2616\306<\365\241\333>\231*\210\276\362\230!\277\374\373\014\276_`\326<5\231\361<\373\\\375>4.<\276\210\272o>-\225\367=\274>\223\275\260\217\236\276%\261$<\200e\345=\325!7>\236\322\241>.\220\240\276\017\356\216>\227\305<?\013\357\362=i\254=\275^\205\244\276\221\362\023>\320\325\226\276l\t\031\276\371f\333\275\362\232\267\275\204\273s>\245\366b=4\242|?B{u=\t8\014?\2451\032>\374\251\241>,\237e>\317\203\313\276\230L\225\275\346tY=\245\275\221?[|\312>p\010\035?\205\261e>\2513w<\021\001G>\370\210\030>o\330\366\275\\Z5?rm(\274\374\306\227\276_\317W=\244\215\033\277\343\374\255>&7\n=\225\016v\276VH\211\276\246\355_>\203\300J>\322o\217\276.<\257\274t~\212\275\366(<\276\372\270\026\276\341z\264>!\007\345>\222y\204\276&\031\271\275\221a\325\275\376\363\224\275\n\200\021>\203N\210=2\257\303\275E\r\036?\376&t>\262h\372==,\324\275\374\0303=C\377\304=(a\006>\307-\246=\225e\230>\"\000\230=\202\255\222>\0051\260=\233W\365<\3642\372\276\235F\272>6\253>\276\224\207\325>\201\004\245\276\301\213n\277=\270\333>y#\323>\027\016d>m\220!\277\251\336\212\276\267\233`\274d\314]\276\227\312;\276\205|p\276<\205\334<b\241\026>\345\233\035\277\325\221\243\274\342#\362>\030\262\312\276\233r\245\276/Q}=\226w\325<\365\020\315\276\203\276t\274\224\207\205\275\277HH>\233\036T\275\013\263\320<$\177\010\277\334\272\003\277\342\3446\277\342u\335\276;\307\000>\343\337\367\276\365\271\232\276\014@\243=\240\032\217\276u\310\025?\242zk\277?\221\'?\347\373\211>\037\364,\276\300x\206\276(\325>>\026\366\304>\024\212\276:\315\225A\275\270\351\027\277\314\356\261?T\255\205=\331\261\261>*\306\371\2758\363\353=\335\265\244=\372a$?IK\325>\342\036\013\276Q\3310\275\3647\261\276fN\017?\272\024w>\311\314\205\274S\256\360\274Y4}>\337j\235=n\027\252\276qUY\276\225\034\301\273\006*\003?\251\023`?\327i\204>\216\036\317>\356\316\272\276m\305\036\276\2715)=u<\006>eQ\270\275U\030;>\376\324\030\276\256d\327\276To\005?B\352\226\275\035r\033?\321\256\202\276;\214I=JF\006?2;\213<\275\000\253\276\276M\277\275\304|\211\276\264q\034\277\315\036\210>\242\013J\276\312\211\206\276\261\212\267<\210K\276>\216\257=\276\025R^>\247\313\"?\241\020\201\276}\317\010\275\201\004\225\276\361.\007?\267\013-\276\217S4\277D\372=?a\246\235\276\330\201C\277\r6\365<s\021\257\276\376\236X\275Y\213W?\025\343\034\276\026\366\224>ms\303\275\242\234\350\275\260\033\266>y\351&\276xG\306\274AJ\314=\273D\325>\240O\204>\371O\222;l\0253\273\330G\007>\341\321\006\276N\264\353\276h\350\037\276\204d\261\276A+\360\276\0358\007>\251M\274\276\230\243G\276\264<\277>\025\000\343\276/\207\335\274\206\346:\276\276\024\236<1|$>C\347\325>\010\254\\\276\370k\002\277\376\232l\276wg\255>\355\r\216>\327\335\\>\272N\343>\363\252\256=\'\367{\276z\302\302\276U\023d\277\023\017\010>\366bP?\234\212\324>\002\274\325>\250:\304>fI\300>\372\355\253\275\030\t\r?*\221D\276\225+<\276\374\214\233>\2235\352<\234\032h=\204\360H\276\313\023H\275)\005]\276\361hC>\247t\360\275\n\364)>\277e\036?X\347\350>\035\311\205>m\345\245=\355\273\222>\037\235:\276\361F\326\276\240T\233\276\351\232\251>\210ht\276\215\321:>F\231\215\276\021\036\005?\234\341\006\276\322\246j\275]\375\030\275^\205\364>\177j\\>\036\245\222<h\256\343>\227\250\236>\000\216\275\275\213\303\351\276Nz\037>\nh\202>\212\260\001\276\'\245\220\276\351\232\311>j\244\245\276m\347;\276I\235@\2769\227\032?\005l\307=\370\210\270\276E\r\206>\235\205}=\327\027\001?T:\210\276\023\270\r\277\360\3706\2759\2349>\033\365\000\277p_\007>\305\217\201>\246\232\331<8-x>\246M\013<\244\374\004\2763P9>+\334\362<R\357i=9\013\253\276(D \276$\227\377=R\233\250\276\341E?\276t\357\261\276\212\223[>\377\312\212\276m\377\372>\260\001\221<\234\2124\276\342u]>\354i\327\276\262\235\217\276z\337@?\350\237\020?M\274\203<\307.\031\277\032\250l\276\010w\267>\204\330\331=\354\027\\\277\325>e?\026\336\005>\365J\021?\205\320\201=\304\316\224>R\270^>\252H\245\276\034\n\277\275a\301==jM\233?\257\010\036>\356%\375>(I\207>\302\372_>9\013[>\217\304\253=V\274\321\275\206\003Y?\304BM>4\327\231\276\016j\177=od\036\277\235c\340>\244\030 =\217\344\022\276\336\216\240\276a2\025>\265\375\233>x\234\222\276\204G\233\275 \014|\275\357\311c\276\366z\027\276j\366\000>C\004\004?p%\273\276\377xO\276\002I\330<e\034\203\275\311Y\270>xCZ\275\311V\027=F\261\014?\377\312J>\330\r\033>\002\331k\276%!\221=[A\263=RD\206>\006\273a>\020\006>>\231\022\231>O]\231>\255P$=\'NN>\027\237\362\276\021S\222>\020\222\205\276\031\342\000?\007\360\266\276\337O\205\277cz\202>\256\365\265>\336\345\242>\255i>\277\355\365\256\276\206\003!>\346#\251\275\'\302&\276bJ\004\276\3023\241=Do1=\261\026\017\277\225\2719\275\204\022.?\362$I\276p%\313\276\035!C==\233\325=\242]\265\276\253\t\002>\242\017\361;I\021\211>\315\344\033\275GT\210\275\354\027\374\276\242(\340\276\335\315\013\2770\273\347\276\004\220:>\032n\300\276\205\316K\276b-\036>\2760y\276\365\3636?\004V\206\277\"q\'?\204\323\322>qr\217\276>\355\300\276p>\225=\231d\014?Ve\237=\310\2646=\034\360\311\276\350j\213?\376&\024\276~\307\260=\354\244\276\275\020!\256\2747\211!>\"\303\332>\324+\225>c\013\001\276F_\201\276>\350\271\276\021\031\326>\241\2729=\316\215I>\213\207\367\274\247\"\325=s\327\222\274\213\340_\276[\261\237\276\245B\206\273$\321\353>.sZ?\250\035\216>a7\314>#\3339\276\274\226\220\274\273E`\275|\325J>|\3559\276\222\350E>\337\025\001\276\'\210\232\276\226\225\366>\352\317\376\275\025oD?.\305\225\276\357\254\335=n\372\003?!\220K=\200e\225\276g\017T\276\213\2463\276\221D\'\2770\236\201>Kv\354\275\221,\260\276\252OM;9\264\330>\262\327;\276\253\262\357=\003>\377>\240\026\303\275\363\257\345\274\255\206D\276aO\013?\026M\'\276\023a\363\276\236AS?\215\321\212\276P\337j\277*\031\200<\205\224\257\276\006\273\221\276\361./?\016O\237\276\244\337\236>\327\333\206\275\267b_\276B\317\246>\371i\274\275\242\177\002\276\373\226\231>\034%\377>\006\r\215>q\3142=a\244\227<\234\2124>6\222\244\275\266g\346\276\007\261\363\275VH\311\276\003}\322\276\033\200\215\274\266\276\270\276\020zV\276\375M\350>\373\"\261\276\035\037-=\022\275,\276\320D\330=\320\0168\2740\r\243>\235\327x\276\031V\001\277\247\226-\276\316\307\305>\274\226p>\213\375e>\250\251\325>aD\221\272\247\226\235\276\323\237]\276\034\353B\277C\004\234>d\2577?\n\235\247>\227s\211>\206\346Z>\037K_>Q\253\036<\264\260\017?|a2\276\n\205\010\276\251M\034>\026\366\024>\313\271\324=\217\030\275\275\366\323\377<\225\361O\276wH\261=\311<r<\241\204Y>\236\357\037?D\335\007?\005i\226>fM,=\201&b>\210\205z\276\375\274i\276zS1\276\215\264\204>\224\336w\2768\204*>\301\305\252\276\024\005\252>\332 \203\276\2236\265=l\004\">\340\333\004?h\"\014>yY\263=\211{\374>\223\035\233>\372\325\\\276s\364x\276\351`]>7\211\201>\357<\221=\365Jy\276;\374\245>H\277=\276\\\345I=\017\271\231\275\311\216\035?\213\032l>\270\222\355\2761\010\254>\302\206\007>\267b\017?\215]\202\276\342\344\376\276\005n]\275S\226\341=,+\035\277o\365\\>Wx\327=\356\230:\274\257_\220>(\nT\276A\267\327\275\317\024\372\275\343\373\302\275\001j\352=\221,\320\276\004\220\032=\223\310\236=od\236\276W>\213\276\254\213[\276:]\226>\254\250\221\276\233Z\366>\377\347P\276\025\000c\276\020\006\276>\221a\365\276\'\367[\276\276\301O?\370\302,?\020\360^9hy\376\276\315\351r\276\373y\263>#\204\207>\253\317=\277\r\032\"?\250W*\276\213\246\003?\320\355e>\230i\333>\3230|>c\177\001\277<k\367=\274\\D>\337\340\333?\t\341q>J\357\213\2767\246\247>F%\r?\365\020=?5\265\354\275\221\n\003>1}\257=(,\321>P\302\034\277\004\034\">\336\260\335\276\203\205\023=\315X4>\003\317\375\275\325\262\0249Q\240\317=4\235\315>\222yD\276\247\221V\2767\210\326\274J^\035\276\276\301\027>g,\252\276\3578\025?\"q\277\276t\007\241\276E/\343=\247\221V\2769E??\241\022W=\'\240\311=v\246\240>\236#r<Q\024\370\276\365\234\024\276{\240\025\276\205%>\276\233=P>#h\214=\022.\304\275\320a\216>\357\003p>\300\225\354=]\371\254>\222\350\345\276r\212N>\256d\017\2770\273\037?\177k\'=\365\271\242\277xz\005>#J\373>\313\240\332\273\353V\257\276\257\231\374\275-\231c\275\377[\t>\2240\243\276 ^\327\275]\341\215>\347\373\351\275\346W\203\276\350jK>\030C\311>4\021\266\276R\270\376\276P\215\327\275\242\227Q>H\341\032\276xEp>.\004\271=\306\304\346=r\373%=\272\024w\276\320\270\360\276zpw\277od\256><\203\246\276\220I\266>\213\340\037\276\372aD>\340\241\010?\217p\252>\341\356\234>[\323L\277h\221%?\006\201%?\321\350\006\277\n\205 \277\226\347\221\276\021\031\026?\2201\207>\210\205:>\372D\216>\2235\332\276\265O\207\276\374\030\363\275\"^.\271y@\231\275\353\034\303\276\024\3503>\236A\223>7\032@\276^\021\354\276\351\232\211\276\203\335\200>\207\243\253\272\314\356\251>\226\010\224=\372\263\337\276k\363\177=\334\272;\276+M\n\276#\370\257>\212\216d>\322\035D?\035 x>f\231\017\274j\331z>jj\211>S\320\255\276<\245\203>\332:8=\010Uj>\256\022l\275y!\035\275\376\361\256>\t3\255\275a\246\275>\217\252V\277\350j\313\275d#\020?^\361\024\275F\261\354\276\003\317\215\276y@Y>\221a\305\276\223\344\271\274\3544\022>y#\223\276+\030\325>H\373\277\275\234\242#\276l\262\206=\315\006y\276C\342>\276\"\216u\276)\"#>\373t\\>&\375\275\275\213\211\255\276\241\020\001?!;\257=i\214^\277p\315\235<\363q\235\2765\357\270\276\007%\334>\320\362\374\2763PY\275>\005\000>\200H\177\276`\002\327>`:m=\234\242\003\276\327\300\016?\"\303\252>\277\267)>\270\001\237\276\t\340f=\rq\354=\'\206\344\273\375\023\034\276\241\332\240\275t\352\212\276i\214v\276 \265\251\276\020\351\327\276kH\\\276\256*\013?`\001\314\274\n\334:\274\237\216\'\276@\303\033=9\177+\277j\2744>\30257=\2137\n\277\177g{\275\370k2>\0010\256>\303\2366>\327\022\242>\206Z\263\276{\210f\276\347\373\t>n\213J\277\034_\373>\220\275\356>\035>i<\312\213L=\355\365n=\224\274\032\276\267\177%>4\327\211=E\236\344=Su\257=\014X\262\275\237\232\201;\261\212\027><\332x>\372\'\370\275rO\027=\261\020\302\273\014\223)\276\374\343\035>\322:\312>\322\373\326>L\216#?\262\235o>\367\307;>\036\251~=R\360\264\275\353\342\016?Yi\242>\013\357\022\276z\304\210=\006\202\240\275x\264\021\276\313\020\267\276\\;\021\275\256,\221=\316\307\265>RI\335\275\367\344\021?i\343H>\230\300M>\327Q\325=\350\331\254\276\254V\206>Dnf>5\267\202=D\244\246<\377[\t\276!\223\354\276mV\235>^\2054>\034\353\322>\245\332g>\336\253\226\276)y5?-C\234\276\"7#?W\004\377\276\235\325\302\275\2034c>\303f\300\275p%\253\276bJ\204>`v\017\276,\330\206\275HkL=\247\"\245\276\317\025e=\006\273\321\276>\313S\276\2129\210=1\010\234\276\265\025[>\226[z\276p\'\261\275\354\302\017<s\200\240>\\\344^=\016\020l\276)\320\207>9b\275\276\365\241\233\276K\002\324=\014\345\014\277\364\032\373=\352x\\?\363\345=?\203i\330=\321\005\205\276\035\005\250\275\010\254\334>\361\363\337<\334)]\276\357 V?J$\321=r\277\013?\006L\000>%\006\301>4i\263=\014\345\344\276\341E\037\276p\356\257\274\267b\227?\254sl>?\3064?\271\252l>[\356L<\355dP>\031\220\035>h\\8\276}\263\375>\032\213\006>\276\301\027\276\004\310P\274\222\313\'\277\267\227\244>\3475\026>`\223\365\275H\212\250\276\303\r8>\321\313\010>\\\346\204\276\035Z\344\275GZ\352\275\267\227\204\276sc\032\276ke\222>F\353\370>u\310M\276\3270\003\275.s\032\276\215~\224\275\251M\034>j\333\220\275\316\245\030\276T\035\"?)Jx\273\276\244\021>\241\206o\275\302\210==\2340\241=6\310\344=Cs\035>=,4>\037\327f>\3063\230>\273\320\034>Z+\032=\031V\021\277\243u\324>0/ \276M\333\277>\304B\275\276\003&h\277Gr\231>\270\222\255>\312\340\270>\377\3470\277\215\321:\276\335#\233\275W\354\017\276`Y\351\275\260\217n\276[\323\034>\332r.>m9/\277k\364\252\275\304\353\002?;\001\255\276\260\217\256\276\263x\261\274l\t\211>u\216\341\276x\013$=\rc\2578\027\2671>\3224\250\275F\224v\275\202\377\315\276\216\006\020\277O#E\277\277H\350\276\3500\037>|\017\347\276\203n\357\275\022K\212\275\231\330\314\2766<-?,\016\177\277\307F\020?\344\332\260>\225\324\251\276\331=\251\276\203\206^>\302/\365>\245\332\007>\212:\363\274Zd\003\277d;\237?\365\204\245=\257\261\253>\023Fs\275^\276u\274M\204m>~\214\031?\3711\266>\354\3009\276B\225\232\276\355G\312\276\t\376\017?\372\325|>\213\340\217>\006A\021<\006Gi>2\314\251=\274\221y\276-&\206\276L\246\n\276\335A\274>MJq?S\226a>w\370\013>\037\242\221\276\351\013\201\275\223\344\271=)\226\213>E\233\203\275\370\215\017>\343p\246\275\257\316\201\276?W\003?\344M>=A\324\025?#\236,\275S\221J>\204\r\237>\036m\234\274\314@\225\276\307.\201\276\241\370q\276\214\276\"\277\314\264\035>\024\351\236\2750d\225\276X\342\001=\372\325\314>\351}C\276\205_\n>g,*?I.\177\276;\213\336<\344Ni\276\374o\r?l\353\'\274\220f\334\276*RI?\211\014\273\276\215ba\277\034\353b\275o\022\323\276i\2146\276\211\357D?\371\367\031\276r\247\304>\212\315G\276r\376\006\276\220\203\302>j\211\025=N\200\301\275\326\342\223>\303d\252>\200+\211>Y\247\212\275\r\341\270=\251\366\t>{\332a\275P\344\351\276\275Q\213\275\305\003\352\276&\001\002\277\025\214*>\n\272}\276\tmY\276U\331\327>5^\332\276\236P\231\272\304|\371\275\211\320\310==(\310=\360\205\351>\343\210u\2762 \023\277\210.\250\276$E\304>!\345g>\226\004(>\021S\342>\242E6>\344\017&\276x\227K\276\\\003+\277\220\332\004>\360\205A?\256\323(?y]\277>\320\nl>\025\214\232>\327\202\203;#\370\377>E\360\037\276\350\274\006\276\376ew>\262F\035>\251j\002=m\345e\275\017}7=V\202\205\276\237\253\355=\304%\307\275\300\262R>u\037\010?\227\220\017?c\264N>\244;\343;\263\352\203>\245,c\276\355\323!\277$b\312\276\346y\220>\336qj\276\354/\213>a\303\243\276\355\330\350>\213\246\363\2759\235\277\273Ou(>\314\227\027?\032\027n>&U[=h\320\340>\2613\305>:\351\235\276tA\375\276\035\003\202>\303\266%>\220\2774\274\221\270\227\276\024\263~>\202\305\241\276\353\374\200;\215\356@\276\010Z\031?\246C\247=\023\233\257\276\211\357\204>\257\3161>\274\221\351>\313\326\212\276Ed \277vp0\274\026\373+>\370\245\376\276\23458=9\177\203>\331\315\254=\025\306\026>?6\t=\335\014W\276\030\225\024>\267y\303\275\272\333\265=7\375\251\2760\201\333\275m\250x>\227\312\273\2769\227\202\276\232%\361\27678\261=\244\215#\276P\307\343>E/\003\276\013FE\276\260U\002>\rT\266\276\242b\214\276&\2527?|a\022?\241G\214=\230L\345\276HO\221\274\247\350h>?\221\227>\234\026d\277\323jp?\325\003\346<\311\037\314>\235\332\031=%u\262>3\033\004>+5\253\276\203\336\033\275%u\002\275\311\345\237?k}\021>\352\317&?M\025\234>\230n\322=E\3300>fk\035>\266\276H\275\013\265\006?\364\032\033>\267\321\000\276W\225\375=`\3450\277k\232\247>f\332\376=<\332\210\276W\t\246\276;\374\365=\205\266\034>\232B\227\276\nh\342\275\326\034\300\275kH\254\276n\335\315\275\343S@>c\356\272>\215b\351\276\225\016V<g\362\215\276\264\3137\275\t\033\036>\327\241\232\275\017\177-\276\267(\033?<\243\255<[%\330=\rq,\2769b\r>\346\">=R\355\323=Ra\354=:;\211>\210\021b>%@\355>\030!\274<\n-k\274\305r\003\277\0015\225>\325\317\033\276g\355\306>\314\227\227\276\250oQ\277\271\337\261>\220\024\341>5^Z>|a\022\277ffF\276&5\264=\264\037\t\276S\313v\276(\325^\276\306\247\000>\341\013S>E\236\034\277\006L\340\275\320D\330>vT\305\276\363\310\277\276\327Mi\275A+0>\005\206\334\276fI\200\275\214fe\275 A1>Q\332\333\275-\264\263\275-!\337\276\250o!\277d\0062\277\221D\357\276O\257\324=gD\271\276\223\343\016\276\2235\017<\357U\213\276\375\366=?\034\353\202\277q\254\013?\331\353}>\356|\357\276 \322\217\276\256dG>J)\370>\277\016\334=\341Z\022<5c\021\277\334h\230?A\233\274=\372a\264>\254\306R\275\361F\006\276u<\226>+\366\027?rP\202>?W\213\276\344\367V\276\300\t\r\277\006\r\035?`\352g>C\255\251>j\236\310\271HmB>\205_\352=\314\321\203\276\212\315\327\276&\307\035\276K\310\307>r\212~?\332\346&>%u\">\246\325P\276~\002\250\274o\236j=\220\332\204>\n.V\276\344\3320>V\267:\275{\024\236\276\021\252\004?\232A\234=7O\r?\021\032\241\275\340\204b>\321\226\263>\312\026\251=\305\003J\276\374\0303\276\325!\267\276\000t8\277\361)\320>\336<\025\276\273\233\307\276\234k\030=\273\017\260>\005+\363;\"\211\336=\214-4?\322:\232\276\234\247\372\275\322R\271\275\007\266\032?(\n\024\276m\305\356\276`<;?cE\255\276fIp\277\3227\211=\360\026\000\277\267\356\346\275\336\2237?SX\251\2756\253~>\326\217\255\275\271\032\271\275\322\000\256>\350\274F\275D\243[\276\355\266\213>1%\242>0G\257>\213m\322\274\317N\006>\274W\255=\306\242\351\275\276\301\367\276\252e\253=\251\301\344\276a\340\331\276To\315=.\377\221\276\332\254Z\276]m\325>r\376\326\276\215\325\246\275l\354r\276\004V\016>\224\301\321=\247\"\325>/\243\210\276\212\253\372\276,\267T\276h\005\326>j\244e>\371NL>\002\267\356>\336\257\242=\016\370\374\275\207\376i\276qU)\277\020;\023>\206Z#?\021\337!?g\270\261>\263\352\223>X\342!>\355\203,=\364l\036?\000:\014\276\n\327#\276\232%!>\212\315\'>NX\007<\214\274\254\275\254\221\235\275\234\277\t\276\324\236\262=%w\030\2759\234\231>\262\235\'?\270#\014?\350M\245>\231,n\2749\321\216>\225`q\276\202\213\025\277\211\265\270\276\343\337\307>\257\316\021\276\277\267\231>\301s\257\27682\317>w\276\037\276#\370\037\2762r\026>Z\365\t?\336\345\302=r\277\303\275h\226\304>\246\355\277>\274\263v\276\333m\367\276\365\271\212>\244\375\217=\370D\r;\021\001\247\276\213\2463>\272k)\276\212\256\013\274\317kl\276T\035\022?+\336H>\367\222\206\276\025\251\260>g\n\035>;\302\351>\364\025\244\276$\177\020\277\024\225\215<\244\215\003>\247\"\345\276\360N\276\274\0216\\>\327\300\326=J^]>\r\343n=\307)\272\274\014\007\002>\002\330\200<K\253!>\204\365\337\276\3270\203\275D\372M>\212\037\243\276\316\245x\276\340\271\327\276\275\306n>\200\232Z\276\234\277\251>\020\351\367\275\003z\301\275\\8P>\013)\237\276\271\252l\276\267\234+?]\026\023?\205_\352=\314]\373\276\310E\265\274\035Zd>>y\250>\232\261h\277\237qa?\020\260\266=\246\n\366>\365\366\247=&\031\001?\025\nG;\300&\333\276\240\375\010\275\"\374K=u\002\232?\001\030/>\327\0279?d#\240>\231\323\345=@k~=\221\357R=\217\245O\276\310$\003?\360PT>:\257q\276\246\362\366<S\221B\277\350\366\262>\177\301N>\274\221\231\276.V\204\276\336\037O>\235K\021>\316\302~\276W\010k\275V\202%\276\241\333\233\276^\235\203\276\014\002\013>2w\355>\270\344\230\276\227\032\301=r\026V\276r\212\216\274\337\033\303=\316\251\204\275\nhb\276BC\027?\376\267\022>3\372\221=\024\313-\276\252|O=\374\245E\275\274u\236=\0217\'=TtD>D\243\233>\005\300\330>\311\260J>\275U\327<W\004\027\277\234\334\237>\323\274#\276.\004\311>\032\213\266\276\272It\277od\216>\315X\244>\302\3003>\025\214\n\2775\265,\276\200e\205=\210hT\276\314]\013\276~\030\201\276\212\260a>\205\353\021>\260=3\277\250\212)\2756\315\003?\263\230\010\277\357\341\242\276\204~&\274\'kt>9b\315\276\030\320\213\274\253\314T=\364O\020>n\243\001\275\223\000\025\276\275\000\333\276\277\202\024\277T\035Z\277\320a\016\277\241J\315=\300>\272\276\364\032\233\276=\326\214=\225\267\263\276\016\020,?\355\330x\277\371\275\375>\377\004\227>vq\333\276\271\031\316\276cEm>~5\327>\300\354\036>R}\'=\322:\332\276\245N\230?\253\314\224<7\303\255>\247v\206\274@\366:\276\346\005\230>\244\252)?\\\033\272>\211\230r\276}\313<\276g\325\307\276B\225\"?*o\247>;\001\255>\202S\237=\373\256h>\363q\r>\000\221^\276\272f\222\276\306PN\276Z\r\001?\276\331v?\'1\210<MJ\221>\311YX\276\265\207=\274\316\376\200=\374\035J>\'f\375\275\247?[>=G\204\275\275:\267\276\304\261\006?5A\324<4\364\'?\016-2\275\033\204y=\010=\253>\355\013\310=\\ \221\276\001\336\202\276\003`\214\276]\277\030\277K\352\224>\314\227\027\276M\276\271\276+\373.\274\347o\342>\260\220\271\274\265\243\270=0*I?\031\342\250\2763\371\006\2769\017\207\275\240\211\020?x\362\351\274_A\312\276\266\3267?M-\353\276\231\360{\277W\223\'<\tP\263\276&\344#\276I\364\"?\222t-\276\023\'w>\252\267\006\276V\324\340\2754\327\231>\202\305!\275\220\244d\275\216\036\237>1%\242>\024\226\210>7\340\363;\375\202\035>\274\007(=\333\213(=\207\304\315\276\363\037\222=\252e\373\276\350\244\307\276\303}$=\002e\203\276[\231\220\276\201\t\334>\'f\355\276-\264\223\275\200}\364\275\254\214\006=\264\345\334=\252\267\326>\300!\244\276\034|1\277\272IL\276\304\353\252>\201Ch>pB\341=\327L\376>\210*|=n\335\315\275\245\240\333\2753P!\277\354Q8>To5?\273\362\t?\307F\240>\331%\252>\261mQ>\226\225\346=\270@\002?o\273\200\276\204\365\037\276\212\260\001>\245,c>\2403\351\274\\\036\313\275\023\265\264\275\273\362y\276\336v\341=\206\255\331\274\250\030\'>\247?\353>\356|\007?\036\026\252>K\003\277\274\014\0371>\203\243\224\276\217\374\021\277f\240\302\276n\206\353>\235\205=\276\250\306\213>\2240\243\276\013\322\234>\326\377\371\275[\321\206\275\333\026E>\307c.?\3475\366=\026\302\312\275w\025\362>\202\213\245>\007_8\276\337\375\021\277:z|>\351\361[>H4\001=0\330\215\276\255L\370=~\000\222\276<jL=B\225z\276\347R$?3\247k>\327\335\274\276M\204\235>\232\231\331=\2652\241>\305r\273\276\357\311#\277\311\347U\275\367x\241=\033\r\340\276\303\325\001=\360\371\221>\305\033\331=U\373\204>\226B\240<\0015\365\275;\215\024>\332\307\212\274\312l\020>\320\263\351\276\255\030.<I\327\234>\203i\270\276u\253\207\276kH\274\276qUy>\034_\373\275\365\326\240>\353\251\265\275\341\227\272\275<NQ>f\203\234\276\256*{\276~\035(?\014\310\016? \353\211=nL\317\276\312\300\301=\306mt>\003`\234>\016\370l\277\007_P?\252\327\255<\307F\340>\222I\374:\251\207\370>\024\263\036=\354\335_\276Sx\320\274\340\200\026;\222\\\236?B\317&>~\343K?w\333\245>\024\224b=\365\271\272=\214\020\036>i\220\302\275j\244\r?\201\004E>\222\"2\276\2236\265=nL\'\277\330\r\273>J\360\006=\314\360\277\275\000o\221\276\362\260\320=\024\" >|\'&\276#\370?\276\302/\365\275\232\224\202\276S?\357\275\344\332\320=\265\211\243>a\246\255\276ka\026=\330\323\316\275\361\201\035\275\364\370\035>\003\326\005\2746\\\244\275n\027\032?\030\263e=\347\340\031=\274\262K\275\336\312\222\275,\266\t=\306\242\211=\250\3431=\356%\r>\272fR>l>\316>\211)1>2\200\246;\007|\006\277\241\020\301>\314z\021\276\375\237\363>\364OP\276\325\th\277\201>\021>28\252>ff\306>a7\374\2760\030\267;\361\241\004=;\2154\276\330*!\276\226\225F\276|DL>\314\264=>9\356D\277pCL\275\214\276\362>\272\024\267\276\213\032\214\2762\2568<DL\211>\304w\342\276\202y#\274i\035\325=\311Xm=\362D\260\275\355d\020\276\277\324\317\276\214\271+\277l[4\277)\256\372\276Gr\371=\243\001\274\276{fi\276\337\301\317\274\221\270\307\276\234\247:?\254\255\200\277\016\333\346>\225`\241>\210h\324\276\306\277\217\276Z\ri>W\354\007?\376&T>\257?\311=\334\272\253\276\370\302\224?\276\331\206=\177\207\262>\236\227\n\275>\226>\276u\253\267>\343\031\034?ke\262>m\305~\276\222\226\252\276H\026\340\276\342\036\003?\346\350\321>\313\020\267>P\000\245=\325\317\253>3\371\346=&R\232\275\025\221\301\276/\300^\276\177\366\323>\241\326d?\274y*\274[\323\374=xEp\276Ve\037>\307.\321\275\024\\l>\250\001\203\274V\274\241>B\262\240\275 \014|\276\007%\014?\256\r\325=\254\377#?\220IF=m<\330\274\254\220\222>\237\315\005<\2304f\276\266-\212\276cz\322\276\277\324\027\277\240\025\250>Cs\035\276^\235\243\276\365\271\332\275\301\342\300>\326\374x\274\322\343\367=\366\227-?&p+\276K\257\215\275\237\005\200:E\330\030?\340\206\230<;\307\200\276:\3515?OX\322\276\n\272u\277\240R\245=\3475\306\276/\372J\276;p&?\346W3\276\240T\233>\362\200\r\274\377\003l\275\217p\212>5\'/=\2240\023\276k\237\236>S\221\232>\304\224h>\"\032]\276\032\300\333=\334h >\204\325\230\275.\312\354\276\323\244T=\251\244\336\276\335$\016\277\363q\355<\313\234\216\276c\227\270\276X\347\330>J{\243\276\361n\033\274\341\264@\276\010\005\245<\376\324\370=\n\205\350>qU9\276#J\023\277\341\177\233\276\222\313\177>\254\213\213>\343\374\315=ni\325>w-a>\207\030/\274\323\336\000\276\265\246\031\277(I\327=\212\253\"?\t8\034?\306\277/>\256dg>\002\202\211>\211\353\030=\220\203\002?]\026\023\276\214\020>\276\313\333Q>\314b\202>\241\361i;\010u\021\274\257\230\221\275+\023\256\276\260UB\275\026\300\224;\357\003\020>\351e\364>\006\365\025?\002\331\253>\311rR\275\225\202\356=\t\341q\276\356w \277\350\331\274\276\0162\311>7T\314\275[_\304>\020\314\201\276\324\324\222>v\214\253\275\203\253\027\273\n\021\200>\335A,?V\272{=\257\224%\275-\t\340>\366\177\216>\252\232\220\276G\311\313\276R\355\263>\t\026g>wK\222=\340-\260\276>?L>(\362D\276\221\270\007>\244\215\243\276\246a\030?\265T>>\032\206\257\276q\003\356>]\302!=\r\253\370>\231\273\246\276d\0361\277\241\235\323<\031V\201>\336\260\315\276\224\211[=\376\016%>|\233\376=\322\3061>T\3765=\302\277\310\275\366\264C=\321t6\276SA\005=\247\263\363\276\215`#=\253\262\217>\017\264\242\276q\311\201\276\275\373\303\276\305r\013>8\363k\276\022N\213>\215~\264\275\341y\311\275\266\326W>\r\340\r\276\364\211<\276\211{\034?\'f\r?\320\267\205<\342\006\254\276\025\312B\275Y\300\224>\373W\226>\013{z\277G\003\270>\220fl\276\337\025\t?\000W2>\017(\313>\177\274\327<\033d\222\276\314(6>\246\362\266>^\272\341?s\021\337=aO\313\276\252+\317>\"l\010?\347\2140?\311YX\276\255i\036>W%\021\275bg\232>\207m\333\276,+M>\237v\030\277+\023>\276Q\245\006>\320\270\220\276\213q>\275x\266\307\275z\245\314>\t\376w\276\024\"`\276\242b\334=K<\220\276F\316B=\311\002\306\276,\324\312>\013$\230\276\025\306\246\276\321\036/=\216\257\035\276\263\0141?\242zk\276\310\007=>d\351\223>\277),=\344I\n\277\237\216\'\276&\374R\276\026\301\037\276c\013!>U\301\010>5\014?\276\334\272{>\375j\236>K\260x>:\222\233>\306\242\021\277\332q\303<\376C\332\276j\366(?\214\022\364<\266\363\205\277\311=\035\275\2451\312>K>\266\275l[t\276\262\240\260=8J\336\275S\350\374=%z\231\276\023fZ\276\316\252O>\331x0\274^\364\225\276\332 3>\022\275L>\315Xt\276\266J\260\276\230/\357=n\300\227>a\023\000\272\247t0>\377#S=\366zw\275\264q$>\224\366F\276e\245I\276I\021y\2771|\264>\345D\333\276L7\271>EdX=\037\235\212>{\210\016?\336<\265>0*\211>d]$\2778\363\353>\226\t\377>\322\306\031\2770\273/\277^\205\264\276l\004\002?\323\301\032>\006\364B\274du\213>\351`\035\2778\276V\276H3\246\276\3377\376=Ral\276\311Yx\276\232w\334=4.\214>\254p\213\275\303\201\030\277\014v#\276\360\277\325=\351\272\360<\351e\264>\227\305d>\027\331n\276\013F\225>\252\234\226\275\235\327\330\275\2755P>I\200z>6\3452?v\375b>\222\2630\275\231\r\262>\0260\361>\277\232\203\276\032Q\312>GU\323=\322\306Q>\336Y;\276_\014%\276\217\374\321>I\240\201\275\025\214*>f1Y\277\335\014\367\275\366b\310>4\277\032=\251\274\315\276\323\301:\276\301\213>>5c\301\276\316\375\325\274\331=y>E\330\300\276\223\035\233>\332\251y\275|Hx\275h\260i\275M\204-\276\000\305\351\271w\326n\276M\242\276=(\362\344=\230\247\223\275Ic\244\276m9\027?\213T\030\275\'\240\211\277\363\216\023>5^\232\2762\311\350\276/4\267>!\310\361\276\260\004\255;\337\246?>n\243\261\276\005n\275>\233=p>\232\353\364\275\237\260\364>\330\236\371>\rnk=@M\235\276\371\017\t>\335\261\030\275?:\225=\327QU\276u\217,\275\316\302^\276\272\3670\276<\210}\276\0265\230\276z\307\t\276\320\017+?\"\340P\275G\350\307=\373:\360\274\361\233B\274\355\r^\277i\000\237>\013\322\314=*\000\006\277\216\221\354<KZ\361<\202V >\002\237?>\317\024z>f\275\030\275y\001\026\276<\240\354=\257_0\277\244\374D>\306\304\266>\334.4>\247\263\023\276\245\255\000<\274\221\031\276\355\323\221>6\224\032\275\210\021\302<]\213\226\274\222\"R\276\215\264\324=\010ZA>\027\016\244>\254s\214\276\321<@=m\377*\276\374\000$\276\256d\267>%\314\324>F\266\023?\333\205\366>\035\".=\231\222\366:\206\033\360=\2549\200\276X\255\314>\016\241\312>\265\207=<\362$\351=\036lq\275\345\270\323\275k\324\223\276\325[\003\276\264Y5>X\220\306>\014Y\335\275\302i\261>\240\032\337>\257%\204>\377>#>\241\3701\276YQ\223>Pp\241>\263Af>\323\237]>S\226\301\275\252\232\010\277\250R\223>\321ww=%\257\336>q\346\347>\002\232\010\276x\013$?\274\256\277\276X\250\r?\325>\335\276\030\225T\276\006\330\'>[|\212\275\210\304s\273\370\210\210>\377\"\350\274\235\022\260\275\2174\270<\335\357\220\276\366b\350=\210\327\305\276O;|\276\006\020\276=\327\335\254\276\004\312\246>\271S\372=Z\365\031\276|\325J\275YL\254>\371,\257=\307\235r\276\033*\006>b\204\360\275(D\260\276\3229\277\274yu\026\277\025t\253>dX5?\234m6?\3573\323;\361h\263\276\275\001&\275\214J\252>!\311,<it\007\276\263)\027?\274\003|=\340\363c>vq\333=d\351+?\201!\013\276\031\377>\276\2760\271=\336\252+=\337\340\223?\3274o\275Cs\025?\211^\306>:Y\212=\026\246o=T\033\234=\rUq\275m\312\005?ep\024>\327h\231\275F|\'>\017\326w\277\036\334\035>\235\365i=\201\227\031\275\022\302C\276\023Cr=\206qw=\340\234Q\276\354\027\214\276\026M\'\276h\256\003\277\372\263\277\276Zc\320<\304%g>\223\000\245\276\265\376\226<y\314@\276\347\000A<77f>\016\276P\276\003xk\276Q\203\001?\327\243p=\374\032\311\274\323\331\t\276E\365\326\275\010ZA\275\236\006\214<\315x\333<;\212\223=\210\205z>\327L\276>\301\034\235>\242\354\215=\301V\031\277\356|?>\027,U<\204\r\377>\312\032\025\276L\216\023\277[\265\213=4.\214>\244\344\265>\220N\215\276L\"\261\273,H\023>\367\351X\276vTu\276\t3\215\276^\021\034>\265T~>?5F\277\314\226\254\275\034\316\334>\336\310\\\276\377\262\373\275\247\263\023>aTr>\243u\224\276\325&\016\276\203\317\305;\034\323\323\275\245\331\274\274\225\361o\276\250\306\253\276\r\303/\277Q\240\'\277\336\037?\277\235\021E>*\306\031\2768N\252\275x\270\235<\214-\244\276/\206:?aT\212\277\001\373\210>\273~\321>\223\035\353\276-&\266\276@\241\036\274\032\027\356>\214J\352=k+\366=\025R\276\276B>\230?\207\301\234=\255\027\203>\3123\257=\031V\201\276\273D\365>DL\371>\244\252\251>\207\242\000\276ni\325\276k+\266\276i\035\r?\331\010\304>\251\373\340>\365\275\246=\323j\010?\332\311`>.*\230\273\020\351\207\276\257\231\234\276\247y\307>\302\022G?\260\256\252\275e\001\323=\234\340\033\275\203\3726>\307\204\270\275\211\014\233>\216\006P\276\n\334\252>\231\360\313\275/n\263\276\325&\016?\3758u\273C\377\344>\254\305\307=\001\244v\275C\034\353=\'\332\325=\013^\364\275\340\020\352\275\222\005\334\276s.5\277\"\216\345>=|Y\275j\373\327\276I\327l\276\n\364\311>\032\243\365<\276\366\214\275\'\210*?\201\317\317\275\223\217\035=\212\253\312<\2510\006?`<\003=9\271\277\275%\006\201?\274?\376\276.\220\220\277h?\022>\tP\203\276\357\217W\276\224\373\r?\2505m\276N\234\\>+\336h\276\t5C\275\002\232\250>\350\237`>\330\235n\275F\266\223>{\240\005?\341z4>\027H\020\276\3230\\>\024\225\255=\205_\n>\357U\313\276\262c\203>8g\324\276=\'\335\276\000\251\r>\261m\321\275t\352*\276a\375\237>\324+\305\276P\250\'\275o*R\276\317\206|<S\227\254=r\212\276>[\224y\276\250R\023\2775$n\274\222\222\236\275\353\341\253=\016Jx>\311\002\366>&S\265>\014\002\013>\241\241\037\276Dn\306\276zl\313<Z\330\013?\006\022\034?W\317I>\361\327d>\374\035j>\330\266(>vq;?\267z\216\275~\035\370\275\263\014\021>\r\340m>\322\302\245\275\341FJ<\272\024\207\276\014\345\364\276G \236\275\354\275\230=!\310\301>+\301b>,e!?\006\365\355=\021S\342\275\216\255\347<W\225\035\276\201\t,\277\255/\322\276\224\366\346>\327s\010\273\227\213\330>\361K\315\276V+\263>\200}4\276\264\257\234\275q\346\227>\032\206W?\030C\231==\233U\276#\370\337>\314\0130>\230\243\007\276\336\345\222\276\264\223\341>O\036\206>9\264H>\300\347\'\276\014<\027>\211\322\236\276\371\332S>\267\013\315\276\305 (?\361h\243>\215\356\200\276v7\007?\214gP>\021\215\236>\214\363\247\276\335A$\277 C\207\275\246\233d>\251M\034\276\345\362\037\276\326\3779>Z,\245=\363\345\005>\334\2355>\364\016\001<F\353(\274}\005i\276\221\177\306=E\360\377\276.9\236>\213T\350>\201!\353\276 c\216\276\242\321\355\276fk\375\2753\376]\276\3334\226=H1\000=\367\"\032\275\244T\202=&\0319\276F\353H\276%;\326>#\370\037?Iiv\275\233r\025\277\334\200\257=\332r\216>aqX>\321?9\277\267\227\004?a7,>\013$h>i\306\342=G\311\033?\013)_\276\220\0241\276q d>\277\272\312=\272I\214?\000:l\276\333\277*?Z\236\367>0\020\004\275\367u`<\305\255\002=\310\013i<\235c\030?\257_\200>\222I\374;\177\023J>q\003v\277^.\"=TT};(\017+\276\317\240\341\275\206;\267\275Z\324\247<n\243!\276\251j\242\276j\3737\276\371\332\003\277\203i\250\276\313\333Q=\346WS>S\221\312\276yu\316=\3019\203\276Z\236\247\275\326\342S>\211\007\204\276\220\024\021\276\252\361\032?\377x/>\360\340\247<\263$ \276JA\267\275\212\037c\276\rr\227\274\266\024\220\274\242\361\004=K\345\r>?t\021?\257\010\236>\t\371\340=XV\"\277z\245,>.\221\313=\001\373\350>\212\315G\276\327\335\024\277\004\347\314\275\330\236\231>\373y\263>\005\243\322\275\204f\027\275\251\301\364=\n\364\231\276\330\2013\276K\260\270\276\001\030o>\305\305\221=\275\251\020\277\355\365n=\273\362\211><N\321\275\3745y\276\261\334\322=MJ\221>?\306|\276\361.\207\276\374\001\217=\372\t\307\275\242\324\336\274\363\345\305\276;6\002\277\031\220-\277\317\367+\277\033/=\277\000:\254>\223W\347\275\334K:\276\357\254\335=\273\362\271\276\206\3462?\302\027\216\277\274\256\237>\321y\355>\356\224\336\276\320\263\311\276\251N\207\275}y\241>b\3327=\036N =Z\022\240\276\347\373\231?H\304\324=t\230O>H\033G>*\343_\276Y\027\007?it\007?\327\243\260>\331Z\217\276\244\210\274\276-\317\263\276\274\\\004?\201[\367>\023\233\377>0\202\206=\006*\033?j\274T>\267\t\367\274\235.\213\276\373y\243\276\246a\250>\r\211+?io\360\275,\362\353<h\",\276_\357\216>h\224\256\275\341z\204>\035\346\233\276Di\257>\237X\247\273\221~\253\276\244\215\003?\276-\330<\210h\264>8\363\213=\344f\030\276\327\3006>\336\310\034>\004\255@\276+\322\016\274\257\224\345\276\377\t&\277\270@\342>\204\3309\276p\353\036\277\2652\341\275\207\212\361>\302Q\022\276.\2530\274\336\345B?U\212\235\274\352]|=\236D\204</4\017?\376\265|=\253\262O\276\246ap?\232w\374\276,\324\222\277\364OP>\002\267\236\276S\350<\2769\356\004?!\345\247\276g,z>fk\035\276B_\232\275\306\247\300>zS\201>u\260^\276\375\207\304>\000W*?^\021\034>\205\316\313\275v\340\\>\325&\016>\370\214\004=\374\214\333\276\201!+>\361\364\332\276\354i\347\276\224\276\260=\275\030\n\276\341]n\276dX\205>\277e\316\276n\002\302;\224\023m\276iW\341\275\377\256\317<RD\326>y\222\204\276\267\321(\277R|\374\274\221\235\267\275\302L\233=IhK>Ed\230>\230\300\255>\215\2644>=\016\243\275\376\267\222\276r\210x\275[\353\373>\3333#?\2240\023>Y\213O>x\234b>#\204\007>\362^-?\r\341\030=\177\025`\275\037\235z>\271\302{>+lF\2750\203\261\274\004\342\245\276\222\313\377\276\244\3028\276\232_M>\364\370\375>\347\343z>\003`L?8\241\240>sh\321\275{\026D\275\246\3626\276\201>!\277\362\230\361\276\t3\355>\034]%\274\336<\345>>\355\340\276\t\212\177>m\250\230\276\345\'u\276\260\376\257>\255QG?\374m\364\273\357r\301\276\367\307\333>\312R\313=\206)\000\274\246\325p\276J{\303>R,\367=q;\224=\366B\201\275\\Z->\256\360\236\276\374\336F>*\306!\277kH\014?(a\326>\344\240$\276\365\276\341>\177\2067=\256\266b>2Up\276\210\200S\277\250\032}=lx\032>\3232R\275\372|\264\275\220\367j>\321\243\363\273\317\367\263>+5\033>s\332S\275=*\276\275\254\312\236\276\234\026\034>\244\210\374\276J{\303>6\037\017?W!\345\276\233\346]\276c\264\376\276jjy\276\323\023\326\275r\250_=\022\302\003>\320\221\001\274\213l\247=\322\373&\276\267\227\204\276\251M\374>\340\2410?\020\316\'\2754\205\006\277\372\177\225=\366\321\231>\322\030->\205_\032\277nQF>\362$\231\276\252\324\354>{\026\004=A\361\223>\370\250\277<\261\212\227\276\022\245\215>\2073\237>\366(\374?Y\243\336\275P\252\315\276\323\207\336>E\365\346>\230\206\001?\t\304\013\276\271\032\231=\334\235\025\276L7\251>v7\217\276\227\034w>\374\336\306\276`\315a\276[B\276=\301\255\033\276\346\"\036\276\356=<\276\214\204\266>\327/X\276_\322\030\276\2510\366=\037\205\273\276\356w\350=]\247\261\276\"O\002?3\247K\276A\203\215\275\210\365\006=\3745\031\276\200+\371>\251\026\261\275U0*>\256\201\215>\302\372\037>\361\272>\277\002\3244\276\363v\204\276\327i\204\275\344\\\324:aT\022>\0363\220\276L\032\223>\255Q/>\t\341\321=&\252\207>\036\033\001\277\220\240\370=&\001\372\276\246\n\006?P\337\022\276\303*N\277r\376\346\275#\204\267>\235FZ\276\345\325\231\276\314\321\223>\201\302\352\273+n\\=\033\365P\276\037\364\234\276y\351F>t{)\276Y\300\224\276<\275\242>\206Zs>u\345s\275)\"\303\276\034@\177=\345\320\202>\212Y/>\371\017\t>\200\'m\275\233 j\275\313\204?>\342;\301\276sh\321\275\021\001o\277\365\326`>\356\010\267\276\344f\000?\2451z>\322\217\206<\260=\013?\005\027\313>\343\245\213>G \006\277h?\302>\365\276\241>\240\303\004\277\237\260\034\277\225`\301\276\017\013\325>\262\r\\<Q\366\266=|\'\226>\000\035f\277>\226\036\276\350j\373\276G\003\030>\264\343\306\275\365\363\346\275h\3324;\247\005\217>q\033\315\275\256*+\277\017\234\363\275Q-\242=\020\257\353=(\270\270>P\001\020>\337\032X\276m9\327>\330,\267\275\370\252\325\275v\303\266<8\276\266>\031\004\026?\357>\"\274\200\017\236\275E\360\317>\\\003\313>z\302\202\276\216\001\371>\226\004\250>w\204\203>\353U\204\275\262\361\340\274d\314\215>\310\356\302\275\221\321\201=\214\241\354\276#-\325\275m\034\361>k\267\335=Q\024h\276\336\254\241\275\320B\242=\n\241\303\275\022\300M\275\034_\233>\326n\233\276\361\235X>\337\300\344;\370\367\276\273\216#\326\275\360\024\222\275\366_\207=7q\362\275\325>]>\r\376>=\211\013\000=\226\225\206\276\233\346\315>\233U\037\276\345\362\227\2770LF>\272\275\244\2764\242\304\276!v\206>\210\272\017\277YLL>\222\005L>8\204\272\276\357 \266>\246\355\217>\223\030d\276\313-\315>\266\326\227>,*b\274e\374\003\277\016\333\326= \227\230=U\336\256=\017C\253\275\034\265\302\274io\360\275\275\035A\276\272,f\2764\277\232\276-x\221\276\376CJ?\303\330\002\276\243u\024>\321\350n>\030\230\225<@\207i\277\022\302c>9\356\224>\302/\025\277\277\230\255<AE\265=\206\311\024\276iW\341=4\364\017>\255m\312=\006\365\235\2769\017\207=\245\367\315\276T\251\031=&\215\021>\237\253M>\347R\254\276\233!\025\275\231IT\275\312\340\250>\330\3249\275\344\240\204\275\345&\212=\301Wt\275z\341N<\301\312A>\314\227\207>R,\227\276\007)\370<\324\202\227\276\276\332\261\275*R\321>>!{=\356=4?c\177\021?\317\2427=\211\014+\275\034BU>B\317\246\276\364\375\204><Nq>\212>\237\274\222\263\020>7Q\013\275\014<\267\276\361\272\256\27682O\276S\261\221=\277+\362>\201[W\276\203\243\264>\221\270\327>\346\221\377=\223ov>\341\321f\276s\205\207>M\204M>CV\207>\301\255\233>\225\267#\275\027\331\356\276i\343\250>-\316\030=\234\247\232>\376e\267>\032\373\262==,\304>R\362J\276D\250\242>\013\014\001\277\213T8\277\t\304+>&\0360\276Nd\346<-C\254>\2239\026=R\3553\276 \361+=\035w\272\276\213OA>\305=\346\276\373\256h\276\234O\235\274\220\023\206\275\372\362\342>{\021\215=0\330-\276\305\346\243\275i5\264>y\345z=I\242\027\276\364\370=\275\354N\227=u\345s\276!.\357:GZ\n\277\177\331\255>\033\201\030?\326\377!?h\222\230\275\271\245\265\276R\233\370\275&\337\234>@\243\264=?\214\020\276+\301\322>\205\0108>\300&\253>,\237E>\005n\035?Y\027w\276\375M\210\275\374\336\226>C\036A=\304\261\226?B!\302\276t{1?d;\317>\262e\271\275\361\233B\274\241\204\231\274h\221-\276\177\301\026?\252I\220=\334\327A=\352!\212>O@s\277p\352\203=%\263\232\275Q\367a\276z\337\210\276M2R\276\211_1=5}\266\275\356_Y\276\025\000\343\275\021p\020\277\240\340\322\276\352\257\027=\331\261\021>\177j\334\276qZ\220>7\216\250\276\307\201\327<\031\377>>>\350\211\276*\363 ;it7?0\330m>U\030\233\275\337\370:\276w\276\217\276L\302\305\275\274\2636\2760gv=\030\353\233<\362\230!>\2657\250>\263\007\232>\262b\270=\312\375&\277.9\356=\250\000\330=2\003\245>\025Wu\276g\270\001\277\376\n\231\275\246\'l>\240\303\254>z\306\276\275\017\013U>O@\323=L\216;\276d@\366\275{\210\246\276 \265I=\300\264h=\301n\330\276\034\323S>2\217|>\217\245\017<S\221\212\276\325[\003=pBA>l[T\276\000\221\236\276\366\020\350\273\372\'X\276\340\016\024=k\324\243\276v\340\374\2766v9\277\000\035>\277\202\250S\277h\226\004?\250o\331\275v28\276q\033\r>\214\363w\276\030\354F?\376e\207\277\001\0238>\260\033\306>l\317\274\276\363<\330\276\346t\031\276A+\220>\227\344@\275\213\027\253=\023~\211\276\212\037\213?oft<\332\376U>:\314\227>]\245\233\275c\321\014?U\244\362>$(\236>~\251\217\276\246\362\366\276^\242\272\276\202\220\334>\232w\034?w\204\363>\262\276\001<\253\2259?\2510\306>nm\301\275\366Eb\276\035U\215\276&\001\332>X\305#?>\263$\276\033\275\272=\330aL\275\275\373\303>\030\351\305\275Y\372\240>\255n\205\276\202\347\336>h\351J=Z\236g\276\204\360\010?\253\317\025=#\025\306>\254\220R>\317\024\372\275\301\377\226>5{\220>.\035s\275e\307\306<\032\213\036\277\377\317\361\276\377[\231>|aR\276\247y7\277\330\272T\274H\376\000?\202\213\225\275+l\006\275\367\036>?\260r\010>\027\331\016>\203\210T\273\311v\026?\233\003\004>Ja^\275\234\371e?Y\206\010\277\301\312\221\277UN;=dX\265\276\315\006\031\276*t\336>r\247\244\2765\014\237>]\304\027\276\317\367\323\275l!\370>\345~\207>\324}`\276\304\316\304>\276\274\030?\266gv>\334\364G\276t\352J>\257\231\234>0\273\347\275\023f\352\276:#*>\177\336\244\276\247t\300\276\010\346\350<h\263*\2769\264\230\276e6\230>p|\355\276R2\357;\277\326e=\020\006\036\276m\255/\276+\366\247>\212\223\373\275\"\246\034\277\311\221N\275\0216\034\276\272\037\246\273\223WG>-`\">t\230\017?\237\310S>f\024+\276\304\231\337\275\272,\246\275\014\345\264>}?\025?\361.W\275r\376&>7\216X>xz\245>\322\373\016?B&\271\275\277\035r\273\312\211v>\256\323\230>\200\362\367\274\262\325\345\274:X\237\276q8\033\277E\r\246\276\253\317\205>\\\254\030?\020u\037>\026\366\\?X\347\310>\316\374j\276\005iF<9b\355\275\013^L\277\336\216\340\276[\266\266>j\335\306\27577\366>\272N\263\276\274u\236=\007%\234\276\342u\035\276\007\353\257>\2505e?\310\231&=\256\365\205\276RD\366>2\306\007=\311\344T=@\366\212\276\320\270\320>5\014_>\311Yx>}\224Q\275\346\\\212>\331\2611\276\375\371\266=\206\217@\27782\337>\245\367\375>\350\336C\276^\205\264>B\350\240=*\306\231=&6\217\276\313\204w\277A\271\355<\332r.>\365\240\240\274\325%#\275\357\311\243>wN\016\274\270;\313>W\262c\275`\221\237=~t\n\276\355\231\265\276al\001>\357 \006\277\0358\347>\362^%?\347\251\276\276.\347\262\276h\226\014\277\331Z\237\276sK\353\275\301\216\177<8\333|>\341\262J\275\343\335\021=\231\236P\276\242(0\276|\n\320>\307\021\013?J\345\222;G=\004\277p\224\034>\3578\325>\375\202\035>)\355\r\277n\243\241\2761%\022>\316S]>h\320P>;\344\246\276\n0,=\375\301\010?\212\253\252=\211\317]\275\346?\224?GUc\277~\000R>\320~$\276+\211,\275B\225:\276,\237\245=\r\216r\276\034\353\212?\273\320\034\276\306\341\334>\250\375\326<\272f\362\275\'\332\005?:\006D>\0221%>\254\213\253>\237\002\000\276LO\350\276\014\310\036>\200\237\321>\257\355\215\2754\205\356\276\220N\335\276@0\247>\t\212\317\276\320\270\020>\033\365p>\302\206\347=\2176N\276\207\376\231\276\317f\265=\302\300\363=\271\215\036?/Q\235>\326\220X>32\010\275\240lJ\274iW!\275\311\002&>\201&\342>\023\325{\276\361\021\021\276B\t3\277\237\005\301\275\004\347\354>\215b\371>\005\027+>\325\317\213>\203\027}\276\\Xw=\023\nq>\030>2\277\337\376\274\275\005\206,>\343k\037\277SYT=\237\037&>\357\254}\276vO\336=~\216\017=%]\223>`\223\035\277\006*\263>\014\313\237\274\237Y\022>\261\026\037>\025\306&?a3\300\274-!\177\276\323\207\316>\274\005\322>h\226\344>{\210\206>c~n=Pp\361\275MK\314=Y\206\010\277V}n\277\320\320\277=Y\335\272>\005\335\356>\241g3=\201vG=\212\312F\275\211\265\310>Qf\203\276du\013>\0216\214>\000t\310>\300x\306>\364N\245\275\240T\273\275Di\037\277{k\220\276\032\250,\276\361\364\362?\274W\355\275\021o\275\275\236\n8=\312j:=\335^\222\276]\371\024\277\005\337t\275?\306\334\275\272/\307\275Di\357\275CV\027>\260\376\257=\270\037p\274\373w\275\275\347\375\377<\344\332\360>\311q\017\277\330\323\216\276\221}\020=\2201\267>3\247K>\037\242\221\275\361\021\361\275\341\013#?[`\257\275\036\341\344\276\\r\034>\327i\344\275\010\307\214=\220\243\271<\020\002\362\274^\325\031=\224\023->\004\3425>\262h\252\276\321\313(>\327\027I>r\212N>\370\245\376=\235\235\024?\357\2228=r\376\346=\177\301N>\013A\316=sK\353\275\355\273\"\277N(\264>E\r\016?\246\357\265=\221\233\001\276?:\365\2753\341W>\265\375\013\277\"O\202>k+\326>\017\234s=\006d/\276\325[;\277\243\222*\277\317f%?\004\377[=5\321\'=\355E\264\274\277`\227>L\211\224>\374\373\014>\005\305\277\2763\031\216=\372C\263\274\035\224\240\276KV\245\2751\266\320=a\303\263>\022\203\210?\214\271\273\276\002\232\310>\326t\275\274M\326\210\276\232\t\206<\333\247c>\004p\263=c\271\r?\267`);S\005C\276\317\236K=\213\246\263\276E\201\256>~\311\246\2755]\317<\374\214\003?!\002.\276X\312\362>\241\241\177\276bJ\264>\332\311@\276w\326\016\276\317\365\275=\301r\004\275j\274\004?\034\353\002>\267B\030=\213Tx>x\321\247\276\262\274\253<\273\233G\276\2137\002\277\234\031\275\275\224\300\306=\231\r\022\276(\017#?-x\221\276Z1X\272\037h\205\276Y\206\350>:@\240\276{\276&\275\350\336\033\277j0\215\276%@\315=`Y\021?@\366\312>\253\262\357\2750d\265>\033*f\276\305\311=\276\332\341/>Ic\364\276@\030X>\306Pf\277\225\0166\276\317\332\375\276z9l\275Ra\354\275\331B\340\276.9\356\275\303\323+\276M\371\020=]\304\227\276\320\2700>\rlU\276tF\224>\247\005\017\276\0265X\276\336\252\313=5\014\217\276\357r\221\276\020\257k\2760/\340\276MJ\221>\003w \275\226\t?\275+\301\342\275Q\367\241\276h%-\275\252\232\260>6\260\025>\240\211\240\276`v\357>\374\306\207>\177\244 \277\305\032\216\275l$\251\275\033\r \276\365\204\345=\010\260\310\273\374\336&>\017B@=\256\201\335\276\327\2044=@\206\216\275\2610\244=E\r\226\276\336q\272\276\305Ue?\244p\315>\244\344\265\276[\010\262\276\322\343\027>\303\330\362>1B\230\276\202\344\235\2743\247\313\274\250\3045=\225e(?\375\207t\276\n\334\022?\211\'\233\275\376{p<\2034C\276)\"\033\277\3441#\276?\035\277>\343\336|;\370\3436=\351eT\276Y\243^>|\362\200>h?\202>\035\311\225\276\030z\304<\202\377\375>\t\210\311<\345z\033=?W\213?\306\341l\277R\270\036>\347R\034\276@\006a\273<\210\215\276\206\216]=\274yJ\276u\223\220?\036\033A\276\312\246\354>M\022\313=s\021\337\275\304\010\t?\333\212\035>#W\240:0\330\375>\247%\226\275\032\372\267\276I\2051>\255\206\004?\247\\a\275\242\264\347\276o\022\323\276\333\212\235>\265O\327\2764KB>&\036P>s.E>\271\374\'\276K\002\244\276\221H\033=\236@\230\275\246\355\'?\037K\217>\301\034\255>o\202/\275}?u\275.SS=iQ\237\272\027\232\253>\204\323B\276\2613E\276JA/\277\251\237\367\275\216\006\340>Y\027\307>\\\311N>\021\001\207>\224j\237\2763m\177=\343kO>\204\3301\277\354\371\232<!\037\024>\276\366\024\277/0\253\274\310\315\220=\032\243\205\276<\245#>\323\323l\273\341]\256>]\341\r\277\351\267o>\210\204\357\274f\024\253=\316\0311>\212\2233?%\226o\273z\307\231\276\307\364\224>\037\021\033?,e\371>|~8>\223RP=%\351\032\275\246\362\266=\373\313\376\276oGX\277S\313\326=\0054\221>\032\335\021?\231d\344=\226B`\2753\304Q\276\3225\223>\027\016d\276\033dr>\010\346\250>\230\206\321>\271\245\225>)\347\213<\313\331\273\274\2235\032\277\016\020L\276\347\343\212\276vq\003@\257\\/\275\312\246\334\274\034\357\216=\255\301;\275\350\336\303\276g\'3\277P\376n<k\326Y\275\232\007\220\275\326\255\036\276\242C\300=\\>R=\230L\225<^\200\035\276=a\t\276w\333\365>\205\224\027\27728\212\276\270\314)>\274t\263>\230i\213>}\010\312\275\262\365\254\275\026\030\022?\272\366\205\275*\000\036\277N\271\002>N&\256\275R\037\222\273Y\247\n\275\271\374\'\276.\256\221=\253\262O>P\344I>\334K\312\276\324\361X>\335\"\260=7q2>-Z\200<0\r\023?\"\215\n=\247\257\307=\345\320B>/\335\004>;\215t\276\230\206!\277U\301h>\253>\367>\323\366\017>\301\033\262\275\270\036\205\275\312nf=m\305\026\277\246~\216>C9\341>\245N\300=.\377\001\276\300\317@\277\t\033\006\277,\267,?\334\324\300=\305\032n=#g!\275\031\305\302>5\014_>\233\376l>\215\356\200\276\3057\224<\"q\217\273\315\314\014\276\271\302\273\272\236\355\021=\370\302\344>;\001\215?\340\241\250\276I\200\332>\307\241\376\274\263\357\232\276vp\220\275\000:,>\247\353\251\275\262F\355>\321\355\200\273\t\302\225\275\335\007\000>\'N\316\276\210F\227>\215\356@\276\027\324\227=\363\345\005?1\010l\276\302\022\317>\312\211v\276\031\312\251>|\325\n\276\366\324\352\274\034\231\'>\360n%\275\301\377\306>%@\r>\302\206\'\274\313\020g>m\220\271\276\"Ti>{\024\356\275@\023\301\276\264r\217=\373\007\354\273wf\302\275VH\021?\352\225R\276_\t\204\275|\355\251\276\231\201\002?\304w\262\276\304{N\275o\r\004\277\232w\214\276l&\337=\372D\336>\364O\260>\317\251\032\274\366\013v>sK\273\276E\201\376\275 D\262<)\226\373\276\214\020^>\371\203Q\277;p\216\276b\333\032\277\233U?\276\027\362\250\275[\231\200\276n\340\216\275L7\251\275\004\220\332\275g\'\343\276\311\310Y>\234\026<\276k\202\230>N\227%\276\375\301\200\276\202\377M>\261\242\246\276L\032\243\276\2029Z\2764\235\335\276r\376\006>\014=\"=9(\341\275K\260\370=\364\303\310\276\303G\004\276\\\254\230>J\322U>\177\274\367\276.\377\341>\245I\231>R\270\376\276l\t\371<\323O\270<\265lm\276\301\034\375=c(\347\275<\367>>3\247\013\276\r\253\250\276\021\030+=\202:e<\014Y]\274\3058\177\276f\024\233\276\371Ie?4Kb>KY\266\276\0221\305\276\262\364a>\317,\001?+\336h\276<\022/=\246\320\031\276k\016\020=\377\354/?]\026\223\276\036\341\344>0\330-\276@\336\253\274\034\317\'\275\274\256\017\277\3328\222\276I\364\322>\237\235\302\273u\002\032>_A*?\032\213f>g~\305>\224\345Z\273\023G^\275nQ&\277U\244\202\276\261\247-?\231*X>\016Jx?\177\336\004\277\3372\327>\323\3324=\2554\331>2\217\\\276\202t\261=\336\002\t>w\333\035?v\026\275=\376}&>P>\030<\311\313\032<\'\302\366>\246\356\252\275\264\345\\\276\n\021\360=\344\024\315\276\000\343\311\276\333\206\221\275E\201\356>\254\220r\276\341\264@\276\312l\340>A+\360=\235\2722>9\234\371\275\027+b?v\375\"><Mf=\311q\347=\263\014q\276\235\021\325>\234\341\006?\266\326\227>m\377\002\277\225\016.\277qZ\220>\376\324\370\276\0319\233\276\265\245\016\275\\\033\352\275V\202\005>\376\016E\276\263\014\271\277\325\347\332><\240\254\276\376c\241\275\006G\251>)\315\246\275\343\302\241\276\032\335\021\277\\\344\036<\355\273\222\276\010\351\204;sc\272\276\242\r\240=\312\372M\2741\261Y\276\266\326\347\276L\252v\275\332\033\374\275\217\245\377\276\244p\315>s.\245\276\365\326\200\276}\256\206>\341(\371=\251\366\021\277\274t\323>\202\347\356>\223\214\334=\2754\005\275\331\224+\276\252}\"?\231\327\021=\201C\230>\335$\246\276\214\204f\277%\314$?^\204i\275n\004\230\272\025\033\363\274\301\312\221\276]P\337> c\026\277\302\243m\276\244\215\003\276\212<\231\276\0265\230>\001\373\230>\256*\213\276\036\212\202\275\234\024f=m\347\273\275\206Z\203\276K\223\222>(,q\276~W\224\276\ro\266\275S>\244\275\333\334\370\276(\n\244\276\226[\212\276\327\372\">\305\342\334\273\241h\036=\250oY\276>{n\275\013AN\276\232w\234>\013\357\022\276\'18?#J\273\276\216\346H\274\237<\004\277\333\247\343=\366\227M?\224\300\306\275L\033\216\275\311\037\254>b\204\320\276\035U\r\276\036\334}?S\263\227\276Z.\273=\'f\235\276\267z\336>L3]<8\276\306\276\000t(?\357 6?\315W\311=\001\301\254>_\230\234\276,bX\274\357V\266=U\244:?*\343\257>\356|\377>\313\024\363<\016\370\004?\243\036b\276\324\360\255\275\212\253j>\t\212\257>aT\322\275\221~\023?\361c\014>.7X\275\354\335?>\365\271\032>\365\202O\275o\360u\277\t\026\247>\016\333\036\277\351e\344\276&\036\260>\233\311\007?\341\177[?/\206\n?\035\003R>\231\323\265>\227\255}\277C\220\203\276\n\242N>u\315\004\276_^\360\276\370Q\r\275\207m\353>\002\361\032?s\362\242<\370\252U>G \376>s\205\247\276\343\374\315=t\230O>nn\034?oGx>\277\202\364\275\314z\031?\361.\'?H\251\244=\267\323\326\274\376\'\277\275y\221\251\275H\213\263=\250\030\307>\232\231\031>3Q\204:,\324z\276\177\336\034?\326\305e?]\303\214\274\303\324\026=\300&+?1\224\323\275\323\024\241\275/Q\235\275\354La=\264\037\t\276&\374\022\277\002\232H\277\376&\224<\005n\025\2776\313\245=\210\205*?F\261|>\363T\007\276]\371\354\275\036m|\276\222\260o\275W\356\245\275j\301\033\277\341@\020\2775cQ\276=_3\274\227\305\034??sV\275\310\013\211\275\300\260\374\274;\001M>I-\224=\237\220\235\275\234\246\257=j\373\'\277\262cC\276\264\351\210=<\371t;\3603\356\276k}Q\276\202\305\001\276\013)?\277\200}\264\276@\366\272\276\256\266\342\276Y\372\320\275\320D\270>\202V8?\211^\226>V\202\325>\302\372\257\276h\313\351\276{\031 \274.\220\300\275\373\221B\276\302i\201>\366\356\237\276\236\352\240\276\274\256\027\277\251\366\351\275m\250\030\276]\3047>\tm\231\276\327/\210>r\026\026>d\006\352\275(\233r\275\t\033\036\276\003`\214>\202\345H=n\243\301>\313\204\177>\205\231\226>\024\005\332>F\2632=\257\231\014?\211\352\r?L\246\212>\340\363C<\330\r\213>\2029\352\276\017\013\205\276\303\201 \277K\345M>\276\244\341>\026j\315\276-x1\276d\222\321\275\352x\354\276\261\341\201?\273\017\300\276\355\2016>5&\304\274\216;E\276\355*\264\276\230\243\007\275\016gf\277\"l\330\276\255\300\300\276\023f\252\276\362$I?\205\355\'\275 )\362>v\263\022\272e\337\325\275\016\236\311=/Q\005?\370\374\240\276\351\0208\275\205|\310\277\244\337\366?\034\231\247\276\253[\275<\032\245\213=\227\345\253=\007z(<\237\253M\276A\324\r?\231\323%\276\200\232\n\277k\361)\276\177\331\035?n4\200\275\315u*\277nL\277\276|H\370<\321\256\242>\247\005o\275]39\276K\002\224>\004\377\213>\271\337\261>;\337O>\032\027\356\276[_L\277\262hz>\253Z\222=n\027R?\366b\310=\326\250\207=\036P\306\276\032i!\277\355Hu\275\370\371o<\263^$?5^2\277\350\366\322=\006\273\001\276\246D\262\276\321\221\234>\211\014\333\276\036\334\355>\221\355\204?C9\001?\356%\335\276p\261Z?\025\037\277=\\r\234>w\333e>+\030\225>\245\275Y?\"qO?3\304\261\276K\002\004\277\322:\002?\217S\204?\324}\300>}\257\201=\326\213\341=\257|\226\276\334\272{\277VHY\276%\351\002?\374\302k=\373t\034\277\034\360\031>r\212\306?\003[\005\276w-I\277V}F?\231\236\200>\215\013G\276\346\221\357>\237<\314>\003\317\275<\225~\242\275\243#\271>\271\307\322=\222vc\275o\022K\277\256\266:\277\303\3601>GUS>\t\032\263=\023~1\277\021\031\246\276`\0027>\031\3428>%]s?\223\000\345\276\336va?\3333\003?K\345\005\277Z\273\255>\372\'\370\275U\301\240\277Bx\364\275\336\310\374=\232\353\024?\027\361\355\276uY\314\276\210c\255>\017\321\210>\344\367\366\275,\237e>\346\256u?~\305\272=s\2724?\203/,\277cb\203>dX\245>\354\206\335>~5\227\276O\313\217=4\367\220=y]?\275\366\264C>y\257\272\2760\022\272\276\273\362Q\277\350\366\222\276\264\310\016?5c\031?,e\211?\363T\267\276\356\224\216>\'\277\005\275U\243\027=\024\320\304>\366(\214?\377!u?\271\337\221>\327L\356>\007_\270\276e\001s>\004\255\340\276\372a$\276h\313y\276{1<\277\017\326o\277\023a#\277\026j\235>\363\346\260\275p\353.\276\006\273\241\276\274\263\346>fI\240>\342\351\265>\273\325S\276jjY\276\2613\345\276\2279\315>\277\267\t\276\007\261S\276)\"#\277e6\310\276D\213L?\254\305\027\277\234\373k\275\254\253\202\274\265\2113\276\354\300Y?\277}]>9E\027?\366\356\337\276\013A\276\276\213\303\021\277\244\210\014\277+5\373\274:]\226\276\256\273\271>\270#\354\276Bx\244\276\t\304\373><1S?KvL?\212\260\341<\237W\234\275\270\314)>p_g>?s\226=\263\265\236\276\246\017\r\277\037\327>?\242]\305>\357\217o\277cE\025?)y\305>\005\027K>\350\331L?\214g\010?\247\003\271\275\351+(>%u\362\276\274t\213?\247\315\270\274\211\230:?\033/\335=\274\313\005>e\337\305\276q=\272>kH|\276\241\2716\277\023~9\277n\2132\277k\324c\2779\326\205\277\017b\017\277\205\264\006\275\367X\272>K\253A\276\236$\335=\272kQ?\017bG\276\030!\274>\241-\327\276S?o\276\304\3164?\344fH?y\254\031\275\371\332\223>!\352\006\277<\3320?9E\007?e\030\227\275\201\317O\2769\356\324=2\347\231\274|\362\020\277\366z7\2766\315\213?L\303P\276?\216f\275\037\364\224\277\357\255\310\275\310\007\215\277\301\250\014\277\333\027P\274\263A\266>1\353-\277\215\321b?\031\255\003?\276\023\013\277Uj\026\276*W\230>\245\367m>\rlu>\260U\202\276\365\3337\277\007\360V>\220\275~>\032\300\233\276\251\331\023\277\356\353\030\277\233 \002?\366]Q=g\362\025\277[B.\277\034\334\214\273w\366\225=+\373\276>\032\243\365=\223\343\256\276\351\016\242\275s\327\022?\213O\321>#2\004?:\222K\276\027+j\276\220\210\031\277p_\'>\366\177N\277\260\003\027?\020z\026>\323j(?\250\030G\276\'\240\221\277,}\310\275+j\220>\227\312C\277\252\016\t\277\203\243$>\001\207P\276a\306\224=x}&\275\026\374v=T5)?\3060g=\017\321(\2761\261\251>\340\3334>\365\326 >6\345\372>.\377\201\276\351\232)>\217p\312>=~\017>\3018\270\275\301\213\376>~W<\2778\025\211>D\2776=\'kt>\260\254\224\276V\2025\277\355\r\276<\325!\267\276\205|\020\2750*9?\253\347d=1\353\205\275q\217\r?\225\324\211>M\326\010>\334.\324>\304|\211\276dw\301\275$\230*\275\224\331\300\276W&$?\032P\257\275\2132{>c\356*?{\203\357=n\335m\276\320\233\372\276;\337\237>\225\324\351>%\351:\276\220k\003>jM#\277\331\231B>\030\t->2=\001\276\350M\345\276\277\232\243>E+w<\254\032D=\343\246\206\275\210h\364=\347\373I\2769(\261\276\253\262\017>X9\204>\314E\374\276Ouh>\242b\234\275\003&0?\021\3371\277\212\221\205\275\205\261M\2778\241\020>K\260X\276\244p\005?\345\325\271>\370\215o>K\223J?\355\330h>`\260\333=\305\002\277=JFn\276\013\230\220\276\005m2\275R,W>\343S\000\277\336\253V\276\352\225\022>X\246\004\274\023a\303>\3578\305\276K\352\204\276\346\"\356\276s.\005\276\3019\363\276\351&\221?\241g\263>\313g\031>\256\201m\277yu\256\276\254\220\362=H\033\327>\315\314\024\277\376+K\276\310\315\360=\235F\312>\267\356\326>\276\331&\277\337\375I\277\237\037F>\202\340\026;\200\016\223>\362\3573?\275\037\022< y\307\275\260\037\242\2751\261\t?\212\260A\276m\0341?~5\367\276\221*\312=\224\277{=\244\253\364\274\233\376\314\276\345\270\023\277\341\264`>\367\257\354\275h\350\337\275\\\253=\275\271\210O>\2451\n\277\336\002\331\276\004\342u>\344\024\335=g\'C>\222\223\251\275\244\341\224\275\217\302\r?5)=?\000\032\245\274\036\341\244\276c\271%>\365\234\224\276\245\240\213\276p%\313>\200~_\275\034\231\227\2762r\036?\373\005\033>\217\250P=\360mB\277\376C\312?\265\375+\276\347\\#\272^J\235=28\372\276.\220\000\276\312m\233=\375jn\276\300\te\276\010\217\036\277\376\324(\277\366(\234\276#\273\262\275\263^\354>(\2708\276\344\332\360\276\225e\220?U0J>\376\270\275=\370\376\246=\237v\030?_AJ\277\t\376\247>2v\002\275\tRi=\374\000\244\2761|\324>\357r!?b\326K\276oG\370>a\340Y>A\201w\275\n.\326\275\006\236\333\276A\324\215\276\322o?>X\034\316\276\266\241B\276\252H\245\276\377\003\314\275h\256\263=9\013\273\276O\036\226>\203\243\034?\3225\203>Y\027\307>\373\256\230\276Ve_?_F\221>\020u\037?\035t\311=!\345\207>\371I\025\276\207P\245\275\351`\335>\316\336\271=\247?\033\276f1)\277OX\002>k\361)\276\253\222\310<[\316\345>\236\352\200\276\240\025\010\277\331y\233=m\305\236>\2201\027>\035\221\257\275\3063\350\276=\n\327\275I\272\206>\335x\267=\374\2143?}\2210\276{k@>x\234\202>\253vM=\036\334=\276%@->#\204g>P6\r?\235\235\214\276\210\235\251\276\005\250\211\276\344I\202>\014\037\361\276\223\306\310>\325\222\016\275\\v\250\275r\305\305<r\334\211>\334.\344>\243\257@>C\004\034\276\243\352\227=*\343\337\275f\210c>|\233\376\275\307.\241\276\323\301\252\276\230i{\276\353\213\004\276\274W\r\276\326\255\336\276\t\304\023\277\362\007c><\275\322\274wN3=}\221p>\272\275$>p\010\r?\262h\032\276\2402>\277vl\244=\304B\235>\360\304\314\276|\272:<\365\241\033?\036\033I?\006h[\275b-\036\276\353\305\200>xb\346>\307)\312\276g\362\215\275\372\325|\276\333\371\376\275\207\376)>\345\270#\277\344N\211\276\'\365\345\274\033\366\373\274\020\006\336\2755\265\214>\356=\254\276\250\214\037\276\375\023<\2760\236!?\211A`\276\002\3313\277\010\003\317\2751\316\037?F\231\r?C9Q\276R\356\276=;\374U>\023,>?\021\252\324\275z\302\222\274\351&!\2778\370\242\276k`;?5]\257=\257\316\001?Q\364\000=\025t\253>}\3203\276\376\232\014>\313\331\273\275\276\370\"\2759D\234=\337\245\324<\254\342\r?!\315\230>\335\007\030?M\326\210>\224\244+\276\t8$\276Pp\261>\250\306c\277\261\245G=\315X\244>\304%\267>\230\243?\277C\255A\277m\305\376\276\214-\344\276w\366\025=y\036$?\200\016s\276\341b\035\277\355\201N?\231d\364\276\225\267\323>\304\'\235=\362\322\025\277\031vX=\016\363E>\314\3208\275\342\001M?rmh\276\nh\302=\340\276\236>\371\273\267=bg:\277\250\343\021\277T\343\305>\204\323B>\021\374\357\275\231\r\n?\334\235U\277D0N\275 {\275\276\2407\025>$\321\033\2774\200\'?\014\037\221\275a\340\231=\006d\337\276\3707\350<\034\262\301\275\021\001g\276\203\300\212><\275\022\276\221\362\023\277\253\264\305\274\272\240\376\276\266\365\263=p\231\023\276\335\230~\276(,9\277\326n;\276\317\203{\276\303\266\365>\005\335\356>^\200=>3\247\313>\234\334o\276i\251\374\275\273\233\207>\371\205\027=\331\224k\276e\302\357\275-\2257>\272I\314\276y\036|\276\347pm=\2076\000=\226%\272\275a7\254\276e9\t\275B\317v\277\331\261\201>\030CY>\243#\211?\323\336\010?\236\322\321>\373\256\030\277\211{\014\276]\376C>\362\014\332\275\274W\255\274\327i$<\367\036\276\276keB>\031s\327>6\345\312\275\262\235O\276\230L\025\276\324}`\276\005\305\257=z\215\275>\351\016b\276\036\341T>\371\017)>\253\317e?\227\345\213\275\313\3638?\026\244\371\276\232B\307>g\355\036?0L\226><\332x\277\2137\022\276\273\354\227=\317\021y=\307\200\214=\241-G>3\033\244\276\321?\001\277\370\374H\277\314@\305>?W\013?a\032\206>\3127\033>Q\024H\276\310{\025?\247\350\200?\177\206w=\235Kq\276H\212\030?\300&\013>e\031\n\277\252fV<\303d*\276`\310\212\276\032R\205=\300&\213>\377\347\320>\271p\320\276<N\311?\020#\004>\244\307\337\276\nK\314\276d\351C\276\250\000\310\276\t8D>\336\2536\276-\354)>\205_\"\277C\342>\277\201\262\251\274\331Bp\276+\030\225?\006\330g\276Gr9\276\203Q\201?B!B\276\222\223\251\275\2755\360=\332\346\366>\2554\351\276<1\273>lC\005>\371\275\315=\230Q\354\276\353\213\224\276\t\371h?\343\252B\277Yir\276g\017t>V}\216\2773\247\013\276A+\340\276\367\223\261\275\323\274\003>}\213s;m\377J\276x(J\276(,\241\276\274\262\213\274\267\177\345\276\220/\301\2758\204\232>\243#\251>\246\360 =\177\301\216>=I\n?\213O\t?\377\354/?|,=>\214\020\356>\251\206\235\275\243;\350\276\226%\232=\031\377\016?\361.7>\207\0261\277R\2338\276\016\240_\274\272N\223>:\006D?\'\302\206\276\020\257+\277\216\351Y\277x\271(?\317I\277\276\333\205F>\262\200Q\277\035rS>AH\206\276%\314\014?\330\177\035=\3475\016\277\257!8=\006/Z>`\3450?y\2255<\300x\246>\234\242\223>\355d\200>\303\201\320=\251\237\267\276\017\321\210\276x(\252>.\306@\274\212:\263\275\236^\t>\215z\350>\226x`>O\350\365<\256\201M>\206\033\340\276\n\273(=\004\312\306\275E\233\243\275\373t\374=X\250\225\276\000\256\364>\271\307\002\277HP\034>\370\252\245\276\315\347\\<A\274\336\276R,\027\276\260\033>?\237q\201\275\215\010F\275\277+\302>\311\2165?(\325\036>y\036\254>\2029\372\275n\027:>\242\013\352=\206s\215\275E\267^=z\307\t?vT\265>?\343B\274od^\276u<\206>\177\207\362>\t\010\034<\203\370\200=4\272\263\276\370p\251\276\373y\023>DLa\277w\276\257\276\2279}\276g,z\276\225}\347>0/ >X9\204\276\362\357\243>Qk\272\276z\031}?\255\210\232<\265l-\277\237\253\215=\302\243\255>\206\033\360>\005jq\275t\357\341\276\316p\323>+\301B\276\370\252\325\275\221\362\323= \357\305\276GU\323\275\214\0255>e\307&>\223\251\002\275\234v\347;\033\020\241\275V\267\032>$(~\276\244S\017\277\004\350\367\274U\301\270>q=\272>\327\372:?:u\205\276H\2133\275\310\356\242=\010\346\270\276\352Y\220\274W\317\001?\250\035^\276\301V!?\000\221\036\276z\215\355>\226&\245:W\022\017<9\326\205>\206Zs>O\257\244?\252*t\275V\202\325\276\256\022\354=\345\270S\276\254\250a\276\rq\254>Q1\236>5{\200\2753\304Q>?\255\242\275Y\335j\276\227\377\200>i\000O\276\214\367c\274{\203O>\025W\r\277(c\274\2759\271?>r\372\372<\250\035\036>\301\305J>\341z\024>\024\256\227\277\024\263>\2764\2424=;\2154\2764\327\251\276\306\341\314\275d\314}>\261P\253>\034_\003\277\262\203\252=\343p\326\276\360\247\266\276}\221\020\276uv\262\276\254\377\363\275\255\275\257\2757\246\007>\340J\246>k}1\2766\223\237>\300\225\274\276\322\253\201<(a^\277\331\261\301>\354\331\363\274J\230I>\t\033~>\336va>\234\212\244\276\337\370:\276v\032)?\270\036\265>\265T\036\276 \265\271>\332\217\224>I\204F=o\360\245>\250R\203>\340\252\241;\240\211(?4\277\272>\205\353\261\276\246\355\257>\200`.\276Y6\223=p\231s>L\246B?\213\3031\277b1j<\033\177\242<\311\003\221\274*\034A\275\356\355\026\275S\256\200\276\247$k=\320\263\251\276J\357\233\276gc%\275\356_\031>\313\021\222=\221\n\203\275\002+\307>Wx\207>4\327\t?\320{%\272\217\344\202?#J\373=\346\005\210>(\2363\275\207\243+\275\374R\277\274\231\365B\276\320a\336\276\352\317\376\274|~x\276\324\200\241\275\"\340\020>\372D\276\276\377[\211>\210\021b\276\232\224B>>\355\200>_\014\245>I.?\276\361\327\034\277k\232\247>\030>\202>\222\\\376\275Yn)>%\222H>5\323\275<\322\035\304>Qf\223\276L7\231\276vq\333>\031\220\035\277\033\236\336\2758\204\212>>y\030>\365\333\227>\t\247\r?IK\005\276\201\262\251\274\013&\276=\231\236\320>\370\210\310>T5\201\276]\026\343\276\321\313(\276\337\211\251\276\272f\362\275\375\023<>B\2628?\367X\372\275O]\031\276\220f\274>i\376\030=Q\245f>E/\203\276%X\\\276\347\246\r=\315\257\326\276\214\271\213>5^\232=\023\270\345\276-\355\024\275\264!\177=\343\307H\277c\356:\276\374\214K>\324\016\017?k\361\271>\262K\324=r\304\252\276\003|w=\227\342J\276\356]\003=\344\316\026<\356|\027\277gD\351<\014#\275=\322q5=\016\205\257=\251\331\003>\342\314O\276\215\322e=5\230\226>[\261_>\004\034b>\342\351\025>\377\312J\276\300\223\226\275\306\371\373>Cs]>\014\260o\276\345C\320\274-C\214\276\373\313n\2767\246\037\2771\316\337\275\243s>\275FB[\275\203/\004?\265\340\305=\027\2011\274\234\277\211>\36466\275u\253\347\275\237\216\227\276w\326\256=\272\244\252\275_\014\225\276\375\301\240=UM\220\275\226\225\346=b\242\001\275\275N\217\273)\t\211=l>.>\3019\003?nn\014>\243\347\226\275+\245g=\241\020A\276\250\000\250>\022NK\275z\341\316\273J\014\">\243@\177\276F\240\260;\243XN\276\356\010\227\276\254\3773\276\037\205\213>\221\361(\275\033G,>\204\273\363>F\323\271>\035t\251\275\313\370\307>\325w\376\274C\255\251\276\255\300\200>\361KE?ds\325\272r\376&\2761_\016?\004\034\222>\206=-\276\323\251\206:\225+\374=\017\227\254\276G\003\030\276\247y\007\275\026\337\020\275\337l\203>\373W\246\276\232\231Y\276\270\357\254\272\301\305*>~W\224\276z\034\246\275\271\307\022=$\3569?t\014\350>\330\323\236\276 \227\230\275\010\224\r\276\351C7\276\377\312\252\276\255\243\272\276R\'\240>O;\214>\310$\343=\205_\252>@\365\264\273\363\310?>\360\030\236\274\035\311\305>z\374F\277\224\301\321=k\361\251>\366\356\237>\274\263\026\277\\8\220>L3\035=Ve\337\276\345~\267\276\347R\374\276\035=>\276\210\272o\276\033\236\236=K\223\022>[\322\261=\372\270\366\276U\207\234>a\246\255>\272\3304\273\215]b\276a\032f\276\311\310\211\276\243#\331>D\027$?\202\220\254\276N|5=N\177\206>\021\374\357\276TRG>\206=\255=Ujn\277]\304\367>\035UM\276\301\376\213=\225\273O\274\353r\312\275\242\013\352\275\363\002\354\276\263\322D\276Di/?\3171\260\276\344f\030>\014\220\250\275\037K\257\276\214gP\276e\252\340\275\301T3\275\\\220\215\275\246D\222>\"\211\276\276\370\252\365>\027\232\373\276+\244\034>n\335M>\177\331\005?\376}\206>\312\303\342>\260r0?L\375\034>\301\305\272>\350\331,>E\273R\277F\261\214\276\333\205\226\276\245fO?\224j\317\276\030>B>\341\013\263\276w\370k\276@\333\212=-[\353\275\216X\213>V+S\276)<\350\274K\037\002?\271\210O\276\221,\260\276#g\201>\211b2\275RD\266>\346\"><\236\014F\277O!\327<\'\367\313>\324\267\254>aO\233>Q\367)?\000o\321>\324H\333\276\326s\202\276\226\t\257>\300\350r=G \276\276\256\360N\276\350\202Z\276\2755\320\276\257\010\376=4\327\371>\250W*\276\221{:\275\205w\031\276]\341E?\352^\'=S?o>\204\323B\276L\216S?\377\004\327>\tmQ?\017\227\024\277\350\331\274\276\270;\213>t\014\310<\024y:\277\235\364~\276\302Q*?\244p\335\276\r\253\210>\232\261\020\277<\245\243\276\2029\232>\316\307U\276\270\351\017>\241\326\264>\212\347l\275\256\ru>\223\247\254=\275\343\024>dX%\276:;A?\275\217\303\275Yn)\276\'\302\006?\035Yy<\002\237\337\276\321y\r>\200\232\032\276\373:\220\276aqX>\235\203\307\275e\374{\276\200}$?\333\304\031\277Mf<\275;\252\332\276\024?F>\256\236S>\207\334,>V\237\263?\366\177\006?*\214\035?\311q\207\276\236\322\341\276\367u\240>T\343\305\2766\260\345\276^.B\276\2652Q\277\216\036\007?2\004\200\274:\006$>[\266\036\277~\030y?d\036\211>\210\235\271>(\362\024\277V\202\205\276\342u=>\3475\206\276\323\023\206\276{f\t\276Ae\374\276\210\200;\277\301\217\312\275A\274\276>m9\347>\3328\362\276\250\3439\277\305\346\343>%t\267\275`\310*\276\367u\300>\300!4\276\021\031\026\277;\031|\276Y\372\300\276{NZ\276\257\224\245\276}ME;\341\227\032>\206\346\232\275>?4?\010\217v>\357\376x>\267(s\276\335\230\356\276\020X\211\276\3544r>>\355\020\277\317\236\013=\326\034\240\276\232|3\276\026\023s?\365\363\366\276\020X)?wJG\2761\224\013?\261\247}>\365\363\206>\360\212 ?\331\353=>\366b\370>\227\220\377\276W\356\205=\236\230u\276\026\301\177>\347R\254>aO[\276\253xc>k\237\216\276\252+\037>\026\366\364\275\247\256\374\275\204\365?\275\377\347\010?B`%\276;\307@\275A}\233\276\030\355\261=\0326\312=V\274\021\277\351H\016>+5\353\276R\233\350>\221DO>\243\006\363\276t\230\357\276\"\211F?\270\344\230\276\263\265~\276\244\307\317>\255\241\264=.s\032\276![V\275\022J\037=_E\306=rm\230>%\006\201\276\025\221y?&\374\242>R\'\300>G8\355\275\342\036C?\266\241\242\275\327L>>\367\257\254\276:\257\261>\260r\330\276H\341\372>0\201{>\224M1\277\261\334Z\277:\003\203=\233\376\334\276\3750\002?RD\246\276e\215\212\276k\362T\275\'i>\275V\016\r\276\036\341\304>\021\000\274=\211\014\273\276t$\247>\3269\226>A\232\261>\n\235\007?\020#\364\276\022\3353<,\016g>\252\202q>\253>g?\343S >ML\027\275Z\360\">\273\362\331\275:\222k>\356%M\276\377[\t>\342\257I\276i\306\242\276\216uq>\304_S\276\276\336]\276]\247\221>\266\370\204\276\324\361\370\276\034C\000=gC\376\274\025\343<?\225\273O\274$\013(\2779\326\005>\356w\010?\205_\232>\357\002\305=\3377~>\rl\r?\246~\006\277\362\352\214>\311\223\004\277B\262\240\276\373\226!\277\326\250\207>C:\274\275\301\250\304>,\267\224>8J\316>X\305\003\277V\274\261\276\035\224\360=\377\225\205\276\366\177\316=C\347M?\346\256\345>\245\244b\273IK\005>}\226\227\276c\321\364\276\355\273\222>^-\227=\310\357M?j\244\225>vTU>\323\274#\276\270\257\263>X\034.>h\",\276\006\205\301\2743\304\361?Z.\033\275D\206\345\276\361F\226\276\224M\371=\243\257@\276\000\000\220\276\220\203\022>\034\231\207=z6\013\276\r\374\250=J\230i=\340\020\n>)?\t>|\325\n>h\"\214\276\324\016\257\276\036\341\264;%=\214\274\327\206B\277R\017\241>\024\230N=Y\334\177=\260r(>d[\006=4\242\024?F\010\257\276\242\013j\276qU\001?\375\331\257\276/O\307=\006/Z\276s+\204<\313--\276XV\272\275\251\373`>&\374R\276\003x+\276\301s\017>\263)\327=\345a\341=\266\017y=\346<\243=\362\231\354<\372A\235=p\315\035=%\006!?\277\324\257>`\356n\273?t\241\276\350M\325>{\367\207=\202\347\036?\026\027\207=}\005)>\376)\025=<\275r>\024\355\352>\361\022\034\275Yi\302>o\360\205\274rP\002>\346\\J>\376\232\314>\355\365\356\275\3059\352\274&mj\275\"O\322=N(\304\276\335\322J\276\003\266\243\275H3\036?\355\236\334>\257B\312<3\335k\274\327\300\366>~\035\030>e\215z\276\007\360\206\276y\221\251=\007D\310=\376\232L\276^\364U\276(\326\251\274\312\246|>\331\'@=\353\342\326\276\366\264\243\276\275\214\322>0h\301=\026\373+\2760\330\315\275.:\031\275n\243\321>1\224\003\277\207PE\276z\344\317\275IH\204\275\'1\210\276y;\"\276B\225\332\275K\037z>v\246\020>\354\243\363>6\217\243=\203\206\276\275\335\352\001\277\361F\366>y#\023>\346y\260\275\017\0135>\303\267\260\275\237\002\240\276\300\317\370=\321W\360>\207\026y>\022\022)\275\331|\374>\373\\\235\276\304\224\010=m\2508>\177\336\264\276lxz>\016g\006\277\032\247\241<\003\317\335>\312l\030?\324\361\250>Z\022\220>\030\353[\275\350\242\201\275*\032\253=3\213\220=wJG>OX\342\275\221a\035\277\374\373\214\276N\t\210\274|D\254\276nn\354\276\217\344\302>\351e\324\275\342u}>q\033\215\276\244\252\211\276\t\026g\276\341\270\314=<\024%\276\375M\350\275\025\3066>\331B\340\2761\231\212>\265\375\213\276\276\244\301>\227\2524\275\313\363\240\276\342\004\306=\311<\022\276\325\312$\276\336Y\253>keb\276r\247\204>`\345\260\276mWh=\216X\273>\235\205\275\275\205>\270\275\237q\341\275T\036\035=\024\350\223<\034\010\211\276\244S\247>\035\003\322>\354h\234=~\000\302>\253\t\342\275\346?\004\276\221\325\255\276\362\007C=\336T\344\275g\362\035\277\014;\014\275\027\361]\2771BP?\030?\r\274J)\350=\033\233\275\275\216\351\t\276V\324\240>\201!K\276\'\210\212\276)\350\206>\003\225\301\276\245\365w\275\204\022\346=\257\\\217=n\372S>\2657\250>#\277\376<$\231\225\275\226&\345\275\352\005\277=\324\324\242>@\244\177\276gao\276\340\020\212\276tF\024\276;9C\275e\215\372=p_\347>\350\274\226>\355\323Q>\224\373\255>\306\334\325>\023\252\n<Uj\016?\355G\272\276\306\277\317>y\036\314\276\332rN>Qh\231=P\252\255\276-[\353=_)\013\276\321\221\034>4\200\367=;\031\314>\323\243)\275\316\210\022\276}\263\025?\017E\001>;\252\312\276\366(\034>U\210\307<\267\321\300=\0010\336>\262\021\330>\307\021\253\276\377!\235?\013{\232=\210\273:\275\361F\226>\315u\332\275:;\311>\241g\363=9\177S>\343k\017>\221\355\254\276M\326\270\276\006L\260>\323\336\240\2765A\324>\200\272\201\274X\220\006>\037H\236=\276\301\327\276\010\314\003\275\003\314\274=X9\244>\355\323\031\277\375\242D\275\037\021s\276\276f9=L\211\004\276z6\333>\214\363\027>\3578E>#g\341=\017\271\271>\222\"R\276\'\3026\277\t\244D\274\002\232\210?\031\034%\276Z\363\203\275\266\326W>.;\304=8g\244\276-\317\203\276B\262\220\276\302\366\263=)\355-\276g\'\343\276\316\374J\276\340g\374\276\363<(?g\322f=\020@j\276al\031?\326\034X?4\200\227\276*\214\035?\227\377\210\277\033\201@?\210\200;\277aT\022\276\031sW\276\035wJ\276\321?\361>\263{\262\276\314\356\301?\003x+\277\206\311\204\276\373y\023\277\253\225\251\276\344\203~>l&\317>\367\315==U\301\210\277\301s\257>5^Z>\006G\t>_\324n\274-x\221\276<\275\262\276\372\362B>\326n;=\'\275\237\276\000\221&?\t3\255=Y\023\013=cb#\277+5\233\276\355\201\246>\022\245\375=\030`?\276C\255\231>\314z\361\2754\205\026?\252\361\022\276\346?D\277\327\027\021\277wJ\367>5\230f\276\332\033|>\"\340P>\221\2326\275\035\003\322>\277\234Y=vO\336\275\017E!\276\022J\037\275\033\236\216?\314\264\215>\rl\245\276\360m\032\277\301\220\205\276\373\256\010\276\033L\023?F\261\024?\003C\366>\027\360\222=\315\036\000?\360\205\231>TR\327\276>\350\351>@M\035\277\313\2415?H\255\213;f\210\263>\334\363|<nLO\276d#h?\270#\274\276\352\t\333\276e\245\311<\226>\204>\002H\215\276bLz\275\r\032:\275\271\031\236\276DL\t?\230\243O\277\032\372\327\276k\232\027\2769\234\271\276\005\243J?h\256\023=\267b\037?\031\377\036>\021\307\252>\324\324\262>\206\346\312>\023\325{\276\245\367}\277\202V >l\317,=C\377\034?z\337\370\276S?/?\246\325\020>\242\013\252=\254\220\022\276\342\257\t\276>\350\211>\234P(\276\353\031B<\273\355\222\276{I#\276\343\373\"\275\224\244\353=*\306\251\276B\257\237\275\205\316\033?\264U\t\275F\010\217>fI`\276r\277\323\276\323\336\030?\362\014:\276\016\241\272>\323\300\217=\242\227\t\277\212<\t>g,R?\0160\263=B\t\223=\334\200o>\300\317\310\276\252\016\371=\212\223C?\217\302\365\275\204\r\207?\272I\014>0\201;\276\241\241\017?g\325\227\276\203\372v>\023\017H?P\031\177\275\010\000\216<cE\375\276\033\365\010\277\276i:=\"T\211\275=,d?9\230\315<@\331\324\276\374\251\261\276\363q\315\276\322\214\005?\030}\245>#2$\277\247\226%\277\016\363\r?\262\205 \277\206\003\221\276\306P\256\276\035=~>_\230\034?\316\252\257\276\264\214\032\271\3638\254\275K\352\204>\277\016d?\350\331\204\277\251\336\352\276f\367\344=W\004\377=\244\307\277\276\210\364\223\277\233\346\275>\241\241\337\276\246~\356>\371\203a\276\203QI>\004\342\025\276\273\270\315>\371\203q?\201\t|>p\316\210?\301\305\252\276\025W\225\2758\203\277\275\370\302\004\276\370\031\207>\020\314\301>>\263\244>\323\207\016\276\271\2455\276I\205\221=e\212y\275\351`-?\362$\351\275C\347u\276\355\323\361=F\224V\277\220\332\324>\245f\017?\016O\237\276\270\006\206\276[a\232=?\306\\>\336\223\007\277\205\261M\277(af=\351\r\367\274\n\242n\276\344\240\304\276\223:\001\277\236\322\301\273\017\326\007\277B\317\226>E\273\212>\271\031\216>\277\267)>\224\244\253\275\261\341\211?\353o\311\275\335\357@?\321@\214=\275\251H>\270\222\335>|\017\247\276Z\364\016=\321?!?T\343\205?U\023\344\276y\006m>\330\330%>k+\366=FBK\277T\251Q?\016J`?6\315[>\023I\364>\245,\243\276\353\377\334=U\373\344\276\263\352\303>WC\242>\222\"\302>\256\177\327<\245\024$?\0054\241>(D(\277\021S\302\276M-\373>h\256\003\277\"l\010?t\231Z\275\323\244\224<p\261\322\276\235\2722>\326s\222>\021S\242>!\217`<\267\013\375\276 \014\014\277\323\237\235>\n\334\n\277~\000b?\025\343\334\276\260 \r?\360\371!>^\242\272>()0\275@\023\361>\030}\005\276\205|p?\200\267\360>\354\206\r?d\257W\276d\036\271=e\337\205>\326s\222>{k\010\277\344IR>\265\375k\277\271\337\031\277\265\377\201\274\251jb>\204\330\251\276\226C{\277~o\263\276#<\220;\373\037 \2750*)\276u\260>\276\217\337{>}yy\277V\326\266=\221D\317\276\371\367y\276u\216A?\326\255\336>\\w\223>\"7\203>$E\264\276\177\336\364\276\232w\374>\343p\346<=\'5?\306\242\t>\017\234\003?\363\223J\276\315X\244>+\331\361=\314zq==#\266;\372\355\363?a\245\002\275\016\020L\276$\325\227\275\207\375^=\2176N\276\333mw\276DO\n\275:\006\004\276\323\336\200\276\262\020\035\275r\376&>\177}\276;\021\000\\=\016,\007=\367w6<V\232\244\276U0\212\276F%5>0L.\277Y\302Z=\2277\207=>\313\023\276G\314l<\035U\315<T\214\343>Q\240o\276\240lJ\276\2338\211>\007\353?\276\022\024\277>\rq\354\276\001\366\201>\2652\221\276~\0002>\223\303\207=\303\201\220\276\273\270\215<Ov3\275\364l\026=@L\302=\320\355\005>\313.X\275\222\313\037>\177\301n\276/\303\377\274\331|,?\362\260\010?fN\327=l[\344\276rm\210>\242\321\335\275\r\340\355>\334\200\017>\373\347\351<\026\244\331=\363\345\225>\267\177%>\322T\217\275\342\350\252=v\211j>\207\376i>\333\334\310>\037\235z>\236{\017>\257\010>\276\302k\227\275q\306p\275\3019\023\277~8\250\275S\222\365\274\252}\002?\325x!?\362\262\246=\352[F\276\375\244\352>\230//>\226#\344<\207\371\302\276\374\2511\276\375I<\275\031\255#\276v7\277\2764h\310\275\037\2777>\347\035g=\335\357\020\277L\211\204\276*o\207>\025\216\300\275s\330\275\2750/`\276\352\262\030=iR\212>G \336\276\351`\335\276\235\272R\2766v\351\276a\341\204\275x(\n\276]\364\272\273Xqj\275\373y\203>l\354b?\376\267\202>&\036p\276K\223B\277X\034\336>\250\251\325>6\223\357\275\251\301\224=\230n2\276\223o\366\276\275\373\223>\335\357\260>\014\260\017>Y!\233\273c\227\010?\343S\300\276\222\263P\276\331_v>\300\317\210\276\022\332\242>K\260\020\277\205\264F<\306\341\314>MJ\t?6\310\304>w\204\223>s\364\030\276nQf\276S\005\303>\302\302\t=r\300\256=\334\200/>\035w\n\277_$\204\276\331||>\235\327\310\276\265\246\311\276\256\022l>&Wq=\\w3>\207mk\276E\022=\276\344f\370\275=,\324\275\263%+=0\365S\276\211\317\235\275d\222q\276\320\263\211>\276\023\363\2766\223\037?;\344&\276vT\265\276\321\221\\\276\373\006\206\275O\010\275\2758-\230>\327\343\031<\223\246\001\275\2235\352\276\027H\220>\333\371\376=\2507\303=\205w\031>\3539\t\276%8\032\273\3372\007>\3711\266\276\204\r\257>\\\033\272>Uj\246>\216#V>y\351\246\274\207\371r\276\033G\254\276\312l\260\275\267\010\254\275\336T,\277cE\215\2762\003\025\277F\261$?\000\035\006>r\371o>\310\265\241\276\033/\335\275\202\347\276>*;\375\274RD\246\276!\2216<l\354\022\2764\277:>\372\263\337\275\033\366{\275\212\002\005?|\n\220>\341(9\275\34380\275\321#\206\2756\225\240;\327\300\036?\203\027\215\276\373\350\264\276\316\374\252\276\034BU\276.\347\222\276+\244\214>DQ\240>\213\303\251>\032n ?;\307 >8\276\226>\301\255[>g\270\021?gD\211\276\034\261\346>o\360E\276WxW>\346\312\200=\334\272\333\276\2758\361\274\342\036+\276>\312\210<\035\346K>\226\317J?2\003U\276\365e\211\275!\352\356>\375\202\335\275\372\233\320\275\267\264\312>\252\236L<;\336\t\274bg*??\221\327>\234\334\357\276s\327\232?\020\351\227=\"Ti\276\261\026\377>\255\027#>:\006\244>\373\255]=\311\310\231>=\325A>C\004\274\276O\351\240\276\263)7>\005n=\276\310\014\304>\363\345\325>\330\360T>\016\363\345\275\227\305\204\276\357U\353\275o\236\352=\251j\002>\343\2522\277\231\365B\276+\244\004\277\031\255C>\'\211%\275\253\261\304=\036\333\327;xE\360=1\320u=o\236j>\355\231\245\274\3544\002\277\220\236\"\274\366\177N?8\274\200\275\341\266\226=\300\262R=\231\201*>,\016\'\276(\362\244\276f\203,\276%t\227<n\241+\275\312\2116\276L\032\243=Cs\255>\241\333\213\2753R\357<2w\r\276\221\362\243\276\233 \232\276\036\212B>\025\035\371>\223\251\362?q8\363\275\347\000\241\2756\256?=\277\340\t\274fI\300\276<\024\305=\243\315q\275\202\255\002?~t*\276\252}\032>H\030\246=\241\333\213\276\314\356\271\276\307\327\356>\357rq\276\263^L>\365\242\226=\330\330%>\200\016\363\2755\265l\276\n\205h\276%u\322\276&S\245>\253&\210\276\264\345,?~\306e>\323\331\211>yu\016>\034B\245>\342\257\311\275\373\\%?4\2007\276\357\0030>\025\026\001<\205\261\225\276\013c\213>Q\245\036\277\222\2630<\370QM=\301\377\206\276f\276\003\275\034\263,\275\310\357\355>E\r\346\275,\267\344\276v\302\013\275\314\177(>\"\246\024\277\353;\277;\347\340Y\275\231\202\265\275:;\211\276\361\272^>\300\317\030>EG\n\277\374\343\035\276\263\352s>\352\354\344<.\004\271>\320K <\310\007\315>\316m\242\275\024\350\023>.V4>zp\267>/\210\310\275!>\220\275>\263d\276\211^\306\2763\0278\274u\345\223>\203\243D>\224\023\255\276\337\335\312\275\"l\270\276\'\210\252\276\234P\030\277q\347\242\275Z\233\306\2750G\'?\364\375t\2769\2704\275\321W\220\275\022\336\036\275\013\230`\276\331Z\237>\264;$<\001\3661\276n\023\216=Z\360B>\223\035[\276k\361I>\372\355+\276\277\232\243\276vl\204\275\354Q\200?(a\226>E\201\036>\352\004\324>\351c>\275w\241\231\276\200\016S\276v\2460?\344\207J=\342\001e\276\270\256\270\275D\372m>\205\353\001?\365\234\324\276\346W\323>\215\324;\275\312\246\274>;U>=\352>\300>\222\256\231<\203\212\252\275\376`\240\2760-j\274\242\013*\276\'0]\275G\347\374\274-[\353=\371,\317\275\321\036\257\275\252\324\214>\261\024\311<P\337\"?\315\222@>$\0138>\202\311\255\275\200+i\277\235F:\276p\232\236=Qi\304\275\025\035)>\244p=>|a\222\276\000\221\236>\301\305j\2768J\036\276\203\300\312>\006\r\275>c\354\244\275\3503 ;\354m\263<C:<=\347\343\232>\177\207\302>\231*\310>\344\275\372\276h\263\022\277}[\260\275\204\365\037\276\2759\034=\352\347\005\277\375\210\277\275\020@J\276\330\273\017?2r\326\275?\345\030\275\204\r\017\276+j\220\276;S\210\276\337l\203\276U\206\361<\201!\253\276\330\323N\275(\n\024\276\213T\030>\345\n\357\2761\316\217\276\371N\374\276X\220\246\276\326\255\336=\302\026;<\036\027\225\275\215z(>`Yi\275@js\276\022\210w\276<Nq\276!\254F\274\264qd\276?q\200\275T\345\373\274\226\262\314>\362\322\r>5F\253>b\333\322\276\022\302\263\276KY&>\336;\252\275\312p<\275\032\206o\276\265l\355=\005\372\204=\036\214\230=\014\260\317\276\322\367\277;\001\030\257>\210.\370>\257|v>g\362M\276;\302I\276\2240\203\276\\w\223\276\323\026W<\207P\345=\263\315\235\276\013\321!\275I\234U=w-\221\2762=a\276\340\234\341>!v\326\276Sz&\274\247yG>z\307\t?\2027$=\007\323\020\276\272N\003>\314\013\200>\357\342}\274\225\016\326\275`\253\224\276:\317X\275\245\275!>p%\033\276.\004\211\276\214\204\246>\r\375S>/4w\276K#\206\275\204\374\"<\007\266J\276p\231\203\276\032\031d<\205\261e>s\235\306\274`\310\n>\365\363\306\276R\324\231=\223\306h>2\347\031\275\227\2555>iR\272>\t\207^\274\313\276\333\276i\307\255=\270\006\326>7\032\320>\256Ga>\251\274\235=p_\007\276\234\026\\>R~\222\276)\355\335>H4\301\275\320\362\374=d#P\276\314\264\315>]\3047\276R\362\372\276\233 \372\276\247\005O>5$\006?Di\017\276\210c\315\276\006\r\235>\013\357B?\355\266k>\030]\036=\366\266\231=\321\313\350=s\205\367=N\013>\276\276\244\221\276^\327\017>\372{i\275\'\026\370<\330\266(>\376H\t?\251\331\003\275\215\014\362\274.\342\233\276\302Q2\2757M\206\267\344/\215=iR\212\276\210h\244\276Cs\335\275\345D;>\303\330\"\276\r\303g>[\316\225\276\274?>>\001\207\320>\275\246\207<\213\246S\276\373:\010@K<\360>\014\225\377\274\202\220\014\276Mh\262=q\311\201>L7\231>\267]H\276B>\310\276\337\025\001\276\353\342\206>_\357>\276\357\341r\276\0371\372\274\247\3544\275!\223\254>\310$c\275\361\020\246=\364\025\224>N\320\246\274\201\263\264=\264<\317\275\206\223\264\275\261m1>#\351\344;~:\336=\215\321\372=\033\2049\274t\357\341=u\223\330=8\204B\277#\020\037?\241\370Q>\335\315\223>X\312B?\217\027\322\274\035U\r>I\273\021\275I\200\232=\365-\323>\213\246s>\335\352\331>?\343\262\276sc\372\2758g$\276\212<\311\275;\031\334\275\020z\026>\320\320?>\221\270g>\024y\202>\263$ \277\261\334\022=b\272\260\275\2613\225\276L\246\372>\364\370\335\276gDI>\350\3363?\255\3000>r\277\223\276\025r\245\274\230/\257\276\342\257!?\236\007\347>\256\323\000\277\177\333S\275\016\300\206\275S?\357\276\222@\003\275\264\345\254\276\311\002\206>\\\311N>\326\236\243;\036\026\372\276Mgg>p\266\371\276\367;4>\300\354\276\276eS\276\276!\310A>\362\260\320=\366\013\266\276eS\006?\010w\007?\227V\303>N\356\007\277\245\240\033>\216\2227\276h@}\275t{\271>e\001S\2767l\333\275\2235\232>\302\022\217>`<#\276\027\267\361?I\024\032\275v\001\n:\361.\247>\316S\375>\240l\232>\304w\262\276+\336\010>\214\326\241>1\266\200>\002\324\024>\035\035W\275\004\347l\276\353\255A>\377\312j>\224\331\340=M\025\014>\213\026\300\275\371\367\271\276\304\0076=\357U\353\275c\177\031\276<NQ>_^\000<\036\033\241>V\237\013\276\016\025c>t\007\021>k,\341<\313g9>\210\304\363\272\'MC\275\231\267\352<\0265\270>\265\372\212=g\325\237\277\333\340\244\275N\321\361\276-\322\304=\033\016\213=\345~g\276\273^\232=b\363\361\275\274\313\205\276\256\323\010\276z\307\251>w\204S\276\016\204$>\232\231\211\2763\251\241\275\302\300S\27633\023>\362\265\227>\366\227\375\276\202\213U\276\305\033Y\276\026\366\224\276\230\300\355\275\013A\256\276T\036\335\274\250\032==\250R\243\2769}\235\2750L&\276}\226g\276\002\202\031\276&\307}\276\34787\275\006\236\253\276ZG\325\275\327i$<k\267\335=0\273\347=\364P\333<\222t\315\275\032\256D\273\222\"\262\276\010\214\232\273\025oD\276\030>\222\2766\3516<\363\037\322>\314]k>;\302\211\2763\212\365\276\210\327\025>q \224>\222\"R>,\363V\275\'3^\275\221\231\213\274nt\004\273\250\343q\276\0162I>\333\026e>o,\210\275}\\\373\276qZ0\276C\255\t\276M\370%>\220\242\316;{\372\310\275\250\214\377\275ux\010\275\262\205\340>\022\022\251=\021\252\204\276\365\020\315>\022\210\247\276\3372\327\276V\2749?G\2545?\006\021i\275\010\346\270\276I:\271\273Ih\013>\030`\317>O\314\312>5)\305>\222]\251=\213\244]=\017\356\016>\203\335\360\275\313\271\324>\333\333\215=5~a\274\373yS>\r\3109\273\224\207e\2761_\236>\250\034\223\274\257`\233\275ms\303>(I\327<)\320\307=\323\237\315>\271\3072>\345~\017\277\262.n\276J{\303\276E\2364?WZ\306\274@\300\272\275\326\213\201\276\224\366&>\251M\274=\300x\326\276/\301i\275du\353\275\375Mh\276\231\323\245\276\374\030\243>]\371\234\276\305\033\331=\010t\246\2743\"\007<\371\3323>0\201;>%\005\226\275Nz\337\2757\340\363\275\360mZ\276\215\227n>\265\340\035?s\327\022>)\256\352=d\317\236<~\000\022>]m\245>\206\254.\276\374oE\276\n\272\235=C\312\317\275~R\235>e\000h\275@j\023\275E\274\225\275\r\032:\276\022\302\003?uv2\276\360\247\366\276(D\200\276\317\241\314\275\210F\367=\177\026\313=\315\001\"\276\310E\225\275JA\267>\216@\274>I\272\306=\231\365B\276e\031\242>\016\275E<\325\004\021\275\030Z]=\344\017\306\275u?\'\274\254\312\376\275\233\033\323\275\365g?\275\026\336e\275_\357~\276\036\244\207=\3479b=\023a\363?l\004\202\275\327\030t=\331`a\274I0\225\275keB\275!v\246<5\264\301=9\0133?-&\326\276\222\224\264\275D\372-\276N\227\305\274\376Cz\276Y\300\204>QN\344\276\324\202\327>\274\\d\276\303\330b>\375Mh\276\261\302\255<\260\376\237\276<\244X=\303\273<>\316\245\370\275Z\022@?\264\260\347=\225e ?,b\030\275\320\355\345\275-&\226\276\305\033\371>\320\'\362\275>\350\231>\376Gf\275\356|?\276\264\002\203\276niu\276|~\330\275\2407\225>0\233\240=\316\374\212=#\020\017>\254U\273;\337\246\037>f\367\344=\323\301\252\276\010\311\202>8\203\177\275\332\034\207=\343p\366\276\242b\034\276Ra\254\276.\305\265>6\223\017\276\363T\327\276\270\322\306\273,\267T>\261\211L<F\232\270=\354\335?>\002\361\032\276%x\303\275\031Y2=\317f\205>VfJ=\202\213\225>b\025\357\275fk\035\276C\313:\274\205\231\026>\340IK=\357\217\247>w\333E\276\223\220\310\274\313\330P=\307)\252\276\250o\371\276+\301b\276G\034\262=r\235k;\252`\224=\264\260\'\2768\334\007\275V\r\202=2\216\261\275FD\261\274\336\223\'>\030C9\276\253[\375=\276\244q\276\234PH\276j\246{\275&SE\2769\321n>\354/\333\276n\335\025?*\310O=\203\303\313\275\376\3248\276\333\026\205>|\n\200\276\345\270\263\276v2X>\366~\303\275\314E\034>v\363\236;N\356\207\276\"n\316\274\"q/\276&8\265\275;\252\232\276\270\314)\276$\234\026\276\027\016\004\274\272\275$>\342X7\276\340\201\201\274D\206\205\276\301\255\333\276E\327\205\274s\017\211\274&\307\035\275\371f\033>\234\336\205=g~\365\275\334c\271>\032\373\022\275\211\265\350\276Y\335\212>\026\300T\275]m\035\277I\242\327=\r\216\262>/i\314>\006L\000\276@\372&\275\335\263.=e\344\354\275\361\021\321\276\332\346f\276*R\201\275K\257\r\275\256+\246=W`h>,\016\007?\006\271K\275\375\241\231<L\303\360>|\355Y>\324eY\277#\236\354\274\030\t\r>\361)\200\274\343\245\273\275dX\225\276\023,\016\275C\034\233>\363\310_=j0m\276\230\027\340\275!\2602>\324\357B\275r3\334\275\305r\003\277xE\200>_A\332\275\247\313\262>\275/\323;\264\216\212\2763T\305\274\334\240\366;1\316\177\276\333PQ\276\3230\274\275\277\361\245\276\003}\002\276\356B3>\357\311\243\275\377^J\2756<\215>\242\227\201\2768\370\"\276\224\023M\276N\227\005\276B`\345\272,\314\014\273\031V\361<\350\331\314>\n\242\256\276\000o\201\274\343o;=\317\275\'\276\037\272@\276@\276\244=\362\007#\276K\315\216>\335\357\020>B`\325\276\213\302n\275JA\027\276\207j\312<\211A \276\027\202\334\2758\020r\276|\233^\276\256\326I=\001\007\243;\255/\362>F\316\342\276qZ\340\276\t\371\000\276\033\3650>L\340\026>\270\036-?\006h\273\2758g\324>\010\2176>S\221\212>\363\037\022\276:z|<\222\255\256\274W&\\>\013^\364\275a\303S\2765$n\2761\224\023\276\214\241\034>\017\321\350\2767\3759\276_\230\314>\315X4>J\226\223\272\375j\316>\202\220\014\276\032\336,<m9\327\275\332\035\222\275Cs\235\276\005\250)>\013^\364=\337O\315\275c(\'=J\233*\274?\306\334\275\027Jf=n\206\233>\370S\223>~t\252\276\226\317r>%zy>\357\033_>Y\372\220>\363\037R\2765{\340\275\322\030\355\275bg\272\276\204\323\262>\333\277\222\276\207\341\343>\223\350\300;\330\330\005\276e6\230\276\324+\325\276\251\331C\2766\254\251<\036\334\035>\357\341\202\276\256\201\215\276\'NN\276s\327\n?\311X\255\275M\272-\275\031\312I>n\233\363;\256\273\031\276\r\340\315\276`V(=\362^U\276r\247\364=\304\353\372> \357\245\276\273D5>\215\356\220\276\325\312D\276\307K7\276^\'\232\272\361\363_\274\305\346\203\276\275\0315\275uvR\276e6\230\276\033\365\030?!\352\036>\210\332\226\275~\030\001\276\037\201?\275\213\211M\276\202\312\250>\375j.>e\252\330?\274\005r>4\364O\276L\032\003>)\350\206\276h\3139\276\241\237\251<\207\371r\276}\256&?/4\207\276Q\365\213\275#g\201\276\035\003\022\276(\321R\275\323\240\250=\0363\240\276\273\362\211>Z\273\355\275\332\033\214\276\252F/\274d\257\367\275\367\3518>\303\021d={\024N>\rl\225>\313\276k>\244\215\003>x(\n>k\324\363>^\363*=E\365\326>\r\246a>\030\317\000>\253\t\222\276\214\276B=\224M\371=\335\353$\273\226>\364\276PS\373\276\352\263\243=aq\250>\375\301 >lx\332>\251\207\210>\237\253\315>N\322\234\275\305\256m\275\246D2>\310\352\326\276cfz;\345\t\304\275\352\225R>O\372\014\274[\262\212=\212\002\035\276\264v\353\276\313\023\310=(I\027>\361\272\376=\220\367\352\275\305=\326=8\236O\275X\250\265\276\354m\263=\270\314\251>\233p/\274\006d\357=\361FF>8\276\266\276\016\204\004\277\343\031\264\276\354\335\257>]3\371=U\333\r\275U\207\234=8\241\240>?\306<\276fkE\277\032\213\206\275\377\t\016\276\214\274,\275A\3245\277\361.\267>:\010:\275\300\347\267\276?t\001\276\022\207\354<\253\004\013>\355\r\236\276\264\312L=g,\272>\261\334\322=@\366\372<\205\261\205\276\304\227\t=v\211\252\276\232w\344?\232B\347>\005\206\014>\341E\257\276<\367\356>\311=]=\344\203.\277\215\234\205>QN4>\363Y\036\276\014\260\277\276LOX>\347\030p\276R\355\323=Z\360\">\210es=\220jX\274\367\257\214\276\355\273\262\276\236^\351=\2721\215\276\215\227\316\276\244\337~\276\216\314\003\276\203kn<\237\252B=e\252@\276\254\312>\276[]N=1\010\234\276\334\200\017\276r3\314>\276\367w\275\265\246\211>d]|\276H\376\200\276\340\362\030=\374\304\201<\304\316T>\302\241\267\274\323M\342=Y\027w\2761\261y\274\275\251\330\276\263\357\252\275\277H\010>\355GJ\276\000R\233\276b\363\201>\364\025\004>m\305\036>\306\205#>\340\326\235>JbI=\314@5\277\226\225F\276M2\222\276\016\307\251:\311\311\304\275\0265X\276\232\006E\275|,\035>*\251\023=\002+\307\276\001\277\306\274\031sw>\264\216\n\276\337l\263\276h\263\272\276M\003\365\272\344\024\035=\241\276\005\276c\356\032?:\317X=p>\225\275E\021\322\274\023\325\253\276\033*\326>\351&\361=\007\231\204\2765)e>j\372\214\275\322\214%\276]\212\013?\266\276(>\364O\220\276\222y\244\276F\010\257\276\360\025]<l\tY\276~\306\265>@\336k\276\255Q\277>\2240\033\277\323\330\236\275>\256\335>\224\336\227>\322\000\216>\346\\J>\257\225\020\275\312\372\215\275\3605\004\275\2176\276\2761|\204>\245\243\\\275F|\007>\300\262\222=\\U\226\276\372\n\022\276^\327\237\276s.\205\276\201Ch\276\341\264\200>\324I6;\335\230\336\275\363vD=\1770\320\276\203\372\326\276\275\251\250>\010V\265=p|\355>\361E\273=z\032p=y\036\\<\362A/\276\367\257,<pw\306>t\322\373>FA\260\275\334K\372\276>\355\020>$\264\205\276\304|9\277\257%\264\276!\003\231=\207Pe>_\355h=\233\254q>\225\237\324=\276\021\275\275\334\235\025\277L\027b=\035\311%>\361\272~\276\250\251\005>\361)\220\276kf-=\307f\007=\203G\300\273M\2362\274\256*C?xEp>^\272i\276\245g\372<\265\025[\276\263{r>\317\332->.\347\322=\200e%<\236\357g\276\201x\335\276[|\352>\000W2>\303\273\334\275\264<\217>p\261\002\276\272\207\244\275\334c\371\276\315\314\234\276,c\243\275\254\305g>_$t=\033\r\240\276n\300\247=\200\237\001?\216\006\260>\361F\266>\256\360\016>N\234\234=\216\314\343\275\333\212\035\276C\220\243\275\022\034r\273\217\215\340>ff\006?\333\334\000\277>\\R>i:;\276h\320P>\003\317=\276!\310A>\320&\247\2753\304q=\002\021\"\275\177\373\212>Y\374\306=\317\332\375>\216\006\000?%u\362>D4B\277\037.9=-\352\263=eS\336\276\313\203t=2w\005@~\035X\276\3274o>\341(\231\276n0\024=E/\023\277\251\373\220>\016\207%<wJ\027?\331\316\027\276\370\245>>w\326\256>\212\260\341=\327iD>\234\341\006>4\235\275=\260 \r\276\300[ \276c\264\256\276\034\353b=\r7\320>\255\243j\275\030!\314\276p?\300\275A\360x={g\224\275n\300G>\034\263,=\301\342\360=\037\200\324>V\237\353\275\370\237!\274\356\225y=6\037\367>\361K\275\275\253!\341>L3]=\032\372\037\277\330\201\363=\367\035C=\256d\347>$\264E>\'f\235>+5\273\276-\225\007?D\027\204>\222\256Y>\253\347\244>\027\325\202=i\214\326\275\rT\266\276\266\363\275>H\247\256\276\323\023\326>\322\306\201>\315\257\006\277\264q\264>\274\\D\276j\366 \276\351\235\312\275E\365\326><N\221>\203Q)>\277\232\003>\267{y=\241\276\365>.s\032>\367\256A=\334\235\r?\\\254H\276\357\217\267>\347\306\024?#\020/\274\027+J>\323\241\263=\007B2=E\r&>\245K\177\275V\016\235\277=\233\365>\3578-?\"q\257>\037\272\240\2769\271_>GU\023\277\373W\206>\002\331\333\276\311\253\223>v\375\262>Z\r\t>\"T)>\274\311\257=1\266p>\300\347\347\2760\r\263\276\r\337\002=\276\301\337?\206 \247=\360\371a>\036PV>\273_\305\275\372~*\276\252\202\361\276#\276\023\276\357\341\222>x\271(>nLO\276\341E\037>K\352\244\276\343\307\270\275 \322\017\276h\320\010?p|=?\2201\007\277Q1\016\276i\343H\276cc\036=\316\212h=C\347u\276\355\231E\276X\220\206>|\n\000>\377\262;\277\304_\263>\207P\345=\205\261\245\276\013A\216\276\324\324\202\276\244\210\314>[B\036>;\252\232>/\213I\276\035q\310<\215E3\276cE\r\276\262\205\000\276\343\374\355>\376\267R\276\261\277\314\275#\241\215>\260\254\264\276\202\305A\276O\257\224\276\267\227\364=\'\024\322>k}1\276\366\266\271\275u\216\001\276\353\375\206\275\023\325\373\276\034_\273><N\t?A\232\021\276=,t>p\316`\277\207\371\022\277\324\202\307>q\217E\2768\370B>5\324h=\035>\251=O\351@>?\251\006?2\346\356\276\247\256\314>a\211G\276_$\224>\241g\223\276\370S\263\276\030\317@>\345Ds?>\355\260=\001\030\377>~\214Y\276\317\021y\275]\031T=I\016\330\274+\3038\275\017\356\216>\261m1>^.\242\276rP\">\367\307;>2Up=\374\253\307\274 \234\217=o\022\303>Tom\276\213T0?\325\312\264\276\2721\035>*\251\323\2751\266\020\276\253!1\276~W\264>B\225R?\336v!>\270#\014\277^\242z\276\303\236\246\276\343\030\311=F\321\303\275R,\367\275\255\027\243>&S%\276Gr\031\276\262\2045<\317N\006\276\227XY=\311\221\216\275\321\005\245\276V\361f>\231\rr>\225e\010>\331%j=\343ko>\370Q\215\274\376d\214\275\216@\374=>\\\032?\032\213f=\307.\221\276\304w\362>I\205q\276`\352\207>\211{\254\276~\214\231\276\353\377\014\277\316\245\250\276\204\016:<V\232\244\276t\352*\276\367Y%=\243\001\\>\177\2036=\362^\365=\362^u=\023D\215>p\353\016>\270\\\275\275W\267\325\273\325&\376\276p%\033\276\227\0347\276\232\010\023\277b\370\250>\247\353I= ^7\276w-A\276-\006\257\275\355\231E>\375\366\245>\321\221\254>&S\305\276\353\213$?\242\264\027\276\335\014O\277\036\304\016>t\322\213>\030x\336\276\310\315\020\277\316\307\025>K\310\'\276\0049(\275X\342\301=R\'\220\276\022N+\276\332\341/\276k\324#>\024\236\006\274\260r0?\231\323%?\343\337\267\276\2073\257\276\'\335\226<7O-?\250\343\261\276\222\313\177>\373\256\270>\355D\251=mVE?\233U_\276>\263\204>\267{9<I\200Z\275\352\262\230\276\342\2571\277;\340\272<]m\005>|\017\327\275\225\016\326\275\247t\240\276Y\027\027\276\321\256\002\276\036\214\330\274w\020;\276\367\002\263\275Y\027\227\276\375\202\315\276\311qg\276aT\212?\217pz\276\020X\371\275>\263\224\276?W#?W\225\335\276P\374x\276\363\035|<\360\334+?\342Y\302\275\202\213\005?Z\366\204\275\025\221\261\276A\364\204=\226\004\350\275\211\007\004\277\0260\301\276\314]\013\277\230i{\276\232\316.\276\016\370|>\325\351\300=\365L\217=\201\317\337\276\264\223A\276V\202-?&\345n=\346\256\365>z\215\335=9\227\"\276\010Z\241\276~W\024?\201\354U>\000\311\264=\\7g:\205\353Q>B\353a\275czB\276b\326k>\264\037\251\274\266\363}>ZG5>\327Q\005?\250\214\217\276*:r>\323\300\017\275:\036\223\276\\\217\222>\361\235\270>_\265\202>\314\177\250\276C\347\245\276\255/R\276p\224\334\276\337\246?=0\273G\276p%\213\276\317\244\315<\202\220\354\275\343p\366>\356_\231\276q\033m>\'\022\214\275\367\314\222>\205\'\364\274,\237E>:\006\364\276\344\240d>\322\2150\274\244\245\222\276w\363t>\352[\346>.\034H>\256\362\244=Y\300\004\276\013^T\2761_\006\2770\330\315\275\362\231l\274X\002i=`\352G?\242\'%=\375\202\355>_^\320\276R\'\010?[_$\276m9\327=9\326e>\014\345\204\2765%\331<p%{\276\352A\241=\177j\\\276\354\240\022\275~t\352=0\275\375\274\224\207\001@D\335\017\277bJ$\275\245I)>\345\323c=\032\335\031\277\220\367R\277\342\344\256>\347R\254\276r\302\204\275m\347;>z\252\303\276-\177\031\274\024\005\032>\302\335\331=lC\005\276w-\031?\350\207\261>\026\023\253\276\206\217\350>-&6\277\271\252,>]3\211>\370\374\030\277\214\201\225=.\034\310\276\0265 \277\323\023\226>\253\354\333\276d\036Y\276\366\0136\276\316\210\262>/P\322\274\026j\035?\265\031\'\274E\201\256\276\364\375\224>\242\r\300\274\272\335K=\036P\006\277\233\346\275>33\023\276\370p\t>1\316/\277\274\221Y\276e\302\337>\334J/\275\360P\224\275\361\021\261\275\n\205(>\313\234\256>I\364r>\256\236\023\276\347\2516\277\200\016s\276\321\221,?\027\267\021\276\306\212\272\275\267EY\276\263^\354\276\006L\000\276 F ?\305\217q>\021\303N\275\001\207\320\2759^\201<E\273j\276\023D=\276\244\252\t\277\373\005\033?\325\262\025\2769\325Z\275\252}\032>\005\206\354>\236\320+\275%\313\311<\036\334\235<\254\250!\276\220\275>>z\307\231>\344N\351\275@0\327>\352!\332=Q\367\001\275\235F\332\276\215\322\305\2757\3434=\022\366-\275k\362\264\275\346?$\276\207\341\003>rM\201=\362\260 ?\275\343\224=\036\371\243>+\3038<\330\330%\276H\277=\276\216uq>\243@\217\276\345\n\277\2766\001\306\275$Ed\276\262..\275$bj\276\323\r9\273\261\3718\276\356\316\032\276\322:*\276\202\255\322=%X\254\276}\224\221\274\210/\223<\007\231\244\276\356\316\272>\311\253\363=\377\225u>\\\036\253=@\3662?\256\314%;\351\324\205>8\272\252=\0221\365>y\001\006?t\357\341\275b\326\373\276\034|A>\262K\244\276\036\212\002\276$\227\217\276\274\005\202\276\271\252\254\276n\213\022\276sh\021\277y@\331\275\n\021\000?\225}\247\276W!\305>p\353.>\365\326@\276!\352\006\277.\037\311=\244r\023\275\235\021E>\366\227=\276\256\r5\276\3578\225>\236\265+\277\\8p>\316\305\237\275\320\263\311>b\333\242>v\375\262\276\322\306Q>;\337\317=\3606/\275\276je>#J;\275i\035\265>T\343\005\277\204\0226\277,+\255>\266\271\361>\201\t\\=\364\031\220=M2\202\276\016\025\003\276s\364\000\277\243\351\314\276\271\211\332\274\326V\014\276C\251\275<\037\272\010\277\244\252I\276!Y\020?F^V=:O\206\272\236)\204>3\376]>\217\027R\274\247y\347\276O\222\276>\362\3573\276JFN>\351M \274\317\367\203\276d;_\276RI\035\276\214\022t\274tF\264\275\025\214\252\276\231\022i\276JFN\276iR\332\276\373\350\224>\014\007\"\276\337l\013?\352\317\376\276E,\"=\261\277\014\276g{t\275Q\221\371;\200\234\260\274\343\210u>\330\201#@^\275\252\2756\002\301\276\2201\027>{k\300\275\342\224\271\275sc\n\277\212\3100\2765F\253\276\352\312\'>\201\321\345\274F\261<\276\275\035!?l!\010\2761_.\277F\010\017\276\250R\303>k\322\255\275\210\200c>m\305\276=\363v\244\276\305\311\215>\r\211\213\276\203/,>\236\265\333=\2505m>\351\232I?Y\333\224\274\344\024\335\2758\025\351\275\214\326\001\277\217\215\260>2\003\265\275\242b\214>\237<\214=\016bJ:+\023&\277\325\005\274<\350\266i;\275Rv>\255i\336=\272\275\324>V\232\244\276DQ\240\274HP\314>\277CQ>827\277\271\302[\276\351`\035>A+\360\276\022\240\326\276X\250\025>HOQ\275\360\247\226>\2073\377=\355\365\256>\330\360$\277\301\250\004>\204*\225\276\031\001\225\275AH\226>\335\315\323\275\006\365-\276\311q\347=~o3?\331=\211\277/n#>O\006\247=\241\204Y\276\373\"\001>=F\371\274\370pI>\177M\346\276\027\232\273\276\361\327D>V\202\005\277\231\r\222\276\006\022\234\277\343\245\033\277\276fy=\376\267\202\276\005\250)?Y\300\224\276l\t\371\2763\376\275=\274\2260\276\232\316\016\277N\356W\277\246\017\235\276f\240\022>0\236\301=D\243\373=qU\371>\n.\266\276\322\251\353=\016\363\245\276\357\311\203?\026\024\006=\2034\003>\377\262\373>\267\013M>3\376\375=1[2\274)\355M\275\321\226\223>\347\000A\276sc\272\276\375\207\344>2\311\310\276\014\315u>j0\275>\254\255\210\276[\320\373\274\245I\271>\316p\223>(\325\256>\234\304\000?_^@=:]\266\276-\t@\277`\315\201\276\372\233\360\276\033d\242>x\013\034?\340\241H\276|\n(\277\031<\314\274\271\360\315\273g\363x\275A\324\315\276\250\000\020?R,\'?\375\274\311\276y@\331\2768&\325;;\345\321<?\221\267>\035=\036>\017\271\371>\351I\364\273\216[\254\275.9.\276\363v\\\277B&\031\276\314\227w>\306\336\213\275]\026\203>\313M\264=\305\376\022?\261\244\274\275\345\325)\277\313\333A\277\326\306X\274\344\275\n>\214\203\213=\005\335.\277\014\257\244<:\222\013>\314\321\243>\332r\276>\232\261\250\276\2505-\277p\261\362\276\331\316\027>\004\220\372\276\241\241\037\276\224\023M\276\257%\004?\257\261\253>=\'=\276\311<\262>\267\321\260>\377\225U\276\257\3537>\006d?\277\204\330\t\277\020\006\376>\235\200&\276TW>=\035\344u\274\312\032\365\275>\"f>\360\304\214>\255\276\232=\246\321d=\263)\327=\023d\004=F\353X?A\232!?S\313\326\2752\344\270=~5\367\276\372\355\233\276r\371\017\276\212\260\341\276\264\323E\273\3758\365\273\346\221\377=\254\250\201> \232\271\275<\366\263\274\332\341w\277\330G\267\276&p+\276\211^\026?\315\314D?Q\024\330>k+\006?Y\300$\277\363\002\334\276\365\240\200=\252+W\277\331wM?\213\303\031\276@\030x?\273\'O\276\325!\017\277N(\204\276\307c\226\276\343\252R\276\3171\000\276@0G>(\n\004\277\265m\030\275\223\214|\276\231\363\254=\241f\010=\203\372\006\277\371\367y\276\202\213\265>\020u\177>4h ?,\274\013\276\335^\022>8\276v>4\021\206>l\354\322\275U0\n?\000\256\244\276\303\3601\276\235.\003?B>\350\274\305\346\003\276\275RV>7\307\231\275\321\350\016\276\210\364#\277\247\"\025=\210\205\352>\373W\326\276\211$\312\276w\204\033?\370l\035=\007\355U=\005\206\274>\273D\025\276\303\330\032\277\347\000\321\276\033\273\014\277\3058??\261mQ>\277C\321=\301\220\325\275\314z\021?\373\005\273\275Qf\013\277M\204M\276Y\372p\276\334.\204\276\275\306\006?C\004\\\276\177j\354\276\256-|=\'N\356>\003\317M?|\355\351\276\263{\322\276\016-2>p]\221=\354\024\213=\'\245\030?\351\357\245\275\334\364g=\350\237\200>s\327\322\276\0221\365\276G\217_>dt@\275B`\325>\005\300\250\276\204\201\227>D\213l>\312\375\006\277(,\221\276\313\0161\275 \3575\276F\353(?\330\360T\276CV\027\276|\325\022\277\0358o\277\323j0?e\307\006\2768\020\022=\360\304\354\275\313gQ?.s\232\276\375\023\034\276\341z\334\277\313\234n\276\036`\367;\177\211\270\275\225\202\336>\033\201\330\276\355\323\021\276\324`\212\276~\030a>\325u\250<->\205>E\365\026\276\216\001\021?4.\004?\360m\352>\224\336\347\276#\276\303>\257B\312\276\261\277\\?\212\253\332\276E\r\246\276]m\305>\215\013\307\276\034%/>\022\245\275>\346\313\213\276\2201\367\275\277H\250>/Q\375\276\230\246\210\275\362A\217\275NEj>\031\347\337\276\366\321\021\277\346\350\361\276\223\214|\276\320\327\207;w\202\275\275\237Xg\275\020wu<\371,\007\277\'Nf?\004\222p=l\317\214\276K\0024?q\254\373\276\242\264\227\276\370\252-\277\242\264\347\276cb\013?\373\\\215>5{\000?6\345R?\364\246\202>\264\001X\275\030&\203\277\313\204?\276|\n\030\277od>\276\225H\362\276\302L\253\276a\246\355<\266\276@\277\262K\244\276\210\235\001?\337p\237<\235c\320>\220\240\270>)\226{?\353\255\221\276U\301\010?+\207\346\276M\241\303\276\322\361\342\273$\177\320\276+K4=\315\312\226\275+\277L=*t\276\276n\243\241\276]\305\202\2753\212\305>#\370\177\276:\224!=\2279}>\020\257\333\276\360Pt\277\341(\311\276\331=\221\277\304\224\000?\020\347a\274/\2438>\2034\003\276\342\351\035\277\346tq?\370\374\260\276\320D8>io\200\276\300!4?\344\207\252=\035\224\300>\256*\033?\217\252\226\276\247\"u>!Y\000\276\3603\016?\321\256\322\276(\232\007\275B\t3>\245k\006>\266Jp>\010\217\306\276\261\247\315>\'\367\003\277\201\317\377>m\305\376>b\363\301>\2034;\277\371\025\253=\242\264\347\276\351\361\233\276\217\336\360\274\000\344D\275f\332v?;S\010>\237\003\253\275g4(\273\026N\222=5\n\251\275\031\307\310\274\237\253\205\277\316\031\221\277\300\351\275\275\334-\251\275\331\224+>\207\304\275\276\321\005u\276]\376\303\276&\307\035>q\254+\276\361)\200\276\351&\231\277\313J\323=ni\305>\273a\013\277\033*\306\276\216\314\013\277N\227-?k-\014=t\230\237>l\257\005\274NFU\275Z\330\243\276\237\034E=\222\2630?\217\031\310=\311Y\350\276C\305\250>\205\355\247\274\252e+\2761\\\235\274\221Dg\277\225\267\343\276\365\020\255\276\261\242\246\276tA\255\276Z/v\277\233\311\247>\321T\364\273:X\027?\310\315\020>\216\001\211>\352\317N\277\260=\343\276\375\371\266\275l\317L\276\n\334\372>\372\355\213\276\037\200\324\276\204\3309>\257@t<\004\347\204\277y\222\324\276\346>9=G\254-?\002\234^<\325\t\270\276e\374\013\277p_\327>G=\204=\206\223t=\351\324U>b\300\222<\370\337\252>u\310\315\275\323\205\330\274\243#\231>\321W\020>\302Q\362\276Ic\244\276UjV\276X\275\r<\314];?\240T\273\276\342#:\277\022\024\337>\343\032\277=G\004\243=\"Q\310\275\253[\r\277v\375\362>Y4]?\225}\307\276J\321\n=\256*\373\276?ta>\370\245n\277h\\\230\276\371\024\030\2775$6\277\031\305\362=c\265\231=\353n~>\025W\325\275\247\313\302>\240\030Y=D\335\007\277M\204\255\276\346\">?+5\033?\351C\227>\326\213\221>?R\004?\324\324\022\277~\343\253\276\236\014n\276\241\020\201\276\3141\017<\232%y\277z\344\277>K\345\275\276\347\035\247\276\016\370\004\277\326n\353>g\017\324\276r\212\016>\356w\250\276i\035\205>_\355\210\275\005\213C\277\220\275\036\276tad=\267\017T\273\325\225\277>\006\236\213\276\354L\001\276\267\356N?t^\003\277%\257N\276+k[=vq\333\275\277}\215?\360\247&\276\310\315\220\276od\336\275\267b7\277\335{\270><k\227\276/\027\001?$\321;\277f\302m\272\261\3043\277\225}7>\313-->o*B\277\003D\301=\276\237B\277\313g\031\276\315X\364\275\315\\\240=G:\203\275\301\034\315\276:X\027?\364l\026>\314\177\230\276\276\237\332\275\177\366\263\276\017&\305=\215\n\274=MN\255\275\262\235O>!\256\234<\272k\371?\245,\233\277\201\354u\276s.E\275\304\353:\276\261\371 \277\206\033\300>\247\"\r\277\021\337\251>f\372%\275\r\340\r?(~\254=\023\233\277>\334\272\333\275\204\r\027\2770L\366\276\202\215\313\275q=*>\317f\245>\257Bj\276|\230\275=&\252\307>\267(\023\276AH\326\275\373\\\335>vl\244\276\230L\005?\n\326\270\274\350\237\240\276\343\245\273=\245\024\004\277<\024E>v\031\376\274\307\200\334>\231\201J>w\201\022=/\333N\275\244p\335>\363\223j\276\016\204$\276\221, \276\257A\337\274\0358\207>\036\334}\276;:\256=C\342\256>\036\030\300\275g\362-\276?6\311\274y\257z>\277\202\224>\347:\r\276\tm\031\276\2029\332\276\004sT>\017\177\215>\033\201\370\276\n\0218?\347\035\267>t\232\005\275\243\225\273\275\305\217\301>\243X\016>4H\001\275&\252\207>u\310\335\276\220IF\275\235\345\303;7\340\203\276\265\025\233\2761\'\310\275Q\332{\276\327Q\025>!W\212=*:\342>G8m>\251\373p?\230\335\253\277\233\217C?I\205\361\275\2721}>:\006\004?\272f\222>\277}\275>E\360\037\277\261P\023?\205\\\251<t\230\007\277\370\031\027?\274\"\270\275\216;\305>\243\310\232=\356w\350>7\211a\276\326\250\247\275$\271\214\276\315\314\264?\310\322\247\2751\224\263\275\367;4>\356\352\265=`\037\035>9\321\356\275>\"\346\276H\376@>x\n\271\2744\277\212>\204\365\317\276kf\215\275lC%\276\272\0247\276\002\274\005\276*\343\277>h\256\263=m\220i>\351C7\2770\360\334=;\344\226>\335$\006>>\"\226\276W\t\026\277\033J\355;\276\365\006<\351\324\205>F\010\377>\020\257+\276\326\305=\277HP\374\275\351}#\275_\357\336\276\301\255;\276\365\271\302?$\177\000\277\310_\332<\377[\211\276_z\273\275\273a\233\276\306\334\325>\225\016\346>\312\244\006\275\364\302\035=\376` >\272\203\330\275>\350\031\277|\233\036\276M\025L\275M\276\351\276\202\215k\274\305 0\276\307\203\255\275X9\364=\333\212]\276\300\t\265>\350\207\361\276\3328\002\277\005\305\337\2761\n\002\275\204\360(>=\233\325=\363\216\363\276\373\"\341=\227\213\030>\214\276:\277\206 \207\276\031\305R\277\363T\227>\375\274\311\276\271\252$?n\372\023>\325yT=G\311\333\276`\315\001?\316\302\036\276\rl\305>]\341\005\277+\023>\277\223\306\010>\327\335\354\276\200`\216=+\371\030\275\317I\317\276\366(<>\357\033?>\276j\205\276\321\004\212\272l!\210\276\023\270\325\276,H\323>>\350\211>\225\324i\276\030{o=m\252n\2745\357X\276\307\364\204>]\026\363>9\177\343>9cX=3\247\023?O;\274\276a\211\207\276\251\366\t>f\274\215\275z\374\276>\225\202N>\322\377\222=\247y\267>\221\030\363\273j\331:>\370\210X\276\202\213\305>\367u\220>W&\034\276\333P\241>\237\216\'\277\002\232\000?\304_\033\277\005\335\236\276\001\301\234\274)?\251>\020t4\275\346\313\313\276B`\005>\272\240~\276\337\371\305\274\'\024\">\364\370=\276L\340\326\275\025od>\256\273\271\276\010=\373\276\027\022\220\275\2402\376\275\207P\005\276^\242\032\276\260\311\332>\324\232&?\214g\320\276\020\222e>\351\267\037\277o\017\002\275o\3306>iW!\276\274\313E>\202V@>;\302\211>\312\0274=\275\337\210\275\022|\035<1\2619>\366\321\311\275\326\035\213\274#g\341\275\365\241;?M\276\371\276\347\343\332>\227s\t>\032nP\277\220\332\344\276\326\002;\275_{V?\205\316+=\013\265\026?q8\243\276\027b5=\306\334u>\345\230\314\275\335\322\232>\247\350\270>[\323\234\277\317I/>\265\375k\276\001M\244>\212\220:\274\022\210\227=\323\237\375=\033G\014\276\373?\307>\226[Z>\256\323\210=o\r\014\276\316S=>M\025\354\276\177\274\247>\217S\004\277\022\210\017\277\263\014Q\276\337\340\013\276j\274\224\276\367\344)\277\244\210\261;a\342\217=q\217\365\276\255Q\357>\373=1=%\257\376\276#\025\006>\265\3410\275p\266y=\306\026\202>\216#\346\276\344\203\346?<\210U\277q\311\261\276\307c\246\276\231bN\275o\022C>(\270X\2755)E\276\023\362\201?\243\311\305\275\225e(?\245/\304\275g\n=?\351et\2760\273\207>\0260\301\276\376\324X>\270;\253>{\203O>g\017\364\276\222\256y\276\t8\204>\271\031\006?\3328\202\2766\002\261=\221\n#\275m\377j\276\333\205\016?@\331\244\276\226\225\306>\263A\366\276\2240\223>\365\204\245\276?5^>b\334\215<\313\017\334<\332 3\276\027\202\274\276g,\032\277\216X\253\276\246a\270\2760e\340\274\004\2220<\376\232\034\277\217p\212\276\000\000\340\276\n\242\256\276\370\246\211\275\017\321\350\275\372~\232>!\260\022\276\020\006\376\27633\243\276\224\373\335\275{\203o\276wJ\'\276\344\334\246=L\034\371\274\013)\'?\250\214?\276^\237\231=\341E\217\276\310\231f=\314\227\367\276\237w\303=\2719\225\273\306m\324>%]\303\276\353S\216<\232\005\032=\323\244\204>\032\372\267>nQ\346\275\207\334\234\276\031\347\237\276\253\t\032\277\211\007\324\276\317f\255\277\226\317\n?\356%\235>\246a ?\215`\203=\254\003\240\275\025\214J\276\275\035\201>\234mn>qF\003<\036\027U=\377[A\277\245\367M?I\364\202>2\346\236>\207P\365>\241\326\344>\244\215\223\276\023\360\253=\337\025a>R\017\021\277O\036\246\276\237\223\256>\010 \025?\204\240\243\275H\305\277\275H\376\000\276\222t\215><\210\335\275\343\031\264>&\001j\276\351\016B\276\232B\347=\270#l\277(\'\"\277\026\366D?:XO?\2068\326\276\003&\300\276\331$\277\274\006\365\r>x(\312\276->\345>X\305;>\207\277f>3\212\365>\215]\322>\242zk\276,H\363\276\227\213@\277Z\r\271\276R\325\244\2762\311P\277\005\300X\276>\320\212\276\254\220\"\277M\020\205>+\207\246\276\2201\007\277s\276\030=\336<U>\364\303(>\001\301\\\276#\2052<.\2561\275Z\365\201?\372~b?F\353\210>H\376 \276n\300\247\276\005\025U\275;\215<?\310\357\r>*\3069>\r\246\001?\217\344\022>\262\021\000\2773m7?\274\"@\277\232\316\006?\nK\014?\033G\254\276\205\266\214>\375\331\317\275\371\203\201\276\213\214\216=X\305C\277\240\340\342=#\3638\277\210\200c\276\310\265\221>\271\245\325>\314\321\243>\350\207\241\276x\317\201<\243\222\312>\261\247\235<\306\334-\277\263\014\241>m\312\305\276N\265\226<\376`\360\276T\000\374>\254\304\274<8\241\200>\201\262\351\276\301\034\355>\301\312a\276:#\352\276\365\326\030\277%\314\264>\205\263[\275\367\"Z\275\2446I\277\245k\246>W\262C?\257\231\034\276\345\n\317>\031s\217?\314@\005\277\273Ha\275\361c\004\277:]\036?keb>\336T\004\276\005\243\202\277\327L\376\275czj\277\233\346\035>W[1=\362z\220=\"\246\244>\020z>\277\252\177\220=\234\026\314\276X\034n>Qf\343>\347\030\000\277<\210\375\276\313\204\237\276\241g\203>\271\210\317>\200~\337\274\027O\030<\"\211\336=+\366\'?\260\035\214\275\371\332\223\276\021\252\344\276?:u>\350\336\203>\357\311C>a7\004?\376_\265=\351\361\253\276<o\276;\366\177N>\357\341R\276\356v==\217\337\333\275\336TD\276p\261\222\276\177j\354\276\266\021\257=\274[\331<\374\336\206>7\211\001=\314\177\010?\017\264B\275\335\007\220>\202W\313\275\034B\265>aO\273\274\213\340\377=\365\363\226>r\334\371>\007\360&\277\231*x?{N\372\275\034\010)\277\367u\220\2764h\010?\307\272\330>\027G\205=\311Y\210>\336\253\266>\364\025\224>\205%>>vq#?$\264\345>\251\373 >y;\002?\342\006\314>L\032\323>U\331\307\276J\265\017\276\352>\020?\353\220\033?\223\254\003\275\014X2=R,\347\276\253[]>1\230\277\275\230L\205\276Y\300\004\277\327/H?%\314\204>\362$\211\276\245kF\276T\214\203>\360\247\246\276\336\223g>O\353\226=h\320\340>\274\226\220\276\273B\277\275\001\244&?\317\024z\276\313\234.\277\334\272\033>\321\256b\276N($?\357\311\223\276\330G\227\276\331\224\003\277\226\262L\276\274y\272\276`\223\365\275\341\321f>\277\361\245>\007%\274>!\315\230\276\342\222C>\366(\004?\335Al>1Bx\276\274\005\202\276\324\232\206\276\255\243\352=\315\003\230=\217\215h?\263\006/=\206\311\024=\322\373\006\276\202\250\333>\361K\r\277\227\341\277\275\013$H\276\223\217\275=\227\254\212\275\014\007\302>\204\236M>p\261\002\276\310\007\315\276{\275\273>\224j\337=\022N\273\276m\347;>`\260[>%zY>O;\234\276\360\277\005\277\346\313\013>\277\016\314>\222\256\311>\004!\351>fNW>1\263\257=\303\360\321\275Y\2423<\340\234\241>\3642\272\276\222\\>\276\252+\'\277\273%\231=\353V\257=\202\312\230>D\302\267=6v\311\276\265\340\205>al\t?\272-\221;Z~\300\275e\001\263>\376\267R\276P\215\247\276\311\037,\276\231*\330\276\215\317\204=\001\244.\277\345\367\221\273\212Y\217>\241\276\005\276\315\257F\276B{5=g`\304=\300[\200\276[\316\225>w\326n>\350\021\303\275\320\234u\275\303\360\241>$\320\340\274\314\013\320>W>\333>k\361q\277+\301\242\276\\\257\211\275\305 \200>\311\223\\?\024\\,>\255\027\203>\322\035\004\277\307\235\322\273\304_\023\2774\242\204>\2201w\276\227V\263>j\331\032>\355d8\277\374\306w>\335\265D\276\216\262Y\273\236\352\340\276\354\335\037\276\033/\035?7\305c=\340\333\204\2761BX\276\246\n\006>\'1H\276O\2574\277M\025,\2768\204\032\277\226\t\257>Ic\364>\346\"\036\276n\372\243>!vF\276\215\321Z\277\326\250\247\276\274\221\001?\025\343\354\276H\212(\276\002\202\031>\260\254\224\275\353s\245>\234\304\340>}\221\320\276\206\346:>\207\247\227>\221\'\331\276DQ\030?#\203\034\275;Sh?\250\035>>\317\024\272>q\217\205>lx\372\2756\260\325\276\326\034\240\275\256bq=\354/{>GU\023\276!\223\214>m\252n\2756!\255=\010=\013\277\366\013\366=\354\022\005\277\214\025\245>^\236\256=\356\353\000\275f11\276\274\"8>\272\300e=(\014\312=\226\225\006\276\177\204\201=v\032)=e\245\021\277\275o\374=-`b\276>\\\022>\311\260\022\277\252eK>\277+\242>b\020\210\276\2238\253\274<\240,\276\030&\033?\023\n1\276\003P\326\273\2608\034\276\200`\236\276`\223\365\275Q\240\017?\373:\260>:\006L\277R\355\203\276\325!\267=1\323\226\276\014\260o>ZK\241\275<\210\235>\261\026\317\276\341\0133\276F\315W\275E\030\032\273\353\305 ?*\035\254>\273D\205>!\310!>@\374|=\312O\022?\001\244\016\277\307.q>wJ/?\032\213\266\276\246\325\260>N\177\226\2763\212%\276\3544\242\276T\341\257=\207\341\003\276\201x\375>d]\014\277\206\2152\275r\341@>YL\024\277\270\344\270\276\320a\276\275\267z\336>3\304!\277.VD?\332\033\224\277\273\ni\276\245f\257>\235\201\021\275\026\372\300\275\351\016\342>\276\336\035\276\267(S\276\216\257}\276\316\245\210>\346\226v>\260T\227\275\221\270\007>\232\n\261\275\220\210q?\376}&\276\3578\325\276\320\'\222\275\206\217h>^cW\276{\024N>\017\227\034\276Y\027w\276\230\354\351\272\334K:\276B\006\262=E\017\274\275\375\202}>\232\353\264>c\'<\274!\352^>3P\031\276\177\373\n?/\300\376\275\026\336\245>\001\3661\276\241\241\377\275\201\354u\276r\247T>\2033\270=6\310D>\316\214\276\275p\231\223=\336\260-\276U\022\331\274J{\243>\320\233\032?Hm\202>\317\203\373\275$\271\034\276hy~>\276\237\022\277\3436Z\277\327\026\236\2749\326\245>\0363\340\276\332rN>\233Z\026\276!\037\024?\374\251Q\276\266\020\304\276\330\r[\276K\352\214?\341\265\253\275v8:\274$\271\354\276\322\373\006\276\274wT;\271\252\014\276\252\232@\276\372\177U\275\221Do\276\274\221\251\276g|\337\2744\236\010=\231\330\034\276E\3656\276\355\3308\277 ^\027\275F_\261>\270#\314\276[_\264>\225\361o>0\r\033?n\243\001\276\316\031\301>\371\024\220>\013\322,\276\311v\006@JF\236\276\364m\201\275K?a\274\250\251\325\276m\347\313\276\376H\241\276\206\3774\275m9\037?\035\311}?\216\336\272;,\361\240>s\242\215>h!\201<\311\260\212>\331\231\262\276\353\342&\277\266\276\210>\303f\300=c(g>2\216\021\273\027\232\003?\240\025\350\276\3745y>\220\332\244\276\311q\037\277y\314\000>\214\271\353>k\232?\277\371\300\256\2753o\025\275\317\024\032>\010=;\276\210\272\317>\210H\215\275%z\021\277\275\373\263\276\254\377s>9\264\270>%]\363>\266\206\322\274\032\335A\276\264\223!>\304%\'>\004s\364\275<\2752?\017\227d\277\033\274o=\212\310\260>\364\370]>X\255,>\302\300\363=\262\327{\276o/\331\276\254\250\t?\236^\371>\231*\350\276\352!Z>YL\354\275\330\r;\276ZG\205>\247t\200>\373\005\033\276p\264\303=\371\367\211>\377\tN\276\370\2525\277\337\211Y\277\022\300,:k}\241>\253&\350\276L\032\203>\006*\323>\343S@>\215\013G\275G \256>\020;\023>[B\226\277R\232\r\275\001\301\334=\264\037\351=\300\261\'=\345aA>\303\021\304=\016\236\t\275+0d>\226\225\346=rj\247\275\352\007u=\017C\253<\r\340\255=\375\301\260\276\212\253\n\276\240O$\277\200b\204=\352[\306>\200\267\210?\372a\004>\231~I=\376\230\326<\320D\210>\362\357\203>\021\215>\277\020=\211\275|\270\324>h\005\246>\361\235@\277\367\307\033>\r\214|\2759EG\276p\261B>\370\252\225\276f\0225=\325!\017?\361h\263\276\2343\222\276ep\264>\317\241\014\275\233\217K>\215]\342\276\377#\023=[\010\302\276\035\312\020=\206U\014\277\215F>=l&\027?5\322\342>\265l\215\276\021\031\346\276\325!\027\276\010r\360>\2446\201>\307\200\254>w\204\303\276\310\014\344>it\207\276e\001\363>8g\204\276\030\354\226>\346\256E>\247\256\374=\277C\221>n\303\250=\336,\024\274\273\017\340\276<\210\035\275Kv\024?\"q\007?\342u]\276h\221\275>r\277C\276!\007=?\314\177@?\304\224\310>\276j%?\003\225\261>\327i\364>|\362\020\277\225\364\260\274\327L^>\274\005\022\276=}\244=\020\222\265>\266\370,\277\373\0014;\371,/>%\222\210\276\000\376\211\275\250\214_\277h\260\311=0\201\273>O\351\340=c\356\252\276\033\201\350\276\204\330\031>\206U\354>\3372G\277\22403>e\344\214=\343\374\035?\200\202\233>\305\033\231>\\\254\230>s\205\327\2763\033\224>\231\330\024\277\206\033\010\277J}\031\275\031Vq>J\321\312<\267E!?\320\322\265\275\365\020\025?\255L\370>\rq\034?\002\201\016\275\261\212\307\276\355-\345\274Z*\027?=\270\003\277\005i\346>\242\013\232\276:;\031=9\1773\276\266\3704\276\275q\262\275\250:\304>\240O\344>\244\302\210>j\210\312=5FK>\331w\325\276b\204p\2766<%?\373\345\023\275\324t\007\274\372\357\301=\266g6>s\200\030?\177\336\024>\335A\014?\257>^\275B`\345\275\274Wm=P\337\202>Nz\177\276Q\333\206={i\212<\024u\306=\033*\246\276\350/4\275\021\307:\274db);3\341\307\276\266\020\344\276\002\331k\276\237<\254\276\255L\210>8J>>\000\3439\277M\276\311>?\306\334>\032\335\201\276Sy{>\257\353\027>\024\"`\276\026M\'?\350\023\271\276\t3\275\276Y\372\010?\327\300V\275\024\\\214\276&\001\272>\263\321y\275\223\030\004\276\352>\200>\037h\265\276\037\200\004\277b\2416\276(\233R\277\032\333+={\332\t\277\374\251q\276}\\\033\276\265\377\201<\306\247 ?\232\"\300<5c\021\276\002H\035?\353s\035?\257\316\221>\026Mg\276\256\201\r\276\276\366$?\250\030\267>\260\033\026?%#\327\276\237YR\276\333P\341>\227VC>0*\001?y\257z>u;{\275\206r\002\276_\357>\276\352\320\311=B\354T?W\317\371>\304_\303\276\313\276\233>\217S$?\333\3348\276\267zV?\322:\022?\031\305\202>\351\201O\275\257B\312\276qU\231>cF\370<\235\235L\276\346\256\235\27733\303>[\231p\276n4\250?Gw\320=\370\031\227>\222t\r\276*\221L?\2068\276?\363\002\374\276 \2651?\371\275m>\276\301\207?R\325D>\342\006\374=\3745y>\223\030\244\276\327\300\266\275\210\326\n=\031\220M\277\362A\217>\310{\265\276\3537\223<G\311k\276\177\366\013\277\233U\337=D4\372\275\300&\013>\336Y;?\254\220r>\355Gj\276v\340\014\277h\226\264>\024\355:?\025oD>82\017\276\013{\312\276\t\371 >\2554\351\275QN\014\277j0=?\"\211\336\275\230\300\255>\240\303\214>B\tS>\255n\365\275y\001v\276\002e\303\276\217\215@\277\'Nn\2767\000[\275\370\0317\276\217\337;?H\026\360\275\362{[>#\276S>\330\273\237>\216\351\231\276\336Y+?\341@H>+\3311\274M\025\224?B\225Z\276I.\337\276f\367\304\276)\\\377\276M\2769>\363\310\357>RD\306\276\210Fw\276\230\030\253=\354Q \277V\016\355\275C\347\225\275\340\020J\277\203\335\360>,\324\352\276\331w\245\276\315\344S\277\351C\207\276\374\374w=@\336\033\277\263\265~>\264\345,\277\272\331\237\275\\\346\264\276\004s\364<\344\332\220>Bx4\276cE\235\276\3166\267\275;\303T\274\020\222\005\277A\202\362\276\021\344P?J\322\245>\352\004\204\277T\345\233\275(\270\030\277@\023\311?Y4\335\276X9T\276\260\346`>\213Q\227\275\201>Q>?6\211\275)\355\005\277h?\262\276\372\355+=S\313\326=\035\254\217>\024\2572<\205\230\013\275\262\021(\277\227\034\367>\376HA?%]s>\367\001\270>+\3667\276d\313\362\273\377\257\272=\267\227T>\351+\330>\014\260\377>K\002<?\204I\261\275\225e\240\277\357\254\005?\340\333\014?\313\326Z>s\2724?\360\026`?\265\0322>\221\320V\276\023,N\276{\237j=\306\247`>\255L\370>y\260\305\275.s\212\276w\241\021\277\321\221\\\277@\027\r=\2404T<\377[\t>|\233\276>y\3140\277\'PD\2748\241H?\361c\374>\352\004\214\277\252+\377\276\253\262\017?\315\257F>\345\r0=\n\327\343\275\262hz>B&\371>L\375\034>p$P< \322\217\276d\036\031>#hL\275/\206J\277\300\225\214>h\256\223>\275\251h>i:+\277\002\204O=\263{\322\276&\336&;\365\326\300>\t\372\213<\271\210/\276\001\301\034\276\236^\031\277\302\300;?\273\270\235>\226[2?To\355\276u\260^>\325\t(>\224M\351>\311\307.=\210F\007?\\\003\013\277\216\001i\277\000W\242>3\302\033=\204\323\242\276\030\225\024>\2135\334<-x\341>\000\251\315\276Wx\'\277\370S\223>]\277\030\277\003}\"=\365\020\235>\224j\337\276\030&\223\276\350\365\247\275\314\013\240\276\253\2627\277\346W\013\277\335\007 ?\336\253\036\277g\'\033\277\256\201\025?\tT\177=\002\361\272\274\013^\264\276\364\025\224>\023\325k?\270\351\357\276\017\326_\276~tZ\277.\344\021\275O\222\016>\331Z\237\276\tPK\277_A\032?\030!\374\275\340\204\202=V\274y?\033\2018\277\263\352\203\276\244\3445\276\2618\367;y\314 \276\260\346\240\276\326\213\301>A\237H\276}\256\216\277\345\3259>Sy\003\277\223\377I\275\027\016\364>\376H\301>\276Ki\275\231\236(\277\304|Y>\276\207\013\276\233\217K\276b\025\337>\205_J>%;\246\276O\006\007\276\3077\312\272\006,\271=\336<\305>\210\235A?\327\335\014?\246\n\326\276\357\033?>\335\315s>C\034\353\275\357\003p>\316\337D\276\332\033D?\315#\357\276\273\355B>Z\203\367<\037\364L>\017([\276\311\260\332>\363\253\271>\320\270p\276\254V\366>\377\354\267>Y\206\210>\036\341\244>\252H5\277YQ#>\007B\242>\337\211\351>\206r\262>\315#\377\2753\247\003?\301n\310>\023\2705\276\354Q\200\277z\337\250\276`\352\007>\t\212\177\276\313\2415\277\251\3014\276\321\005\365\275l\317,\277\266d\325\274\212\254\265\275\311\253\363=\245f\277\276\272\363D=HP\014?AI\201\275\021sI\2752\350D\275\370\210\350\276\350\336C>\n\235\207\276eTY=\002J\243\275\366#\305>\302\300S\276\346yP>o\326`\275\334\272\213>\253\317\235?|\325*\276\202\250\033>PSk\276\345\325Y>.\004Y\276\013\357R>)\313\260\276\270\257\003\277\3125\205\274\3750B>C\376\231=\276\237\312>\366\264C\277X\220\346=\022\373\244\275\n\021P>\372\263\337\275\031\312\251>!Y\300>\3578\225\276\241\333\013?\320\323\240=\276\336\215\276-C\334\275*\221\344\276\256\r\305>\315u\212\276[\321f<\315\254\205=e\344\374\276\215\227\026?Z\022\220\276\335\315\243\276l\004b\276\016\363%>[\\c\274\304_\323>z\245l>\233U\237>j\373W\276\237\037N\277\207|\341;\027\016D\276\034\266\315\276i:;>\311YX>\266\326w?p\231S\276_{\346>\323\244T>y\351\006>d\314\215>\266\242\315<\002\016\001\276\201>Q\276h\"L\276\272\240>\274\214\020\236>\216u\321>=I\n?\3329\315<\301\255{>_$\204\276\347\306\224\276`\352\267>\251j\302\276\0324\364=\256G\261>\247\221\226\274\325\225\037\277\027\202\354>\216\314\243\274\241\326\264\276I\021y>\353\377\\\276\331Z\037\2765\265\354\275\361\364\002\277\014<\247>p\316\270\276z\340\343\274\357r\241>_\322\230>\023\325{>x\270\275\275\231\273N?\327/\030>b\363\201>J\230\211\276\301\214\311\275\366\177\236>\322\000\036\276u\310\215>\305s\266\274`\223\025\277\300\354\356>\246\355\337>\263\352s>\243\036\002\276@js>7q\022\276\357\376\010\277\303\266\205>\235\364\216\276\350\244\247\276\330\201S\276`v\277>$\356\221>\341\264 \276+\367\202=\376+\013\277\203\027\255\276\273D\025\276\3274\337>\036\033\001>\321\350\336\276\005i&>\223\306\310\276\250T\211\275\261P\233>a\212\362<7O\325>\257%T?\216Y6=Mg\'>y\350;<\242\234(>\006\365\355\276\3753\203\275\352\354\024?\215\356X\277\311\310\331\275\3706\375=@\244?>!Y\010\277\276\237z\276\037\2777>:u\325\276\222=\202\275\334\200\317\276\321W\240>\t3m\276\343\215,\277p%\003?\264<\277\276\277`\307\276\214\204\026>ji\256=#2,\276\324\202\207\276?\217\261\275\261P\013\276JF\316\275W\354O\276\2343\"\275.\004I\277\331\261\321\275\022\275\314\276\244\372N\274\026\207\243>\020\257\013?*\221d\276}\2210>\366\322\024\274@0\017\277\262.\356\275V+3\276M\333\377=\003[\245\274\316\307u>\204\323\262>u\002\252>\355\330P?j\336\221>\356^\356\274\222\226j>\'\240\251>%]\343\276\021SB\276R\325\204>\226\262\314\276>\004\325<\020\315|\275[\010R>\346\260\273\275^KP?D\243\033>\037\327f\276!\260\002\277(\233\022>G\036\210\275\263\230\230\276\020;\023\276\223\251\262\276\255\332u\275u\223\310\276\367\222\246\276\342\3515\276B\354L=\006G\211\276\\UV>\254\377\303>}\260\254=\250\214\217\276M\273\270\275v\211\n\2761\266\320>TR\307=\357 6>L\340\036\277\361)\000?T\035\242>\035\224(\277\321\226\363>Xs\320\276\023\233\257>\251\237\367=\021\001g\276\031\347\357=.\377\241>\355\360\247>\376+\273>C\377\304\276\2235*>\357\033\337\276\351\267\237>\325&\376>\266-\n\276h\263j>\032Q\312>\017\264\002>\202\250\233>\313\204\037>+\301\342\274aq\250\276\202\3077\274\0358\247>\350\207\031\277H\032\234\275q\003\336\276\207mK\275{\275;>\311\345\357>\031T\233=C\377\024?\3333\333>\206U\354>7\000\233\275\314(\026>\202\377\255\2767\340C?(\362\344=\353\217\260=@\207Y>\202\255\022>Y\372\340\276\'\245\010\277\034\262\201<^\235\003>\336T$?Uj\206>\345D\213\276\327L\376=J\230\231\276\034?\324<\334\021n\276DR\013=\260\252\336\274\272,&\276\247\004\304\2753\371\266>\356\261\024\276g~5>P\344\251=f\274\255\275\227\220/>\237\004v=\224j\037\276Q\203)?\333mW\276\'\210\032\276\366b\020?\225\016\266>^\235\023\277(,\021?Tt\004>J^\235\276\267\234\253\276\316\266\344;tA}>\335\322\032\277x\234\242\277:zl?\216;\345\275 $\313\276w\020+\277y?\356\274hYw</nc>e\0013\277\004s4>\361E{\275\007\357+=\310\007\355>\006/\212>]\374\215\275\006\273\201=\212\216<\277\033\273\004?\207\334\024\277\362\265\007>\227\377\360\276\332\311\260>\246\325\300>\315\344\033>\257\224\215?\327\372\322>\357\254\355\276\326\220\270\274\311\002\206>\242(\240>\325\347\302?HR\262\275/Q]>b\334\215<\240OD>\346\313\013?\354\023\300<\230k\261=4\016u\274\n\277\014\277T\000l\276\366\357\372\274\277+\342\276\335\322*\276\220\275\376\276\216\256R<wN\263\274\331_v>/\372j>\013\357\362\275\330\273\007\277F\010\017>\201[G\277\260=S><k\347\276\276\274\260\276\023~i?\023\233\337>\020\262\214=\357\003\000\2773\251\201\275\362\351\261\2741\261\271\276$\321\013\276\014\\\236=\210c=\276\310a\220=\000\3063>U0\272>\256\r5>,}\370\276~:\336=\266\326\247\276:z\234>z\3429=\347\306\364=\225}\267\276,\016g\277\237\315\232>/Q\375\276\236\265\313>s\272<?\002\274\365\276D\206\205\2760/x\277NE2?\302L[\2760\r#\276\262\273@\275\276\244q\276&\215\361>MgG>\352!\032\276\375M\350>X\250\345\276\221\233\201>\025\035\201\277:\2571>\265\246)\277\356!\241\275\364\025$\276\3500\357>\216\001\331> \265\021\277\3024D\277,\274\213\276\320\362\334>\0358\007\277\257\353\247>\346\256E>\225}\267\276\300\tE>Q\332\013?\313\020\247\276\372\355K\276\206 \'>\020X\271>\034\266\215\276\372\233p\2766<\3369\3750J?\325\354A>\253\004\233>\212\004\323\274z\307\301?L7\271>:\006\004>\374\214k>\362\014\232>\347\373\311>S\313\306\276,\324\372?\300[\320\276\372\177\225\275\300\225\334\276\021\036m?i5\304\276\357\343\250\275\312\211\026>\260\254T\276\363\037\222\276\267\227\224>\305\254W=\216\222W\276\247y\007\277\234\277\211\276\004\312\226\276\025t\033\276\320\354\232\275\020u?>\250\251%\275\303\273<?\002\267\016>\371\024\260\2762 \213>\022\304\324;A\202\252\277\376\016\245>\355\274\215;\317,\231\276\234\212T?\317I/\276\331w\005>3P\231>\010\220\201=\301\220\265\276\225\232}\276\367\3518\277\326\034\200>\330\323&\277\013$`?\306\341l?v\246\000?\026\023S\277W\354/\277\216\001Y\277(\n\364\275\250\035\236\276\006\236[\276\257\010\036\276\027\324\017\277aq\020?\312\025>\276\025\000\323>\327/x>\3578\225>\356|\377>\306\242\371\276\r\253\000\277\360m\332\276{\367\247>L7i>Z\ri?\301\305\312\276\023\3629?\006\201\025\274\211A\200\277Z*\337>\264\310\306\276\210\272\317>\354\300\231\276\240Od\276D\335\037?%]\323\276\354\277\016\275\235\364\376\275\245\203U>\333m\007?\255\027\223\276O;\234>RI\035\276\014\345\014\277\3024\014>\307.!?niU\276e\303\032\273\321\315~;\242);\275\366b\330\276\356=\214>\261\334\222>>\313\263\276\251\2377=\274\005\212\277\261\3718\2767\305c\274\314\013\320\276\266-\372\276\267\356\006?\267\230_=\360\205\221?\246\325\320\275\253\225\t>o\330\006?\224\3367>\347\373\221\277\350\023\021\277h\005\206>\235\327\330\275C\377\004?\214/\232\275\345\355@\277\345\355\010>\253\354\233\276<\332\370\275\315\351\022?P\374\310\276\344\2023\275\374R\027\277\331_\016?\345\263\214\276\333P\321>\255\026\030=\355\330H\276;\211\210\274\307)z>RI\035\2773\212\325>K!\260\275\204*u>l\t\t\277\305\311=>\252\3612>\232%\221\276\237<\274?\205|0\277|a\302>P\344\t>\024\256\207?\367\037\031= \014\334\276\300\225\034?\321t\326\276\236A+?\345\320\202\277\314b\342\274\225+\034\276\226\262L>\ne\341<~\253u\275R\270\236\277\027\361e?\232|\223\276#J\213?\205_\n>\307\021\253\276\216#V<\365\020\215>\234\2423?@\332\177\274+\301\002?r3\274\276\367;4\276\376&\344>9\013\033>\242\264/?H\026\360\275Sy\373=\223\030\224>\317i\266=>?T?\013{r\277\252\361\242\276f\240\322>m\305>\276D\300\001?R\270\256>\330\266\010\276\0265\330>T\251\211\276\336\345\202>=\233\225>.\312\314=w\370\313\276u<\346\276^\325\331<\201\354\365=\232\266_\276\201&\262>Vb\236\274a\375_>Uj\306\276D\247g\274\214\326\021>\326\250g\276\216\3138\275(\324\023=\237\2604?\247\\\221\276\030}\005<\327\277\313=5^z>\002e3\276\027\324W\276\334\240v=m\220)>w-\001\276\373L\013:\366\321\371\276$b\002\277-\t\020\277j49\2751(\023\275\372\nB\277`{\301\273?\221\367>\002\016\241>V\202%\276g~5>\230\243\207>A\362N=\264\002C\276-\225\367=v\246(?\315#\377\276\251\2763=\271\252\014\277\322\373\226>\316\374*\276sc\232>\375\334\320<Cs\275>\356\225\371<\371I5\274I\200\312>&\307\025\277>x\215\275S[\352<;\302\331\276\353n^>\351\324\025>\tST=C\342\006?\001\030\257\276`v\317>\257\3161>`\350Q\275\210\205\352\277{\024n>\236{O\276?W;>\316\252\037?)\355\315\276\016\276p>\014\352\033\276\251\373\240>\234\371\225>\353\305\030?\320a\236>\"T\231\276\343\342\250\272JCM\275FB\333\275od\276=\033\0227>#e\213\275\231\rz?\303\236\246\2764\327\271\276i\306\202>\016\363\005>p\261\202>+\023\256\276\333m\327=\020@\272\276\2034\303\276\024\263\016?\363Y\236\276\204c\226\275~\307p=\306\205\223\276niu\276!<\332\275\226C\013\276\2137\362\275\366\264#\277\003\276\021<\250Rs>,c\303=\337O\235\276\356\316\332\275\200+\331=\307.\201\276\033/\335>\245,\363>9\227\"\276\345\263<\276\334\272\333=\022\245==G\223\213=\022\210W\276F\266\273?cbS\277u\315d\276j\331:\276\016\274\232\275\020\351\327>\022NK?\221\362\223>B&\t\277\325&\256\276\215\234\225>\266\204\374=W[Q>\376\361v\277j\366\030?U\030\373\276\231\203\300=\307\021\353>E\016\221\275\211{\354\275M\330~\275\274\313\205>8j\305\275;\252\272>\367u@\2769`\327<\317\203\313>\307\327\336=|\233\016\277\255\027\003>\002eS>U\210\307\274\331=\031>\236{/\276Ll\036>\3372\347\275\2716\034?\370\337\212>\217\337{\276\r\3042\275\0324\024\276\260=\243>0L\266>\310$c\276\201\354\025\2766\223O\276b\333\002>\030C9>\\\311.\276\316\3075\276\342#\n?\276\331f>\264\037I\276 \322\237>\033g\023=\337\374\306\275\242\227\321\274v\246\000?\263\352\363\275\261\3718\276\206\311\304\276(\363\217\274\235\021\205\276\257^\305<\315\001\n?\036\033A>[|\312>\347\306T>\270X\221\276\020u\237\276(\017\273\276]\3047\276+\371X<\373\"\221\276{\332\261\276\002\274\005\276\300!\344\276-\317c\276\207\207\260\274\346\350I\277\345\325\211\276\321\256B\276GU\243\276\n\276\251=^\272\231\276\334.\324\276\014\310\036>\276\366\024\277\270\351\237>\377\031\357\2726\316&=9b\355\275io\240>3\341w>\240\211\030\277\013)\257\276]P\377\276\351+H>\315\006\331\275\207\247\'\277\237\002H\277\023\234z\275/\213\351\276\200\232\212>>\\\342>@js>\242\177b>\005\027\253>1\261Y>ep\304>^.B\276p\010\325\275\327\300\346\276\323\331i>T\343e\2752\346V\277\377[\311>&p+>t\0140\277\367\261\002=\364\340\356=\370\337\n>3\371f\276)\005\355>h\320\010?\357 6\277\352\225\242\276\204\275\211\274\267\321\220?\3171`>\203\027\375\275\230\301\230\275\020zv>\263\357j\276\025\221\201>\007})\275\261mQ\276\343P\237\275\255n\245>\336v\031?YL,\276\023I\244\276,\202\177\276\347\373\021\277g,\312>\275\035a\276\230kQ\275\314F\'\275L\303\220\276\306\341\004?*W\370\276~\253u=\375\237C>\322\030\035\277\232\2319\277+0\204>X\312\022>\340JV>e\215Z\276\361\361\251=\203/\214>.\255F>g\'\203>\235\022\020\275\"\211\336=\010Z\301=\314\226l\275Q\026\276\274T\306\257\276\232%\031?$bR?BB\024\2753\026\315=\211\007\364\276a\246\275\276\260X\003\275\267z\316=\323\274\343=\234\371\325=\205\231\266>\350\366\032?/\213i>G\0038\276.\310\226<\033L#>\031:\366\274\306\334\365=\223\000\245\276\255\373\007=\373:\200\2760\274\222\275\374\376\315\274\'f}>u\253\027?\001\026\371\274:\364\314;\271K\007\274g\355\266>,\016\327\276/n\023\277%\262\217<\251\024;\275F%\345>Q\206\312=\307\021\353>8\370B>\2404T\274b-\276\275\276\244\021>B>\310>sh\221\276\363\310\357\276\217\337\273\276Yn\351>\036\027U\275s\364(\277\205A\231\274A\016J>\300[\260\276iW\001\2764\242\024\276H3\326>\001\0238>/1\226\275\356|\027?p?\200=\342\314\017\277\267z\016>R\232\315<h\320\320\275\027\365\211\275}\226\347\275&\374\322\275\r\211\033>\033\330\252\276\252\232\360>\312\376\231\275\223\251\">M\326\030?\250\343\361\276*W8>\364O\200\276E\360\037\276\302Q2\276\033*\006>y\036\234\276\033\330*\276-\314\242=\312\025&\277\"Q\310=|\325\212\276\364\246:?To\215\276*SL<N\321\201>/\372\352\276\303\r\370>MJA\2763\3041\276\322\306\201>\220\367J\276l>\376>SY\264=WC\362>\036\025\377<\007_\200?\224\274\272>><\013=|\233^>\246\017]>{\207\033\275\004\342u>C\255)\276\334\021\316=P\001\020>\362\357\023\276\010:\032=\200e%>\301V\251>\323\274;?8-\230=\330*\241\276\271o\265=\031\342\030>Sy\273\274\251\336\022?\360Q?=\211B\253\275\001\2070>Y\027\267\276\371\367\211\276\353\037\304<4hh>\216\222\207>\"\253\353\276Z\3303\277\367\036\316\276\256\236\203>\203\024\234\275\336Y\233>\323MR?\355\r\036\276L\303\300\276\331\231\242\276*\314\326\273;\215T>H\247\336\276y=\230\275F&\300\275\2240\323\276\223:\001\277\247\226-\276\026M\207=\003\354\203=\201\313c\275\311\037\354\276\245f\317\275f\025\266\2755c\341>~o\223\276yX\000\277\334K\332=<N\021?|\325J>O]\031><f\300\276b\240k\275b\327\266=\023\362\031?\2132\333\275\227\034\227\276*\343_\274J)\030?&\337\354<\257%\004>\000\221\376=J)\010\277D\213L\276N\3567\276\002\232\010>\341\356\374>\242\n?\275\257Zy>q\254\253\276\365g\177\276\251\237\267\276aT\022\276`<\203>\367u`>\t\377\302\275\357\251\274=\310\315(?b\020X>\214\334\323\274\350\366\322\276\263{2\275\357\033\257>\024\005\372=<\027\246=n\027\032>\346\"\376\276\207\277\246\275`v\337>\300&k\276\304\353\372\275\213\032\254\276\365\330\026=\321\224]\275\026\247\272\275\207\277\346=\207\212\021\276zP\260=\267\010\214< )\342\276p\264\343\274\373\224\343<2\3466\277\224u\356:&\344\013?\365\361P\275M\363N\276\316\337\004\276\337O\375>\021\252\264\275L\032C>\033\273\244\276\233\033\323\275\271\215F\276P\337\242\276\353\255\301>j\301\023?\002\232\310\276O@\023>\000t\020\277\377\256O=\236\352\240\276\377\225\025>Y\300\224>\014\260o>\260=\223\276\"\340\260>\312\025\036>\345\'5\276j\301\313>&6\217\276\242\264\267>\030Cy\276\274\226\020?\376&,?fk=>g\'\003\276\302\243e?\233\003\304\276\201\225\303\274k`\013\276~\306U\277P\001\300>\367\257\374>\361\364\272>\333\277R\276\026M\007\276\216\351\211\276\375\372\241={\367\247=^\275\n=4\205\376\276aq\270>G8\215>\033d\202\276\364\211\374=u\254\022=\313\234.=\236\007\267=\226\225\346\276\375\202\255>\303\273\034>\027+\272\2761|d>\247\223\254\275\362&?=\367\001\270\276\373\"!\276`\310J\276\257_\010?\030!\334>f\277\216=\023\325\253\276\214\241\334==\035Y\273J\230\351\274\315\344\213>W\351n<2rV=\353\034c>\335[\021\275\321y\235\276!\007\345=\262\332|<\225}7>p\231\023\276\032\335\001=\257\3161\276o/\t\276\323\021\300=\013$\010\276#\2047?28\232>\211\007\304>\323\366\237\276\245\275I\277ni\265>\325x\251>\021o\235=\217\245\017\276\037\272 \276\260\306\331\273\006\r=\276T\343\005\277\353\250j\276V\324\360\276P\032\352\274\236\352\000\277\301\033\022=U0z\277\232\231\271\276\237\312\311\275Z/\006>\324e\221\276E\201\216>\r\032\252>\335\322\272>\247%\026\275@\303\233\274oG\310>\n\334Z\276h\005\226>J&g=^\364\345\276d;?>WC\202\276\006\r\315>\010\254\004?)\"\003>\203\206>\276$\321\003?\271\2455>\305\217\021>F\261\034\277\035U\255>\216\0019\276y\314\260>\256\022L>\370\302\024\277\370\210\330=\034\323\223>|\n \276\355d@\277\277\267\331>\334)\035>\377\262\033>\336\037/>\"\216\225\276_$\244>z\341N=B\322g=K\002\024\276ep,\277x\233w\275\344h\016\2750\273g\276\361\235\230\275\rql=\321\350\216>\016\370\234>\207\026\t\277_{F\276\363\321\030\274\267b\177\276Bz\n\275\034%\007?\350i@={\024&\277S\350\214>\013\n\203\274\220\203\262\276\315X\324>\262.\336\276>\350\351>\315u\252\276\004\035-\274\357\311\323>^\016\273<aq\000\277\323\276\271\27577\006\276\204\014d<]\277\340=\356%\275\276U0\212>\244\307\017>O\006\207\2761\353\225\276P\344)\276\034\010\t?\354\335\177\276\177\373\372=\205\231\026>\370\375\033=\300\347\307\276\247\226->j\337\\=\204)\312\274\332Uh>\031\305\302>\245k\346>\016\333\246\276J\007K>\217\374A>\037\277\267\276\177\207\002\276\017\013U>>yX\276n\304\223\274\034\266\375>m\220\211>/\243\030>u\037`>I\236\353<m\254\204\275Ll\236\276\276\301W\276\361\177\207=\260\003\247>u\260^\276y@9\276}\320\203>\246_b\275\255\333A\272\022\203\200\277r\277[\277\327Qe?c\227\330\276l[\264>\365\271\372\276\013\014\251\276\242\321\235\275w\276_>\330\266H\276+\336H>h\313Y\276t\352\002\277\230i[>\331|<\276~\343+>\220\024\021\276\262\272\005?\342\006\024\2770L\346\276\016\025\003\276\241\202\243=\302\027\346\275\035L\324;q \004\277D\300a>\355*\244>\271\337A\2764\272\363\276~\343\233\276z\307\231\276W\354o\276\r\376~\275\022\245\275\2767\031\325\274\022\332*?8i\032=CV\307>\250\000\310>r\375{\275\235\272\362\275\262\235\217\276\315 \236\275$\271\214>F\261\034? ]l=\376H\321\275\037\272@>v\340\034>\317\024\272<\033G\214>~\343\253>>\350\331\275\315;\236\276AF\240=\247\221v\276\317\367\033\277\231\323\005\277\332\376\325=\360MS\274\361\325\016\275\277\016\\>\371\275\315\276\362\007\003\277[\224\t?\035=\036\276g\'\203>~\343k>\244\374$\277h\320p\276\372\230O\275\354Q8>\245\240\333\2766<\215>\324HK>\022\366\255=\373\226y>\200\237\001\277\262c\223\276{I#=y\314\240>k\236\243=\232\261\350\275\252\016Y>D\243{>\246\362\306>9\356t\276A\202B\276\264v{>\357\376\230\2754\200\207\276\305\376\302>\255/R>$\013\330\275\006*\003\276.\251\272\275\324\362\003\275b\276\014\277|\017w\277\026\030r>\342t\222<Gu:\275\025\251\300\276\033\365\300>e\337\035?\220\242N=.=\032=msC\27677\246\276\035Z\004>\253>\207\276\210\272\037?\271S:>\321y\255\276\332\346\206>\253\t\242\276\245\2035>@M\275\276\347\032&=\3274\357=\313\363\300\276I\327\314=\237\216\'\276\016-\022\276}?\r\2777OU>2ZW?\361c\014\277\"l\310\276_$\304>\206\346\252>\221\014\231=I.\237?\0363P\275\312\246\\=q\310\206\275 FH>\217\307\254\276<N\261>\352\t#\277\236|z=cz\">h\350\357\276f\364c=\037h\305\276\033/}>/\371\037<\363\216\013\2779(\221\276(\234\035\275\232%\201>\355\201\246\276E+7\275>yx\276\257\010\276\275yvy\273\354\372E\276\241-\367\276\177\3364>P6E>\254s\014\276\263{\262\275:ue\276\276\301\227\274\007\316\331\275\032ii\276\223\030\224>\035!\003=\364\025\224>\305\254\327\275\275\343T>33\037@ ^\207>\016\363\035?\336/0\273J\265/>p\231\223\276\202\213\265\276\000\306\203>\217\3025\276\344,\354\274\263\265\036\277\214\022\264=A\232\021\276\301\377v>\371\317d\273\243\003R=\013\233\001<\235\235L>{\210\246>E\177\250=\004Z\232\275U\023d\276J\360\006\2748J\036\276\236\265\233>\301\374:\272gD\351\275\211\352\255>\352\t\313>\024y\202>\270\314\351\276\306\304\006>\317\022\304\275\325\317;>\014\036&<e\307F>\0260\001>\244\374\204>\303\365(?i\212\240\275\340\271\367=\221\355\374=\004\001\262\275\270\222\035>J{\243>\034|\201\276\257Z\311\276\204\273\023\276\212\223\213\276x\227\013>\025t\253>\310\357\355\276w\241\331>#\023\260=Ui\313\275\320\233\332>ff&\276p\023\244;\312\025\036\276\277\201\311=\225\016v>\236\2640\275\260\003\227>\267\177\345\276^\200\375=\260\311b\277\355\365\026?\342\314o\276w\241y\276\334h\260\276z\344o\2769\177\203\276.\347r\276I\235`\276O\351\200\276\374\343=>\311q\027\277\036\031+=[|J\277\013\270\307\275\240OD>\264\345|>\007B\362=\370\210\250>\2176.>9=\024<\200\2023\277\321\350\256>\233u\306\274_~\207=\237v\370\275\303*>\276\207\301|<\240pv=\027c`=\366{b=\377\262\343?\234\333\304\275\306P\016\276\341\013s>\225\330\225\275T\346\346\274\324C\224\276\202s\206\276#Kf\274a25>\276\244\361\275\200\237\201\276\353\255\001>=~\027?\007_8>\374\336\226>u\310-\276\327\223/;\311\037,\276\370\302\224>\226>\264\276\301\375@\275gD\t>\224l\265=\214\363\327\276E\034!\274%\006I?\345D;?\316\210\202>\220\024Q\276\204\360\330\276w\204\323=\377>C>4Lm=\344\240d\276.\342\253\276\021r\276=\314\361\312\275@\337\226\274\030xN>\373\\\355\275\205\224_>I\205\361=\032\213f\276\021S\362>=\325\221>)\"\003\276\375j\316=Xs\200>\237\345Y>c*=\2752\346.>\206U\374=VHY\276\3706\275>\330\r\033=\324\361\030\2763\341\027>\267k\370;5\357x\276l\225@\276\311\260\312>vT\205\276\024\226\030\276\033*f\276\241\331\365\274\206\257\257<@\331\204\276\241-\347=xF\273\275\032n\240>s\364x>\261\375\204=\265l\315>\371NL>{I\343\275\243\001<>\300\2622>\254\342\r\276\345D;\276\263\322d>\261\247=>\014\007\202>\246\n\246\276\251\237w\276\320\nL\276Z\201A>\311q\347\275\'1\210\276\240p\366<\370Rx\275*\343\337>\261\341\351>\373\223\370\274\206U\374\275:\222K\276\226x\260\2761`I<\211\357\004\276\345\'\205>a7L>t\230/\276\340\020J\276\260\256J\275\331wE>\230\3729\276\230\243\327>\256\022\354\275\311\223\324>\364\303(>e\307\326>\260\217\316\275B!\202>\004Z:\275\334\016\r=\313G\322\274\245,#>g\'C\276\235\272\262>\2451\032>\316\337\324\276\224k\312\275\344\203\336\276\204\273S\2768\333\\;.s\272=\210.\370\276\017\013\025\2764\242\024>\007_\030>\331\261\241><\027\246=\336\310\334>\307c\206>\277e.\276\323\207\006?\326n\373=\t\033^\276>\005`>\346\256\245\2760\r\223>%\256\303=\303\r\030\276O\036\246\276G\311\253\276|\n`>\230i\373\275\220\366\237=\334)]>\213lG\276\264\223\031\277-\317\343>\271\210\357=\033\236>>\354l\210\275N\227\205\276@\023\341\274P\375\203\275a4\213=\356\351*\275\321Y\346<l]\312\275\270\001\337>\221~\213>\340\271\027\276p\353.=H\342\245=\200\267\200>\025\2510\276\201?\374<\345D\033>|\'\206>\002\322#;\300!\024\2762\346\236>@\244\177>J\007\353\275\234\026\354\276k`\373>\273\n\t\276$\'\223\274$\264e\275_|Q\273\305A\235\273\004\312F\2769\267\211<\314\264\235=B\225\232>x\177\034?\352\317\016?\221a\305>\360O\211=\356\224N>H36\276\270@\202\276v2x>sh9?\233\376\314\276E\273\n>\320\'\"?\3122d>\352\t\213>\343\210\225\276pB!\276\373\313\032@\003>\277\274\002\331+>\360\300\240\275:u\245\276(\270\020\277\032\341\355\274}\\\023?\002\016\001?ro\376\274\022\332\322\276HP\\>\010s;=\365J\t?\361.\247\276\246\233\004>\305r\273\276\300\262\222>\337\211Y\276p\266)?s\272\374>\336q\332>\026M\247>\211\357\204\276\214\022t\274\3706\375=\017E!?\263%\253=\313J\203\276\315X\204\276\367u\220>\262\200)\276\006d\217\275]\247\241>\303\323\313>\260 m>#\020\027?\355\360\327=.s:\276\010U\n\276\230\335S\275\267\013\335\276\346\350\001\277hy\256\276e\302\237>\324\016\177\276\362\322U\277\2201\027>z\034\206\274\261i\245<\320~d>q\003\276<\351\232i>\2451:\276-\225w>\226\347!>\212\253J>]\334\306<A\232Q\276\307\237\250\274w\2419\276Y\337\300=\'\302\006>U\301(>J\241\342;Q/\270=\373\\\r>\350\367}<\224\331 >\217\344\302>4\327\271\276\r7`\276I\272\206>\0319\273>\016j\237\2754hH\276\\Z\r?\n\235\247\276\320\233z?\330\r\003\277vq\253\276^\205\324=CqG\274Pp\221=\221a5><\203&>7T\214>\315;.>n4@\276\004\342u\276Y\355+\273u\223\230<Qk\332\275\250\035^\276\360\337\274<\0049\020\277\022\245\021@\235\325\202=7\340\003?\'\024B>\027\236\027\275z\344\237\276qr\237\275\022\024\217\276\312\211V\276_\\*=\322\342L\275%A8\274\227\034\027>7\340\363\2756r]\274\331_v\276`w:\275I*\323\274\253>\027\276\337\304\220=S\005\243;\345\270\303>R\2338\276\225\016V\276\232\261\210>6<=>o\330\366\276\274\263\226\275\247\312\227\275\347:\005\2777TL\276E\273\n>!\310!\276\364\340.=w\276\257>tAu?G\346\361>p\316\350\276\315\004\303\274\353\217p=\206\311t\276\325z?=)\354\202\275f\203\274>]\3047\275s\021\337\275\353\342v>\177\373Z\276\\=g\276>?\314\276\276\301\207>[\224\031>?\221\267\276J)\330>\177\274w>\3225\243\276\336\260\r>\276\207K\276@\366Z>\257\231\374\275j\373W\2764.\254\276\345a\021\277\366\321\231\276\332\307\212\274K\2608>\001\301|>\025\306\266\276Qk\332>\306\026\342\276\223\030\004\276]\341%\277\237Y\202\276\232\224\362>\222\313\357>\366\177\276>W\t\206\276\037\327\246\276s\021?>.\377A\276\271\340\214<Y\213\357\276-\350}=\300\262\322\275\240\316\313;\r\253\330\276\273\264\301\275<\021D\275\032\243\265>\351e\264\2764J\227\274m\347\333\276UM\360\276\3645\013\275\375\2043<?R\264>\334FC\275K\006\240=\320\'r\276\325\347\212>\253\317\305>\212\216\224\276\340-\320=\213O\221>\363\253\271\276\221\270\027\277\342u\215>\335\230\236\276\033\366\233=h\314\204=\332\217\304\276\345\'u\276\240\302\221\275\321\\\017?\253&(>\265\303\007?\211\230\022\276\300\262\322\275\370Sc\276\347\246M\275\026\335\272=#J3\277\365Jy>\200`\276\276\nh\302\275\277H\030?\006/\002\277\243#\371=\2029\372=\036\214\230\275a\211G>\321\"\033>$\3226=UM\200\276F\327\340\273\202\250\033>\333\026\225\276\334FC\276\"q\257>&\252\027\276\200\271V\275%\312^\2743\376]>\334F\243>k`\313\275\334\256\341;\203\335P\276R\323\256\275\276\206 =s\205\367=O\006\207>\020\257+>bI\271\274\236)$?\265\2113\276\253\317u>\372\320\205>RD\036?lC]\277_A\n?\247$k9\254\2202\2766\002\201>\244\031+\277\334cI\276!Y\000\276)\313\300>\373y\023>k\016p>\022\245}\276[\353\213:\365\241\013\277_\014\345>\366\321\251\276ur\006\275 y\'=\237z\377\273\010\217\306\276\321\006\200=[\262\312\275P\337\362=\277HH\276TW\276\276\374\000$>\315#\027\277y\351F\276\355\324\234\275<j\314< \014\234>\r\374\310=\332\254\232\275\363<\030>\204\017\245\274]\212\313\276\310\322\207\275Ujv\276\374\000d={\203\237\276\375\0252\275}y\241\276\3737\324;W[\021\276n\206\033>\'\302\266>@\023\025@\372\267\313<\370|\203\273Z\022\200>\317\024\312>\346\002\267=\035\307\257\275\242\234H>\370\031o?nn,\276|,=>9\234\211\276\217\337\333\275\t\212\037\276J\357{\276\343\215\234\276\311\037l>\362\027\304;D\213,\276N\227E\274f1Q\276\033/\035\276\256\360\356\275\246\014\274=\010T\244\273f3G\275\347\306\264=\321\226\203>%>7\275\274!M=m\250X\275|\355\331=\241J-\276\013{\232>\345\231\027=\307\362\256<\346?\004\276=\233\205\276O\346\277\275\221\362S>nP;\275\263\265><c\356Z>7\301\267<\372\231\372\274H\247\016>\265\025\313\2762Z\007>\323\366\237\276\"P\375<\3437\305=\320\017\203\276Y\243\006\277*\214\215>\"\246$>\n\021@\277\322\030\r>\314\233C\274\360mz=X\250\265>\226\225&>\371,\317=\016\371\347\274\273\325\023>b\242A\2757\306\316<\316\0311>\217\243\336;\302j\254\274\262I\236\2758\240\245=_EF\275\240\341\r=\245,c\276\371-\272\275\344\243\305\274\341\356\354\276q\005T=\362\260\300\276\256b\361\274\211^f>\223:A>\0109o<\353\361\214\273\303\365\210>\374\214K>\211\263\242\274:z\\>\246|\250\275\2345\370\274s\327R>\310\322\207\276\245fO=\304\\R=\032\303\234<\"\375\026>\325x\261\277\371\235\246\275\3274\017\276\366]1\276D\243[>\241\326\264<\231\022\t\276\362\265\'\276S%\312\274\313\022]\275\201\"\226=|,\215\2764\020\313\274\267z\316=\266\200P\275\220\266\026\273\234\333D\275=\r\230\275\327Q\245\276\315\222@\276\210g\211\275d\2221>\000W2\276\272\274\271<\023I4>\234PH=\240\300\273<\321u!\275\210g\311\275\364\243\341\274~:\236=>\350Y>x\264\241\276\323jH>\025t{\276{N\352\276\002\202\251>,\361\240>Ou\010=\365\326\000\276\352\010 \275j\366\320\276K\002T<\320\017\263\276YOm\275N(D\275\347\030\200>#\3674=\275\373\003>\251\027\234\275\331\007\231=\202\344\235\275>\225\323\274E\3656\276\347\373\251\276\225\016v\276Z\236\'>\276\366,\276\236)\304\276\275\251\370\276\276\331\346=<\024E>\034\353\">n\304\023=\241\326\024\276tD>=\315\"T=\306i\310\275\264q\224\276\rl\025>\016\241\312\274\326sR\274W\004\177\276\335\\<\275\312\341\263=\335\\\374\2749\017\'\275\250\341\273\275]\334&>\034\315\261\275\343P?\2758\020r>\315\006\031\275=bt= &\241=\227\255\365=\270w\r\275m\342d\274\236\252\014\272\006\r\235>z\031\265\276\276\244\361\275\325>\335=\\r\314\276>\226~>H\376 >\366z\207\276\316\303\t<\244\031\213\276U\336\316\275\263A\346>\017\356\016>\266\276h\276a\216\336=\000\256\364>k\267\035>\305\001t=QN\364\275\231)m\275?:\365=Wx\027\276\316\026\020\275ke\342>\343S\220\276\367\035\003\275\211{\234>\344\240\004\276\007A\207\275\351\016b>\036\375o=\010X\253\274\201\317/>\325!7\276!\005\017\275\2721\375=S\"I=\372aD=\234\371\225\276\363<\030\276\r\303\247>\003\264\255<v\2460>\366\264\003\276\335\'\247=\020\351\207>\376+\213>\033\021\214<\\\311.>\376Cz>\274\002\021\275\323\274\003\276jj\331>\350\034\027\274^\235\203\276u=\261=\227\305\204>\332p\270\275\256\022\354=P\247\274\275\221\270G<\311\253\003?\324+\225>#\363h\276/\206\342>\246\233$>\022\367\270>\352xL>\031\254x\275h\320P\274\317\367\023\276 \265\t\276\034\231G>2\003\025\276\002\267\016?/\213)\276\320N\274\273e\376\221=\336\310\\\276\030\354\226\276S\256P\276\021\036->\273\017\000\276\264v\033=\207m+\276\023\nQ>\204\2347\275AH\326\275<\367\216>v\303\266\275\214\370\316>J{\203\275\235K\201\276\007z\310\275\017\234\303>:?\305\273B\225Z\276Y\206\210>\273\362\331\276\013\014\251>FB\333=1\n\202\275\016\370\274\275\270\314i\276\344\332\320>\227\310E\275wJ\247\276\242(P\276q\003\376=pBa\276\n.\206\2765$\016\276\201>)\277=\323\213\275\201\2629?\366#\345>\343\031\024?\260\033N\277\034\266\355=\276\274\240\276\337\375\201\276\t\033\336>\247\"\305\276\2068\356?\256\022\234\276\345{\246\275\220\203\342>\254\312\376\275\352> >\302\022o>\307\327\336=CU\014=[\010\302\276t\265u\276\301\377\026=\315u:>U0*\277\231\330\314\276\226]p=Q\334q=d\257\017?\355\323\021?C\034K\276\343\374->\245k\326\276\204~\246<\370\337\002\277\261\247\255>1\224\263>K\002T=xz\325\276\253\317u>\274t\343\276&\036\360\276c\264\376>\344I*?\253[\375=-!\177>W0\340\273F\353\350\275MJ\321>O;\234\2762r6\276Ou(\276\214\271K\276q\222f=\276\331\366\276\326\342S\277\321!\220\275\335A\354=\210h\014?/\2438?\317I\017>t\265\035?G\346\021>&pk?u\216!>\370\245\276\275\345a\321>\365\2712?H\212`\277`\345\020\276g\362m>u\260\036\276\371N\334>\003C\006?\261P\353\275\345D\003\277\313\241\365>5\007\010\276\272f\242\276lC\r\277\276\237\232\277a\375_\276\315\314\014?\322\030\215>\363=\203\275Ku\241\275\254\342\315=\244\210\234>q\033\215>j\301\013\277\356Zb\276\377\347\000\277\367\344\241>e\215:>\355\266\253>C\346\n\275\312\2116>N\177V>\376\232\274>\317\236\313\275\3333\253>\363\002,?\322R\251>T\035\022\276\373\221*?V+3>\334~\371\274\231b\016\275H\210\262=\220\367\272\276\377\312\352>\247\005/\277\n\334\272\276\271\215\226>\320\362\234>\335$f\276\325\347\272\276\306\242\311\276k\3611\277\266\2768?\346=\216\275)\263\t?[%\000\277\005\213C=\027.k\275\t\033\216>e6\270\276\352x\254\276\017\356F\277\344\017\036\277g~\265>\376}v?\210h\224=g\n\035>\340-p?\027\267I\277=,\324\275\373\313\356\276\237\037\206\276\371\275\025\277\034B\035?\037\364\234>\226\004\270>|\017\267\276$\320\200\275I\021\331=\224\207\225?bJ\244\2752rV=\362{\333\275\231\365\302\275z\215\r?QN\024\276\352\354\304\276\334h\200\277\2721=>\253\316\212=\201&B<\266\363\205\277\310\230\373\275\346=N=[\010\222=\246\233\204=\234\026\334\276,\237\365\276\302\260\262\273\256G!\277\210\201\256<\230O\026\275\036\304f?\246C\247\273\2511a\275\t8\004\277\0358\007\276^K\010\276@\3731\277g\233\033>\037\327\006\277\000\343\031\276\235\365)=ZG\245\2764\364/>GU\023>.\255\366>I\364\022\276\014\3155>z6\313\276\330\323\236>\227\346\326<\342#B\277\213\211\315>\223:!\276#2$\277*\251S\276\236\340\013\272\204\r\277\276\26578>\276\330\373\274\243\016@\271\tm\251\276\313\274\265\275\310$\343\276rP\262>\\\346\264\276=I\272\276 \230+\277\007\226#=ZFj\275\362\265\267>\377!\235>\350\336\243\276\3372\'\277\307K\267\2767\342\t=G\254\025\277`\223\025?\355\273\242<j\274\004?2X\221=B[\016\277\244pm?\322o\237\276\350\244w\277~5\347\276\213T\330\275\007\316y>\372\031\315;\001\336\">\335\357p>H\277\275>\211{\354\276UM0>\3578\245\277\222\263\010?a2\025?\343\252\262\276\201&\212\277v7\317>\244\210$?v\375\302\276\005\305O?\021\305$=<\275\002\277_\265\"?\'\203C?\276\331N?\266\363u\277L\303\300>\207\212a?\034|\341\277)?i\277\301\250\364>\254\034\332>\013$\310>L\2163?\300&\253>\010O\215\272p\261\302>)\350\036\277\232w\204\277~\000\222\276\250\214\037\276\333\371\216?*o\007>\276\366,>pBA>\223\214\274\276\313\363`\2746;\022\275\344\275j\276]\025\310\275\"\032=\276;\344f>\022\275\004\2772=\001\277^\021<>\270X\301>\351C\227\274\235\275\223\275\273~\t\277W\262\343=\240\211\220\276\007\360v>\201\354\035\277\223o\266<\312l\220\276t$\247>\014x\271=\002\237o\277\232|\203>\3372\207\275ep\244>\036\037\210;-\316\270=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006I\037\275\324H\013?\373\005\313>\372\'\370\275\323\335\365\274\260U\242\276\320\233\272\276\267\356\226>\375\366\225>\202\342\307?\226>T\276\364\311\002:\253\354\353>\340H\300=lye<e\215\232>\376\016e>D\250Z?\3372\007\276\222y\304=\305\217\021\276\035\224\020\276X\377\247\275\354Q\030>\203\027\275\276\321\"\033\276\307\021\353=@\207y>\037h\205\276F\323\251\276\201&\242\276\004\347\314\275\031,\213\272\2034c\276X\347\000?\324\232F\276Nb\020?\307c\006>S\226\201\276\372D\036\276\263\357\272>+iE\274\330\r{>=,T\276\266\204|\276\310^\017>\305\376\022\276\036\374\004\275H\277\375>\3544r\276\374\214K\275z6K>\367\036.\276V(R\274\355\360\307>{\210\206\276L\211\244>:X\317\276\360m\212>\223oV\276\302\242\242\274\265T\036\276\226\223\020\275W\\\\=I\272\246\276o\273P>\223o\026\276\370\336\277\275\362$i\275\002+\267>\352\347\r\276,\361@>\227s)>!\220K=\336\252k\275\016\370\254\276\235\364\016\2777\375\331\2750\021\217\275\247\313\202>y\037\207=\033\325\251=t\007\361\27536\264\275\007\3169\276\373\005\333\276\246\017u\277(\325>\276\310y\277\275\266\271\021>;S\330\276K\251p\273\262\364a\276\262\202_\2742w\r>\262.\256>\2402~>?o\352\275!\345\347=\332\003\r\2761\224\203\276\220f\234>>\005\000\276\361c\234>N\271\002>\310\230\223?\260=\363=?RD>x*`=\354\027\354=\310\265\341\275\242\177\242\276\036P\306>\363\216\263\276:@\020\276b\326\313\275\371\235\246<\226x\240>(\017\313=\347\377\025=\363\342\304<\253\321\213\275E/\343\275I\330w\275\004\343`<\\U6\276\264\223!>\265\212~\274\231,.\275\223WG\276Lq5>\025\221\001>z\215\035\276v\032\311\276\300\317X>\276\023\013?[\3515<\372\270&\277\327L~>\222\350%\2762rV\2767O\025\276\337\303\245>\225\3640=A\237(>6sm;\230n\002\277E\2127\273sIU=\303\271F=s.e>\213R\302\274\3066\311\275N(\224>6Y\003>\026M\207>\216\001\031\276\327\372\362>n\335M\276\216@<\277\367\344A\276JF.>AfB;G\310\300=\314(&\277\373\350\324\275\344,\314>m\255O>#-5\276-\354I\276\027\237\202>\266L\006<\337p\037=G\346\341\276\216\001\211>\304[\247=-\010%=\214\276\002>p\231\223>\005\020c\273\361\235\030\275P\215\027>\301nX\275\257}\201=yun\276b\370(>\346\221\257\276\213\375\005\276d$\373\274$\233\313\275Cs\r\277\235+\n\275d\262\230\275<N\021\276\376\324\030\276\342X\207>\330\365K\276\007\316\231>\301\255#\277\221\234\314\275W>+>\375M\010\276Vd4\275\006GI>\3429\273==,\224\276\300\004\356>\027H\360\276\006\r}<y\314@\275\263\322d>\2721\335>y\261\260\275)?!\277\324`z\276c\264\216\276\344\240\204\276\324}\300>;\344\226\276$\227\217\276\251\301\264\274\337l\203\276R.\350:\177m==\243\035\267\274\333P\201>\257\353\307>\265\031\'\274\365J\231=\201\t\\\274\001MD\276CV7?\325\225o\276,e\331\275~\035\310\276A\270\202\274R\270\336=\231G\026\277\365\241\313\276\t8D>\350\023\271>\302\243\r>V\016E?F%\365=\266J\260>\274W\335\276Z\201\341=\022N\013>o*2\276/Q\375\276\221\234\254=\030\262Z\276l\313\240=A\203\r\275\247\221\026\275\245\367\035?\360\212`>&\307\215\276\356%\r>l\317L>T:x>(\362\004>\t\341Q\276?o*=\263\007\212\276\226C\273\276\034\316\254>\251\301\024\276^\203\276\275\037\236\305\275\004\035-<C:\274\275\261\212\327\276\033/\335\276\017\rK\275Gr9>\340g\274\276K\352D>\004!\331=\245f\257>ms\263>A\232\201>\'\370\246<\001\023x>5~a\275\326n\233\276}\377\213\272\271\030\243\275\232\010[>\006F\336<\256d\347\276t\357A>l\226\013\275\316\215\211\276\343\031t\276!u{=\262\272\025\276:\225\314\275$\271<\276\325\t\350\2750L&\276\375\366\325>3\372\261\275c\264\376\276o\rL>\224\244k>\306m\024\276\210\205\332\276\275\307Y\275j\336\341?}\221\020\276F\224V\276\277`\367>3\304A\277\365\363\206\276\221\322\214\275*\346\240=;p\246?\226&\365\276\260\003\247>\032\303\\=\356\006\221=Q\336\307\275Q\210`\276A\202b\276\034\353\002>4\277z\2763m\257\276\363\037\222>\235\327\330<\r\340\005?u\223\330\276&\307\355>\214\271k><1\353\275.\342\373\275qr\377=.\255\266>\203Q\271>an\367\274&S\225\276\257\316\201>\3058\277>s\205\367\276Z\022`>\277\2671\277\240\211\020\276\320\263\211\276\364\032\373\275KxB\275\002\020\227\275.\342\373\275\272,\206\276\200`\256>YLl\276\233Zv\276\020 \243\275\271p\000>\025\312\302\2746\260\025\276I\021\331\275\363\037\222>\3230\354\276\222\\\216?.\034h>\310\007\335\276 \322\317>\255i\256\276\340\271\267\276C9\321=eS\376\276W\t\026>\351\\\366\272\025t\213\276\213\303\251\276[\261\037\276$(\236\276\255\026\270\275\350\336\203>\367\177\304\273h\367\032\274\273\270\215\276\\\346\224\276\207O:=\035UM>\344f\310\276#ga\277Lq=?\270\314\351=\235\235\234>\217\376\267\275\347\214\000?\371\367\031\276`\315!\27729u=r\277#\276\244\374$\277t$W\276{\367\207\276\2175\203=x(j>\346\005\030?8\241\360\276\302i\001?\216\001\331\276\032\300\343?(\233\302>\210\364{>Q\364\000\275\367\004\211=\342\036K>F\261\\>\223R\320\275f\022\265=\264<\317\276\035\217\211>\006d\317>\220\210\001?tA=?\321?!?\345D\273>\302\300\363\2753\033<?\351&\t?v2\030\276Hm2?\222\350]?Hmb\276|\362\300\276O\257\264\276\211\340I;\025R^\276g\230\032=\360\371\241\276wg\335\276\232_->\010 \265\276?\306\\=\240\246v\276ni5\276vq\333??\251\226\276\203i8\276W\354\017>\235\235,\276^\242B?f\275\210\276y\037G\275g\3556>L\216\373\276\354\206M\276\016-\302\276\343m\245<\347\0300>fk\035\276(\232G=u\253\207\276\022\332r>\227\250\216>[az=\275\251\000\277\013\356\007\275\235\327X\276\333\334X>PSC\277\277`??Tt\344\275|\355\371\276\232\261H>\023\n\301\276\345\355\330>NE\n\276\363\310\277\275\'P\004\275B[\236\276Q\367!\276\030\266\301;!\352\336>\036\026\222\277x\356\035>bg\032?f1\201\276\035\003\2148i\343\270\276\263)\017\277\257BJ>\'Nn>\001\323\263\273\342\036\213\276K\037\352\276\324`z\276\303\201\030\277\345\362\237>3m\377>\025\220v\275t\352\232>t\007\321>\234m\016?\372\200\200\275\177\274\347>\326\002\373<\250\0008\276]7\000\274PR\240\275\257Z9>@\023\001\276\242\177\302>\206=\025\277W@\241<\306\242\331>%@\035\277\272k)\276\260 \025?\327\022:?\254\213s?\231\201\252>\020\257C?\366]Q\276\024^\242\275$\264\345\274\262\205\260\276\232%\301>\326\220\370\2760\360\254>Ae\374=\364\3406\277m\342d\276oGH\277\341@\000\277\202\255\322=f1Q>\247\226-\276\010\311\322\276a\246\235\276\330\273\277\274P\307c\276(\n\344\276\027\324\207\276\314]\013\276JF\356\276v\2468?\375\365\212=6v\271>4\235m?Q\240\337\276\337O\215\273S\\u\276\021\337\211\276\207m\003\277?\035\037?\357\311\243=/\337\372\274N\321\001\277:\314\247>\t4\330\274+\366\227\277\320\n\254\275v\211Z?\214h{=6<]>\245\276,=\353\250\252>3\376M\277\231\236\360=R\0171\276\235\200\006\277PSk\276\226\225.\277\301\220U?\253>\207\276\370\374\220>N^d\275\272\242\024\275a\216\026?\235F\n\277\352\214\024<@j{\277\324\363.\275\261\375\344<->\245\276\347\337n=N\234\254>\206\217`?\300\004\036?\352\317\036\276\366\177\216>\221,\360\276H\245X\275$\177\010?\330\r\213\276u\037@\277p\266\231\276\271\372q\275A\324\375=[\261\337\276\367\344A\277\310\357\315\276\320\325\366\276j\207\037\276vO\216>h\313Q\277\376\267\262>\375\244R?\003`\\>\266-\022?\016\242\265\275*\221\004>\371\367\031>\370S#\276\027\331\376?\312\303\202\277\014Y\335\276\243#y\276\206\003\021\277\0049\250>\321\221|>\264\002C\276u<.?i\343\020?\266J`?jM\323\276\325&\216>\373\256\210\276\360\026\000?\232\316\236>\006L\340\275\036\334\375>J)h\276\2068V\277\311\345\357>\311\253s>S\221\002\277X\245\031<hy\356\276\253>\327\275\033\273D>\026\336\005>\274\313e\276F.\356\273\t8\224\276\0216\354>\\ 1\277\341]\256>\204\323B\277\372\n\222\276\211)\001\277\272\207\244\275\002H\235>F|\307=:A\033\274\307\364\004?\253\224^\275VH\351\276y\351\306\276n\3337\275\370\215O>&S\245=\363\345\205\276\023\325\033?~:\376\276fk\335\276\276\274\030\277p%\273\276\304w\222\276\271\302\313\276\025\306\226\276\340\276N>4\242\224>\317Nf>\266\017\271\275,\202\277\276A\203\r=\033G\254\276\375\367`<\214\241\034>B>\250>\363\253\371\275U\336N\276e\344\014?v2\210\276\010\3468?\252\0169\276\223\000\025\276.V\204>OuH\276\320~\364\2765\357\260\277\226\347\201>\314][?\r\375\303>\034_\033>\270\3517?\214\370\036\277\2613\245>\031r\354\274\313e\203=(\325.?D\027$\277\264\2530\276s\242\r?\017\264\242>\020\222\225>y\351.?\247\\\241\276en\276\274c\232\311=\377\225=\277\211\3574?\033L\343>D4\312>Nb\320\275\207\334\254\276\217\252\266\276:\222\273\276\304\231O\277\335\323U=P6%?AHV>\262K\324\275Q1\036\277\233\376\014>e\303\032\275\215\356\000?\007\266\n\277\232\010#\277\356|\037>\202sn?\342=G=XX\220\275-\317\003\276\321\\\307>\341\177\253\276\313\241]\277\320\355E\276\206\342\216\275\223o\246\2762 \333>\001\370\'=TR\367\276H\341\232>\373\005\373=\3122\004\276o\3306>\024\226\370\2758\020\002\277\245\0244\276v8:<U\205\306=H\334\203>\227\255\305>`\037]>\241\326\034?\313\326\372>\344,,\275w\025R\2769\227\242\276\305X\246=\036P^?28J>\020\351\247>\262\327c?\303\365\010>\263A^?\323Mb>t\357!\277+\207\326\276\020\006\336\275\255nU\276\\ \201>4MX\274\016\276P\276\336\223g\277\251\373\000\277\256\022\274\276H\376 >+j\360=G\377\013\275\021\374o>\001\373(?$\013\010\277I\200\n\277\347\000\001?,e\211>b\241\326\276\350\274\006?\202\255\262\276\264\252\305\275|\362\340\276\365g/?\013)\277>\376&\324=$E\224\276\'f=\276+\207\326\275\023\270%\277\r\340u\277>B\315\273i\035\365>CV\'\277E\330\320\276\210\235\351\275Ou\230>l\354\262\276\334\272\033>=\017N?Y\027\227\276\237\002 >\007%\374\276\272f\022>\332 \203>\326\0340\277\306\334\025\277W\350\003=\307K\207>Y6s\275`\253\264\276>\355\030\277H\025\005\275\224O\017\275C\255\211\276\313\363\220\276\264\260\'?\376C\022?\234\371U>\204*U>>\"\016?o/\t\276r\334\251>\242\013\372\276\243\314\036\277\265\025\313>\342\344\016?\013{\n\277\207\302\'=\377=\370\274%@\r\277\000\035\306\276\260 \315\275\0265\330=\322\343\247>\375\2741\277\313g1?f\024+\276Z\365\371=\377\t\216>\022\203@\276\210\021B>\201\262\251>\366b`\277\024{\250\275rm\210\2764\272C\276\177\372O\275\221\320\226\275\177\336\204>\364l&?82\017>;\307\360>\023IL\277C\004\214\276\234mN?L\211d>$\234\226<C9q?\003Cv\276#\241%\277B\t\203>\252\2021>\243\314^?V\202\325>gaO>\361\241\304\274\030\225\324\275b-\376>\225+<>\245f\237>\206\003\321>\323\371p=\033\201\010?F\266\323>\032k\237=\036\247h\276\2176\006?Z\273\255>\331\010D\276\364\025\224\276{Nz>!<\332<I\205\221\276\334FC\276\274\313\305\276\037h\245=\374R\217\276:#\232\276\346\3133\277#\370\357>\307K\347\276\351`\375\275\245f\257>\275o\374=\303\360Q>%\3144>i5d\276\005\243\362>j\275\277=\302\243m\276\321yM=\037\272@>\360\304\334\2763m\317\276\223:\201>\333\371\036\276\255i\036\276:\006\244\276\333\212=>p\224\024\277\372a\324>/\250/\276d#\340>D\206\025?\220\203\322=$\326R?L\303h?\224\204\244\275\332\311\000>2\344\030=\024u\346\274\323\274\003\277\351_\222\275\027H\020>\020;\343>\034_+\277\"\375\306>\017\356\316=:\351=>\037\235\n?\027\202<\276)\226\313>\324\232\206>\007\266\252>\271\307R\277\227\2555>\226!v?\372D\356>P\252\035\277\006/Z>\331wE>P\302d\277;\344\326\276\244\337\206?d\036\371=.\312\254\275\361c\234>\215\013G?f\367\304>\0265X>.V\014\277\201\354\225>\321?\221>\264 T=R\325d\276#\241\375>\203Q\311>@M\355>X\312\262\274\251j\322>\027\331\316\276\272\332\n\2763\247\213=\235\205\375\275\314\230\242=\001\302\207=\233\001n\275\334F+?h\221]\277n\372s>\266jW<\311\223$\276\265\033\330;r\334\211\275Nb\220=)\256\332\276.\004y>bM\245\275H\026\240>\301\034\215\276\211)q\276:#j\276\231\360k\276]\026\223</Q\355\276\260=s\276\3377\216\276\027\020\032=\300\004\006\277\340\362\330<\001\366\361>\264\223\221\276e\252\200>\356\261\034?A\361\003?T\214S>Zhg<\322\030\035?\314b:?5|\313\275|\362\320>\250\216\265\275G8\035?\372\270\036?\010U\352\275\001\301\374\276\315#?=\237Y\222>\217\374a>*\221D\276a\340\311>\246\233\004>\353\305\360>l\354\222\274\372\325\004?\274\313M\277\252\202\t?\256\330?\276cbS\276m\347\013?\202\220l\275\334\272[\276m\255o>\305\2171\276c\356\212\276\244\027u=S?\357\275\223\343\316>\217\252N\277\360\242o\277\337\370\032>\310\"r;\030\317\360>\335{0?\244\302P?:\257\001\277\031\342\350>F\261|\276Z\360\342\275\216#\206>s\205\367\275\354\243#?H\277\375=\371\367\251\276\244\252\t\277\276\244Y\277\250\305 \275y\036\254>\372\nr>\366\013v\276\255\335V\276p\231\013?\374\035j\276\375\301\320\276\263A\016\277\235\021\r??\214\260>\327\210 =\304_\243\276\340\276N>\220f,>\253\004\013>\253!\221\276\233\376\234\276\t\341q\2761_\216>\224\2742\277\021\337\001?\274\226@\277\230\247\263=\204\201\227\276\255\027\203\276J)\010\276e\307f>\210Ix\275\365\020\255\276\254V\206\276W\356\205<\311YX\276\275\3434>\251\300\211=&\337,?;\251o\275O\225\357<\275R\306>&\001\332>\244\337\216\276\001\0238\276U\244\032\277\346\312 =\276M\237\276qZ\340>F}\222\275\020\222e\276\327\243\320\276\004\342\365\276\'\024\002>\035\312\260\275R~\022>\210\325\237=\275R\206\276\265l\235>\333m\347\276\322:\232\276\'f\335\276\025\250E\273\210\235I\276e\374\213>\3706=>\374\030\243>\356\353`\276\246\270\312>X\255,>\252\202\361>F|\347=\016J0\277\221D\277>6Y\343>\355\330\250\276\274?\336\276N\271\222>\030\317\320\276\177\207\022\277\007|\016\277\356%\255>B\225\032?_(\200\275\373\"A>\366\177\036\277\363<\030\276\021\337\211<\023~\211>\244\374\264\2767P\340<\302/-?z\245\254\276X\250\215\277O\351`>\r\246!\276\250\306\253\276\025\267\300\272J^]>\263}\250=\335\014\267>\331\316\267>>\"6?9\210\014<o\201\224>\365\276\221\276MJq\277zT|<3\376U?*\000&\276\006\022\344>\334\200\037?[\3533?\377\225U\276\r\032\372=\235\235\334>\001\301\374\276\256\323h\276aO\333\276:]\266>C\342.\277\033*\226>J\265\317\275\205\010\230\275\306\247@\275\352u\313=\027\331>?\206Y\310\275/\027q>\007\226\243\274f1\361\276%]s\2769\356\364\276]\371L>Zd\023?\240lj>@\373\241>\274\256_\276$\177\200>|\233\316>\204G\253\276\341\321\366\276\347\306\204>\341E\277\275\312\340\020\277BC/\277\030C\021\277\206\254.?\314*\307\273vT\325\276un\372\203>{\367\267>\232]\367<*\214-\276\253x\303\276\256G\201=\301\214i=\035r#?\025\251\220\276\327\335\254\276@\207\231>z\032p\275\321yM=k`\233>x\177\214>d\036!?[%8\276\314\227\327\2751^\363<\210e3=2\346\376>\355\2016>n\372\263\276\221D/\276\202sF\276\234\304 ?\341\321&\277\211\357\244\276\257A\237\275P\252}\276?R\034\277wg\355=6\310d>e\245\311>s\241\262=\035rS>\314\0130>\212\345\026\2763\371F>=~O>\336\222\234\275\361F&\2768\025\t\2762rv\276p\321\211\275;pN\276r\304z>\024\\\024?\230\027\340=\356w\010>\002\201\256\2753\304q\276\303f\200<\214\271\333\276\341\2272?\373t|\275!\315\020?;\032G\275y#S>\204\360H\276-!\217>I\272\226\276\n\236\302<\260\222\217<\341\230\305=^\205t\276\311\345\317\276(D\000?Hm\202\276\321y\315\276[%(?d\314\215>\262\205\200\276AF\240=\251j\262\276}\227\322\2745\014\277\276\\\3464>\311\223\264>~\374e=~\376\373\2741\323\206\276\025\035\231>b\272\220\274\336\002q\277\333\026\365>To\215\275k\324#>\031s\327=\214fe=f\203\014\276\257C\265=Z\236\'>ep4\276\350j+\276Tom\2767l[>\247?\003\277\n.v>\367\307\373\275\362\352<>Y\261.;\177\2747>\273\270\365?\t\026\227>DL\231>\221\233!\276\017(\353>\272f\022\276\234\026\254>\333Pq>\023\017\230>\231\327\221\275\377\317a>\324C\304\276G!\t=\272,\346=K\002\324\274\201{\236\274d@\026\276\377\003\214\275@0\267\276\355\266\273\276\337N\242<oc\223=\251\301\244\276\020\222\245\276\007\262\236\275h?\222\276\217\307\374>/\207\335\2740\201\213>D\250\262=#\333\251>\307Kw\276\343\307\230\2765}\266=\263\265\036\276\260=#\277!Y@\277\205\353\221\275\327\206\232\276\226\350,\275\3578\325\276\347\342/=\021\215N>\344\240$\276\311\253\023\276\035\224\240>\230\211\302=\373\350T>Z\237\362\274]\277\260>Y\372\260>\310\357\235\276\013F\365>\224\366\206\276\032\250\234\276\2343\222\276\270\311\250\274Y\243\336\275\200\232\332>mV}=}\320\363>\274?~>O\314\332>\215]\"?\200\232\232\276\312\375\376>\030[\330\276\272\2038>\206\346\232>\260\311\252>:@\020?\327\3717=\233\003\204>\2140E\275\036\371\343\276\200`\016\276\032\250L>\0047\022\275\323\335\365\274H\212\230>\216X\013\276\204\236\315=-z\'=\t\212\237\276\014\007b>\331|\274\276W]G=\310$\003\276\265\371\177=|a\242\276\270\001\317>\014\260\277>\226Ck>%u\262\2769\013[\276?\036z=]7\205\275o\272\205=:\351}\276\204G\213>JB\302\275\213O\221>]\277\240=j\274\204\276\017\234\203\276w\365j\275\016\025\303\276\2608\334=\241\271\006\277)\354\242\272H\026\200>\3475\326\276\007\353\317\276fI\320\276\313\363\000\277@M\r\276\215%,\2746<\315\276\355\330H>\211\322>>\223RP<:\010:\275\027\274(>sc\212> A\361=T\035r\2764\023\214\275\310D\n=7\305#=\313g\371\2750\365\263\276\2760\211>=\n\'\277\2554I>nQ\226>\353\250\n>?\307\207=%\222\010\276\326\220\230\276\231\236\010?K<@\2760\022\022\277\277\267\211>j\370V\275\023\356\025\275~Rm\274Z\330S<\005\024*=f1\321\276~7\235=\345\355 ?ga\277\276\302\206g\276\335zM\275\234M\007=k}q>\336vA\276\313\020\207\276,\267\324\276^\205T>\335$\206\276\3707\210=E\r\346\275~\030a\276\023,.>\240\375(\276\334\366\275<p\007\212=\275\030J\277\n\200q\276\"\032\335=^\327\217>\342u\375\274~\340\252\275\347\343Z\276\277H\010?@P\356\274\372\263\237\276\261P\013\276}\221P\277\014\223\271\276q \224\276\354\027\354=\333\371^>E\023\250\275\n0l\275\027\202\274\275\301\254\320<x\264Q\276n\372\023\276\304w\342=\205\227`=\'\302&>\215\321\032>k\324C\275=\233\205\277y\257z\276\202\255\n?9\177\223>\356\257\036\275\261\334\322\275\341z\264\276E\273\n\277\273a\013?u\037\320>\235\021\205?\333\212\215\277MJ\261>\370\210\020\277\3377\316\276,\361\200=\326\305\355\275w-\301?\207\247\247\276\020\223p=\200H?>K\253A\276\336\002\331>;\374\365=\370\031\307\276\261\334\022\277\347\246M\275\032\213\006>\360\247\016\277Y\206\000?\324\016\027\277[\323$\277\343\301\266=\001\023\350>V\2025?alI?\214J\352\275\324\266\301=H\026\220\276\2445\206\275\260\254\344\276\257w_\276h?\222>\214\025\345>\362\230\301\275\354\300\271\276\360m\232\276\243\351<\277\307h\315\276\272\367X?\025\032\210<\234\247\032>\027eV\276\035\003\022?5\014\337\275\350j\353\276N\177\246\276V-)=3\334@=\336\310D?\223WG\276r\376\326\276\227\220\217>\256\365E>{N:>\224\244K>\362\260\300>\214-\324>\270#|\276k\267\275>\267\264\212>\254<\201\275\365\2761>\'\332\205\276Y\027\367\276-%\313\275\206 \267>$\323\241\275q \024?4\021\216?\265\246\331>\202\347^\277\325\347\n>*\035\214\276\201!\333\276\017\325\264\275\317I?\277\024\263\016\277\030!\374>\270x\230\275\230\372\271>\364\032\353>\256\266\212\277\236\014\006?\207\376\231\2762=\001\2771\010\014>\004\342\245\276Tt\204>\2608\354>\022\274\301\275M\025\254\275g\017\304>wJ\207>\341`o=f\r\203;!\260B?\240\304\207=\320\017\033?\376\264\221\275\242)\233\275%;V>\244S\207>9\326\225>\004:\263\275\247[v\275\340-\020>\316pK\277\242E&?/\206\032?\033\r\000?\337\246?\276\251\331#>q\311Q\276\216#\016\277\265\246\211?rP\302=\366\007\n\275\331\227\254=8\276>\27774\305\275\234P\020?\277+b>\214\2046\276\332\033$\2771\3236\277\0218\022\275\025\214\212>2r\326=\314z\241>uY\354>\370\031\347\276C\251\235=;\3078\277iRj\276A+\010?k\'\312=\372\n\262>\326\3779\276\274\"\370=\314\227\027>\270\314\211\276\206\346\312>\035\217\031\276\2652\321>\267\356\366\276\031\305\322\2764\021\216?n\335M>\207\376q\277\034\3609\277\032Q:?\355\365\236\276IK\225>\276\0233\277\260\346\300=\275\343t>V\274I\277;\001\315\275\317\024\252\276\361K}\277\353\342\306>\344f0\277E\240z\275nR\261==\'\275\276uvr\275:\351U\277J\357\333\275m\000v\275\353\213\264>\344I\222\276\025:O?\311<\032\277(E\253<4\242\214?L\216[>\221D\017?\1772F\274j\233\207:\331B\220>M\241\363\275X\347\020\277\353V\317>\311\2533\276B&I\277\250\214\377=\214\3706\277\242\227\301\276:u\225>|&{\274\207\212\301\276\027\333\377\273\215\177_\277@\366\352>\275\247r\275\022\302#\277\013$\250>\344\367v>\000R\233\276\353s\215\277\003|\267<\277H(\276\306\334\225\276\202\342g\276\246\325\320\275\032\206W\277A\202b\276\323\336@\277P\344\351>\364lf\277\000;7\275\030\260$\275s`^;\305\376\342>e6\330\276p\010\005?fff\2765~\241\275\265\375k\276z\031\005\277\312\303\362\276\246~\026?\326\305\025?\207\334l\276\236^\351=\360\304L>}X/\275XsH\277\035Z\\?\022\240f>A}\373>\026\023s\277\216\314\223>\217\212?=\2242)\2752\254\302>Sy\213>\375\274\351>H\247\006?B&9>\3603\316>\300[\220\2772\003\325=Kvl?\034_\003\277\344\024}\277\023~\351>\341z\324\275c^\307\2746\253&?\310$\323>W\353\304=4\277\332\275\214\202 =\331\316\217\277/\2438>\304\316\224\276 \014\024?\354\337\365\274#\0256?\2132[>\330\360\344\276\377\262\253\276_$\364\275\333\212\025\277:\006d>\rT\306=\361\327$>\215\264t>\0010\256>\245\240;\276\365\204=?\227\003\235\275\340\271\027>\202\312P\277U\023\224\276\207\334\314=4\205\016?!\352\356\276\246\233\234\277H\212\310<\n\241C=7\032\010\277n\027R\277\342\314\317\276\362\322\255>\231\330\234\276\261\207\266\275 {y\257\272>\253\t\"?n\335\r\276\027\324W\276\003\t\202\277\200\267\200>\026M\247\276\257\224!@\241\241_\276\006\272\366\274-\317\323\276i\0355>\2505-\276\304_3>J\322\265\276\330\266\330\276\213\246S\277x(\372\276\265O\027?\266\204|\275\324\361\030\274b\276\274>\367\006\037\276\277\3615>\021\374\277\276@\022\266=\260\344\252\275\373:\030?[\224\031\276\033\236\276>\342\036{\277\2402\256>\036\247\000?\352[\346=\360\334\033?\030\262\312\276&Sm?g~\365>aO;\277\340g\214>\n\242\376>\343\337\007\276$\227\377=\344\017\006\2760G\217\274O;\004?w\363\204\276\006\365\035?O\222&\277\362&\277</n\343\276r\334i>\207\026\231\276\030\225\024>R\267s\275_{\366\276\234\247\372=\234\247\032>2\254\002>4\327\021?\345\263\034\276K\253q\277\246\270\002?\263$0\277O\005\274\275\231\365B>\247?[>Hm\342>=\270\033\277[\2241\277eK\240\273e6h>\304\261\006?TR\237\277^.\202\276\367\036.\276{\210\266\276\220\367\022?0du>+0\204\276\037\242\021\275\232\231\331=d\314\335\275\234\341\246>\2505\355\277\363<\350\2764\242\324\276T\251\331=3\033\344\275=\325Q\277f\2103?&\036\360\276\251\366\211\276\367X\272\276o\236\002\277H\212\010>$\264\265>\242\227\021\276y\036\014?\010w\017?\346#\211=EWX\273\234\304\030?\031\004\216\277\217\307L\276\023\n\021\276al\241>5\322\202>\205\3163\277X\312\202\276\334\241!=Xs\300>\\r\\\274\267y\343<\256*\333>\321\221\234>\357rI?\345\'U\276\010=\273\276\312oQ<vq;\276\007%\234\276[\2310\276\022\024\377\276S\"\t?\034|a=yXx\277\372D\256>\312\026\t=\373\350t>\233Z\226\276&6\237>x\356]\277\025\251\320>\332\254*?%\313\251=\212\260A\276K\345\255\276\310\357\375\276\367\222\206=\003\317\355>\026\366\264\276n4\200\275\253\004+>\370\301\371<:;y\276\025\306v\277\327\206\232\2766Y\243\274r\340U<\002\237?\276\327L^>\265\026f\275LO\210>\177\274\027\276C\004\034?}\263\315=\264<\317={\275{\276\371\275\255\276\214\370\356>\003\317M?>y\200\277*:R\277\220k\303>\326\342\003\277\\\217\362\276\360\334#?\346\221\257\276\240\211\020>\0324t>\205\316K>P\307\013?\341\n(=\353r\312\274x\227\013\276\347\035\347>\243\314\226>cEm\276\200}\024\276\271\307\322=\026\023\013\277<\210\255\276\021\252\244\276\331\353e?B\225\212\276\377\354\367\276\250\306K\276\0221%\27777\306\276J\322\035\277\344\275\n\277`Y\t\276\203\300\232\276F%U>\361\235\230=\035U\r\276g\355\366\276\246\355\337=\237Y\n?\340\234Q?x\234\202>\036\247\200?\307h\215\276\320D8\277W\262\363>b\370\310\276x\227\253>\201\317\377>\242\264\367=\326\034@\276\233r\305>\000\256L?\270\222\355\276\307\272\200\277F\224\306\276\364Q\006\275\305Ue\276\244\344\225\276\211\230\302>\252\361\202?J^%?\275\214\302>%\351\332>b\370\350>M\326\250>~\035\250>\274Zn<\351\363Q=\255\243*<\331\316\307>\213T\250\276\270#\034>\222\005\354\276ge{\275\020X\211>Z\365y>R\017\021=E\270I\275G\3461?\245I\251\276\014\315U>%!\221<c|\270=\256\r\305>eB\202\273\177MV>(I7>\243\222J\277\372DN?\317,a?\214J\372\276%\003\300\274\254\342\215>\2132\033>\231\r\362\2758\0202\276#\204\307>h\221\235>E/\303\275\246(W=\265\340\305\276\270\351\357\276\366\320\276<\201\004-\277\251\331\223\276\322\343\027>\2176.\276\233U?>\010=\353>\"q/>RD\206\276+O\300\275\321t\366=\200\364\255\275\237\037\366\276\245\024\364\275D\300\001?4o\213:\034\010\251\276^\235\363>\356|\237\276\034\360\001\277\\\346\344>;\252R\277\321\005\265>\367\0023\274a\216\236>\205\266\254\276\344\243E\2751\353E\274\334\272;\276\375\333\305=/\250\217\276\034\266\275\276H36\276\2201\247>\224\366\006?\270\314\001?\315\351\002\277A,\273=h\\\330\276\317\206\374<\362$i\276\345ai\277\341&\203\275\211\352\355\2751\231\252\277\r\211\373=\261\212\367=\033d\262>\002\324\264\276*t\276>}\227\322<]\341\375>\007_\300\277\007\010\226>*:\302\276\331\224\023?\375N\223;\236\265\313\276\333\277\242>M\020\205\276;\337\317=!\004$=\017\234\363\275\323\336\200>\022\302\303>vl<?\276\336]>S\263\367>nL\037?\333\277\302\276\255Lx>\356\353\320\276\231d$\277\303\360i?\311\310\031>\324\361\350>\027\021\305\275\013$\010\276K\315N\277\274\2260\276\312\025\336\276F\357\324<RD&\2763\376\215\276[\316\225>\341\2666\274^\203>\274\3745y\276\020\314\021>U\336F\277\264\002\343\276\302/\025\276yX\370\276\345D\273>x\362\251\275\227s\351=y\257:>\016-\362\276\216\257m\277s\235\246\276\256\360\016\276\201C\330>\003\243\001;\264\345\214\276\254\377\363\275\327\206j\276\347\251.>\210\364{\276\374\336\246=\223\251b\276\"TI\277\266\241\302\276\374\251q\276\237\310\003\277=\270\033>\274\263\366\275VE\270<\333\277\022\276\005\305\257>\250WJ\277{fI>3\033\304\276_A\232>*\221\224\276\206\346\332\276\327\372\202\276b\363\201\276\034\323S\276.s\232\276Ve\037=i\000\357=o\330&\277fN\267\276\374m\017\275\355\273b>D\3362\275l\3542>\004\220Z\276\267(S>\312\374\243<\223\030\254\277\256\273\371=\330\330%>\016\025\003\276\252\267\366>\027+\312\2753\033\034?%u\212\277\262\200I?\374\343=<\265\211\013?i\214\326\275\177\366\363>?\306\354>\216\222\347\276\032\213F>$\266\233=\356B\003?\014u\230\2754\272#>\223\214\\>\321\350\016>\\\254\370>]\371\014>1\010l\276K\223\002\277\023(b=\304%\267\276\r7\200>\007_\210\277j\244\245<)\256\332>\321\2263\276\324\2027>#.@\275\\\217:?!\310\001\276C\342\376\276\2613%\276\rl\345>\002\016\341=\035\254\257>o\330v\276\013c\233\276\013\230\010\277\356B\033\277\276\331\246\276\365JY>`\310B\277/4\327\275Ic\364>o\236\332\276,+M\276\374\000\364\276l!\020\277\016\370\374\275N\177\226=L\211\324\276bg\312>\331=\371=G\346I?&SE\276\006\273\341=\354\243\243\276\030}\r\277=\232j\275\366z\027>A\361\033?4.4?\204\330\331>m\377\002\277\204\362~=BC\177\276\\\346\034\277\334\200\237>\'1h\276\024\"\200\275\366\227}>\320\017\263\276\330\021\007\274\3372\347\275V\0165?\274\005\022\276j\336\201>\315X\024\276D\250\222\276\024\355*=\t\304\213\276\037K\237\276[_$\276\354Q0\2777l\373>\303\3601>/\027q>\312T\341\276\373\316\217\275a\216\036>S\005\323>/n\203>#\243\203<\200+\001?\207\334\014\277\212\2143\273\'\367\213>F_A>R\355S\277\nh\302\276\2554)\276\344\203\216>\323\2076?t\265-\277\013)\037>2 {>\333\247\003?t\322\013\277Z\r\251\276\216!\200=\036\371\303>\340\234)?o\364q\275\177\023\252\276\2505\255>)\313\220\275\271\033\244\275io \277<N\221?\247<\272<N\234\334\275\341\013\343\276\337l\303\276\027H\360\276\225F\254=Ae<>WC\242>\204\365?\276J)\000\277\021\036\335>=\016\003=\026\023{>\3269\226>\271p\320>\236$\035\276\225\2374\276\330\273_>Mg\'?\277\361\265\276+\334r=5F\003\277\177\274\027\276\303ai\275\002\361R\277\2716\244>\256\236\023?\005\243R\276\374\000\204\275\237\315:?\021p\010\276\347\337\256<\000\035\226\276\347\000)?7\340S>\370S\203\277\230n\032\277\215\231\204=\341\013\243\276\223\214\034\276b\333\322\276\277e\216>\303\273\\>4\327\351\276\024\224\242\275\rl=\277Ra<\277\212\253\372>\267z\256\276\214\363\267\276\361)\260\276\371\332S>\232\356\225=&\374\022\276\255\300\360>\001\336J\277p\231s>\310\322\207\276\366\013V\276\226=\t\275\2028\217=i\253\222<\237\310\303>\244p\235\276M\023\266\275\360\211\365\274\320\'\362\275\350\202Z>\242z\003?\304B\r\276\245N`>al\001\276eS\006\277\326\220x\276\320\233\232\276\273\233\'\276\034\321\235=\272\021\226<X9\214?Ra\254\276^\021,\277R\362J>\273\321\307\274\350K\357\274\200}\364=\255\246\313\275b\020\220?\311ZC= %6\275\372_n\275\206r\">\301\342\220>9|R\274\025\310\354<i\375-\275\372A\235\275\375\241\231\274\340\020\272\276\213\3039>\320\t\301\275\003>\377=P\031_\276\265\340e\276X9\304>|\'\006>\314\177\310>\304\316\304>\227\215\256=v\246P=\260 \355>\225c\222\275TW>\276\251\331\003>\274\350\013?g\n\335\276_\322x\276\\\003;\276:#*\276r\371\257>K\310\'>\332U\370>\215\264T\276\224\277\233=Ra\214>\337\337\240<\345\240\337\273?5~\276MJ\201>O\006\307<\274\"8>\273D\025>;\031\\>q\000}\274\n\272\r\277\3706\275\276\001M\264\276\363\0372\276\366b\010>S\"\211\276\033L\003>\010 \205>\321\350\356>z\337\030>2\003\325\276\314\226l=\240\375\250\275s\021\237>\306P\356\276\r\303??1\316\037>\017d}=\254\000\337\2749\177\003?j0\r\276\030\225\014\277\205\010p\277od>>F_\221>\027)\224=\347R\234\276p\264\303\275\002\016\321\276!v&>\215\321\022?Y\300\\?\340\312\310\273\245\203U\276\373y\223\276\321\226\203\276w\204\023\276\325\354\001=\257\3537\276\304|\371=Zd\233=.\377\031?3\376\315>\365H\203\275\316P\334\274=\325A\276\334\272\003\277\032\213\206>\2716\324\275\357r1\276D1\231\275\344,D?m\312\025>\232|\023\2766\253^\276\306\250\213=^\205\324\275\3706\215>5\360#<\221\362\323=(\'\n\277\354\333\211\275\303\236\326\2761\010\374\276V\202%\276\335\014\227\276\212Y/\276\032\335A\276\207P\265>\354i\227>>\261\316\274\211\323\251\275\332rn>\240\211\200\276,\016\007\276\267\230\277=\376+c\277a\302h=\251\301\244>g\270\t?\256\360N\276*\221\004\276<\274\'\275\322:\232>\023\017\350=\037\021s\276\366@\320;\351C\027>\023a\203>\222\\~<\321\\\'>\323\336\020?\204)\n=\230\027\340\274d\006\352=\033\r\010\277\352\262\030>G\344\233=\264qD>\300\347\247>\245I\021\277\354\335\217\276_\014\365>^\242\032>\\X7=A\235r\274\347\211\347\274/\340e\275u\2238\276\033Lc\277\244\211\267\275\257B\232\276>?\234>\264\002c>\334ci\276\013\357r>K\253\341\275\320\017#\276%X\254\276,I^=/\243\330\275\236\265\373\276\233\220\266=i:#\277\017\177\r=\3711&>\317\203{>P\344\331\276|\362\000\277C\004\034\276&\376\250<\265\032\342>\363q\375>\3750\302\274/il\276\375\020[\275:\006\204\276\237\343#\274E\022}=\344\203\036=\006G)>2w\r>M\276y\276\371f\253\276\202\347^<\274\005\222\276\351+\350\276_Az>_A\252\276\247\263\223\276\377?\216\275\014y\204<H\371)\276M\025\254\276\334\327\001>\253\262\257\276/\0271>\350\207q\276z\031e\276/\375\313=\320\017\343=2\314\251\275\355\330\230\276\033*^?\014vC\275W!\205\276\214\370\316\275\032\374\375<#\365\236<\203\206\236>\024\317Y<\326\263V\273(\014\212\275\023\362\321\276\362\265\347<\213Tx>\3165\254\275\345\362\277>#\020\237\276_\230L>\200\361\014>i\000\007\277\342;Q>o\273\340\276\'J\202=\023f\212>F%\205\276\311\350\200\275\334F\003>\302/\365=\305 p\2762r\306>\005\211m\275\211\352\355=\345\270\223\276\306\242i>Hj\301=\262F=\2763j\276\274d\314]>m\305>\276(\017C\277\"\306+\275\007\3230>.\034 ?\031sW>\320\361Q<\361)\360\276w\326.\277\361)`\276=Cx\275\374\217\314<;p\316\275Ae\214\276\301n\350>\253\3543?{g4<\252C\236>%\004\253=M\204\215<\353s\225\276\254s\014=\270\316\177=]\277\220>\277\202\364=\366\227\255\276R\270\276\276\273~\241\276\255i>\276\234\304`\276\\\254\310\276\271r6=\312\375\236>\177\2453=\252\267F\276\317k,>;\307\300\276\325\354\001\276P\302,\276LS\204=\366~c=d\0062\277\t\341\361\276\335\357\030?A\237\030\277\205|\340?\334c1\277\245\024\014\277*t\236\275\213OA\276<k\327>\016\333\326\275\203\370@\275@\331T?w\025\032?Z\360Z?\210.\310>\346\226v>\373\005\373\276k\2327>\3328\202\276\212Yo>\345\'\305>N(\364\276\276j\305\276\002\232\210\276\216w\307=\241\363\232\276\005\213\323\276\376\016\365\276\221\320\246>\223o\016\277\270\222\035>\024\t\206\275\343p\246>q\003\006?\376&\264\276C\004\314\276*:\222\275\002\016Q?WCb=\363v\004>\027\331\376\276\262\364\241\276\361\235\030\275l\262F\277\230Q\354\276\345\310\3228\270\0017\277\376H\221>g\362M\276<\245\203\276t\322\233>7\211a\276\340\241\010\276z\245D\277d\351\023\277\332\346f\276\305\217Q>\241\241\257\276\207\341\203\2766\253^\276@\023!\276\277C\341>\305U\305\276v\246\200>\275\306\356\276\364\375\324=\226\t\377\276l!\230>\305S\217<\315\257\346=q\254\373\276z\374\336\2764\200\267\276\304w\022?\'N\356=\3750\002\276\256\022\254>6\260\265>\351\232\t\276b\020\210\277\361c\274\277\233\035i\275\241\235\023=\262\021\330>r\026v\276HP<>9\321\006\277\202\034\224>\323\331\311<\373\261\311\274H\245\270=\264v\313\276\034_\373=r\247\004?B_\272=\350\331\254>\211\352\275\276\023\364W\275/\2507?\200\202\353>\260\343\237\275\224M\271=\243\006\203>\006\022\024>d#\340>Yi\002\277\350\202\n\277\244p]>\314\227\347\276\377!\035?\367X\232>\261PK\276\242(\030\277\374\030\203\276M-\213\276W\004\'?#\204g>i5L\277!\007\205=+\301\">\031\307\010=&U\033=\26578\276\212\216\344=\227\220O>\300\354^>\0319K\276i\213k=\256.\207\275\t\212\337\276\335\230\216\276\246D\342\276\363\0372\277\022\244\022=\027e\016\277\250Wr\277\2236\265\275\210\2351\277F_\221\276\366\000e:Sy\253\276)y\265>.\344\021\275\364\211\374\275h\350\317\276r\212f?c\3214?\237\223\216>\264\253\020\276\235\364\356\276S\221j\276S\313\206>\225\326\337<\276M\277>\316\252\357>X\250\365>\363V\235=\260\215\370<\033\r\220\277+P\213<_\230l>&\307}>\273\320\214\276)\004r\275\364\370\025\277\005\372\224\276\340gd\277\367\257\\?v\032\311\276c\356\222?\004\221\305\274\335\315S?\313\234N\276\"TI\276/i\214\276\210\275\220=\300\347g\276Gr)\277\235\021\005\276\311\345\337\276\264Y\345>\204\363i=\313\241\245\275\243@?\276\211\322\006?\377[I>\205|\200>ga\007\277w\204\303\276*\306a\277\001\336\">\272N\203\276)\256\n\276\221,\260\276\324\267\034?\301\377\036?\\\346t>.\377\201>U\301\210?\2444\233\275\250\214\217>\254\220:\277\013F%?NEJ>\217\027\262=}y\021\277\331%\252>\257BB\277\342\344\376\275^h\216>\303\273\354>\310\265\301\275\013\322\014\275?\343\342>%X\004\277\177\211x\275;\302\031?t^\343\275\347o\032\277\300\225\254\276\333\205\206>\272\363D\275\332S\222=\247y??3\033\244>n\335-\276\237\345\231\276\t\215\300\275\027\237b\276\360\205\251>r\213y\275\\\005q\275k+\246>\353\250J\276/\335\004\277h\312\316\274nO\220<\n\327C>H\304\324\275\203\243|\277\324\267\234\276\320\362<=\211\357\204\275\327Q\025\276\201\226.<Ic\024\2769\232#=.\312,>E\365v\276?t\001>\023\362\t\277>?\234>7\303\255>\t3->w\236\370\274ff\206>\212<9\277\327i\014?V\361>\277h\005\016\277\245O\253<\206\217(>\353\213\304>\"\027\\=\217\337\033>\215\266\312=\317fU>\335\315\323=$\321\333>\271\250\266\275y\036\274>(\3624?;p\316\275}\350B?\236)T>{\332!>\266\020\364>[\231\360\275\217\374\031?\215\177\237<\372a\224\276\006cD=m\250\370\276\213l\'\276\n\364\311\276\303\273\354>\233\254\341> \262\310\274\344,\334\276\033L\013\277bJ\204\276+\366\327=\344\367&?a\246\355=\241g\023\276Ra\014\277\200\324F\276xE\360=B\225\252\276c\264.\277$\271\314\276?\343B>4\364?\277\t\371\260?\245N\200\276\215E\203\276\226x\000\276\353\377|\276T\035\202>|\n@\276t\352\272>\374\030c?\241-\'>\007_\210>\214\276B>\345\'u\276\264\223\341\276\355\360W=Z\267\301\275\031\220\275>*\214\r>\376}f\276\301\254\220\275r\371/\276q8S\276\267a\224=b\333\342\2754KZ\277\373\"\341>\202\2552\277\"\032]>|\325J<\\\254\010>\241\020\031?R\017q\276R\n\232\276>\226\036>T\214C?\343\252\002?K\037Z>\003>\037\276N\177\366=;\302\031?\247\005\337\276\344\203\206\277S\350<\276\265\375\033\277\214\025\025?<\367&\277;6b>0\330M\275\265T^\276vq\003\277nn<\277\311\253\263\276\013\322\014\277\325\315\305\274}\221\320;8\273\265\274\227\343\025=R\325$\276\302\372\007?Xs@\2762 \333>D\300\001\277\035Z\344\275\225`9\277\200\232\332\275\361)\320>\335\265\344\276J)\370\276Z\3602\277\351\361S\277\003`\034?\345\231\267=t\265%\277\2608\374>\t\341\021\276$+\177\275\254V\326\276d\314\345\277\240\303L?j\023\037\277\334\021\276>\371\367\211\276\206\033p\276\360\205i\276M,0=\211\352M>B\315P\275\366`\222\275\340\276n\276,(\254=+\331\201>e\031\262\2760\304\240;8\204j\276\t3\r\276\345\'U?\320c\264=\024B\207\274W!\305>\255\243\352>\215\264\264>\215\010\306\274\270\036%\276\027\324\007\277\220\331Y=\341@\330\276\023\017\030?\232x\207\275!\007\345\276/\213I\276$\234\026\276!\037\364\276\277\361\325>\030C\251\276\241\020!\277R\355\263>\332\004\030\275\255QO>~\247I;\375\3665\277\005\300\350>\356w ??0\221\273\203\027\375=\276\237\312>\243u\014\277\252C\026\277jM\023>\306P\356\276\202V@\276\270\257\003\275\037\205\303\277\240\340r\277\334F\303\276\210\2351\277\255\027#\276\256\ru\276\225\016\006\277\256\236\203>\230LU\276\207\305\250\275\201\225C\276\316S\035?}\226\207>z6+?\332\343\005=\230\242\274\275\353\342\026\276\364l\026\275\310\007\275>\366z\347>\246\355\337=\214f\205\275\335B\327<\0319\233>{14\277n\300/\277\232\010\233>\336UO=\347\373\t\276\273,\201\273\026\242\303\274\245\240\333=\356%=\277\264qL?/n\023\277\n\327\223?\267\220\021\274{\203\207? F\210\275l\n\244\275\306\205\023\277\241\277\220=pwV\276\306m\204\277\347\2148\277\213\251\264=c\264N\275f\367\264>\026M\227>\264Y\005\277<\203\306=\3019\223>\225\202\016>\3500\'\277\0216\\\276WCZ\277;\337\237>X\3122\276h\263\n\276>\350\231\276\332\033$?\234m\016?5\270m=\3269\206\276U\023L?\343\302\201>\035\2240>\t\371\220\2768\241@?\352!\352>J\316\211\274\321\226\023\276\006\330\367>\345\320:\277\207\350\306\273,(\214\274\221\233a>\003>?\276]\304W>R\'\200=\240\340\002\277aq\230\276V}\206?\340\020*>(\n\204\276\371\332\033\277Ra\254>\225|l=\235h\017?@\331\364>\222\313\177>\222\350E\277z\215\335=\3226~<\373yS\276\343\373b=\\\217\">\235\235,>\245\203\245>\217p\332\275Hm\342\276w\204\203\276\262\021\210>OXB>\026\366t=\313-}\277s\200(\277\274\256\337\2761X\026<\023\'7\276\021Q\014\275\325>\035=5$\016>To\215>m\346\020=\002+7?R`\001\275\366\264\243>\017\2274?\020\314\021\276Tt\204\276\361h\203>\035=\036\277\342u\275>\250\214O\277s\240\207\275\330d\215\276Z\330s>\361\200\342>1\317\312<-\225\307\276\226\t?\274\242(\240\276\220\367\352\275hx3\275DQ\320\276\034\010\251>\346\313\333>\206\344\344\274\236\014F?\256\266b=\030CA?hy\006?\017\321H\277\323\366\007?_B\205=b\241V\276\303)\363<\363TW\277\206\033\000\277\205{\245\275\243\351\354\275\345\t\004\275\231\323\225>\214\271\023\277zS\341\276\312\251\275\275\252\232@\276\227\034/?\365\020->\\r\274>\273a{\276h\2563\276\340g\274\276\372{\211\275\307\2728\276p\231C\277\013\230 ?S\313\036\277\342\351\035@\030x\016\276\215(m>\372a\004\276\317\367s>\036\376\312\276\242b\014?\2132\253\276\361b\341<D\206\325\2757O\365\275\343p\326>_\265\362\275V~\271=j\207\317>xGF\275Di\237>\363W\210=>yX>r\341\010\277\241\370I?J\262\216\274Sy\373>\014<\027\277N\234\334>\315\001b>\016\370\\>\014\223\231>Z\201\241\276\254\342\035?O#U?\031\342\030\277\317\203;>8\020\022<\020]\340\2766\036,\275\373\221b\276\273\231Q<\n\205H\276\3578\205\277?\035\237>\262c\363\276mY>=\267\264:\276\202\312\210\276\036\026\"?V\361F\275j\207?>\006\273\261\276\'\367\273>S\226\241>qO\374\273\003}\262>\225H\262\276\325\t\210\277\350M\265>\315\314\334\276\205z:=\001\023\210\276\200\232\212>\030xn?H3.\277s.e\276\343\307\330=\245i\260\275W\225]>g~\265\276VH\031\276\351e\204>\254\220\242\276:\222\313\274\224\205o\275C\376Y=\030xn>z\030\032=K=\013=s\327\262>\353V7\277\260\346x\277m\034\021\277\334\327!\276p%[>4\021.\2778\204\272>\342\036\353\276*\343\257>\236\230\365\274iR\312\276\025\3434\277\\\033\272>F%\225>\006dG?S\005c>Hmb>\376\361\236\276\240\303\034>T\343e>c\321\304\276\037\277w\275\274\221!?\345&j\275\261\341\t\277\356|\257\276\034\266\035?\336q\n?\227\342\232>\274t#\277L\377\262=\212\037\363>\004\036\230<JF\016\277c\227\230>\377>c\276\231\323e>\n\235/?\367\344\321\276m\255\017\277Kv,?\314z\261\276\345\321M\2756[y=\357\001\272=\236~\253:\314z\361\275;S(=6\315\013\277\261P\313>`\345\200>8\022\210\275\230nB\277\375\237\343\276\355G\n\276\3126\360\2746\223\007?\353V\317\276\270\217\334<\344I2>\324C\034?\276\331\226\276\252C6\277\266\333\376\276\024?\006>N\227%>L\246J>\r\337\002\275(D(\277\016\363\345\275\315u\272\276T5\221\276Zd{\276b\241\326=\212\037C>\345\270\203\276\244\210\214>\303\2366?\323\336(\277\357\376\270\276\216@,?\343\210\205\276\037\021\363\276O]!?F\231\355\276\031\377\356>\356\316\372>0s\313;\267a\224\274O\006G\276\231\201\212=\200+\211\276\2235\232>\300\354N\277\256G\001?\362\315\226\276\024?\206>l=C\275\020;\263>\003`\024\277\017\264\342>4\200\027\276\3372\007\276_^\360\276\254\213\213\277\334K:\276\374\336\226\276%xC=\301\213>>\332\345\233=\211\032\026;a\303\303\276\225H\"\276~t\252\276\261m\261\276\274\\\224>\253B\203<\331\224k>6vY?gaO\277M\300\217\275s.e\276\217\344\222\276\243=\036\275y\001>?;\031\214>\206\311\244>\n\200Q\276U\207\\>@j\323\276t\265\035\277O\351\340\275\256\330\007?\007|^>\207\207\220=\231d\264\276\247?\233>\355\330H?\201C\010\276\273\362a?\333PQ>aT\022>\206\311\364\276\255\372\254>\322\035\204>x\227\333>\333\371\216\276RD\206\276+0\364>\252+\217\276\"\246D>\341\013\203\276g\355\246\276\003&\340\276<f\340=\343\031$?\210F\227\276\343\337\307\275\341y)=\251\244\276\276\034%\017?x\234\242\276{N\372>\261\277\314\276\257\010\316\276\371I\245>\034\266\335>\277+\202\276\376F{=\344\203\006?\\r<>\007\352\024\275\020\261\301\274\014\037I?\322\306\321>\003`$\2777T\214>8\241\200\276\313\3707\275\210\205\312\276B\354,>S\350$\277\273\270%\277<f\220\2768\363+>rm\330>JF.>}\263\275\276\0216\274\276\363\216\323>\373y\203>Y\213\237>\\UN\277\036\304\316=,e\211?\367\222\226\276\300>\022?&\031\231\276\356\224^\277\303\r8?Nz\277\276\032\210\345\274#\331\203=\\=\007>\345\325\371\276u\310M\276L\2109\275\035\0032\276@\030\270\276_\2652\276\363\310\'\277q\346\367>\251\301\364=\276\336\375\275\215z\210=\014\260\377>d\257\007?\023~\331>S\350,\277\270\314i\274Q\245\006>\241\333\273\276\035:\235=\207\247\007@\354\335\237\276\261Pk>\'\024b\276\273\n\351=X\2505\277#2,>.u\020\275*R\t?\202\034T\276-\262\335=+M\252>4\277\272=\251\301\024>\030}e>_\007.>\026\366\024\276\240lJ\276\020]\300\276\306O#\275\273~\301>\202\255\022\276\361c\314\276[AS\275o*\022>-xQ\275V\324\000>\222\257\004=\311\005\247=\335\352\001?\302\245\343\274yy\025\273$\204\242:t\352\002?kIG\275\352\347\275>\242]%>;\215\014\277\351\rw=3\033\004>@\331\304>F\261|>A\274N>\260\254\264\276 \357\005?\220\240\370=)\005}>\355*\244>\342\222\003>p\263\270\275`\315\301\276_\322\210>\0054\241\276|~\310>\365\363\266>\022\302\003\277\000\343\211>\252}Z\276\375\023<\276\221\'\t\276\t\341\301>\274\"\210>o\rl>\226\262\214=|\230\235=\030C\001?\263^\014>\253\004\213=_)\003?\377\262\033\276s\021\217>h\221\035?\2756\033=\'\336\301=\334\204\273=\250\214\377\274o\201$>X\377\307\275\331\316\227\277\234m\376>\344\332\030?/\335\364>\265T^\276\274\221Y>F\316\032\277\243\257\220>\272\203\270\276pB\241>\177\301\316>\200H\217>I\242W>t\352\312=\304Z\\>u\223\000\277\225\324\311\276\213q\236=\260\003\337?\266\204<>Y\213\217>k\232w>\317\021\271=\005\243\022\276V\274\301\2769(!\276\230n\222>\225\361\357=\367\310\246\275{f)><N\201\276\030\260\204\275\032i\351\275\273\320\014?\375\2373?\226\354\010\277u[\"\275\377\312\212\276t\014(>+\211l=\253\354{\276\230\027\340\275\304_3>\r\253\370=:\257)\277\350j\313>o/)=\210F\227\276?:5\276\350\336#\276p|\315>$\3561>\255\243\212>N\321\321\2752U\020>\030C\371\275\376\363\224\2752=\341\275\315\006\271>\355\r~\2769\232\203\275\013\014y>[B\316\276c\234_\276\241\020\221\276W&\034>1B\350>\343k/\276y;b\276\307\200\014\276\213\211\r\276\344\367\366\276\332\311\260>\377[\371>\277\324\017\276\220\367\352=\033\rX\277\262K\034\277\302\300\363>\302/\365\275\340\234\321=?\306<>\274\350\013>\321\256\242>\340\241\370>iW\301\2768J\336>i\000o\276\206r\202>t\322\213\276\004!\251\276\203i\030>}\263}?\272\022\201\275\227\250\336>k)\300\275\371\240\347\275\346\225k\2744\236\250\275\303G\204\275\020]\220>\261mQ>\215\264\204\276\207\242`>\322\373f>\377\016\373;\260\003\007\276\327\300\326=\202\255\242>\3544\202\276\266\363-?;p\356\276j\023\'>\324G\340<<\240\354\275`<#\276\200e\325>\314]c?\027e6>\331\261\021\277\327/\230\276\226!\236\276(\014\252=\013c\013\275\301\312!\276z\215\235>\302\027\346\275\002\361\212\276\253\006!=8\025)\276\345\'\025\275\363\347\333<>\320\212\276\"\375\026>\214Jj>\217\031\250=1\265e=a7\214>?\216\346:Ee\303\275\365JY>\310\352\016?\004\004\363=\355\365n\276\247y\007?\022\275l\276\262.\236>Z\r\231\276\330\360t\276\364O\010\277WCb\276E/\343=R\355\223\276Y\027W\276\301\253e=\033/=>\334\177\304=\351H\256=\254\031Y=!\315\250>\320\357\233=9\177\023\276\220\366\277\274\275\030\022\277 F\010\276\031\312i\276\351&\t\277\350M\225>\363<\030>)\320g\276\231\r\242\276\222\005,\276U\207\034>\306PN><\210\275>\316\374\332\276]\334\366>\204\236m\276\200\361$\277\374\030\023>3\304\261>\353\305\300\276\026M/\277\255\333\200=\246\017\035\276\024x\247\274\215\227\356=\262\327[\276J^=\276\343\307\210\276N\271B>\207\373\210\275\004\312.?\212\0373?r\212\336\276\020\257\233\276\344\327\264;\341\013\033?G ^\276\256*\273>\300\262\342>\013\361\250=\244\344=?\014<\027\276\321WP>5\010\223=\362\322\r\276N\227\365\276?\0357\277\312\026\211\275&\307=>YLl\275q\310\206<\005iF\276\343\252\n\277]m%>\317\334\303<\207\0269\276r\341\340>U\207<\276\254\213\033\276\261P\353=\310^W?\032M.=\177\337\277\2749\234\211\276\031V\321\276\371I\205>\221H[\274\013c\253>\265\025\343?\004\220\022\277\334\272\353\276\235KY?\337\025A>\205\261\245\276e\212\271\274o\365|\276~\247I<\200`\216<\202\305Q\277a6\001\275\354\025\266\275\233\003D\276Pp\301\276m\312\365>&6\317>\342\350\212=\254\305\007\276YP\230=o/\021?=Iz=M\241\003?}\350\202>\0221E>\0221\245>|\233>=s\200\340>@\023\201>\005\336\251\275\307J\314<\374\214\253\276qZp>\360\371\031?-\317C>>>!=\036\371\263\276qZ\260\276n\243\241\276is\234\274\353Ud=Ppq>\'\367\033>\250p\244\2751\316\037>v\342\362<\201\004E?a\213\275=?r\253\275>\320\252\276\273\321G<N\177\006\277\023f\032?\3019c\276\204d\301\276/n\203\276B\tS>\264\307\013=8\241\300>\301\220u>f\203\314>\353\034\203>\370\2525\276\035 \020\277\336\037\237\276!\037\364\275XV\032>\362$\t\276i\000\227\277\202\342\367\277=\0176?\325\312L\277\266\3704?\332\033\374=\205_\n>\377\t\356=\362\007\323\276\001\030o\276[\353+\277Z\330S>\311v>\276[\224\t\277\221~\233>e\252\360>\211$\232>%z9>\211\007\224>\346y0>]\376[?\230\337\211\275]k/=\215\013\027?\256d\207\276\3706\335>aT\302>\014\316\240=\334\200\317\275\206=\275>\014\352\003?\027*\177<\200\323\273<\005\305\017?`\315A>\237\260$>\261k\373<h\320p>\021\001\307\276\251j\002\277?\0339<\266\204\214>\342\223\316\2747\246\007\276\001\373\350=\3500\'\277\276\336\275>\337\211\231\276_\360\351\274\033\r(?4\021\206\276ga\257\276\366\262-=aq\000?\257_\220\276\022\245\t@s\327\322>\310\263\213\275\317I/\276yX(>w\276\177\276\221,0\277\025\2510\276Tn\"\275sh\241\276\336q\252\276\'\203\263\276\276\274\220\276\247?\273\276\020]\020>\304Z\014?\217p\312\276W>\013\276z\307\251>\177\244\230\276Y\206\200?\317\367\023\276\005Qw\275[\266\346>\245\333\262\275l\313@\275\224\336\367=\347\376j<\273\362\331\275\035=>?\254\034\272\276\2338\271=\320\233J\276@\373\321\276\022\300\255\275\217\250\220=5\322\322\276\323\366\257>\3500\237\275\221\'I>^\364\345>u\347\211\274\017(\253>\207m\023?8\276\366=\247\005\017\276a\214\310=\206\217\350>\3269\206\276\315X\014\277\346yp\275X\034\216=-!\007\277\204\365\177\276U\3703\275\317\367\203>\273a\213>\310^o>\373Z\027=\300\004\256\276j\331J\277\304\316\344>!v&\276\335\007\240>\3333#?\004\347\374\276\347\343\032=\027\202\034\276\033\r ?\014y\304=\357\342\375\272\243#\331\276H\212\230>\214-4\277\221_?=0\365\223\276\224\244\013?&U\033\275\277\016\334=D\247\'\275\024\263\336\275\203\241\216<\312\340H\277=\325\001\27775\220\275\372G\337<@M\355\275j\373\027\276+\336\010>\250\000\330=\206WR\2757\216\030>\223R\360\276~\214\001\277>\263\324\276`\352\247\276\357\217\037\2770\201[>3\334\240=\031\256\016\275\265\304\312\274N\234\034\276\256\273\021\277\006\275w\275z\217\263\274\020\006\276>]\247a\277)\007\263\275\257\353\007\277\021\001\207>[B\276\276\271\214\273\275\206\3114>\016\241\232\276rP:?>?l\277\243\257`\27677\346=\261\371\230\276eS\236\276\335\230\236\276\002e\003?\235\235\004\277Q\237$\275}\\\273\276\276u4;\020u\037>\'\332%?q=\212?\025<\005\275\246D\242>r\373e\275o\236\022?\276\274@\276P\215\027\276!\260\202\276\030Cy\276\345a\241>d\254\266\274\220\020%\275\225\267\003?\377\314\200=\005\372\004>$E\204\276s\200\200\276\037o(\273z\245\014\276B\354\214\276\203i8\276\2505\215\276\211\230\"?\330\272\024=\312\025>?~U\256<^\327/>$\321\013>\231\r\362=g\n-?\245,+\277\202\3128\276S\226\221>k\267-?!\352\016?@\301E>+\366W>\217\374\261>\366\177\236>-[\373\276|\270\224\2761\010\000\300\300&\373>B!\222>?\251f?\r\303\307>\375M\010\276\303*^\277\235\364&?\314\177\270?\353n>\276 {\005?\236\357G>\200`\016\276\345\320\362\276\361*\353<ff>\277\200e\225\276<\024E?\252\324\254\276\310\322_\277O]\371\275\0049`\277\004\255\010\2774.\034>m\312\205>`vo\276N\271\002>0\r\243=\276\363n:\'\367{>\377\347\240\276\235K\031\277\226\t7\277\301\250\224?\014\022\221\272,+\315\275L\030\255=\271\252\214>\356B\243\276\300\317\000\277\036\033\221\276\366\013V\276K\037z>\354Q\270\276\033\330\252>\016\363\035\277\240\340\n?Vd\264\275\2402f?E\273\252\276#\241->\317k\014\276\352x\034?\023aC?\000\000\020?j4\271\275.\377\001>\230\242\034=5^Z>Xs >TU\250\275\274\314\260\275\327\206\002\277K\352$>\353\213\344>\214\204\246\276\275\310\004\275\"\247\257=I/\312=\256\323\330>\001\336\262>-\353\236\275\2235\312=\223R\220\276\335\230^\277H3N?\207\026\031\276\302\022\007\277\352!\"\277\324}\030\2779(a=~\033\"\275b\370\330>\241J\005\277U\301\250\276\345\362\217\276\237\3103\276\250n\256=\253\354\273=\364\211\274>xz\205>k\324#\277\n\235\027\276\270\351O\2760*\251>\343\302\021?\241\363Z\277yXh\276r\304\"\277.7X=\376\267\322>(,q>\366^\274\275\317k\214\276\257\316\361>[\266V>h\256\243\276\241-\207\276c(\267\276\034\266m>\256G\221?\006\236;\276\003\262\367\276\205|\260>\375\274\t>\303dZ?3\371\266\276\006\201\205\2774\242\024\277\006\327\034\2752\003\265\275U\207\\\277\\\002\260\275\315\036\230>\335\007(?\214\204\226\276#J\203\277z\374^>N\227\245\276=\233\205?p\224\314>\243\351<?\017\013\025\276\215z\000\277F?\232<:\257\t\277\234\247\372\275\227\312\373\276\177\023\232>\241\241o?bJ$>\226\262\264\277\310\315\300\276\300>\032>\375MH>\014\262\305\275\323\301*\277\300\225\214>H\334\033?\336<\325=\221\233\001\277\360\304\254\276B[\016\276%\257F?3m\017?\036\334\275>\200`^\277/\335\204>\332\257\3717\032\372g>T7\227<\360\242/\274\177\336\004\277\224P\232=\243u\304\276\2068\246>b\326\233\276\227\346\226=\371,\217>v7\377>6v)\277Z\271\227<\246\n6?\205\266\254\276tA]\276\021\036\035\277H3v\276\321W\260\276\200\361\314>1\353E\276/A\374;Pp1>y\006M?\020uw?\372\355\333>#\204G=\226\006~\275\273\324\250\275W&|\2763\212\225\276\236A\323>\270#\004\277\255i\036>\010\346\370>\370\210\230\274$+\237=\000\000\230\277\000\035&>9\3265\277\"\032\035\277.\220\200\277\024\2268\277\026\023\333>TR\207\2774K\302\276M\025\014?\370p\t>\303G\364\276\324+\r?\233\217K>V}\216\276\342;\361\276\347\030p\276\224\336\017\277\320\362\354\276\204\273\363=_)\223\277\346\353\262=\007D\250\275\007\262\236\275cFx=\024\005Z>~:\356\276?\214x?n\027\232\276%\354[\275\034|\001\276D\3357?tB(=\213l\207\276\366(\034\277\257\316q?~\000\322>\324e\031\277\"\274\342\273\203/,\276q\311\261\275\324e\321>\316\302\016?\017\013\325>\277\324\317\2766\002\361\276`\315\001>\2760\001\277!\352\276>\354\372\345\276@\207\331\276y\001\266>\004\034:?\202\312X>\224\301\021\276\210.h>\272\024\247>@\366\002?Q\2755\276\226\t_>82\237\276u\345\223>\364\032\013?9\271\337>\"\3756>\002e\003?H\277]\276\257w?\276\0015\365>\3127\033\275\2721\255>cb;\277\325&\356>\317\332-\276\207j\n\275_F\201>\303\330\002>O\257\024\276\030\354n?e\215\032?\226\004\350>W\262\003\276\360\2427\277i\343\210\276>y\220\277P7\320<fI \276*W\310\276\304Z\374\276\245k\266\276\224j\237\276\036P\266>\205B\304>s\021/?\342;Y\2778J\036\276\345|1\274iWA?&\031\211>:;A?\302\243\215\276\233 \212>i\035%\277\220\020\345;R\'\330?\250W\212\277\027\202\214\276\276\301\327\276\362(\225=\014\345\204>\030}\325>\n\362s\275|\017\347>r3\334>9E\207?*\035L\276\324}\300>g\'\003\275e6(> )\262>\340g\034\276\327Q\365>$bR\277\267E\251\276\221\355\374\275\032O\304=\256\r\365\276\345\232\202\274:#\002\277.V\204\276\363\216S\276\035\311E>\215]\">is\234\275\215\177\377\276C\004<\276\367;4\277\\\345\311\275\234\277i\276du\253\276$))\275G\310\200\275\021p\230\276\242\234\350=4\242\304\276b\364\034\275\212\000\247<V\017\030\275\"\303\232>\3475\226>o\360\225\276\243u\024\276\211^\026\277\362\265\027?\361\361\t=k\267=\277@\023\t\277\221\233a\276\203nW\277*\214E\277y#\223\276nn\314\276\016J\330\275h\"L>G\311\313\276\202\2552\277\r\253x=\035\254\037\276\353\034\223>\250\000X\276\245kN?\373\223\370\274\303\270\033=Q\332\253>{\240\225>W\225\335>>?\314>\371\367Y\276\307\245\205;\017\326\217> \014\234\276\021\307\242\277\242\023\235;\025:\257>\353&g;\205%\216\276|\232\263=r\334\211\276\321\224]=\354i\007\276\31710?b\330!=\354\243\013?D\244&\274n\335m>\322:*>V\274\201\276\220\240@?\016\370|>w\241!?H\341\032>\245\275\241\276S\\\025>\251\366\t?\235.c?\254\215q\275\315\036\210\276\221\355\234\276Tt\264>\007_\210\277\345G<=\252\324\214>tF\264>N\271b\276\177M\326\276\024\004\217\274\376\324\270>)\256\372>\324\232&\277\252\357<\275\232\266\377=;o#\275y\036\274\276\344N\001\277\030`W?\236\230\025>\237\307\210=\220\203\322\275%z\031\276\252+?\276\256GA\277\007\323\020\276\267\t\227=\263\014\221>\205\353Q?\352\354$>\342\006|>\025U\177=\210hT\276K<H\277\343\374->\203\373A=\307K\347>\372^C=\330\2013\276\264q\004>\313J\343>~\306E>^f\030=\252\016\231>s\205\037\277\010\224\275\276\001j\022?\nK\374=\266\276\350>\014\007B>\365\204\005>z.\035<\n\021p>iR\"\277be4\275S\313\306>@4\223=0\360\034?\037h%>5^\272\275\017\227\354>\367;L\277>&\222=\263)o\2771\224\003?\017B\300=\246\325\320\275\214\276\302>z\374^\276\355-\345\274\257\n\224=\344\275j\276/\213Q\277\302\300\223>\212\315\347\276\2652\241\276\276\301\327=\201\317_?\010 \225\276J\265\337>dX\245\276\327\022\362>JAW\276\304\2317\277\205B\004\27728\n>]m\225>\333\205f\276\235\235\374\276\217\031(\276E\201\276>\2613\225>D\027\024\276\311\253[?_\3228>v\211\022\2779\264\030?\267\177e\276\351\324\205>\317\275\247>\017\234\023\276\203\335\320\276\010=\333>\310^o\276\r\375\323\275\306<\206;d#p\276J$\021\276\310\007]>j\030\036\277\263\014\241>\220\203\302>\360\247\346\276\215(\255\276\337\214\232<\377\317a\275\'\3325>\003\226\\\275\0265\310>5\265L?c\013)?\025\221i\277\244\305\031\275\331\224\013>\016\236\t\275\357\347\264=\366\264#\276\016g.?\315\222\340>+\336P\277(\325>\276\374\2511\276\344\240\004\276\345\nO\276#-\365\276ZG\325\2757Ou\276\3539\231\276E\236d>Z\360\032?\215z\000?\030\262\312\276c\266\304=\220\236\"=\207\376\t?\251M\\>}\320\303>\336\223G\276\240\025x\276\002\331\213>\322\373\246\276o\364\221\275\276\301\367>\372^\203\275\263\322<\277\261m\261>\220\024\021>P\374\020?k\330\257=[\323\214>\307\021\353\275\226]0\275od\316>\262c\223>\271\337Q?\267(\363>}@`=.\2530\275\274\256\377>D\206\025>\304\010\341\275l\004\362>\217\374\321>\203\027\375\276\2510v\276\227\034\027>1B\230\275\323\372\233=c\356:>\212\227@:^\021\014?|\267y=\245,{\277S\350\234>\305\2547>\246\270*>\365\363\346=\256\273\231>\262\235\027?\237\346d=\321y\375>\201C ?\307\364\364>n40\277\267E\331\275\034\226\006=\242(\320\276R\361\277=\341\013\007@qZ\240\276g\n]>\035\346\013\276\021R7\275(~<\277\213\211\235>\355e[\274J^\r?fNW\276\310\352V>B\ts>p\353.><\332x>\262F\275=m\003\227=w\331\257;\260UB\276#\370?\276\233\221\301=\340\271\267>\000\000\000\276\267\321\260\276\257_\020\276w\2043>\037j[<\340,\205=\353\031\202=\356]\303=\260\254\304>\344,,\276%#\347<\035\223 <S\221\372>\264v\333\275\017(\013?\304\006\213=\341z\024\277\004\312\206>\003\355\016\275\006\r\315>\t\212?>>\256\r>\002\202\311\276\354\243\323>\3603\356=\343S@>\266\020\224>3\033$>\013\357r\276\260\346\260\276j\207\217>\261\242f\276\376+\213>\300[\340>\250R\343\276\243uT>\363\255\257\275;\001\315\275\200\016\363\275\2554\311>7\032\300>{N\032>\250\030\247>\345^\340\274\200\016\303>\013\264\273=\366D\227=\002e\013?\314*\214\275\220\332\244>d\351\013?\327\022\362=\321\350\316=\216X\013>f\365N\275\350\301\335=(,q\276I\235\230\277\324\267\314>\377\312\022?-`\302>\361F\206\276\2451\332=\242\227\031\277\207\026\211>\022\302\243\276\313g\371>\221\017\212>#\2763>\\r\334=\306P\316=\3745y>\234\026\314\276\240\246\246\276\222\004\341\274D\372\335?\267\227\024>\377\225\305>\3376\263=S\256\360=\004\034b\276\026\373\023\277MN\255=*\251\023>j\331:>\212<)\2761\354p=\363\223\n\276\031p\226\275y\314 \276,\232\016?_^P?\364l\016\277\2346\243\275nnl\276\305\254\227\274@\331t>h\\x\276\307*e=\340\326}>\213\250\211<Ra4\2775{\360>\366z\027>\300>\252\276\010U*\276G\217\217\276\331\224\273>\254\220\222>\223WG>D\334\274\275\267\266p=\024\320d\276\222\256y\276+\245\347\274\000t\250>\326\342\023\276\255\2471\273\273\3253>\315u\212\276\310\352V\276\253&\310\276[\323\374=\345\270\343>\231\330|\276\354\206\275\276\325\312\204<\004\342\225\276X\377\007\277\262\327\213>\244\215\343>Z\201!\276t\260\243;Y4]\277\002e\033\277\026\373\373>\177j\034\276W\262\303=\0319K=\267E9>0GO>~:\376>\030\354\306\276s\021\357>\275\251\310\276c\177\031>\255nU\276\270\036\265\276C\001\033=[_t?\246\325\320\275_\014\r?su\021<\017\234\363\275\205\266\234\274\276\277\301\275~\216\217\2758J\256>}\\\033>\037\277\227\276b\333B>\376` >\250Q\010=Y\332\311\275jO\311=d#\260>\213\246\203\276~\343C?\256\365\365\276\270\036\205>`v\017>\303W\205\273\010\254|\276\362{{>\000\000P?\337\301O=\303\365\020\277>\256\215\276w\241y\276\256\233\222=YN\302<\001\030O\276<\332X>\344\276U\275\027\232\353\275\353W:=0L\346\275\360k\244\274?o\352\275xb\206\276K\260\030>@\0308>\2411\023=?\376R=7\032 >7l\273\275\341\270\214<9\271\257>\330d%?\204H\246=\240\025x\276\221\362\303>s\242}\276H\277\215>,\361\320\276!\037\224\276d\257G\277\234\371U\276+0d>>\350\211\276w\370+\276#\370\337=\314@%>\345%\177\274/\250\357=\"\246D\275\343\210\245>\007%L=?\343\"\2764\276\257<\216\351\371\276\252\326\002=\274\\\004\276\352\317\026\277\'\332U>\245\300\242=p%\253\276\314\356I\276\353o\311\275\200\202\313=\220k#>\372\362\242>\311\253\323\276\266\370\014?\343\215\254\275\033*6\277\267\264:>\225\361O>\364\370\235\276-!\017\277rmh>\310\007=\276c\263c\275\324}@>*oG\276\225\322\263\275\301V\211\2766\254\251=\244\352\r<\205%>?\374\0303?\340\363\243\276\007\353\257\276\236\013\243\274\370\302\014?\037\277w\276QN\204>\272I,>Z\327h\275\205\231&?\343\302!\276\254\342\r>\017C+=\030\261\017\275\261\304\303\276\360\304\014\277\007\265_<\340\333\024>\370\375\233\273P7\220\275\304\261\316\276\236)t\276\226\321\010=a2\305\2763\033\244\276\203L\022\276+\026\237=\216\036\017\277\376\324\330>c\356*?i\214\036?*\214\005\277\243@\037\276\0324\264\276q=\272\276r\341\000\276\205_j>\"\303*>\017+\\\275t\323&=\344,\334>}\320+?nL\317=C\004\274>\355\236\274\276\207\247\'\277\027\237\262\276g\233\213\276\365,\210<>\\2>O#m>\362$\t\277\341\227\332>\352\3475?\344\331%\275\214\241\034\276LT/\277\'k\204>\207\340\230=\354Q8\276\020z\366\275(\270\330\275\313\2763?\340\333\364\2759\013;>\321=\213\275\220\240x\276\367\006\217\276\361c,>\362A\257>,\202\277\276a\306\224=\004\377\253\276{\332\341\275R\362\352=M\370\345>\325\354!\276\24461\276\344\017\006\276\204*\005?\374\306??\360\304L>\rl\245>qZp\276\032\027\036?\270\\}\274$\227\037\276y]\277\276\'\334\253=\355*\204>\032\213\246<\216#\326=\005Q\327>&p#?\374\251\201\276tFL\277\226\t\317>\273D\225\275\224\206\232\275\376&\304>\0010\036?\266\363\375\275\313\020\017?\214\271+\276\037\205+\276\363\253\211\276\371\240\347\276!\002\356\276\324\202w?}\353\203\275\216\001i?m\220\371>\262K\364>\000\035\026?xb\206>\244\031\213\275\201[W>\317\203[>\372D\256>\t\341Q\276T\032\261<x\321\327=\225}W\275D\213\254\276\252\324\354=JF\016>1%\022>9\177\023?\343\374\315=\345\270\223>\233U??m\220)>l!\350\276\240\311v\272\270\0365\277\335\230\036\276@\207Y>\320\324k=\2402\276\276\335$F>\024\222L=\342\314\277>e\031B\276\032Q\202\2773p\240\275\tm9?\017\234\243\276\"\032\335>\362A\037\277f\244^<\240\211\260\276\247\\i?\032o\213=\301\3451<\036m4\277\177\301\256=\037\021\323=u\002\272>H\334\003\277\365\333\227>w\370\003?\247yG>\253&(>$\266;\275E\r\226>\301\215T=\376C:>Ou\270>\257\316\031\277F|\207\276\250\304\265\275E\236\204\276\tPs?\252\232\200\275x\013\224>\303\365\030?\006\365-\275\270#\034\276\361\200\022\276_\230\214\277\201[w\276z\307\371>$\356\301\276*og>\255\206$\276:z\234>\206\311\244>W\225%?!\351\223=F%=\277WyB=\232_\215\276(\017+\277\276\244\261\276bg*\277m\002\214<\310?s\275!\351S\274v\032\371\276\325>\335=YP\230<\014\310\036\276z\215\215\276\351eT\275\301\213\026\277/nC?\231\r\002?\016\025\223\276\341b%>\'1\310\276\3436\232\276\261m1\276\014\007\302\276\226[\272>W`H\275\275\214\242\276\034|\001>~W\204>\205\261\265>.\255\246>c\320\251\275\024\355\332\276=~\017>\362{{\276\033\365P>z\215\335>\213l\247>\236D\204==\270[\276$Ed>\210h\024>\235F:\276\371\326\307\275l\317\014?\244\215\323\276\325\225o\277\245\275\001\276\272f2\276;\215<\277\034\321\235\275\233\217\253\276\253^>=\023\233\217\276\"\216u>\345\263\254>\3539i\277\263\230\010?\001\374\023=D\250\"\277\206ZS\276k\362\224<F\010\377>\354L\001>\372\325\314>gD)>z\342\231\275t\352\252\276\325v\023\275\223\306H\276g{t;\244\307\007?v7\357\276C9\361\276\230\243\037\277.\220\000>\354\335\337=\344N\t\276g\017$?A\243\317;\200\237\241>qZ\030?\001\373h>\262\0223\275\350\237\000\277\324\323\307=\006\201\245\277-]\201=\277e.>\340-p\276\214i\246\275\250\214\037?\242\016\253=\034\266\215>\025\214\332\276\016\363\345\275LO8\277\3024,\277\336\037\257\276\377\3547?\321\256\302\276\030\262\372=/\300\036?\336\345\242>\023\n\221\276\343p\226>\271\374\267>\204\323\342\276\300\2622>\026\276~\275\000r\302=\350\202\352\276\024?F>\325\262\225>\324\202\307\276\026\301\237\276\346?\324\2760*\251\274h\226D>\027\016\004?\244\307\357\276\336q\332>!\315\330=\273a\033\276d\314\255>9EG>\272\332*\276\234\247\212\276\'N\016>\364\340\236>\366b\230\276_A\332\276\346\350\021\276)?i>l\226\253=fk}>E\022\315>\320\325\306>r\277\003\276 c\356=_\322x\276\027\274x?\323j\330\276\210\200#>\3750\"\277\266g6\277\315\3512\276a\211g>\354\372=?\303\r\250>p\354\331\274\014\003\226\275\2343\342=\345\325\271\2754\200\247>\177\207\"\276J\230\211\276\254\342\255\276m\377\212\2769\233\216=a\033\221=\241\204Y\276g,J\277\3477\014=\325\312d>7\246G\276\374\303\226<_\265r\276\367\344\341<\030}\005\274\021s\311=x\271\010\276\317N\266>E\365\246><N\321>\231*\000\277\205w\331\276\007\261\323>\034\353*\277\n\205\010>\246\233\204?GZ\"?\030\231\300=\303d\n\277\340\241\330>\252C\016?\347\251\006\277\340\363S\277\330*\321>\351\235\n=RI}>\t\341\t\277C\347u>\327/\020\277\366\356\017\277F\316*?\364O\360\274\223\246\301<\275\000\023?TR\027\277\217\337\023?1%\022\276M\333\037>\214\370n\276\\=\207>e\0312\277=\232\352\274\234l\303=S\"\t\276\253>\227>\r\216r>Y\335\372\276\253>7\277\322\214%>\244\3739=\261\304\203\276\200e\245\276\276\023S\277\033\273d>\006/\032\276\366($?\326\342S\276\341\177\013>\312\032U>\224\023-=\214\333\010?p{\002=\252\232@>\361\021\t\2777\211\031\277X\034\276>\334FC>V\237+\2760\r\323\276\027+\n>\352>\200>\311v\316\276e\344\214>\216\0060\276\306\341\374>\330\266(\276\245\332o?\3441\003\276\333\026\025?\207\242@>\356\354\213=mV\315\276\006\330\007\276Z\273\235>\277~\250\275\247\\9?\013\014\t?\003>\377=u\002\252>y\262\033=\017\270\256<\376\016]?<k\367>\350\237 >U\244\202\276\257\231\254\276\201x\215\276\205\264\306=\370\212\216=\306\341L\277j\331\002\277\365\271\032\277d\257\007\277\300x\036?4\200w>\327\334\021=J\014\262?vkY\275\270\036E\276\371\240g\276H\212H>\342\351\325>=Dc\275Ae<>\277\202t\2763\376-\277^\200\315\276\341\227\352\276g\270A\276\215]\"?%\314\024\276\364\303\370>\016-\222>\031V\301>\256\266\342>\030!\234\276\354\372E\276\272Il>\217\215`\276\033\364\245\275\316S=\277\274\" ?\303\360\221\276\221\270\207>\006/\252\276T\214s\276\335\014\247\276\377x\357\276!\352\036\277\230/o>\207\277\346\275L\303\360>\231*\020?1\231\n>z\031\225\276\215\177/\277\210K\216>\333m7\277Z\201!\276\302L\313\276\337O\315\276\371\240\307>\337\032\010\277\254s\334>\354\276#=,+\315\275\230n\262\2763\336V=/\300\036\277(\233\362=g\n]>\232\353\364\276I.\357>k+\246>\211`\234\274>y\210>Lq\325\275p\010\305\276I\363\307\274@0\247=\335\230\256>f\210\013\277\252eK\276a\375_\276\342\222\343;R\r\373<\267\1775\277\327id\277J\322\345\276\3441#\276wJ\247=\355\361\002\275\260\311\032>\365\241\003\277o\273p>1\010\234\276\r\253\370\276\251\244\336>\254tw\275\230n\022?\215(M>\2201\247\276\002\237\257>\364\025\344\276\023D\035\276\341\264\220\276\340g\214>}\350\362>Cs\215\276\021\307\232\2752U\030\277\021\001G\2765\322\322\275To\255>\355\017\264\275\377x/>F\304\336\273@\373\321=\354\206\025\277\370\250\277\274\347\306\364=\243\006\323\276\242*f=\024\320\224>!\352\006\277\231\201\232> \361\253\275x\271\030?\330\365\213\274Bx\264\275\315;&?\0358\277\277\003}\002\277~\030\341=\375\023\274\275 E\235<ms\203>\001M,?i:{\276\033/\255>\017\234s\276y\001^\277#\020\337\276\274W\355\275\214\276Z?\023F3\274^\205T>\"\210\263\275k\232\207\276hw\250\275\373\350\324\275D\213l>\347:\r\276\347R\334><Nq>|\270\014\277\323\331I>|a\n\277\006\201\305>\232B\347=Q\203)\2762\346&\277F\353\230\2762Z\267>\277\016\244?T\306\257\276\372\233\320\275\014\007\"\276\240\030\271=U\246\230<(\'\"\277\320D\370\276\345\263\034\276V\020\203<R\362\212\276\350\274F?K\037z\276,\016\'>\023I\344>\332\376U>\216\006\360\275\202\377\255\276k\232\367=\344I\262>s\363\215\274\312T%@]\3714?\334\021\316=\t\304+\275\317f\025\276\360\304,\277\275\373C>\246\n\246=\274\261`\275\204\020\020\275-`\002\276RI\235\276\341\230e\275\021\374\237\276\332\217T>\022Nk>\314\231-\275\017\230G\275\2137\302>\\\003;\276`\253\264\276>\314^\275Z\365\271\274\247\311\214<)y5>F\353\000?Zd\213\276o\022C\275\315\222 >Zd\233\276\271\374\007\277\330\365K>\227\256\200=:\006\204\275\n\0210>\223\343\316\275\221~\273\276NBi\275o\236\n>\333\2772>\375\022\361<z\302r>u\002\252\2766\310d\276YQ\243\275\007\010\226\276%\314\224\275\260=\303\276\271\252,\276\200\236\246\275\215\013\'>9\321n\276\311\223\004>\255i\316>\253\351:=\312\340\210>\004\312F\276>@\267=OX\">\341\nh\275s\021\217>7\374\216=\356%\235\276\025\221\001\276\n.\206\276f\024\003\277\226\t\177\275!\352\036\276\t8\244\275\240\211\220\275io\000\277\323O\270\274N(\204\276\300x\206=\312\371\342<zp\367<\254\250\361\276\367xa=\002\274\205\276\337\025\201\276\205\224\237<w\274I\275AHv>B\225\212\276{\022\270=T\000,>\336\223\327\276\343\302\201>\376+\353>((E=\230/O\276K\345M\276b\327v<\202u\234=\270\001\177>\031\344n\275\006\022\000@\312\340\250\274\307\366\232\275\215E\263\276&\337L\276t\0071\276\347\031{=\336\252\353<*;}\275w\025\322\2750*)\276\230\027\320\276\273\354W\2746v\251>n\300\267>\237\002`>a\303S>\002\324\304\276h\263*>\330*!>\342#\202>\004\220\212\276\000\002V\274\014\2337:\356|\037\276;\001\275>X\220\346>\357\376\000?\032\032\257=\236^\351\27528\252>\rq\014>\210\021\002\276\3023a=\354\244>=\330G\007\277\r\253x\2760\022\212\276;\344\301;\035w\n>\216[\314\274\002\237\177\276\212v\305\276\371I\365=\226\004h>M2\222>\205%^\276\024y2>\345(\240\275\2407\245\276\360\335&=\265\375+>Q\275\025\276\375\023\\\276\265\032\022>\300=\217\275\231\273\016?]P_\274\2027\244\2740\022\212\2766r\335;\221`*==I\372\275\331&U=\2755\360\275k\016 ?KY\226\276\006d/>O;<\276\317I\257>\253\346\034\272\241\217\350\273\214J*\276\030\317\340\275\305\217\221=\273\233\347>\215\177\217>:u\345\275\024\351>\275\253x\003\276\276\274\240>\237\223\216>:\254\025<R\267s\275N\266\301\275K\324\301;\036\305\271\275\263{\022\276C\221\216=\324}\220\276.\311\201\275\206\004\254\275\352\352\216=J|\356\274\240O\304\275\211\266#\275/\300>\276s\272l>\225\014@=vn\332<|\233\316>\257y\025\275\367\000\335;2\377\250=\344\367\306>}\316\335;\245\332\347=;\3776\275m\220\t>\300\262\302\276og_=\236\263\205=v\246\320\275\244\376\272\275X\345\302\275\"\306\313\275Gr\031>\2176\016\276S#t=&\031\351>\225\232\375\275m\250\030\276\t\376\267\276\332 \223\275\037/\244=\360\246\233=z\344\357\276\030Cy\276\237\007R\273\235\237b<\370\215O>\031\305\262>\233r\365>\261\210\341\274\224j\177>\340g\\>\247 \277\274\366\177\216>l_\200=\317N\306=\223\030\264>Q\277\013=`\005\370\274\331\010\204=\252\267\206>b\025/>\274\350+>U\372\211\275\006\363W=]\026\203\276\327Q\025\277;\345\021\275\334h@>y\223_\275\375\334\260=*\254\324<KX\233=b\363\031?\235\2367=\270\036\205>\'\240\231>\300\354^=u\345\203\276\027\324\267>\354/\033\276W&|\276\357s\234=\316\212(=\341\177k\276\207\305(<\322\306\241\276\273\325\023\276\361\200r>R\362\272\276P\307\343= \t\273=a\3409>C\000\360\274\200E\276=\216u\221\276|\325\n\275\2716\024>\257\230\221<\372\2706>\'JB=\317\275\247>\216\007[=\245fq \344>\177\207\362>\030\225\304>\267(;\277%\261\204\275\310$\003>\235\205\335\276\262\365\254=\016\276\004@F%\245\276\233\346=>\313\234n\276\215\264\324\275\000W\032\277\300>z>\263\006o\274\306P\026?Y\302\272\275\357\254\035>vl\244>\375\210_=N\321Q>n\243\001>fI\000>\363\034\261\2755A\024\276\216\257}\276\211\t\352\274Wx\247>\260u\251\274\234m\316\276~\0002\276\025\214*>\030\223\376\274\216\006\360=t\352\312<\013\357\362=\302\022\257>\001\206\205\275R\325\004=1_\036>\346y\360>\306\336\213\275q\254\373>\2031\242=\200+1\277~\214\371=\261\213\"\275\313\204\357>=\017n>\274\313\225>\014Y\235\276p_\327>\020@j>$\271<>F\323\271>\023\362\001>%\006!\276\337\025\241\276\201C\250>\231\022\271\276\214\025\245>w-\221>i:\353\276\314\321\203>:\312\301\275\204\201\007\276\251\207\350\275\343\374\255>+0\344>TrN=\330G\'>\247;t\273\234\242\343>,\361`>\240\244\300=\361\327\324>\021\253\277\275$\234\246>Z\022\030?\336\307Q<.\377\001>\367\314\322=\177\\Q;u\310\r>3P9\276\0216\224\277C\034\373>\\r$?/i\354>\2446\361\275\240\0258>!v\016\277\344\240\244>\177\336\304\276To\275>LO\250>\3328\342=E\271\224=\316\374\n>\347\251n>\243\351\354\276\324e\301\276\235\304V\273\031\004\336?\362{\333=\nK\214>\2652\341==\265\372<\374oE\276\355\r\356\276\344,\354\275\2755\360=\336<U>\214\271+\276\311\035v=S\263\207\276s\234\333\273\3231\307\275\"\246\004?v7W?5$\006\277\362\315v\275\346W\263\276\030\317\240<\300&\353=\022\367\230\276P\337R\276z\302\222>{\026\304=$(>\277\255\335\366>\314\013\020>\203\243\304\276\007\261S\276\251\023\200\276\014\037\321>2Zg>S\350\034>\377\354\007\276\257\200\035<\363\2163\276ZG\025\276\326r\207\275nQ\266>\335\322j\276k\324\003\276\366(<>\023,\216\276\2034#\276y@\331\276\376++>k}\301>=~\217\276P6\205\276\001\205\272\275R\0171\276lx\372\276\246\320\231>\021\215\316>\032\213f\275N\264+>\326\213Q\277\004\312.\277\023D\315>~\030A\276\200\360\301=\207\027\304<\206\217H>o\323\217>$\271\034?\376\361\316\276G\311\353>\347\373\211\276_\3228>\232\224b\276\264v\313\276\363q\r>n4\200?\346\352G<Ra\014?\323\205X\275\241i\211\275#\276\323=\213\2463\276\3644 \275/\027\261>82O>\374\373l\276*Ra>\352!Z>P\305\215<\025\r\010\274\367\0023<\256\365\265>=ai\276~W$?\271\210\317\276N\177\206>\310\232\221=\\u\275\275A+0\276X\377\227>TRg?\204\236\r>\362A\017\277\253[}\276h\256\243\276FB\333=\344\370\301=<kW\276Cs=>\241JM\276\365\363\006\276E+w=h\263J\276E\330\360\274\356w\210\275p\266\211\276U\366=>\353\220\033>\241\242\212=\330\020\034=Q\210@>\257\314[=\021\000\034<\024\\l>\303\365\030?\361) >\021\374\257\276p%\353>\037\235\252\276\030\317@>\270X\261\276\227\034W\276\242]-\277\254s\254\276\034\2616>\362\315\226\276\206\311\024\276\314\231\215=\n\327C>\310]\204\274\026\334\217<^K\310\275U\023\264>(\362\344=\216#\026\276\006fE=.\347\002\277R\'@\276shQ\276\005i\016\277\336Y{>?V\360\274\261\341i\276\263\007\272\276\'\302\006\276S\005C>\\\311n>|\017\207>Q\245\246\276\340\2042?\331\351\247\275n\243Y\277R~\322=?:u>\2549\320\276\224\023\005\277\202\034\324=`\345\020\276\025\031]\275\363\253\031>\373\226Y\276\030CY\276>\226~\276\007\3169>\340\022\000\275\336<E?x(*?\371\024\260\276\265\375\233\276\237A\036\2738\370*?R\270\236\276\240\246\206>\260\033\226>\033/]\273$\177P?\316\374j\276\220N]>@li\275\344\207J\275\002\237\277\276\221\n;\277\013\270\207\275\365\241K>\205_\352\274\003[\345\275\\=\267\276\315\257\246\276\270\351\017\276Ih\023?\031\345Y\2756\253&\277\321@l\275l[\344\276\024\320\034?<\203\206>m\034\361=@\336\273\276\235.\273\276\247\005\217\276\321\261\303\275\223\254\203=\014\217\"\274\022\203\330?\254s\014\276<\301>\275\365\276\301\276\275:\'\2777\211\221\276\017\234\363\276o\273@?CN\251\272\243\315\361<\200H\277>/\027\261>vO\036>\266\241\n\277d\006J>\2721}\276\005Q??[\316\005>\315X\364=\374\030\023\277\272I\014?M\326\250\2767\340s\274\236\322a>b\241\306>^\272)\276/\243\330\276\312o\261=tA}>\330\323F\277\t\212\277\276\207\277\346\275\340\364n=O\351\340\275\240\312\304;r\313\375:p\010\245>@\244\217\276\327\022\342\276L\250\300=\314\356I\277\206Z\243>\220\240h?U0b?\240\373\262\275\005Q7\276\tP\343>\315\006Y>\261\032\313<}?5>~\035\370\276\023\201\252\275+\336\010\276\251\207\310>\024y\242>\036P6\276l[\264\276R\361\177\275=\n\327\275\356BS>\376H\021>+\023\376=\274t\263?\205\266\034\276\222\005\034\277\346\226\016?>?\354\276v\032\351\2754\242T>y]_\277\214\363\207\2769E\217?\314\013p\276\'\240\331>\335\007\360>\357\346\231\276u\037@?\014\037q\276Zd\023\277\252+\037>\356ZB\276\357\033\257\276\031\255+?)\214\322;\260\003\027\277\376\016\035?N}\240<\250\035\376\275\355d(?8\025\351\275\345\320B>)\350\226>\223\311\251<\353s\205>\017\324i=\034\231\307>\246\'\034?\2240\323\275\037h\035\277\n\334\312\276RaL\276\256\201\215\276\030{\257\2744hH>\253\317\325<\360Rj\275\322:\n>\006G)>+\244\314>\024\005:>\357\376x>\207P\205>\025t\233>\322\030\335>j\336\261>\211&P=\253v\315\274\362\260\240\276\265\375;\277|\270D>\310\\\271\275\340g\214\276\361)\260>:\006\034\277\272N\203\276\237v8>\242\013J\276\375\203\250\275\303dB?O\036\206\276C\342\036>\363\002\004\277\301\335\376\273&6\277>\361)\000\276\216\006\200?PpQ>\224\366\346\276\235\017\317<\001\026\371\2745^2?\023\362\321>\231*\010\277\335\007\240<G=\244>W\354\377>*\035\314\276\321\256\032\277\017b\267\276\240\340\202>\350\237\240\275\036\304\016>\240\303\\\276\345\362\337\276?t\341>\216u\361\275\000\214\207\2762Z\207>\025W\025>)\320/\277H\212\010>\276\274`\276\263\352\263>d;\257\276\206\307\276\275\260\003\207>_\357\276\275#\203\\<\222\256\331\275\025\2211?\331\316\027>\323\027\002=\034\316\034\276O\257T\276\201\004\245\275\265\303\217>s\205W?H\033\'>\266\276\330\276\014\260/>\226\354\330=1\323\016\277\230i\213>\020;\243>8g|?\302\022/>\351e\324\2763m?>_\270\223=\0049\230\276\332\214\023=\314\321c>\225+\034\276:#j\276\266J`\277\002\267\216\276\243[/=\233\3117?m\034\221\276\364\025$>sIU\274#\333\201\2778\277a=t\322\003\277\257|\266\276\201\tT\277\232%\221\276A\361\023\277^c\207\276_$t>\265\2461?\255Q/>\247\313\342=\014\223\t\277\303\3601\276mV%?M\020\245>r\334\311>\267]\020?Z\022\240>\354\022\265\276\230/\337\276\237\216\227>\t8\364>\224\274\022?\230\206\321>\\\3464\276k\235x\275\027c\200=uv\022>\014\206\004\274\027)\224=\342\314\277>\001\244&?\361.\327\275\264<\277\276U\207\254>\036\304\236>\002\331\353\275;\307@=\036\371c>Bz\212\274\033\177b=Cs\005? {\335>t\014(>\211\352\r\276\317\024:=\251\0230\276\266-\272\276-\225\347\276\013$\230?\300[`\276A\016\372>\374\251\241>\211\007\224\275\265l\275\276\361\200\202\276\237\343\203\275\010w\247\276\373?\307>\242\177\322\276\2407U\276\374\251q>\317\332\235\276\343\245+?\002\331\213>\210\017\214\275\004\034\362\276\340\204\322\276(D\010\277\353\305\320\275h\005&\277\337\340\223\277\004\255\200\276\022\367\210\276\213\375%>\234\371\025>\224M9>\017\271\251>@\030\210\276#-\325\275\257yU=$E\344\276\335\014\017\277\004\377#?\240\211\360>\2201w>\377$\276\274\032\300\253\276\205\224\237\276!\315\370>Gr\201\277?\306\254?\256G\221\277:\222{?@\231\020<c\013\221\276\303\365h\276\003}\322>>\350\211?vT\245\276!Y\200>:]6>fk\275\276W[\221>v\303\246>\370\2108\276\377\225-\277>\352\257\275M\025\014>^c\027\276\260\376??<\243\255\275\2201W\277ms\303>GrY>\324H\213>\320\362$?6v)\276\354i\007\276\256\273\351\276\010\003O>\323M\n\277\233\254\361>\350\301\005\277\343\245\333=\307c&\276\262\235\'\277\233 \032\277\307\272\200\277R~\022\276\250W\212?3\304Q>\273\362y>\375\023\014?\227\034\207>\'\331\252\275b\326\373\276\225\267\343\275q\254\313\276m\255\317>\2407m?f\024\273\276?\035o\276>u\254\275\354\335\177>X\377\267\276:\006\364>\224M\031\276\255in?\3642\312\276\361\235\330=\270\257\033?\240O\364\276>\"\246\276\263$\000\277\23389\276G\003\370\275\353\341\013\275~\001\275<\335\357p>\243\001\254?p\350\322;H\033\'\277>\263\344=k\237\216\274H\033\207>\212\000\247<\020Xy>\305\346\003\277X\347\210>\303\266\345\276\267\r\243\274F_\261>\334\021\276\276Q\336\207=\251\336z\276D\243+\277\001\244V>\255\266\254;\017\266\230=O#-=\352\347\r\277\306\247\340\276\233\254Y?\2760\271>\372\'\270<\'\245\340\276\375\274\251\276od^\276\004\255\030?\247\221\026>\021\344\340>\240l*\276\016\020\314\275\004\3456\274\314y\006\275\2608\\\277\315\351\002\277\'\245\340\275\313\020\217?K\260\000?\204\365\177?\005\372$>\266\2407=\346\256%>\214J\202\277\340\333\264>>\313\023\276\2716\004\277\311\306\303=,\202?\2769\013\373>\343\307\370>\264\344q\275\367\2226?\344\204\311\275e\031\n\277\204\201\307\276\020\3141?\320\233\n>\230\335\223?*Wx>\3706}=\350jK\276,\202/\277\207\304\005?2\217\274>M\025\024\277\307)\272=t\266\200\275Z\330\003?n\247\255\275:\346<=\314\177\370>\350\370\310\275\007\266\272\276\311v&\277\231\323\325\276\215]b>\306\304\006>\341(y\277NE*\277v7\017>$\200[=\321\313h=\355\r\256\276\227\377\340\276\233r%\276\245,\223\277Y\206\310>\210g\311\275\021p\030\277\033/\205?\025\217K\275Vub:\255\206\004\276\010r\360\276\230\206\t\277\207m\313\276@\244\037\276\350\336#\276\262\364\241>+\207\036\277\221\355D?.\220\300\276\344\237\271=\231\360S?\313\2346?\360\304\014?\323\023\326\275\'\245\240\274b-\216>\277\267)\276k}\301\276lx\232\275\254\031\031=\2279\025\277\362\230\321\2769E\'\277\216\257\025\277\341\265\313<\030\317 ?\345\233\315\276\2445\006\275~o\023\277\t\304\353\275y\006\235>q8\243\276\365\020m\276\325\351\300\274\260 \025\277\216\006\220\277 \353\251\275\267\177\205\276\251P\335\274W\004\257\276\276\274\220\2761\261\331\276\323\207\276\276&S\325\276\210\235\311>m\347\023\277\263\n[=\027\274(>\005i.\277\2343b>\372l\262\271k\020\246\275\275\306\336> \3250\274\230\027\220>\035\254\007\277\010\346\350\275q \034?\226\262\234?3m\237\276p\335\203\273\253\317M?r\300.\275\206Z\253\277\035\224\240>E*\234>\332\033\254>p_\347\2768\276\026?\026\023{>\367u\300\276\333P\021>\216\006\260>\1770\340>\331\010\324>g\270\321>\007\266j>\014\352\373\276\263\322\024?h\313\021?\256\236\243>W&d\277:\"_=\313\370\307>\356\316\232>p\3536?y\001v>\254\250q?V\274\341\276lAo\275\322o\207\277\342\257\371>\203\206>\276P\031\'?k\267\335\275XsH?p\353\216\276\334K\022\277\233\346\355\276I\200\312\276\026\030*\277\243\351\234>A\274\336>\302\372\277>\002Hm\276\n\334\002?\\8\020\276\250\3439?d\222\321\276\317fu>\035U\375\276v\373\254<L\377\222\274\3706=\276%]\003\277\324Hs\277\"O\362\276\316\307\025\276\023IT>\343S0\277H\333\235\273^c\327>\223\251*\277\320\325\206>\306\371{\276\204\323\202>e\374\003\277\231d$>\376\267\222<\014vc>j\207\357>\013\265\306>/n+\277\237v\250>\352\262`\277\000o\001>}\023\371\273\247\350(>\201x=\276\273\'\337>\360\242\337\276\254\034\312>^K\330?W>\003\277\2549@\276R~2\276\232\321O=N\270\267=\202\347\336\275\035\254\237\276\022\245\375=\375j\236>\022N\253\276[\224y\276\177\336\024>od~\276_\320\302\274\000\000\000>\204.\201=\333mW>\355\365\036?\324\361\250>5F+>4\272\363>6\310\244>\024?\266\276N($>\351\324\205\276\375\202\335>\360mr\277\356\261,?\206\217\010\277\246\270\352=\336\260E\277_\322\310\276\024\353\264=\313\362\265=\007$a\275\216\002\304\275k\202\310>\236}e=\2176\216>\314\274\260\272/\335l\277\270\036\245\276\276\207\213>1_\276>\345\2703\276\220\0249?V}\356\276E\365\346\276\201]\r\275\\ !\276P\337r?\321\222\007\275\263\230(?(a\246>\273\320|\276\216\351\t\277C\034\013>\036m\254>Wx\267>\352\221\206\275Yn\351\276\352>\360>\336\223\247\276\275:\007\277\324C\224\276\376\0165\277\347R\034>\306\304\246>\353\033X\275\037\364\214\277\230i\033\276\231*H\277_{\346=K\260x>+\030-\277(a\006\276\322\306\001?\365\204=\277#2$?<1\023?\311\253\023\276j\373\007?\000\221\036\276\363\310W\277\3274O>\240\035*:\222\350\345>>y\030>\261\2127\276\236$]>\317NV?.\255\246\276!@\006\275\227\250\216>\230n\302>\'\367\213>\276j\035\277\244\302X\276\225\324I\276\353\255\201>)\\\'\277\204\365\177\276a\304\276\274\342\257\211\275\362\357\023\276,+\025?\304\322@\274\0049H>\006*\323\276b\025o\276&\001\212=\024\350\323\276\354\332\236\275\023,\016?\311v\026\277\320\362\\>\311v\276<@\301M\277\200\016\023\2765\007\270>\212\216d>\224\301\361>m\312\245\276\266\241\342\275\263\320\316<\244\302\030\2762\221\262=/\213\211\276A\235\362<\350\366\242\276\247\2633\277\300[\020\277\035=\256\276\032\243U>\364\340\006\277\000\256\204\275\335\352\351\276\014\007\235;q ,\277\342\257)?_A\372>\250\030\347\276\237q\201\276\377\004G?PS\013>k\327\004\275\346y\200\276\014Y\035>fk}>_F\241>\233\003\304>\021S\262\276l\317\024\277\\\003\033>\265\032R>+\336\000\277\351e$\277\026\301\237>\023\266\237<\275\031\265\275\324`:\276/\300\376>\033L+?\203\335\020\276C\347\025>\236A#>|\270\204>\362\230\001>A\202\342=\2201\017?}\\;\276\003\317\335\276R\270\256\276\2451Z>\210\232\215;\275\215M\2743\247+\277g\'\243\276I\364\342\276r\334\271\276\323\244\204>*\306\231>h?R>\373\005\373\275\356=\374>\316\307\245>\237>\242=2\311\210>\203\335\220\276Kv\354=H\212\010\276gc\305\275\3642\212>A\237\020\277\336\345\342=ToM>[\231p?\370k:\277x\227\033\277\313\234\276\276n\335->X\342A>Edx\276i\306\202\2765\007h>\337\375\361=\336v\001\276\347\373\t\276\003\317\255>\237\350\232=0\330\005?x\356}>uv\202\276\243;\310\275\007\225\270\2742 3?\326\3779>{\024\206?\rl5?\210\235I\277\217\031\010\276\371\201\313\275\\U\366>e\0338\274LT\357\276\347o\242>[]\316<!\2602\277\022N\023?\021\342\n\275|\n\340\276zpw>\"\032\215>>\222R=e\337\205\276k\237\006?\370\245\376\275\007_\270>\361\3274?M-{>\030\317\240\2767\3759>d\3132=@0\007>\242\177J\277\236A\343>\337. \274\005\213\023?\312\214\267\274\323\244\264\2764\277*?\271\374\017\277W\tv?\344f8?\227\312\233>\030!\274\276+\373\356\276\266J\240\276V\237k\276C\377\244\276\203\335p\275f\332\036\276X\3478?\010\254$\2771\010T?\312\215\242\274k\267\235>\263$P\277U\336v\277\373\"\341=\030\317\360\276\010 U\276\022\024\037\277\362\315\266\276!\311l=\211\230\322\276\340\205-<sc:>\302\022\337>\020!\216=\371f\253\276)y\205>\017\234\203>\013\230\360\276\355\r\236>c\234\217>3\341O?\300&\013\276\277`\207>\255i\236>J$\261\276\217\302\325?5{@\277(,\361\2751\n\302=O\314:\276{\203/\276P\031\317\276\342w\263\275\025t\313>e\031R?{\244A<\204*\225>\202s\306>}\313\034\276\255\243\372>\200}\364\276H3f\277e68?bi`\275\227\312{\276\005n\335=\210\272\007?\271\031\336\276>\320\212>\241\333+\276\227\250&\277\000\035\006>\325\347\"?\211\265\270\276\250\345\007=\220I\006=\372\267K\275\221~;=\'\367\373>Sx\260\275\274\313\025\277\026\301_\276\310\322g\276*W\230=\365\234,?j\331\312\276X\312\202\276\316\210\032?\235\324\227<\241\204\331\276/\243\030?y\257B\277\032\027.>\210\205:>\202\255\222>K\350\256=Q1.\276\354\210\243=\021\252t\276\222\256\311>\265O\247=a7\254\2760\236\341>V\237\373>|~x\276\327\300\226\276\310\357-=<.\252\274\210\023\230\274\206 G>\200\267\000\275:\036\023\276\007_\350\276\r\032\032>\347\035\207>Um\267<\303\330\222>\250Wj>z\374\036><1\013>\253\225\231>h\350\337\275@\023\221\277\264Z\200==,t>\201x\235>\263{\362=\357\311#>I\205q\276\362\357\243\276\004\033\027=\r\032:?\244\215\203\276\\\002\220\275\257\316\021\276p\353N>Gwp>\216\006\020\276\377\004\017\277al\001>,\324\n?od\026?$\227\037>\331\010$\276dG\031\274j\023\207>\303\236\326>c\271\035\277\270\351\017\276\263\315\355>\354/\233=3\341/\277\247\221\306>\237\312)=\356=\034\277\336!\205=\362\260p\2764\021V>\310\352F?-x\301\2761\010\334\276\004\255\220>X\220\246=v\340\\>{\332\021\277O\351\340\275\354\335\317\276\2279]\276\343\307@\277)\350V>\305\033)?\3441\223>;\337O\276P\341\310\275^\272\t>p%\033?6\260\225>0\022\312>g\017\364\275\205|0>\250\343Q\276)\355%?D\213\354\275\221\325\235>mV==6\310d\276}\226\347<\256\201\255>\'\302\226>\267]\030\2778\363\013\276\235\205\r?/\300\356>_$\024\276\275\306\256>p\353n\276czB?\'\210*?\315\220\312=.V\304>\031\004\026>\330\236\t??\000\001\277\006\r=\276\250\030\'\276$\356\361\275\014\345\224>\221\233a>\352\225\302\276rP\262>\362{[>B!B\276J$Q\276)\355\205\277\232%\261>\336Y\233>-!\217>\2721\215\276\2549 \277\"\250\272\275\261\026\027?\005n\r\277\247\221\026>\356\236\227;\200\361\014?\014\352\253>\037\200\264>\332r\276>\022\302c\276\021\001\267><\245S\277\006\022\344\276U\300=\275\326\213\361>6\315\033>U\207\374>\261m\261=E\365\006?D\372\375>\346\313+?\343\031\264>\371I\005\277\270\222\235>\033G\274>\221D\337\276Di\027?\377\352\361\274\270uw\276j\331\332=\232B\'\276\310A\251\276\0053\306=\023\325{>\323\023\246>\"oy\275O@\303\276\253\354;\277u\345s\276%;\226>\233\346\035>\247y\207=\005\335\336=\331Z\377>B`5?\212\311\233=u\223X?M\363\316\275\313\363 \275q\346\327\275h\226\304>\305\254\307\2764\242\364=\232\261(\2763\033\004\276\217p\332<Z\201!>z\377_\275\322\030\315\276\272I\374\276C9Q\276\022\027\200\275h?\"\277\314z1>\026\366t>\002\016\001\277\304\010\241>C\255\351>\313\234\336\276\313H}=Di\377>\342\036\373\276l\004Z?2\003\025\276\213l\227\276\277`\'?\345\355\250\275\272\2749\275\270\2212\274T\310\025=\356w\350\275\356Z\202>\353\342\246\276\311t\310\275w\327\271\2754\0216\277e\344\014?V\232$\277\266\271\341\276\355\2676=\344\024}>\314\013\030?\025\221\001>\202\347\036\276G\346i?\3171\000?\353V\377>Nd\306\275\026\246\257\275\002\202\271>)\256\352=\210K\026?\254\312\006\277\325x\031\277n\243!?+\276\241\275\224M\021?@\030\330>7O\365=\324} >V\202\005\277\316\245\270>GZB?\002e\323>\210\327U\276\235\200\246>\213\340\377=\201\t\334>\374\000\324>5{\300=\365\326\300\276\361\021\221\276\030!l?g\017\364\275f1\021>\371I\325\276\213l\247\277LT\337>d\222\341\276\255\372\234>\022\332\022?\375\276\177=\273\3253?\320\263\311>\232\231\231?\031\034\205\276D\025~\2737\211\221>\216\314c\276:]\226>\214\241T\277_q\202\273\247\313\302\276z\344\257\275\333\026E\276 \265)\276U\030S?B[\276>\313J\263\276\250\305`=\253\317\r\277yu\336\276Ou\230>U\366\235>S\320\215\276sK\333>\0238\310;R\362\232\276ZG\r?;\215\264>t\352\212>xA\004\275\032i\211>fN/?\212\216\264\276\337\031-\275}\350\322>\236\230u>\016\204d>\207\277.\277\352\347\315=\020\351\207>z\247\202\2758\370\272\277\000\221\256>d\257\307\276%]S>\006*\303>\307\324\235=\020\226q\275\231\360\033?\000\251\375> $\213\276e\302\007\277\31710?o\330\246>n\206\313\276x\013\224?\276\274\000\276\260\217\236>\301n\310>Y\300\224\276~Q\002\275\366(\274>\373\005\373\275\361\272\376\275\364\211\\\276\\\033\n\277E\r\206\276\010w\007\277\230Lm\2772\001\237=o\360\205>@\245\252\275\344,\354\276f\240*\277V+\033\277\004Tx=\300\004F?\203\206f\277\216<P=\005\300\370\275\n\242\236\276\363\310\007?\352\225\222\276\306\242\251>;\001\315=\344\024\255\276\313-=\277\364\340\276\276~\000\302>JA\307>8\363k\276Ll\236\276\232}\276\275\270@\222?\304w\n\2770G\257\276\342\036\333>\031\305\022\276\266g&?\242z\353\275\202\347\276\276\335zM=hz\311=\246a\250>\215\264\004?\242\264\347\276\343\215l\277|\017\327=,}\350\275\274\005\342>\321\352\304=\321\"{>\302\027\346\276\210\200#>)\347\213\274\365\271\002\277Yi:?O;\254>\2132;\276}\320\023>\253\317-\277&\307\255\276\317\332M?&\2151\276\315\224V<K\223\362>\241i\211<\321y\355>\256\365\305>\226\315\034\275\002e[\277\376\361>\276\217\252\206>\rm\200\274\276\237:\276Qk\272\277i\032\224=\030\t\355=\273\270\215>wgM\276\221\355<\277\316S\035\277\326n\313\276\362\007#\276\367\006\357\276\212\310\360\275{\203o>\203i\030>\364\303\250\276\355\266K>\365\276\321\276\334h\220>nL\217>\224\301\321\276B\t3\276\205\263\333<\021\215\036\277\030>\">\341\356L>Z\r\331>\340\204\222\276[\010\022>\336!\205=\327\300\026\277\373W\026\276\377x\377>0\r\243\2767q2\276\245f\257\276\276j\245\275\003}b>0Lf>2 ;>\243@\237>A\202\">\331we\276\347\343\332\276\232[\241<\017\264:?_\322@\277\323\274S\277\320_h\275t\322\213>\220\210\331\276\216!@\275\235\364\256>\374\214\013\276o*\202>\362\322\255\276\353\342\346>\222t\005\277\022\302\343\275\36471\277\341\321F\276`\253\244\276 \322\257>vq\333\275LOX\276Z\273\235\276\t\212\207?\'f\275\276&S\265\276\235\200\206?\321?a\276\035\311\025?=\325\341>0\365\033?\333\245\r=\313gy>w\370\023\277Z\330S\276\264v\353>\222\005l>gD\t\276\361h\003\277\226!\376>`\3151\277\234\212\224>\005\243\202?\231\273\006\277dXE?\367u\210\277A}K>?R\324>\243\006k?\301\213\006?hy>>N\227\035\277\273\355\222\276\262\272\r\277\333\371^\276\004\347\234>\304B-=\307\021K\276P\000E\273\025R\376\275@\301\265\276eS\026\277\315\036\230>\205|\200\276RI\355\276\t\341\361\276;\337/\276\000t8\277VH\001?\336\002\t\276\307P\251\273\350j\213\277K\2608>2\346\216?M\363\316>\245\024,?\263\352s>\036m\334>\363\002\354=\372\'X?\033\2366\277+0\224\276\216\345\275\275\245\275\t?\226^\233=\232\261\330>\355\201v>\000t8>.s\032>]\212\273>\311\253{\277\'\237^\275\376\016\265>\242\t\224<\323j8\277\373Wv\277/\300\236\276\023\273v=\342\006\354\276J$\321\275\024\"\000?X\305\033\276F\2246\276J)x\277/n\203\276\344\017\246>?\343\322\2768\276\026\276\340\271\207\276\330\2013\276w\241\251>\177\023\212>\361\235\020?\233\254\321=\321\261\203\275\236C\031=\301\342\320\276\2029\212\276\352\225\332\277\343\2154?\221,@?\243\257`?\313\370\227>8\370\202=^\327\237\276\371\240W?\212\216$?od~>\313\234.?\361K\215>u\253\347\276@0?\277\355\236\034>\rqL\276H\277\035>\304\316,?\253[\215\276\244\337\206\277\212\345V\276\307c\226>\311\223\344\275\221\362\223>\3019\223?n\207\206\273I.\177>\013\265\006\276_\233\350;\241\271^?J)\310\276ms;\277\343\337g\276!\315\210>8J>\276\364\303\270>\3172\253=C\3426?<N\211\277\027\274h\276\313g\371\275\010\224\235>\272\203\310>\230L\365\276\2034c\276\003\2251>h\313Q?F\353H\277\367;\264>u\216\261\276?o2?\002H\025?/n3?\357U\003?\366\357z=`\315\241\2762\254\242\275\301\250$\277\027\357\247\275\005\300\210>#\314~\273\372\355\253>\335\007X\277w\333%>\240\375\270>\300\354\376\276:@0\276X9\014\277}\221p\276\237<\214?\305\311\375>\3274\217\276\237<\004?\276j\205>\346\256\215\277\3539y?\221~\313\276\3019\003\277Y\335\212\276P\374\200\277\374\373l\276\320\362\374\275v\027\250=1\224s>\016\241\272\276\316\031\361\276,\361\000?\370p\271>\244p\335\276\244\344\r?\224\302|\275\334\200\007?\225\232}>\036\205\220;3\376\315\276\322\030M>\371\017\221\277(a\226\276C\342\016\2778\020\202\276\304\353\232\276\252\232 >\227V\323>3\211z\275\177\336\344>\206U\254>\350jK\277\007%\214\276D4\022\277{\240\025\277\023f\272>\021\374O>\2279\335\276\032\335\221\276\330d\315\275B[\276>\275\035\321\276T\306\377=RI\035\277\301\031\274=\234\303\265=\356\353\210\277\210F\367=\370\245\236\275\264\2530?\346\350\261>\367\001\210\276\330\322c\275\224\336\367\275\006\236\233>\245\332\207>r\212\236?ep<?n\304\223=\302\024%\275\010\307l\275\214\326\221\276_|Q<\313\020\307>\342r\234=\350\023\021\277\335^*\277\300\225\274\276;\344\006>5\230F>b\326\353\276\343UV\274\231\022\271>\316\210J?\302\243\r?\270\257c\276;\215\344>\344\332\200\276\350j\203?x\325\203\274$\013\020?\033\273\014\277\235\200\006>\270\344X\276\r7@\276\251\366\371>\260U\002\276\377[\t\276vn\272\275V\232t\276\331|\314>\224\244+\277\266j\327\274\207\212\361\276j\336\211?\023D\035\277v\032i>\326\002\233=\257\224\305=\272\240\006\277\\88\277\320\263\021\277:]\346\276\022N+?\337\340+>\273\267\202=\277\325\272<\342\006\034?\'\240\331>\004\377\273>Yn\351\275C\312\027?Q\024\230\276,}h\276;\001\235\276\345\270\023>\\Z]\277\211\007\004\277\035u\224\2754\274Y=\000:\034?\326\213a\277U\366]\277\202s\266\276m\034\021\277\264\223!>~\374\305=2r\226>Kvl\277\362\227\226\275\204\365\337>\315;.\276\027\331&\277\353\034\303>\037\001\022<}\\\023\277\031\312\211\2767\031\325\274\021S\"\276\227V\263>\017b\207>aTJ\277i\251\004\277i\3062\277\255\277e=\300\t\265>\2613\035?RD\306\276\323\336\200?\322o?\276\220\277\224\275\3166W>\367\222&?(\233\022?Q\203\t\276\213q\216\276\244\3376?\254\312\316>\221~\353\276 \234\317<\375\202\315\276\362\352\334=\201[\367<\357\217G?\224\023=?\3711\226\276\374R_>\272k\271>\022\245\275\276KY>?^\200\025\277\217\344\212\277\242(8?\372\355\373>xb6>\371\275\335\276\270X\221>\311\037,?\371hq=Nb\020\276\215\364\375;\333\277\362=jM\003?i\033\177\275\246\325\220\275;\215\264>\020\006\216>\371\024\240>\260\256\212\2749\177\323\275\313\020O?\'k$?4\272;\277\321w7\275\361\272\016\277\0223{\275\227\312\333\275h\256\263>\300\262\342\276\243;x?\374\000\304>|D\214>@\207y>\213T\010\277\274t\323\276\301\342\020\276\307F\220>L7\371\276F\316\"\276M\204-\276\273DU>\250\307\266\275A\361\223?\261\277\374\276\267\321\340>\315\201\324\273\354\026\201<\230\372\351>\247\350\000?5\322\362>A\237@\277H\370\336\274n\030\245=\220k\263\276V\237\213=\033\236\n@\037\235\232\276\004\255\220>\004\255\200\2761E9\275\266g\006\277G\254\245>o\236j\274v2\030?\214\271\013\276\023,.>\224\331\220>\236\013\203=@\366Z>\351}\003>mr\270=\037\326\233\275\225+\\\276\033\236~\276\302j\254\275d]\334>\221\362\023\276K\352\244\276\'\245\000\276\214\2046>\376+\253\274\2132\333=\255\024\002=\353\377\274=\2235\312>\320\2700\275\371K\013\275dW\032=}\350\362>\270Y\274\274>\320\312>\t\377\202=*\000.\277\021\001\007>\334\2355\274\252}\002?\256\365E>P\337R>\373:\340\276\007B\362>\t\376\207>\026\023;>\211\014\273>\247\263\323=\202\2552\276\201\262\251\276\347o\262>x\177\314\276\353\034\243>\273~a>\2451\002\277\317\332\215>\301\377V\276\351\232\t\276\263A\006\276\030`\317>\326\377\311>\325\352\313=\334\272;>l\321B=\267z\356>\371N,>\323\336\000>\350\336\323>W\010k\275\206\254\316>\332U\020?\010=\033=\035\254?>\375M\350=\266\340 \273\013\014\031>\021\252t\276\317\367\223\277\314E\354>\266\370\034?ep\324>\264Yu\276m\2508>\217\374\t\277\036\371\223>>\256\315\276\275R\266>I\200\252>f\210#>\237\036[= ~\276=\261Pk>\r\340\005\277\035\254\237\276\220f\254<\225e\320?S\274\000<\316p\203>N\356\027>k\272\236=q8\203\276}\350\342\276\300!\324\275\342#b>+\244\\>m\342$\276\304\231\277=\262.\216\276\254\213[\274\235c@\276\013F\025?\330*Q?-!\017\277~\250\264\275\376\361\236\276\331\224\253<\3334\266=0\365\223\276\370\252\025\276\301n\210>w-!>\232\2319\277\237v\350>\234\026\\>\350M\225\276\351\232i\276\310\265\221\276\224\301\261>\r\303g>\010=[>w\025\322\275\335\357\320<\016J\030\276Sy\373\275{\240\025\276\317,\311>\034BU\276\260s\263\275\014\315\025>\373\256\210\276\310\357\r\276S\226\261\276\240\0258>\027e\326>\003>_\276\220\2032\276\343\031\024\276|\016\254\275zS\t\277\354\300\251>\322\343\347>\235c\000\276(\nT>#\276S\277;62\277\"\246\324>}\263\r\276od\336=7\332\026\274O#\r>\\=G>\2407%?O\006\307\276\017\326\377>\363qm\276qUy>\3544r\276$(\276\2760\236\001>\234\304\200?\301\002\230<\023a\003?\300\227\302\275\237\0046\275#g\241=\t\376\367\275I0\325<RD\206>\2304F>\232\261\210\2768\333\\>)?\t>l\314\353<O\256\251<{M\017\2756v\231>c\227(\276~:\026?\361\364\312\276-\262}>\274\312\032=\342X\327\275g,\032\276\3269\226>\342\351m?F\224\026>\251M\374\276\305 \200\276\252}\232\276\177\277\230=m8,=\244\307/\276\240\025\230>\235\021\005\276\016\025\003\276\026\332y=,e9\276\362\325\351;-\314\242\275\302\243\255\276\027\267\021>>?L>1\262$=\021\001\007=\211\357D>o\024v9\324\341\327\273\224\274\032>\203\243\034?\201\263\224=\315\314\214\276\304Z\334>\366@\233\276d#0>\320\362\314\2763\026M\276\306m\034\277\340g\214\276K \205=\273\362\231\276\347R\\\276\206\253C=\026\2073>\204\324m<\021\340t=\013c\313\275\200+\251>%X\034>T\252\304\275\342 !=\376\361\376\276`Y)\276\233\254q\276\200\232\"\277m\342\204>\334\361\206\275MgG\276\213T\250\276\022\203 \276\356\316:>\212\037c>z\031\225>C\004\234\276\255\372$?K\002\024\276,\237e\277\200\202\013>n\372\223>\237q\341\276\220\210\371\276!<\032>\\r\034\276\335\270\003:\262\205\340=C\305\230\276c\177Y\276\244\245\362\275l\262\006>\233Tt=\252\016A?\237\3103?*\221\244\276P\031\277\276\334\266\024<3\376\035?\274\263\226\276\367\257l>-\317\243> &!=\236{_?[\2249\276\001\030\217>l\\\377\274\227:\250\275L\211\264\276\210\200C\277\273\234\222\274/\250/>\022\332\262\275\023D\035\276[%\330>#\333\371=4\235\275>\345~\'\276fk-?^\242\272\276:]\326\275\273~\001\277\362\262\246=\272\332\352?\352\004\204\277\004\312\346\275\355\266\213=\263?\320<\212<\311>\356=$?\302\367~\275+\301\032?\211A\300>\255\300(?\203\207i=\326\305\315>w\333\205\276X\220\346=\037\201\277=sK\013>\272\240\036?;\031L\277f\367\264\276\265\340E\276.\255\306\275B!\002>=Dc>\336\003\264\275\373\226\271\276\337\207C\275R\325\034?\177\331\035\276S\226!>\271\337\t\277\356\010G\276%\351:\277\364\025\344\275\027\235l\275\221\265\206=.\346\207=L\032\343\275\277\202\324\276\022N\233>\237<\354\276\333\3348>\340\276.\276\024\222L=C\255\031?\316\215)>p\357\272\275`<c>\342\006\024\277Z/\326>\277\236/<\267E\t\277\205_Z\277p|\215\276od~\277\037\364\274\276bgJ\275\235Fz\276\t\026\267>\224M\331\276\330\266\350\276u\315d\276\2407\025>?\343\302\276\030>\n?)\226\373\276\254\305\017?\353\213D>\366\t \275\020@\252=\304%\007?T:\000?H\371\231>\326\217\255=\'\024\322\276\313\273\252=\267BX\275\233U\257\277\030\225\264>C9Q>\365\273\220\275\037\272\000\276\235GE=\021\374\217\276\310\352\026\276\3642j\276\007\360\246> $\273\276\320\263\231>\271\374\007\276\251\023\300>L\2109<\034\261\326\275W\225\215>\nL\247\275\3328B>To\355>lA\217=C\341\223=\266\241\222>u\253\017?\273\231Q\274\324CD\277\264\260\347=3P\351>n\243\031\277s\364\210>\207P\345=e\252\340\275\216\351\251\276\370\031G\277\342V\301<\037K\277>\026\3746\275\327\335D\277\006\022\224\275\235\233v\275\001\207\320=\3166\267\276YL\334\276\374\030\013?\201>\301>0*\351=\241\202C=\2718j\275\020#\204<\351\267\'\277\352\225\202\276ni\365=\265\246\251\276\217p\022?\026\373\313>\310{\305\276\017\320}=\220I\206\276^\021\014\277\311\310\251>9(a\275\263\357\032?n\030E=\246\325\300\276\003\263\002=\273D\305>l[\204>j\207?>2\346\256>\364\246R\277r\212\026\277O@\263>\313\370\327>\356\353\300\274\322\305&=oG\030\276d#\200>\214\271k>\346\313\313\276_AZ\276g\362\375>B`e>`\310\252>+l\206\274%\2609\275\004\312\206>\314\356\251\276dX\225\276\361\364R\277\370pI>t\322\373<\245\203\025\276\245\026\312=\245\273k=\023\'\347\276\236AC>\350\207\321\276\026\023{\277\233Z\266>\242\264\207\276W[\201\276-\317\003>\256\2739?2\254\322\276\030\317\240<R\362\n\277\301\377V>_$\224\276\246\270\n\277\202\347N\277\177\301\216=yXH>q=\n\276nn\314\276\343\373b\275\017\227<>\363<\030>\360k\304=\362A\227?\372\270\266>\240\340\n\277Z\273\215>aD\021\273\253\262\277>\325\354\201<\372\325\004\277`\310\n\276r\304z>T\340\244\275:;\031>\335&\034\2759\227:\277\314(v>\341]\336>V\274!\277\243\036\322>\006Gi>`\253\004\276\316\031\221\276\017\234S\2762=\301\276\331=9>\361F\346=_$T>\243\006\033?\242\013:?i:+\277\224\301\321\275\255D\352\273V?\200;\277e.>\240\340\002\276\241\020\021?\247\260\322<\351\324\035\277(a\346=\2446\301\276@\301%>\001\2446\276\271S\032\276\"\032]\276\023Cr\275Y\243>\277\357;\206=\026\023\233>\374R\237>x\271h\276y\314\220>Ve\217>\001j\312>\226\355\303\275Bx\244>\375\331/\276\201\317O\276\215\356 >\227\376\245\274\314\013\300\276\373\226!?\274\256\337\275\000\221\016\277\220\240\370=\177\2747>2\217\004?\271\252,>\023\n\241\276\363\223\352\275\353\255\241>\370\302\024?\372\263\177>IK\005?\010\254\024?i5\344\275\000\256$\276\311\310A?\300\004\276>t\265\325\275\337\370\032?\363Y\356>\352\312\007\276\332\346\006\277\262\364\341= \357\305\276Q\242\305=\310\353A=\\=\'>\303\323\313>\201z3=\254\255\330\276\374\001\017\275\370S\303>q\346\327\274\2176.>\033G\014?\337\246\027?\024\"X\277=\014\255=\0324\304\276\327\335\254\276\201\t|>\204\330\311\276\251l\263\273\203\243\244\276\306\247\200<D\250\022?\002\202Q\277yu\236\276\212?\n\275&\344\323\276)\256\002\277\246\357\265\2745$\356=\026\373\373?\347R\\\276nL\317>\330\330E\276J\n,\275\321\"\233>\353V\317\276\031\305\342\276\031sO\277\377\262[\276%X\034>\234\334\377\276\362|F\275\034\360\031\276d;_\2765{`>=\017n>+\023\216>\350\301\035\276\274\"\370=a\"\224;d\2577>i:\313\2761\353E>,*\"=\307\233\374\274\247\226\335\276\243y\200<\320d\177\274+\366\327\275\214f\205=\023f\032>\212\037\343=\340\020\252=]\027\236=\231(\302<5\262+\275\310\265\201\2764\021\266>\017_\206\275p\231\023=\200\237\221\275g,\332>\371c\377;uYl\276\021\215\006\277p|M\276\233ZV?n\276\221=\324\016?\276\177\366\203\276K\223\022\275O\255>\274,\274\273\276\347\3064=\343\374\r>q\033\275\276\'\3325\276\365\204E>\267b?>\203/\354\276\203\3350>\276\237z>\336\314\350\274\220J\261=\373\316\257\274\325\312d\276Q*\006\274\230/\037\277(\017\313\277DLa?\001\366Q>FB[\275\366}\270\275\274Z\356<\004\220\212>\225H\322\276j\366 >\024 \252=\035\346\013\275\322\030\355\275V}\336\276\210\272/\276\221\320\326>r3\314>\233\346\255\276\024\222\014=~\343\233\276\014\223\321?\200`N>\005\214\256\274G=D\2763\026\335>\007Br\276\332U\370\276\350\366\342\276\005\372\244>u\004\360\2744K\202>\377x\277>\23381?\261\375\344<\355e[<R\'\360>_9\214;\365\020->\245\203\365=\201\225\303>\216\001\251>\'1\010?\337\303%\275(\270X\276\243\006\023\275\017\234\303\276(a\366\276i\304L\274\343p\246>\306\004k;?t\201>\312\246\\\276\262\327\213>\255\335\366\274J)H>\235\021\001@\031\347\377\276\243\257\240\274\000\035\006\276<\231\311;v\303\036?\205\010X\276fk\255>\227\213x\275#\333y\276\271\377\210=\351e,\277\031\255\343=\310A\271\276h\\\270\275\372\233\020>\225H\242>\260r\230>\354i\007\276g\270\001==D\203\276\276\026t=\324\361\330=G\346\261\276\344f\030>\274\226p\276 \265\331\276\342a\020\2741\231j\276h\\X\276k\016\200\276\367\257\004\277=\017N\276\373\313\016\277\247\2216\276\"\3756>V+\363\276\310\315\220>B\354\354\276\367\314\n?\020#D\276\030\262\232\276\363qM>+0$\276|,\375=\341@h>\373\003e\275\312OJ>\365-\243>2U\020>\301\341\005\275\203\370\240\275\034C\200=0G\177?\356\'#=q\377\021\274\n\364\211>&\374z?\210\021\222>CVw>\010\224\315\275\333\026\r\277\224\274:>T\311\000\274\203P^\274G\312\226<\010=;\276\325>\215\276K<\240\276\2549\000\276`\223\365\276\320\320_\276\330\365+>33\363>\023\n1?\260\003\017\2774\273.=p\261\">\355\365.\276+\023\376\276xE\360\275X9\204>\366#\365\276\022N[?\030\260d\274R,W\276\326\220\030?\337\303\345\276E\360\177\277\234\247\272\276\257\2657=\2132\033>0d\365\275\256\330?\276\320\017\343=e\252\320\276\233Z\306\276\226\347)\277h\\\270\276\337\340\013\277sh\321>\352\347\215\276%z\251\276\323jH>\324}\240\275\333\026E\276\240\375\230>>y(\277\346\"\356\276\363\345\265>\374\373L>\027\016$\276I.\177\276fk\035>\370n\223=v\340t\277\333\371\256\276\325!\'?\374\035\212\276\"o9\274\333\247\003?\317\024\372=\300\347\327\276\262^\261\273\262\364A>\356%-\277\3265\272\275:]\026\276\307K\307?\321\347#\275\335^\202>o*\202>~\214\271\2766\316\206=\224\023\375\276\260rh>`\314V=d\257\207\276\205\010\330>\353\305P\276\346\346\273\275\211\230\n?\224\021\267=\226>\024?\354\022\325\275\277\232\263\276\000:\334>\204\360(\276\331|<>\222\"\222\275\357\217\227\276\241gs\276\2402\036\276\231\r\202\276\022\025\252\274V\016\r\276\204\360\350>O\3505=2U\300>\362\323\270\274B\225\332=&\252\007?\317f\225>g\230\332<\225\014\300\275jj\331\275x\3217>R\270\036>\3274\017?\343\252\362\276K< \277\344Ir\276\271\210\337\2764\242$?\236^\311\276\345\362O?y\351\266\276\316pc\276w\204\243>\220\332\004>\377[\t>7\303\235>\204*5\276\023\362\321\276^\021\214\276W\t6\276\303\r\030\276u\002\202?@\336\013\277\336\037\277\276\366~\203\275\035(\246\273R(\213\274\216\260\250\274J\230\231>\224\274\312>\007\010\206=\033\365\320=l\\\377\274$\227_\276.\342\253\276 {\r?\237\260D>\330\266\350\275o\r,\277\264\345<\2760\201[>\2760Y\276\202\034\264>\370\031\027\277\241\242\312=\336\345\342=\0216D\2773\247\013=\232\261\310\276\322\035\304\276!\260\222>!!J\275I\364\302\276\246\325\020<\262\021\230>F%\305\276=\322\240\275s.\035\277\325&v?\363\223\n\277\344\240\344>\215\356\200>\216\006\200\276\242\013\n>\212\216\244>\027\324\007?\036\340\211\275Uj6>\231\022\251\276\211$:\277\016\025\263>\344\275\312\276f\022u\274\335\014\267>\r\031\217\274%@\275>\206\033\220>K\352\004>\361-\254<\271\337)?\277}\255\277\277\016\234\276\337O\375>\0049\350=\'1h>\322\000\226\277\t\371\320>\355d\360=\221\233a<#2<?\352\010`\274\351\016j\277\373:\260>b\237\240= c\016>J\n\214=\346;8\2758\204\212\2761_\216>U\244z?\306\026\002\276s\021\'\277]\376\013?\273\270\255>\306\341\034?\332\376\305\276\371I\365=\007BR\276\264\037\231\276\372\263\337=|~\270>K\345M>\010 \005\277\332\311\340=\353\220\033=\035Z\034\277\240l\252> \322o\2760*\211>{\210\306>\204\360\350=\343\214\241\275\272I\234\276\270\344X\276\216\0019\276\272\363D\274lx\372=k}\361><\245\343\276X\312\232\277\242(P\274s\205\027>\230\027\220>\014\310\216\276\377\317Q?\316\374\n\277\020\314\261\2759\326\005\277\035\217\021?V\016\235>\335\322\252>\356%\335>QN\244\276VH\031\276\326\305-??5\016\277\347\214\350=MJ\301>\330\360\224>\343\031\224\276\355\r\216\276U\207\214\2762\217\374>\224\207%\277\330\365\273>,e\271\276\273\nI\276\272\300\305\275\3063H\276\242\013J\276@\030\350>\301R]\275O\257$\277\275\030\212>\201]M\275\355G2\277\n\200\261>\216\0060=I\242\027?\206\254\356\275\014YE?\322\342\214;\257Bb?\244\2529\277\2553~\275w\3541\273C\034\253>\376&\344\276\310\315\020>\275\343\264=\331`a=\335\322\252>\235\263\252;\301o\303\274\305\217i?\000t\330\275\302\301^\275\215\234\225\276\007_\270\276d]\034>\354\372%>\317\332\255>\342\3446?\242~W\275\334\364\267\276\315!\211=\236\352\000?\'k\324=\270\347\371\274\262\327\373=\256*{\276o\362\273=}y\001>#\025\266\276\267z\216\276\251\2377\275\320\n,\276\001j\n?\214\241\234\276`\223\365\275X9\304\276\305\003*\276\005\305\017\276\002\016a\277\240\2466\276lw\257=iRJ\276Z*w?\331\010\244>\002\324$\277:\222K\276F%\025>\217\374A\276\304\316\324\275\\8\030?U0j>\234\334\357=\022\024W\277y#+\277`\352\347=\314\264}\276\277\202T\276\270#\034>\320\n\234\2766\315{\275;\001->\0049\030\277u\260\376>.\004)?\"T\t\276\233\3117\2768\363\253\276\025\343|\274\320~\344>\306m\364=U\331\247\276\017\356n\276\355\273\322\2765\322\242\276+\301\362\276\213q\276\275\217\372k\275\210c\235\276\014<\247\276y@q?\304\316T>\355\330\000\277\206\254\016>u\037@>j\336\361\276\312m;=|~\230\276\031\3776?\r\253\030?\217\337\353\276\335\230\036>i\306\362>\254\220\202\276*o\'\276uv2\277\325\347J\276fkU\277\004\034\032?N(,?-C<\276\360\276\252<0\022\212\276\376e\367\275k}\201>\034\010A\277\006G\331>\254\213{\276X\3478>U3\213\275uY\314\276\251\244F\277\260r\330>\"\246\034\277ZG%\277\373\002z\275}<\364\274P\250\207\275oz\031%\276#g\t\277\021\337i\276.\312\234>\340\333t\276f\325\214\273}\320\023>\035\311M\277\021\374O>8-\350\276:\2571?b\363q\276{k@\276\023\177T=\244\373\271\274\337\211)\277\023(\302\2750\236\001=b\235\252<\347\030p>\271\3023\277\345\362\037>jgX=\006\273\301>Q\210\020?\001\373H>m\250(?bN\320\2742w\205?\366\227\375>x\226\240=\3706\335>\005\024\212\275{\274\220\275j\331z>\240O$>a\031[=\317,\t\276)\256J\276\201\004e?\377\t\336>s\203!\273\232%A\276kJ\262=\214\272\026\275\001\023\370=\216\036\237>\002H\335>E\r\326>\037\277\247>\365\204\245\276\373y\323=\002\324\364>\231\330|\275~oK\277\307\272\230>\034\261\246\276\t\026\'\2760\236A\277\270X\221\276o\273p>\323O8\275[\353\233\276\303\345B\273\3225\023<E*\274>\031X\207=`\311U\275\317\367\263>\231\330,?8g\364\276\223\317\341\273\320\325N\2773\376\215>\360\242\357=)\"\033\277\267\227\004\277\220N\025?w\326.>\3647\321\276o\r\014>\201\t\034>\017\326\317>G8\255>i\251<\274\225\202N\276LO8>\231\200\237=A\014t=\t3U?\244\302X\274/\213\251\276\374\343\355\276\006\365->5c\221\276\266\020\224\276n\300g\276\352\t\273>v6d<a7\334>\021\374\317>\013{\332=9b=\277HQ\'\275\247\004D<V\237\213\276\323\301\032>\346\3501>\266gV=*\221\304\276 FH>\312\303b>\257\224=\277\004V\216\276\200\202#?\252\232\340=5\2311=\'N\316\276\254\305\247>\240C\317\2724K\202\276\346?D>5c\321=\376\267\n\277\333\277\262\276=\324\266\2752!f\275\226&%\276\\\254\310\276\216u\361\276\235\364^\276nL\017\277.;\244\275o/\t\277\026\206\250=\036\026\212\275\303\3601>\006\236\213>\234\304\230?\277`/\277\337\246/\277\265\246Q\277w\370k\276jP4=N\354\241<\361.w>\341E\217\276\333P\201\276\301\312\201\276\036m\334\276W\2623\2775c\241\276\007\323\360\275#\363\010=\221\233\321\276\210\235\351=\000t\350\276pw\326>\n\272\375\276\033G,>LlV\277\0221-\277\330\236\031\2762=\321\276\244S7\276\211{\014>\360\212\200\276\307\021K\277xE\260\276Y\300\364\276\001\366\201>9{\247=c\013\201>x\264\301>j\301\253>\022\023\024\275O\222n\276{\205\305\275C\004<>~tJ>\004\342\245\276*\035,\276\331=\251\276\223\251\202>\n\334z\276\000\214\007>\254\255x>*t\316\276j\373\367>\325\347\272>\373\221\322\276\255\243\252>gD\271\276\302Lk\277[\010\222\276\202\220d?@\030\230>\365\020m\276\311\307\356<\'1\350\276x\177<\275S\221\n\276Z\022\360>\311\037|?fN\307>\341z\244\276\243;\270\276Y\206\350\276\340\271\007?~\035\030\276[\261\357>\317f\365\2768\2410?\026\336\245\276W&|>\254\034Z\276\250\217@<\313\241\245>\334h\240\277\205\266\274>wJ\027\277t).\276\302\206\267\276\365\204\025\277r\212.>D\250\262\276!\037\014\277n\2132\277x\177\024?|,\235\276\034\320\022\275\177\2747\276!\007e>\345\'\325=c\010\000=\230/\017\276\024\\,\274\347\305\311\275\370\210\270=\"T\t>\031\312)>1%\202>;\337\317=]\376\203>\267b\357\276\252C>\277=\270#?2 ;\276D\213\354\275\207\277\206>\357\217\207\276)\355%?:X\237>\371I\325\276\316\253\225;\304\231\037>&\001\372>\314\324$\275#\276{?r\377\354\273L\211\344\276\'N\376>\234\247R?\032\300\003\277s\2356\277=\270\373=\302\335A?\001Md>\025:\357>;\344\346=\222\350\345>\360\277\205>v\303v\276v\2460\276\262\2725\276\t\247\325\276\375\207$?\264q\324\276<\245C\276!Y@>F\323\251\276\263{\022?\373\\\215\276>\271\001<\277I\023\275&\337,>$(^>\267\264\232>\230\206\301\276\242z\003\277\032\027n\276ep4\276lC%>\371g\306=\310}\253=\244\031k\276\2279=>\353\255A>\266\204\034?\377\347\300>P\306\370<YQ\303>\301s\237>\247?\233\276\335A\214\276\211\322~\276\275\214\222\276\261\341\321\277\301\305\232\276\320~$>\340-\210?\342r\274\274\267\264\352\276\230\371\216\274\370\2108\276\010\254\234?\313\204\177\276\375\2074>\257w\177\276\250:\004\276\212\037K\277(a&>\216X\353\276\357\003\340\276\202\304\266\275N\356\307\2764\272\263\276\315\351\202\276#\241\315>\227\305\304>~\000\342\276V\016\315\2764\200\007\277\300\317\030>Bx\224\276\362\230\031\277~\251\217>d;\357\276V\232\304\276\007\353\377=z\307\001\277\200\267@\276\270\222=>\355\273\222\276\352\312\007>QN\024?\3063\370\276\222\263\300\276io\200\276\347\214\010>\006H\224\275\332\033\034\276\233!U\275_\265r\276\206\311\264\276\232\316n>}\350\242\276\035\351\214\275\233 J\276\360\242\357>\231G\276>\350\242a\275\321\313\350=msc>\"\246\244\276\245\240\313\276\243\260\213\274\231\r\342\276\360\340g=\t\247E>\03175\275:]\326=\r7\220\2760G\317=3\376%?\350\331\274\276\0049h>p\353\376> \230#=\005\335\336\275\207\242@>\211\014\253\274h\320\240\276\302\337\257\275\351(\247\275~\306\265\276p\266\351>\200\232\n\277\345a\201\277\220\242\216=\324\016\277=B\225\372\276\366F-<4\277\372>\254\377\243>\325[\223>\342\036\373>|DD?\346\226v\276\354/\273>0b_\275\317\234\232;\371\367\211>\226x\030\277\324\267\024\277Zd\353\276\250\303\312\275\215(E\277\316S}>i\306\032?\354\0225>\027\202\\>\325!\227>\276\244Q\277\232\261\250\276\330~\222\275]\026s>\017\013=?\206rb\276\247\350(\277\247\256<\277$^^=\376&|?\\U\206\276\002+\227\276u\0378\277\252\267\266\276\313\367\014<\016\202\256\2757\211\251?\334+3\275\347:\215\276\356w\270>\226\354@\277\210c%?_$\034?\203/<\277\336\345Z?\344\240,?\347\373\271>/n#?\2410(\275\364\375\344\276\203\205\023\275\247\350\250>.X\212\275}\2267\277Z*\277\276\265\211\363\276\373\"\031\277\302/\365\275[B\316>I\364\032\277T\251\001\277\313\204\037\276\224\371\307\275\024y\022=\031\034E\276\375\366\255\277\347o\"?\320\270\010?)\230\261\275\360\2427?|\233.\277\304\231\177\276\334)\375>t\265\325=\376\267\022\276\002+\227>\376}\006>h\\\270>;\302\371\276LT\017\276\377\312\n?6\310\224>p\010\025>\213q\376=~\214\351\276*\306\311>xE\360\275R\265\335\274\304wb\276\322\211\244=Z\236\247\276\035\224\010\277\344\024\315>\364\340F?\317\240\341\275\256dg>\263\357\272>v7\317\275\376H\001?M\241;\277\330\360\364\276@\331\324\275\353\3050\277Z\016\364<\327i\304\275\360\304l\276\364l\026\276i\001\032\275G\217\007?m\220\331\276\334\364\247\275\207\026\031\276\210L9=\034#\271\275F\t\272=K\2232>\262\272=\277S\256\360\274\254s\334\276\270X\341>\367\344\221\276FB\333\274-C\254>\037\235:>\347\030\320\275\245I\t>\321\"\233>\"\216\025>b\025\277\276\335\357\260\276L\246\n\276\242\227\361>\223\035\033\276 \3227?\206 O?/jw\274\330\201+\277<\371\224=\366b\330>\216\001\001\277\330\203\211=\017\264B\276P\344\231>|,\r?s\3617\2748g\304>\010w\'>\376\013\244=\302\207\222\275C\312O\277\\\254(>g~=\277\010\035\224=i\306\262>\341\354\326<\311\216\275\276\255\300\000?\314Fg=\206U\354\276\261\250H\275y\351\266\276\346\313\253>\014Y\335=\260\376\217\276y\222\034?\302\335\031\276\277\014F=Y\243\236\276:\352h\274\377\\t\275\214\203K\275bgr?%@\255\276\233=`?`u\244\275,\016\247>X7\036=\375\274\001\277\260r\010>\335A\334>\322\373V?ff\326\276v\032)>O\314\272>\252\322\226=\2201_?\344\203N\277\316\252\217\276P\374\210?/\243\310>K\345\275\276\037\205k\276\002\273\232\275\020;\023>\330\365\273>\271\337\361\276L\246\212>F\231\315\276\356wH?E/\223>\372\233\000\277\003}\002\277)\226;\277\021\2524\276\3603N\276Tt\304\276_\232\242\275\376a\253\275.T~\275!\315\370>\317\023\317<e\374[>w\204\223\276W`H>y\006->=a\211\276\364(\246\272\024\260\235\274s\235\016\277\366z\367\276Q\021\247\274\357\033_\276\304B\325?\3475\036\277\362AO>0\237\254\272\361)\340>\245\024\204>\347\373\351\2753\026M>\224(\305\273n\027\352\276\225\357\031=I\021\031\277\240\025\030>\031\311^=\250\215\312\275\"O\002?\256d\267>:\010z=+\210\241\275T\251\271>8\202\324<\247t\020>\341@H\276\025\000\013?\024\256G>\226\006~\275\001\210\273<w\204s>\210.H\276\314\356\251>c\321\224\276\245\203\305\276\337\370Z>4\242\344>\336\037o>\320\325\026\2774\272\203\276\354\022\205>\030\262:>{\275\273\275\216wG=`\261F=I\021!?\221\t\370\274\370S\003><k7\276\0260!>+\366\177?S?\377\276od\236\276\350\244\367=\362\265\'\276\374\337\221\275\221\270g\276Z*O\276\263^\214\274\337\303\225\276t$\367\2765\3222>8\363\013>H\026\220\276\264\253p>y\005\302=\206U\374=`\253$\276\244T\002=\n\277T>r\334\211\276q\346\177\277d]\264\277,\361X?\t\336\220\275\001M\004>F\353h>i\214\346>\220\024\261\276\371\275\r\277~Un=\321\223\222\275\247t\020?\016\333\026\2761B\020\277\202\377\315>\361\2358>F\261\314>M\240\310=\300\262\002?\367\314\322\275\024\2268?@\331t>\032i)>\366\177.>\205\266\034?<\3328>\017\272\244\275\026M\347=\335$f>7\337H=\346\"\216>\033\276\205=^.j?s\242}>i\035-?\373\005\013?\231\r\022\276\326\213i?\274t\323=\013)?>\365\363\026?\311\310\251>n\027:>\n\021\300\276\353\034\003\276\326\255\036\276\254\255\350\276G\217\277\276\000\035\346\273ga\237\276FB\333\275U\366\315\276\300\317\270>m\377\n>Y\335\252>`v\003@9\013\253\276\'\210:\275C\"\310\272$b\232\276\001\301\354>\261\247\315\276hy~>\327O\377\274N\271*\277\250\000\030\276&\001z\277\335{x\276\313\363\220\276\020\314\301\276ga\017\276\034\360y<x\013\004?\342\036\253>\315;\256\276\246\'\354\275r\376\246\275\207P\005>y\351\206\275{I\023\277\310{\345>X\3122=\225+\234\275\013)\317\276\330\201\263>\362\230\261\276\373\350T\274Uj\306\276\262\235\217\276:\311\026=\222\313\377\276\0015\225=3\247\353>\377\354\247\276\357\346\211\275U\366\375\276\0265\330=-\t\200\276\204G\033\276\344\017\026\277\371h\361<\327\027\351\276\366(\034\276(\325\256\276Ed(\277\355\266K>\020\314\261\276DnF\276H\277\215?\001\247w=\205\231v>[\010\222>\271\031.? \014\014\277r\210\270<Y\031\215\275\225+<\274\250W\n>\312\2116\276N\013\236>%]\363=\\\033\n\276W\004\377\275\022\203@>\006\361\201\273ms\013\277O\257\214\277\372\'\250\276\221\234\214\275\302\206\327>\323\367Z=\243\346+<\251\023\260>]\375\270=\035=\376\275\341\013\343\276M\020\325>\251\210\023=\336\260u?\357\254\335=\301\220\245\276\312l\300>\337OE\277\252\324\334\276\242\2647\276t{\331>\263\322D>\2403)\275\310{\325\276\236\357\037\277\002\232\020\277\230\243G\277\033+1\275f\024\313\276+Q\266\275\370\245\216>\300!4\276\367\222\266\2760\360\014?\032\334V<\372\362\242>\221\360=<\362\323\270\274b\363Q\277\020@\032?\210\364\333\276\272\236\250\275\254\255X\276/m\230\275/\027\361=HP\234\277\324\361\250\276\357\254\235>\370\252e\277\277`\227>\205\231\326>\316\307\305><\275\342\276\316\340\257=\245\332\207>\345~\327\276\351\267\007\277\350\336\223\276q=\342?\274WM\276\214J\352>\027e6\2764\271\030\275\254\254\255\275\335z\r=\261\242\346>;\307`\276\267]\000\277@m\264\275\344\240\264\276f\240R>\001\243K<\270\344\370>kH\354>%\257\216\276\007\360.\277\363\310\177>M2*?\n\205p?_A\272\276&6\317\276\017\227\334\276\257_\360\276\002\016\201\276\367\222&\277\361\3624=O;\\\276\317\203{>\345\271\236\275\301\377>?|\'V?_^\000?\315\344#\277k\232\327>\306m<?\374R_>\235\021\255\277dX\345\276\247\263\263\276}\256\246\277\252\202\201? c\216>\177\242\262<\271n\212\275\301\305\232>K\260`\277\347\373\231\276\"\375\356\277\242\356\013?\361\200J\277\261\242\206>\020X\031\277\034\231G>k\202h?0\366\276\275H\334\363\276\371\240\347?\3642\212>\314,\035\274\210c\355>\302i\261>=\n_\277\303G\204\276\326\255\316>\205\231\026\276\r\216\022>G8%?\373\350\224\276\033\022\027\276\203\366\352<\261\242v\277\031\377\006\277o\330\036\277D\250\322=\366\013\016?\210\327\365=\336T|?\255n\345\276D\250\222\276t\014(?\177M\026?\342;q\276\265\334\231<C\376\231\274!Y\010?)\005]\274r\334A\277\257\010>\276/\250\357=\320\355\005\276\373\256\250>S\263\347>j\335F\275\310{\205\276\3274\027\277_\357>>U\301\210\276y\036\254>\330\365\213\2760\360\034\276s\364\250\276\003[\345>\342\\C<\320Dp\277\360\277\245\276\"q/\277{\332I?tF\204\277\2657X>\312\025\376>/\335\304>I\364\n?x\321w\276qUi\277\311\313Z\275\260\033\026\276S\313\026=\315\344s\277\237<L\2777\246\247\276\272\203\370>\203\300*\276\350\366\242\276\330*\021?\376\267\n\277\334h@\276!Y\240>\224j\037\276\3122$>s\021\237>\203Qi>-\226\242<y]\277\276\363\312\265\275W\004\377\276\r7(\277h\226d>\303\266\005>\343\210\365\275P\337r> AA\277\205\231n?\364\370\375=\311Y\230>w\370\353=\274\256\217>\335$\316?\001\207\320>w-A\277A+\320>\310\352v>Hm\342\275\244\304n=\203j\203\275\"O\002\277\205_j?#f\366<\034|\341\275\233Z\026>.\220\340\276\206\253C\275j\274$\277\202s\206?\361\272\016\277[B\276\277\2613\265\276s\242\275>\226\317r\276\221\355\\>u\004\220\275\210Kv?\347\217)=\255i>\276\276\301\327\276Ksk\275\021\344\320\276\361c\254\276\264<\377>\207\242\300\276\263)\227\276C9\021>\310\007\235\277\335{\010?\236\226_\275\031\347\317\276yX ?\271p\300\275\265O\007>\207\277^\277\225`\261=5Q\025\273\354~\272;\371\240\327\276\271\252\354=\363\223\252>e\252@\276\177\331\235=\000W\362=GU\003\277\rl\025\277\335\007\200\276K<`\276\231\360\013\276\303\360\221\276\365\276A?d;\237\276\334ci\276\0319\213\276\177\301\036\277W\t6?Y\3720\277.\220`\276\260\033v\275\330G\'\277u\002\332\275\255\243*>\364ln?\177\373\232\277y\222\034\277V\202\345\276)\320\347\276\274\2260\276\026\207S>2\254\"\276\023D\275\276\252\361r\276\216\006\220>\224\366\266>\373\\m>\007\231\224\276%z\311\276\345\270S\276\347\035\007\276y#\323\276\343\2522\276\007\323\000?a7\374\276\215\321B?$\3561\275\245,C\276\306\371\333\276\3122\324\276:\222\373\2761\010L>\330*\001\277\366\227}>\331\224\013>\237<L\277=\270#?\364\375\224?\341z4>\225HB?Y\372\340>|aR>\252\232\260\276\341\233&\274\346\"\216>\270\344h\277\254\0342\277c\227\370\276\235 {;\237\223\336=\337\032(\277\350\202\n\277#24?\377!5?\346?\244<\317\367C\277*\221\\?\224\205\257\274\2304&\276\254\342\275>\2132#\277\370p\251>\242E6\276[B&?\216 \025=q $\277t\357\301\275\355dP>B_:\275\306\304f\276m\347{>#\241-\276]\277\240\276\013{\352\276\242}l=\342\314\237>\330\201c\277\306\205;\277\231\r\342>\351+H\277YL\254>\211)q\276S\005#\276j\023\347\2768\241P>Ll\036\277\261P\013>b\370\000?\322\373\266>\243\222Z?N\271\362>Dnn?Ii\266\275<\277h\275\312\2116\276\257\261k>\224\331\260>\224J8=A\361\203\277.\347\022>\010UJ\276\267\356F\276\212>\237\274T\250.\275\331\010D?\263\014\221>\034\323\323>\244\245\002\277\270\351\017\275 F8\277Q\367A\275e\374k\277\364\211\014\277\243@\237\276\007_\000\277\024\\\254\274\n\205\350\276\311<\202\276J\233\212\275\025\221\301=\301\342\200\276\033\201x\276\351e\034\277t\231Z\275\340\363#\276Fy\206=H3\306>\346\256\335?\302L[\276\226C+\276\337\303-?\033\330\352=L\031\270=\221\362\223\276|,]\276\014<W?\304\353Z\276\302\277\250\275\265\340\245\276F_A\276\001\276\273=g\230\232\275~\214\211\276JA\367=h\3139\276zp7\276\313\2714\276\177\203v\274P\307C\276\245\367\275>>\003\312\275\305\033\231>2\346\036?\321\005\365>,(\254=\036\247\270>C\252(=\037K?\276@\366\252>\352\tk>3\301p=cb\203\276\370\245~\275\3166\367\275~\214Y\276\3333+\276\261\334\322=xE\200>\314\177\250>\232\010\033>\206!r=\023\325\033>!\037\324\276\254\3773\276\275\303m\2744\272\003\276\024\264\251\275\232_-\276Yn\311=9\271\337\2756v\231> $\273>\261\026\377\2765\265L\276\3578\245\275\367\257l\276\266\3267\276<\024e>\222\313\037>;\215T\276\255/2>]\341\035>\017F\354<\334.\224=,\202\237\276\006\023\237\275\247\261=\274\376\235\215=\356|\237>\241\276%>Y\372P\276\362\322\315\275\374\213 =\222\350\245\276\255\372\274\277\356B\263\275\301\034\215\276Y\206\030\276\'\367[\276\307,\373\274\305\343\"=\310\323\222\275\350\202\232>4h\350=R~\242>\202sf>\304\231_>\214h\233=z\217\263\274\216u\221\276\356\353`\276\2554\t>J^\335\275F\353p?G \036>\362\260\260>\036\214\230\275t\357!\276\376&\024=6\340\030\273w\241\331>A\235\262\275\010\311\">\222y\204>!\315\350\276\202\255\322>\n\277\264\276\022\203 >N{\252=\\\254h\276<k\017\277\033\022\247\276\251\237\037\277\350M\225\276\343\2105>\207\371r\276]\304\247\276\003\317==\227\255\365\275\224\026\216\275\253\010\267<\223\3753\275\030[\010<\324\324R>\370\302\344=j\274\304>\345\270\223>\342#2\277\010\254\034\277\220\277\224\275!Y\000\2759\271\337=\265\300\236=\032\250\254\276*R\221>\246E\375<`\037\315>\343\210\205\276\307.1>\212v\325=x(\n>\256\236S>\206\003!\275\247?;>\013\322\014\277Cq\307<s\021\277\276\303\271F=C\342\036>C\312\017>p\010\225=\240\246V\276\222!\307=+\366w\276\014\037\t?@\023\341\276\307\364D>\331q\3139Y\335\352=\201x\335\274\251\244.>\223o\366\276\362\352\034\2764\200\367\27577\266>b\276\214>y#\363<r\247\364\275\210,\262\275\257%$\2761\266P\276\354\0225\276\221~{\274\240OD>]\304w\276\024\313\355\275\213\304\244\275B>\210\276\261\341)\277\202\347^\275\353s\265\276\306\026B>:u\005\276\333\242l>/:\264\273\336T\004>\277H\350\276\311Y\210>\025Wu> A1>\325[C\276\322U:<\241\276\205>\345G|<\267\227\224>\233\036\264\275b-\316\276w\241\251>6\035\201=\351\013!\274\213\211\005\277]P\037\276[^9= Aq>\270\036\r\277T\214\303>\002\016\241\274\341]\356\275\236\261\257\275\320\026F\273\304%g\276\346Ws>\023I\364\275\225}\327\275\014Y\255>\3225\323=\272\276\017\275R\233\250>K\310\207>L\260n;j\026\250\275\013\353F=\367:\211\275b\326\013>o\200\271\275C\004\004\277\031\327\256;\224\366\346>\"\253\213\276\351\201\257\275\264\260\267>\010 \225\276\002\237\337\275\n\200q\276\332\305\264\274c\227H\276\311\223\304\275\2755\240\276Gw\200\276\354\335\037\276\354Qx>K\260\310\276\357\341R\275J\014\322>t|\264=\006\276\375:\005\300\230>\035\0264;\306\212\032>\330~2\275X\000\323<v\375B\276\232\2319>\266\241\202\276\246\n&>\"UT=\240\340b>x(j\276&\001\312=\022\203`\276(~\014\277t\265\365\276\224\023m>\233\215\265\275\204\273s\276\n\277\224>\005\300X>\321\\\'>\307)\232>\003x\313>\"\3400\276\300\006\204\275\374\306\027=\377\225\025\276\301V\231\276k\232\367\275\220N\275>\036\\p\273\3539\t\277\314\013\200>\245\205\313\274\021\374\357<o\240\000=#J;=8\276\226>/Q=\276>#\021\275M\023v\275Q1.\2769\1773>\373WV>\024\316\216\2752U(\277\252\016y>;\337\037\277\213\340\037>\235\022\260=\366(\014@\226\t\377\275\005\277\r=\254*I\272\316\252\317\276!\260b\277\337\025\241>\277)\254\272{\203\017\276\320\263\231=\371\017i>&\337\334\276\t\3767>\350\207\261>\235\235\014\276\330\r{>]\032\277\2715^\212\276\033/]>0\022\032\276\2657\330\276P\374\030\276\222t\275>\016J\330\276\276\023\013\277\3372\267>S\"\t?\200,D\275\232|3>\273D\025>O\257\224><\021D\275B\224o\2757\032@\276\321\005U\277@\373\321=\262c+\277/4W>\3269\006\276\377\262{>\314\264\375\275g\'\263\276\377x\277\276W>K\276\263)w>\r\226\240;\240\241b\272t\014\030?\324\200\001=8\333\354>\367\307\023\277\311\257\277\275\3642J\276\2402>\276\344M~\275\272M\270\275u\002\352\276h\350?>\024\230N\275\215\234%\276F|/?\362Bz\275\200ee\276\306\244\277\274\026\244\331=\3500\337<\\\254(>\322TO\275S\350\274>\246~^>\037\277\207>\307F\300>\263\315\005\277J\265/\276\272\252\242\273\224\331\300\276E\327\005\275\241\370\211\277\332\341\257\2766\310\244\275)\005}>\244p]>\276\022\010\275\0162\311\276\304|\351>#\333\271\275\330\236\031\276X\255\014\276\002\020w\275m\377j?z\031\265\2765\'o=\3750b>\334)\035>\362a6\275K\224\235\275\316\210\312?Z,\305<>\320\212>\350\022\216\275\306\030\330<\344f\370=T\343\005\276\000\306\343>p\010\025?2=a\276g\n\035=\363T\367\276H\277\375=a\303\223\275\315uB\277\333\247\203>\254\305\207=.\347\222\276T\341\257=%u\"\2765c\221\276\235K\261>\001\244\306\276\007\261\013\2775\014\237\274\224j\337=\345\263<\276y\036\214>\367\0023\274Qk\332\275\243X\256\276\026\340\026\274\267]\350>\216\001\331\275\325[\003\276Ve\337\275Y\243\316\276\2279\275>;\001\235\276\271\210/\276\327\372b\276\304\316\324=\373\007\021\275\307F\200\276\022\210\027\276\n\334:>v\211\272>r\247\364>?\307\207\275\004\342\225\276\361\364\n\276\321?\241\276:\351\375=RD\226>\320\320\037\276\301\305\312>G ~\276\331=\331>\20686>\235Ki\277\253\007\214=\273\320\\\276\232\266\237\276,+\215>=\nW\276\224\027\031=\341\227Z\277\357\311\223\276\332\254:\276\307\021\033?\337\033\303<l>v?\367\307;\276\265\025\373\275\356Z\"\276\210c\035\276\317\203;\276\305\307\207\275-&v=\217K\301\273C\255\t\276Y4\355>vT\365\275f\024+\276\237Y\222\276Nz\377\276M\204\315>qr\377=\337\375\361\275<f\360\276\014\345\204\276\234\247\252\2761\010\274>\325\t(\277\020\261\301;\342=\307=\024?F\276\010\224m>4I\254<\244\216N\275Z\273M\276\370k\322\276\3500\177>\342\351U\277d@\366\275p\"z\274\204G\353\276\217\213\252=\331|\374\276\272\023l\2741\230?\274!<\372\276\371f\333\2751BX\276 Aq\274\205B\244=\334c\231>\2407\265\276\304\355\220=$\013\370\276\217\374\261>3\373<\275\206U\254>\036\341T>uV\253\275m\377\252>H\341\232>\3377>>\205$s\275\271\215\246\276\333\277\022\276\233\254Q=\315\240\353:\301\312\341=S\005\363>$|\257=/i\314\276-\006\217<\240\207\232\275\246\355\037\275D\300!>\\r\\>\030!\341;\210K\316\275y@\021\277k`\003\277x\356\375=\304\353z\276wdl\275\323M\342=8\025\271>\223R0\276Q\210@\275\353\377|>\202\037\225\275\030>\202>\333\025z<\314\356\371\276}\320\363=W%\221<P\001\020\277\332\311\000>\337\303\305>\216\351\031?v\340\\=\rq\014\277\202\034\204\276\346\221\337>\341]\216>\224j\277>J\231\024=o\365\314\276\020u_\276\301\215\224=$\356\201>H\277\235>\204\323\002>+\244|\276\036\247\350=~5\207\274\023\'\307>\3232R=\327\206\212=\214-d>\200\016\263>\303\360\321\276\370\374\300\276\272\203\250>O!\327\274X94\276\217St\276\262hZ\276WC\202\276\037K\217>\005\3008>Q\367A>;\215\204\276\017\326\237\276\305\300\004<\340\017?=\016-r\275|\233.\277\212\002\215>\301\213>\277o\022;\277w\204\223\276G\217\337\276,+\375\276\025R\376=\231dd\276\036\247\350>\336v1?\206\003\361\276\323M\302\276\274t3>\263\266\211=\235\205}\276i\215\201\275\254\213[\275g\362->\022kQ>\242\227q>\246\233,\277\2507c\275mtN<\006/\272>\372a\\\277\311Y\250\276\232\2319>`\315!\276\3164\241=N\234\214\276B\354\334>\233\311\027\276>\226F?\350jK\276:\036\363\276\250R\023\27677\036?n\372\023\276f\367\014?8\025!\277\241\326,\277\374\373\334\276\356\316Z\277\257Bj\276\224kJ=gc%\275\020u\037?\236yy=\357\376\370\2758I\363<\324F5=N\264\333\2763\334\010\277\354Q\350\276\373\221\">\333m\027?d\222\241\276\201\t\034\276Qj\257\275\242\013\312=\305r\313>\024\320\204\276\372\320E?\310\357M\276\331\231\262>\357\377\203\275x\177\\>9\264\010\277Y\372\030?\326\345\024\275\253\263\232=\031\305\"\277iU\313\274\"\245\331<b\256\373\273\243X~?\242b\374>\232_\315\275\236$=\277\311qW\277\032\206\017\276\342\351]\277\030>\">L\335\025=\270\001\037>f\240\242\276\270\222%\277@\030x\276;S\350=\207\277&\276\010\254\034>(\017k>\210\200\323>\253[\r?>\005\360>\303\330\002>\324}`\276\241-\177?D\335\007\276\016\237\364\274\226&e>\310A\231>\013F%\276\244p\355>g\362\375\276\272\244\305\272T\344\020=\317kl>%z\251>\023a\303<\203\300j>\357\003P\276\302\206\307\276C\034+>\036\026j\277JF\236>\241\370!\277\2404\224=c\264\276>%z\271>\204,\013\2759\356\224>=a\211>_)\013\276\274\3135?%\005V\275Kv\314\276\351&\301\276\"\253s\277\023D\255\276\222y\004\276\272\332*\276\221\013\256\275\361c\214?I\247\t<\317\332m\276\370\252\325\276\352[N?\360\212\200\275V\016\025\277\3127\373\276.\312l>\274y\252>\327/P\277\027\361\035\276\353\255\031?\307h\235\275\260\376\377\276\\\311\216\276\307F@\277*:\362\276\331=\251>\370p)>XV\"?\013\322l>\300!t>\\ZM>\301sO\276\261P\353=w\333\345>\2649N\275\\8\020\277x\356%?z\344o>7\000\033\275\010=\353\276\302\027\346>\363<\020\277\2073\177>\335\356\305\275\203\335X?\351H\246\2771\266\320>\277H\210>\324}\200>\206t8\275=\363\262\275\341\264\010?\343\2105\276G\346\261>Nb\240>\n\272}>\367v\313\274\311\216m>\217\374\241>\\\311\356\276\200\361\014\277\272I\334\276\372aD\276,\267\224\276^\364\265\276\343\3078\276\335\014\027>^\021\214\276s.e>\377\312\312<\325[\203\276g\017\024?m\037r=\250\032}=\261m1\277\263\007\212>\033G\334\276\347\343\032>\200\016\323>\355\330\270>i:\233\276\n\021\020\277\022\203\200>\374\302k\275\315\350\207\275B[>?\373y\303>8\333\024\277\261m1\277\034\265\002=\003\261,\275z\307A\277\0358\267\276\363<X>\256\323\230>C\377$>}\227\262\275\310\263\313<\234\364%\272\276\274 \276\344\024]\276#\370\337\276\354\245i=m\2508\276\032rG;\331\353=>?\035/>\033d\022\276\\s\307\274\234\371\325=&\252\267>\223\251b\277t\322s\277@\366b\277\310\007\275<od\316>\000\306\023\276\2068\206\276\234P\000\277\377\004\037\277\224\366\226>\211\265x>N\265\226\274#2\\\277\257\353\267=\342\001%\275\261n\274<2=\341\275\021\344\010\277\210\327\305\276\353\250\272\276\364\301r\275\224\331@\276\r\032:>\236\265[>\201\225\003\275n\024\231\275\306\212Z={f)\276L\3406>\216\314\243\276+\207\266>g\270\001\276\3711\346=O]y>T\251Y\276\365\234t>\202\213\245>\217p\252\276\'kt>\377x\217\276r\243\310<q\217e\276T:\330>\340\271\347\276R\027_\273~\343\333\276\224\274\352>b\020\000?\2549\360>$\201\006<\227\312\333\274\0221\225\276\366(\034>?\306\234?\337l3=\231G\376=Rd\215\275\261\302\255<\327\277k\274\t\3411\276\301\255;\276\016-\362\2755\230\246\276uw\235=\002\016A>\316\210\002@\306\304f\275\246}\263\275\'k4>]\334&>p\224\314\276t\265\225\274]\341=>\034\323\363>\025t\313\276\274\226\260>\376+\353=\377\373\235;\035\364\266;S\375\224;\342X\347\276t)\216>n\213R>z\3764=\342\257\211\276\024\\\014\277\3603n\276\252e\353\275\224\205o=du\273\2761\323\016?/\300\376=$\227\277>\250\216\025=~\343\213>kb\241=\367\222f>=ai\276\371KK=\0060%=\265\031\207=K\224==\334\272\213\276W\"\260=\371I\365=w\346T\273\242E\026\276\326\217\r=\037\364\354\275\255\3000\276\303e\025\275\374\214+\276\210\237\377<\377\t\016\277\013\370k;\232\264i\275\243\257\340\275\353\255\321\276\017\271\211>\273~!>\361)\340\276\317NF\276\304%\007>\023D\335=\251j\202>\032\027\316==\020\271\275:u\225\276\307c\006>\206r\"=ms\203\276y\037\307\275\356\010g\275\303\364\235\275\276\207K\276Bx\024>-^\254\274\223\304\022\275\310^\017\276O]9\275\326\034`\276\227\250\276\276\251\373\030\277\025<\245=\302\027\246=\177\207\342>\321;\025=\304\314\276\275\2176\316\275\277}]>\270#\334\275C\256\324<(\362\344=\300[\340\275\242\013\352\2752\223\210\275\224\336w\276y]?<\375\244z\276\344N\t>\204*\365\275\321=+=\350\336#>\020\261A<\035\311\345\275\022\024\357>&\001*\276P\211\313\275\021\337i>-\225\227\276\300\256\306\275\325\317\333\275\346\226\026\276$\326\">\366\231s\275\036\247h>\274\350\353\275\306\205#>\021q\363<\001j\n\276}\016\007<\030\2254\276\230\211b=/\250\237\276\0364\273<X9\024\276\335\322*\276:\351}=\022\365\002\275\215\320\217\275\225e\010\276f\332^>m\305~>\267\234\373\276C\255\t?\246\322O\275\r\032\032\2772$\002;3P\231>\376+\353=8\276v\276\023\017\350=#\364\263\275\251\336\032>a2\205\276\211\225Q<z\374~>\376H\321=.\310\226=\327\3006>\207m+>fN\027>\266\241\242>\007\266\372>\251\300j:\324\232.\277\275\214\362\276\343p\366>\276jE\276\202\034T\276\273\017\240\276R+L=\234\334o>\201x\035>\347\344E\275\016K\342\271\374\000D>;\254\360\274\361)\220>\321\"\213\276\014\223\331>8\025\351\275\322\251+>\'\205\271\275`\313\253=\237\223\036\276\261\277\314\2767\303\255\276\337J\033\274_]\225==\234@\2739\177\303>\032n\200>\366\320~=\303\330\"\276\241\205\204={-\210\275\243\006S\276u\347\311\275$\234\226\276\237\345y\276\236\355Q\275j\367k=c\177\351>\005\243\002\277\014\3124\2757\303\r=\364\246\262\276k}\221=\021\307:\275\207\242 \276\341(\371<\005\213C>cb\343\2766v\211>\256*[\276\237\310\263={k\340<A+0\276b\204p\276\374\214\253\275>\264\017\275\2029:\276\207\341\323>\256\330\237\276\350\237\000\277\365/\211=\236#r\275!Y \276G \316>\036\306\244=F(\266\274N\3211>t{)>\350\301\335=9\234\371\275\327\244[\274)\\\237>g\272\027\275\301\312\301\276\263)\327\275VH\371=\367\001H>5\357\010\277\333j\026\275\325\2257?>\\\362=\311\377d\274\311\310\031>KY\306\275\246\325\200\276M\333\377\275Z\022\340\275&\344#\276\365\020\315=\233\2541>\340\024\226=\314\227W\276\211\014\213=\357\003\320=\212v\025\276\314\356\021?:\036S>\016\363\205\276X\312\262>\274\"\270>\330\323\356>\344,\214>\340\2341\276\252C\016\276\023\326F<\261m\321\275\301\305\232>5\007h\276=\017n>\350\237`\276{I\223\276ZGU\276{\240\325\276\314@\345\276s\327\022>>=\266\274G\005\216\275,\324Z\276&:K=\256*\333>\260q\275\275\356%\r>\270\006v>\202\312\230\275\004\252\237={I\223\276\225\3305=\376\231\201\275F\n\305=D\303\"=,\324\252\276q\003\376=\302\372\257\2768\025)>]\247\241\276\024w<=va\216\036\276S\221\372>:#J\277\371\367Y>\321\0055\276\265\375\353=\222\226j\276F?\232\275\373W\026\277x\013d\276\211)\261\275\200+9\277~\035\340?\361F\036\277\347\214\350=\267z.\276J{\303>2=\001>\350\2370\277\030>\322\276\314\177(\277\246\017e\277\230Q\014\277r\304\032\276\231\203\240<M\276Y\276fI`>\320\017\203\276\322o?\276\356\236\027<\010\346h>(\360\216=\223R\260\276K\352\204=\0265x>\260\346\300=\271\252\274>\313-\r>\265O\'>\335\014/\277al\241>~\214\351\276\251\331\263>\334\364g\276y\006\315\276\346\256\205\277\214g\200>\377\225M\277m\305^?\221\r\204\275<\210}>\261m\221>L\375\354\276UMh?f\210\363>\366{\242=\222t\315=3\334\220>\362\3573>e\343\001=h$\242\275uY,\276\234\277\331\276\250\343)\277\211\232\250=\250\035\376<[\266&?l\225@\276\035\217\251>\376}&\277h\005\306\276b\025\377>4\201b\275Qf\303>\340-\200?\335\224r\274_)k>io\020>wi\203\275\302MF\275p%\033\276z\307\241\277\326\220h?\251\237??\335\3529>\031s\227\276b-\256>\233Z\306\276\346\313\013\275\331\231\002?\004!\251\276\244SW\276\365-\323\276\200\227\276\272\221\355\214?,\274+\276&\036P>r\247\364={\276\346<\006G\351\276\375\366\305?\360\371\221\276\312\375\216\276\3330\n\275\206\003\001?r\247\264>M.\206=\250\251\005?\255\206\304>\2446\031??\306\274>Sy[>f\024\213>1\\\235\274q\033\375>YL\314>\220\0249\277M\363\236>C\312\317=\t\215\200\2753\033\004\276\227\305D\276\303\3601>\330d\315\276\275:G>\010ZA\276\330\r\233\275\206\254\256=Q\367\261>\327L^>\003\317}>\324H\253=\216;\345\275\252H%\276\310\322\007>D\250R?\265\007\020\274?\214P>\000\035\246\276*\214->\351`\255>l\t\271>_\231\267=\301\220\025>?\343\242\276\322\3061>\2608\214\276\334F\343>\370\2525\276]\371\314>\033*\206\276\027\331~?Z\365\211>\222Y\275\275\224\244\023\277\r\035;\275S\005C>G ^>\317f\205\2774h\010\277\264\000\255\275\261\371\350>\244\307\'?\305\346\243>$\227\177>U\301H\2760\360|>#J\253\276% &\275\302/\225>j\331\n?;p\316\275\034%/\276b\276D\277\014\223\t?y\"\210=\242\356\343\276#\241m>$C\016\275\343\320\021<\177\331\375>\006L >S\221\352\276\t\212\007?\326n[\276Z\204b=\260r\350\275Cs\375\276\276\274X?\010\346@\277\033*N\277j\336\021\277\336<\305\276\0216\034\277)^\345<\'3\036\275\313\326\312\276\023\233\217\276G\004c=>\225\263=\000\221\036>\303\365h\276\372\233\240\276\033\273\204>\235\235\254\276\332r\016\277u\216!\277j\373\247>C\377\014\277\261P\313=!\002&\277x\013\004\276H\277\215>Nb@\277\355\231\r?\243;\010<U\331\367\276l&\007\277}\2617=\331B\260\276\274\005\202\277OX\022?\260\003\177\277l\317\274\276\2304\346>du\353=\030}\265\276r\212\376>\206U<\276i\343\010=\225\327\n=\240\211\200>\373y\203\276\327Mi=\225\361_?b\276<>\340I\213\275:@\360=?\035O\277\013)?\2761Bx>\001\373H>\347R\354\276x\rz\274\262Kt\276\233\347\310=fN\347>I\235\030\277\270\036\265>\342\253\035\275\224\207\035\277:\036\023\276\204\236->\201>\361\276\311\347\265\275\366\227\025?5A\024>\370p)?\252\201\246\2752=\001\277d;/\277\346\313K\276A\202\"\277t\007q?\207P\345\275\340\241\370><f\030?\246\017\375\276V\237\313>\256*\033\276B`\265\276\243;\030\277\360\304\314>5@)=\201!+\277\313\333q\276\232o\216:\307\363\231\275_\265:?\317\332\375\276\000:\274\276;\215T?\324+\205?!<\372>f\367D\276=\233\245\277\016g\336>\316\210R\276+\207>\277-\354i>\022M\200\275\323\3667?\t\212\337>Q29=\021\307\202?\210e3=T\375\312<\027eV\276\304\261\376>\323j\270>\357\003\300\276\276OU\275S\005\033\277\340\200\026=\020X\r@\334\200o\276T\000\214\275K\352d\276\222#]\275\245\240\033\276\270X1\276\306\212Z=\014\002\323?6\222D\275\211\267\256\275\021\344 \276\221\355$\277\217\337\313\276\004V\216>\316S\035>\312\300\001=\312\371b=\201\222\202<\276\023\243>\367\223q\275B\n\036=\321\221\334=a2\325=\224g\236\275\257w\277>\306\371[\276\3122\304>q\003\216\276\253\354;\276\022\240V\277\002\267\256>\\\346\024?]\341=>\005\335\236\276\\\3464>\231,\216\275\233=\260\276\372\355\013\276\261\247\335\275\372\nr>\326\220\250\276\006\r\035?\314\356I>\213m\262=v\340\334=mV\235>&\337\014>\371\275\235>B&y>\001\244\226\276\360\351 \274+\207\016?e6H\275\341\265\313=Ra\234>$\177\300\276\236\357G\276rl==\2068\026\275\2402\256>\220\240\030>^K\310=\n\205\210\276\305\312h=\210\3630\275+\373n\276\263A\006>\301\377\266\276\254\255\270\276c\264\236>&\001J\276\005\243\022\276A}+\276K{\3369,\324\032\276\362]\212=w\333\305\276\265\250\317<\013)\177>\230Lu\276\311\345\037\276\374R\377>9\227\007<\357\311C\276/\243\030\276\306\242\371>)]z\274 \r\'<\037\272\300>\224j\237\274\344\203\216\276\247y\'>|\017w\276\354/[\276}\313\\\276:\006L\2779\271\257>\\\344\276=A\201\227=\036\376\212\276\302QR>\2029\032>Y\332\251<\207\277\346=\2379\353<\020\351\227>*\306Y\276tA\335>\372\362\002>@\301\225>)\"C>\376\016\225\276v\032\351\275\245\243\034\275\005\305O\276\371f;>\320\233*\276|\325\212\276\314C\246:\214\331\222=8J>\276G\003\270=\361h#\275\352!\312>\237\\\256;*X!\272\353\250\212\276\240\337\267\275\241g\223\276\2657\030\276\345\362\257\277\025\035)>l\354R>4.\034>\2649\016=ZG\305\276\003\260\301\275\242zK\276\242\234\000?I\364\222\276\200\266\265\275\r\374h=\267\234\013>}\350B>\272,F\276\006d\317>[\316E\276\363\223j>)\355\315=\320\263\211\276\346=\016\275o\r\254\275\374\305l=\034x5<\271\2161\275\246\320\211\276M\370E\276)\"c>\360\277\205>\203\335\360\275%\257\316=\023f\032\276al\361>!v\346=s\364\210\276\005\335\036\275\377\225\025\275\250\307\266\275\352!z\276 \177)\275uv\262\274\203\372\266\276\224\334\201\275M2\n\277\315\254%\274\2654\3309\240\301\306\275_A\332>\037\235Z\276\2343\322\276\267b\177\276\277\201\t\275\022\245\375\276\276M\037>x\227K>\301\377\326=\274\221y\276\340\020\352=\004\343 \275\026\244\271\276\tP\323=\223\030\004>o\360\325\276\032l*\275\365\241\253>\213\342\225=\256\323\010>\321$1<I\242W=\262\205@>\025\214\232\276\2755P>5)\245\276\312\246|\276LOX>\363\223J?\000\256\324\276Gr\271>5\177\314=\206\350\020\275V\237+\275\221\325\r\276\326\213\201\275V\237\013>a\026\272=(~\314\276\005\341\312=K\352\244>\275\000\373\275|\357\257\275\277C\321\275y\351\206>\030`?\276\355\r>\276\301\342\340\276ff\246\276\337\340K\276\346\2266>`\260\213\276\273a\253>\345\267\250=\370S\003>\207\026\311>\266\021\017\275\003[%>9\325\332\274\342u\315>_A\312\276\354\301\204\275\214\363\267\275ca\210\275V\324\260\276>\223==\376\232\274>QM\311\2749\356\244>\306\341\234>\366\356\217\276v\275\331;\232\262\263=\330\365\013\275\r\216\032?\207\247\327>\0008\226\275\242\234\210>\nh\"\276\206Zs>\013$\315\273C\004\034>J\265o\276Q\367\241>\362\357\263\275\321?!\276\t\212\177\276\361)@\2762!\306\275LT\217\276\037.y\276\325!\247>d\036\231>R\362\332>\374\000d>\324\3242\276\341&\243\274T\306\237\276G \256\276@\207\031\276T\214\223\276=\n\027>y\346%\275\024\350\323\275}l\\;\211\322^>\370\374P\276\023D\275=\304\263\244=\026\335z\275\\\033\232\276\025W\025\276\223R\220>`Y\311\2765\357\310>\2407u\276P\001\020>#\020\017\277\036\246==\274?\256\276\316\215\311>T5\241\276\206Z\023@\020\257\233>\321\350\316=q\221;\275?\221\207>\002\016\341=\371,\337>Z\020J\275\373\313\306?i5\024\277\312\244\246=\262h\372=\224j\037>q\254\213\276\'N.\277\372\r\223<\037h\365>e\031\302>\363\223\352\275\021s\311\274Y\3720\277N\264k\276\022J\337<d\220\273\275\360m:>\345\362\037>\267\321`\276\237\216\037?\2176\236>\035\001\\<\203\206\376\276>Y1=\005\243\362\276\221\017z\276\267$\007=\310\357\r>\303\3601\276\300<\304=\323\301\022?\016\204\344\275i\251\314>\007_\030\275\220\367\352\276\2137R>\221,\360\276#\022\205\274\260 \275>7\303\235\276\304|9\275m\312\325=\245\332\347\276\303\323\253>\216\036\037>\321\256b>J\357[>5)\345>p\351X\275\35790=V+S\2760\236\361>\262.\356\274W\317\t\2761\266\240>F|\'\276\326s\302\276\227\220\357\276\373\"\001\276l\004\202\276\2129\310\275\340,%\275Q\275u>\311\346\212\275\207\334\234\276B\354\014\276\331Z\217>\241\235S\275\314D\221<]\376K\277Ic\324>6\223/=!\007\225\276\346\005\250\276\033\236\356>Q\332\273\276#\363\330>\227\213\310>W!e\276\027+\352=\204\323\002\276\000o\321\276\334\235\225=\200\236\206<\212\223\373=\370\252U=i\217\227\274\r\253\210>\252\202\005\300\276\274\260>y\257\032\276.\333\030\274\244m|\275\026M\267>\204\323\322>\217\302\365==\362\227\276\306mT>\267E\231>O\257\264>\205\231v\2768\025\211>\244\215\243<z\245L>/\217R\272\346\372\010<\335|\203\275\311q\247=<1\273\276\241\363\022\277W\262\203>|~\210\276u\037`>\327O\377\274S\004\230=\371\201+\275\361c,>\'N\356\275\223n\213=t{\251>b\332\267\275\302/\365\275\224\332\253\275\2613%\277o/\t>\026\2073=\354\027\004?\353\254\266=\337\245\324<\255\027K?\337\3751=\030\225t>_\t$=\214\370\016>\242E6>3\376\375=\345\362\217>\266\370\264=\370\326\362\271\020@j\276x~\221=:\036\263\275^\364\r\277b\277g\2754KB>\3711f\276\033Q\020;\276\301\207>5\265\354\275G\254e>\236\014\376\276\303\014M=\267\234+\2760/ \276\2716t>\340-\340>-[\013>E/#?jg\230=b\363q\276\346\\\212\276\202\377\355=fI\200>e\374\373=\363\002\024?4\2424\276\002\331k>\200\327g\275\212v5\276\r\246\201\276\234\210~\275\351C\247\276\340\271w>(,Q>\334\001\r<\311\345\377=\024\3503>/\205G=\025W\225>U\373\244\276\r\342\203\275hx3<\314z!?\330*a>.\347\222\276\r\032\032>\020u\037\276\371h\361<_$\014?\014\352;\276\2235\n\276\003\230\222\275#g\241\276P\213A=0\201\013\277\341\321\206\276\316\374\232>\006\022t>~W\004>?\221\227>\272\367\020\276[\353\233\276@\366Z>.\377\241>^\235c\276\026\333$\275\211\323\211\275*\253i=\362\231l=\001\023\230>c\3214\276%\351\332>\322:*>\256\273\211\276\3706\215\276\313\276\353=\024\313\355>)\\\317\275\346\">=P\0010=7\305c\275|\270\204\275Kv\354\275\326\213\221>\000\035\346=\356\316\232>\377\224*\275\302\335\231>\211$B\277 A\321\276_Az\276\273\320\014\277\334\2355>\347U\235<\300\2622\276\375\301H\277\306\277O>X\305\233\276g\362M>AF\240\2756\352\001\276b\363\361=\277\266\376\274_\'\225=5~a\274\221\326\230\274\246\270\n\276\243\222\272\2740/`>\360\277\025\276\030\n\270=\317\367\213?C\004<>{\275\233>D\243\233>\262#]:\367\344a\275\311Y\030\276\210K.\276\327\027\351\276N\264\013>\351e\324=m\255O>\026\373\273\276\323\244\224>:\213\203\273\267c\312=:w;\275\005\213c\276\373\005\253>b\326\213\276\3063\030?\316\245\370\275`Y\001\277\210.\230>G\346\301\276\323\023\206>\031\215<\275\025s\020=\231\330\\\276f\237\307\275(D\260>\014\352[\276\025\214\312\274\010w\007>\0216\254\276\350\366\202>\307L\242\274U\373\264\275\210ht\276\372\227\244=\306\277\317=\360\0260@\'\241t\274\320\270\360=h*\037<k`+>Uk\301\275\2240\323=R\325\204\276\370\302\244?al\321\276:\222K<\206\000`<\242\320\262\275\204d\001\276\003`<\276\355\236\274\276\032\372\227>\332\037\310=\032\372\347\276\370\302d>Y\335\252\276\333\026\205\276a\303\023\276\032\335A\275$*\224=&\320\026\274\275o\354\276O;\274>\315#\277>6\347`\275\353\034\323\276Lq\265\275\030?M\275\227\376e=\317\240\341\275\222\316\300\274\307\021K>(\271C\274\365\241K\275\247\203\253;\004\377\233>4\021V\276v7o\276\311\216\315>\211$\212\276\346t\t?\2074\252<J\265\017\276\215~\224=c\232\211\275p\320\036=?\221\'>LOx\276g\'\203<\242\177\262>\0265\250>A\237(>\325\315\245=\213\377\273\274\226\225\016?_a\301=\354\371\232\275\262\272\225>\'\335\226=\332rn\276\322\214E>\363\2163>\274\263\026>\030\354\226\276H\026\260\275\247\221V>\023\362\001>Y\243\336\275\0319\213\276\355}*<\274W\r\276XV\032\276\372\325\314\276C\252\250<\300\225\314>-\354i\276\261\026\177\276b\370h>\301\034\215\276}\\;>!\256\\=@M\255\275\030\354\006>G\311\273\276\323\366/\276tA]>\331\353\035\276|DL\275\0162\t>\274\313E\275Q\332[=\243\001\254\277w\020{>\032\206o\276\252)I\274\026\366\024>\366\264\303>T5A\275\270\036\325>\3260\r<\260\311z>\253\320\000=\272\275\244>\214g\020\276\322\214e\276D\336\362\274&\307\255>\036\341\244\276\222\263\020>\334\327\241\275\010w\207>)\005]\276\003&p\276\022\253\365:\213\303Y\275\300\004\016>\316\216T=\256*\253>\177\373z\276RD\226>V\267\032>\007C\035\275\237\310S>\362A/\276@\373\021\276\315\254\245\274\220\240\240\277-\317C=~W\004\276\260XC\275\222\313\337>\230\335\023\276\0216<\276\367.\224\273\205\227`<\203/l\2769\227\342=\321\\\007>\231\365\"\276\224O\217=\313\276+\2768\370B\276\365\363&>\330\361\037=\206\177\307;\024?\006\276\034\265\302\274Z\273\215=b\206\246\275\204bk\2755\322\022?(a\346=H\247.>\242z\013\276t\322\273=vO\336=\2201W\276\247\263\323=A\237\230>\231a\243\275\3272\271=-\225\367=\026\207s\276\256Jb\275,H\023\276\363\002\214>\221{\232=YL\334>\3539)\276\350\023\231=\2760\331=\333\027\260\275x\354\247\275B\224o=\222?8\276\'\302f>c\234?<\343R\025\275\337\342a\275\233r\005>\004\004S>\313J\323=\320\355\205\276M\240H\275Q\332;>\034_\213>AH6>{\024\276\276^\333\273=\326\034\320\276\371\207\255=\264\253p>\n.6\276bJ\004\276U\336.>\214K\325\274\302\335Y>\243@\257\276\345a\341\276\310\3232=\363:\"=r\211c\275\000R\333=F\273\006\2712\346\316\276\226\347!>\312O\352>\346\"\276\276\220\024Q>WvA\274\366&\246\275d\257\027>\276\242\033=\206Z\323<xB\217\275F\320\270\275\230\333\275<C9\201\276\262c\003>4\242\224>\204\327n=\322\304;\275Q\332\333\275\000R\273\2767\247R\275\307h\035>\347\251\336>9\n\220\2744\205.>P\031?>\257\231\\>->-\277D\372\235\276\271\032Y\274\360\212\010\277#-\345>B!B>\024\350\023\276\257Z\351\276\305U\345=G\256\233=z\250\255=\004V\216\275\306n\277=\204+\200\275\035\003\262\274\250\251e>\377x\217>s\021_>\304\316\024>\222\256\211>_2\0069\325\th\276\242E\366=\262K\364>\240O\264>h\263\002?\226\t\217>J^\335=J\362\267\273\212Yo\276\277+\">\3058\177\276X9\244>\260\310o=\314E\214>\246\t[\274p\261B>\213N\226\274iWa>] \234\273\236\007\027\2762\217\034>\003^\306\275\320\320\217>+\373n>O;\334\276\346W\303>\333P\221\276\340\326\335=\325\312\204>?W{\276W|\003=\262c#\276\364\375\264>\004\220\232\275\362Ao\276\223\251:?P6\245\276*:\322=\035\314\306=,\016\207>\324e\361\275\257\224e>\243\351\014>E\330 @\305\254w\2762\311\010\275\367\221[=u\345S\2764\364\377\276\r\216\322\275(\017\013\276bg\"?V\361\326\276\201\225\343\276\035U\315>W`H\274\337\342a<\205\351;=q \004>B\354l\276\262*B\275\033/\035>\235h\027>\013A\236\276\215\234\245=L\303\260>\262\023\276=\364\373\276=\374\214\233>II\217\275\211)\221\276N(\244>\3707\350\274\273\325\023>,\323o= \230C>3\371\266\2760c\212\274\025\306\026>\264\223\261>\274\005\242\276_$4\276Q1\316=$\234v\276/Q\r\277`\352g=\365\204e\276\333\026\225\276\353\036Y\274\350\273\033\2757\340\223\275f\367\344\275\343\305\302=|\362\360=\031\034\265>\270#\\\276b\241V\276g\325\307>q\255\226=\317\275\'\277\301o\303\274}?\345>$b\272\276\222\"2>\027\017\217\275\t3m\276\335\014\347>~\306%>\322\343\037?\224\331\300>\366\264\003>\311\216\215\276\323/Q=\302ia>\352!\272>\331&\225<L7)\276\017\321\010\276\245,\003\275\253[\215\276\325\312,\277\237<\034\277z\252\343>\252`\204>\237<\274\276J\014\262\276\352\225\322\276\257\3537\276\t\376\027\276\325\\\216=\275:\247\276\217\251;\274\345~\007>\362\230\361\276\311\223\004>\220/\241\274\264\223A\276\226[z\276+\373\216>k\016\020\277\241e\335<@O\243=\324\271\242\275\304B\355\275\230\027\000>\246\017\255\276\317\203{>\320\325V>\202:\245\275\202\342\207\276\331%\352\276\221~\233\275\340g\274>\373\"\001>\352!\212>\363\037\342\276\330*!\276i\343\210\276\"\303\n?\270;\013>~\214\251\276V\324\200\276n4`>\002\267\276\276\361hc\276\355\177\000\275_AZ\276t\014\310\275\305\376\022>\005\027\213\276\216\312\255\275\345\320\362>\336T\304=pw\326=\211A\270\277\r\375\203\276\340\202,\275l\225\260>f\203\254\276i\216,\2740\273\207\276K\315\276>cBL<mu\271<\245k\226>\t3M\276h\t\262\274\361)\000\277\346\313\333\276\260 M>\362\007\223>+\030u\276\201x\035\276\277\'\226\275W\225\035\276\003}\342\275\345D{\2764\242\024\276E\327\005\275\024\226\230>\313U\342\272\t\371`\276y\223\237=p\261\"\276\266-\n\276\373\345\223<\264v\233>\325\347\n\276\334\327\221\276\246\272@=A\351\260\273:X\217>\224\336\007?\226x\000\276\025\251P>\210F\207\276\006\273\001>\213l\007\276\324\263E\273\017\024\323\273\341\316E\275\332W\236<\026\334\257=m\034\321>\330\360\204>\014\255N\275\013\357\262\276#\333Y>\377\317\221\276\275\374\316<\016\370\374>I\234\225=\376+\353\275\263\014\261=\266\241\002?\373\256H\276\225`\361\275\313\204?\276XXp\275\330\273?>\364\370\275>\345\267h=D3\017=xD\205=K\253\301\276\340-\200\276\350\371\323<\006/\332\276w,v\275J\007\213>Q\240o\276*\3069>\2654w=\027\323\254\275\213\032\234>a\032\246>{\327 =\341F\312\275\034\231\207\276z\252C\276\260\000\246<=\233\025\276D\242P\275LT\357\2759\361\265\275\005Q\207>m\034\241>q\246\256;ga\317=1\266\220=\305\377\235\274c\321\204>\344\332P\2768\020\222>\325\tH>\374U\300\275\271\215\246=\002\016!\276\265\031g=\233\003\004>\317/J\275\032\321\207;\254VF\276\303\365\210\276q\3111>\024\226\270\276\336q\212>\003yv\275\023(\342<\223\000\325>\007\2675\275\\ a\276c&\221=\2244\237\275\311\310\311>\340\276N>g\'C>\2029\312>\306\341\254>o\022\223\276\"\337e\275\020#d>G\254\365>A.q\275\216\257}>l&_<\274\"\270\276\256\365\345\276:;Y\276\323\021\300=\222t->\027\361]\276\021\2524\276\2072\264\275\344f8\274V\237\353>\273\362\211>\005\2432\27628\212\275Nb\220\275\200\323\233=\301\034\035\276\311\310y\276\236\322A>a5V\275p\266\231=\376EP=:\314\327\275^\367\266=9\326\205=|\325\272\276\317\332\355=\235\234\301=:#\212>jI\354;\'\024\202\2761B\000\277\0260\301=\n\206\223=\353\346\242\275;\252\n\277\267\234\213=t\323\306\275B>\014@\202\347\336\275\323\237==o\022C\276\354Q\030\276\263E\022=\030!\034>\036\243<\2751\010\224?\372\n\302\276\203\206>>\333\247c>\247\223\354<\n\235\207\276\330\365+\276(\'\n\277\334c\211>\022\203\000?\276\366\234\276\037\205\353=\rq,\276\344\300k=\236\265{\276\217\344\262>\233\376L?\237<\374\276\245\364\014=\257\231\234>\240O\204><f\220>4\242T\276w\2419\276\236\230U>\303\273\354>\"lx>\025\346\275=\035\254_\276\307\362\256;\325\004\001?,e\231\275\251\244&?\201&B\276\004\376p<\233\376\254>$(\036\276\256\236K?\207P\305\275\026\0302\276\374o5?8N\252\275a\247\270\2756\352!>&\307\335\275\340H\240\274\225\324\t\276#-5\276\004!\331\275\377\317\361>NEJ\276\236\352\300>\367u`\274\'.\307\275NE\n>\003\262\327\275\t\212\317\276\346\"\216\276\265lM>2;K\275\313\363\220\276\252H\225\276$\227\237\276p\353n>\010r\020\276\236\265\333\275\021\032\301\274shQ>\223\031/=\002\232\210\276\202\305q?\004\3425>_^\320>\201\227\231\274\345\320b>7l\273\275\035\352R\273\031\255\003>\216\007\273=w\241\231\276QN$\277\363T\017\277\346\313\313>\036\247\210\276\220J\261<\\\312\271=\033\201@?\2338\311>~\214\321\277\026\3664>\307KW>\024\350\323=\365J\371>\253\004C?\264\260\007>\022kq>\001\244\026>q\033\355\276\316\245\310>\211\265\250>\303V\277\273\231\323\345=\337\211y\276|,M?M\020\325>e6\330>W`\010>J\357\233>{\203o>\343-\241;\347R,?[(\231\274w\003\273:6\253\316>/\213\231>0\177\005=w1M\274\206 \227\276 $\213>\005M\013\275u\027\315;@\331\024\275\n\022\273=\230\275\354\274-`\342\276\362\357\003\277\"7\223>,\330F=xb\366\2765$\026?\207\371\022>\212Y\337>\214\333\310\276>\"\346=\212\253*\276l\201\030\274\235\276\236\274\303\014\215<\"O\202>E*\314\276\347\211g\275\035 \330=\304\3164\276\2715\351\274z6\033\277\014\223)\274\320\263Y>F\266\023\276 c\026?f\240\022?%\257\256>p\231\303>\266g\226\276\261P\023\277\232\264\251<\007\323\240>\300\226W=H\033\007?J%|\275\215\234\265\276\033/=>><K\275x|\233=\310A\t>\325\225\317=\0049\310\275[\323\334\276Y\027/\277\252b\252<\024\"\300\276\340\2717\276of4=\374\252\234=\257\316\021\276b\204\360<*WX\276\244\376\272\2757\246\207>\264Y-\277\035w\332\276]m\365>\233\210#\274\322\035$\276z6\213>\032Qb\277\377\354g>\033d\242\276W\t\306\276\246\270\352>\203nO\276\r\032\372\276\343\374\005?\316\374J>\265l\r\276vO\376\276s.\325\276\364\2457\275\350g\252\2753\033\244\276\337\003O;\307d\361\274\225\361\017>\355\365N>\331\261q>jj\031\277\031\342X\276%@m\276\000:,\276\230\206\021\277:@\020\276\371\332\363=(\n\204\276\014\007\262\276\364\246\322>\324\361\330=\3500\337\276\274$N<=\324\266=\264\253\300\276\255c\001<\364\032\033\2762\003\025>1\266P>\343k\'?\243\222Z\276\262.\016>\221*\212=\350\274F>\252+\357\2768-X\276\005\372$\276\237\315\232\276\201\262\021?\300!T\276W!e\274\211\353\030\275\343\302\301=}\352\330<&\344\203<\014v\003=\275R6>8\241\220\276{\332\341\275{I\203>\224\240\277=\221D\237>-!\027?`\260\003?\205_\312\276\231G\276\276_\231\267<d\036\331>\325\tH>\330\360\224>\033\365\260>)<h\275\004\004S>7T\234\276\214q\264\273\203\300\212\276xb\306>x(\312>M\0205\2764\277\312\276&\036\260>\020zv>\376\016\325>\316\241\261;2\260\016=\352\tK=\'\203c>\256+&=o*\242>~\343\353\276\354Q\230>Bx\304\276\026\210\276=\202\3128>\032i\311\276\321\221\354\276\005\243Z\277\273\264\201\275\370\031\027?\225\r\313\275\267\2274>\027H\320\275\350\207\321\275\020\263\027=\021\341\277=\346y\240\276\206U\\>\030C\371=\037\205\353?\236$\335\275\027\r\231<YL\334>\236y\271=.\255F\276#2\014>\034z\013=\002+\257?l\354\322\275?V\360\274\013\322\334>W[\021> $\013\277\210I\270\275\320\356P\275]\247\321>-`b>)\263\221>F\316B\276\013\322\014>\264q\004=\254\312\316\276\274\313u?\031\220\025?\374\3067\277|~\270>\312\303\">\r\212f\274Mf|\275YQ\003\277u\350\224=\022\332\202>\255L\250>7O\345>\301\034=\276\264\002#\276&\215Q\276\256d\'?\242z\233\276N\356O?$\356\021?\350\301\275\276\250\306k\276T:\010?Q\367\361>\266\203Q=sh\321\276\2304&?\3130n\275\034B\225\274\311\253s>\025\3066>\266\271\361\275\2132;>\220k\243\276\327\022\362\276\"Or>oGX\276\265O\'\276\241\241\377\275\365\020\r>,\016\347\275]P\277\276\023\267J\275\337\032\000\277\1770p\276\200\232\032\2766\037W\276\346\261&\275Z\016\224\275\320~\244>\223\033\005\275\357\346I>a\027\305=\352\225\022>\243\351\354=\303\r(\277\013^4?\016hi\274\215b\031?\214\271K>\304&2=&\215\321\275\245k\006\276\263\014\221=^*\226\2759\227b\2765\357\000\277\037\332\307\274JA\007?Z,\305\275\202\3128\276\336T,\277\276\301\017?\243\004\275=\032\300\313\277YiR>:z|>\331Z\037>/\206\022>Sy\373=\'\367\373=\216x\262\275Z\240\035=\014<\207\276\231\273\246>\340\020\312>\221)\277=w-9?\034%\237>n\300??\330\365\253>K\037\332>\345aA>\304\353z<\031\342\350>\353\031B\275R\233\250>jj\031\276Cs\335\275\263\321\271=\337\370\032\276\216\314\363>\350\274\226\276\334\364\007\276\244\302\030\276\363\223J\276\272k\t>Cr2\275\013\234l=\273\270U?\331=\251\276\236C\271\275\327\022\362=\337\303\225\276\277+\342\276D\335G>Yi\022>\267E\211>\334\275\274\275L\215\220\275\276\237\372\276-!\337\275rm\310=\251L\261=\372\270V>2\003\365\276\251\301\204>\014<\347>j\336Q\276{k\020\277?\343\362\276#\363\270\276:uE\276\t\212\227\277\207P\325>\346\313\013?\226\004\250>T\035\002?zp\037\277t\007q\276\253x#>\366]\031\277N\234\334=\242\013\n?\010 U\276x(*\276\032\372g>QNT>-\262\035>EH\035\275\216\351\231\276\204\365\237\275\257B\022\277\003[]\277.\347r>\303GD\277\rl\205\276\246\017\255>\201\317\317\276\014\345\004\276\264Y\025\276J)\350\275\304`\276\275G\036\010=*\214E\277\240\244@<\235K1>\303\330\002\276\306P\336>\037\327F>\033\r\340\276\\ \201>ni\225=\334G\356\274]\371\214>pw\326=[\231p\276\010\003\017>\307\272\250>\235\364\216\276\224\244\003\277?\343\242>%]\023>9\321.>!\007\305\276H\247.\276\305\346\243=\325x\021?\263)\327>\221\325\355=)\223\032\275\003\317-\277\225\236i\274\262\327\233\276\010Z\361\276\010\217\206>\265l\215\275\244i\365;\317\024\212\276\017E\241>\350\301=>\344\367\246\276\327\022\262\276m\342\304\275\036\033\001\277I\205\201>b\235*\275V+S>^.\002\276\370\374\340>}\320\263\276T\037H=\027eV>\351+\350>Yi\242\276_\357\036>\256\201-\276\252+_>\207\031\371\271\304\224(\276\370\337\232>j\301K\276\\\033j\276+\334r\274u\223\030\277\rP\272=\204\236\275>[\010\202\276Y\206\030\276\261\247\335=dXe\276DLI=\006*\203>\206\033\320>\313\271\014\277&\033O\275\354\030\227\275\331\224s?Sg\244\272\326\255~>u>\274\274E\326\232<\250W\232\276\260q\275\275\227\3770>\227\375:\275p\000\"<A}#?S\350\334\276a7\254\276\026j\315>\272\275\344=\354\206\355>pBA\276\326\342\023\276\002\237\237\274\024\005\372>\255Pd=\202V >G85\277\016O\257>GU\323\275\351\361\353>\235\327\250>\370\337\212\276\272\203\000\277\031\004\016\277\233\033\013\277\353\305\020?\002\274E\276]\277\260>\365J\351\276\367\257,\276,}\350\275\201\225#>#\277~=\033\273\344\276\252\177\020=\210\364/@E\2359=\370\215O>\t\212?>\240\340\202>&\374\322\275\261\212\367\275\223Wg\276T\343=?\222\221\263\276\334\327a\276\0162I>\373\262\224=\013{\032>\232\231\331=_\322\030\276\256\r5>\235\272\362\275\014\260\027\277,\016\347\275\210F\347\276\332\003\235\276\3436:>\264\343F\275\017\264\302=\376\361>\276\302\305\345;\225\3223=Kv,>\017\227\334\275\373\226y\276\301s\217={I\223>\372\270v>\245\203\365=Q\210\200>\214\363w>\0324\204\276\245\367\235\276\226!\316\275\225a\274=\343\337G\276\305S\017\275\277\3615>o\217o;Z*\237>\316\215\271\276\200H\217>\021\344 \276a7l>[\013\263<\337\370Z\275\317\203\353\276\252\324l\276\331\231\362>\242z\353=C\220\263\276\324d\246\275z\337\370=k\232\027>\304#1\2758\370\302\274\216u\361=U\336\216>\331w\225\276.\004\371\275\277|2=\2176N>/\031\307\275x\267r\275r\334\001?\227V\003>\336\216\240\276h\260\251\275u\344\250=\350\331\234>rP\302\276\330\3604>\247y\037\277\206\311\024>_\230,\276Q\024h\274@N\230<\343\031\344\276\360\247\006>\254\220\222>\215\354J=^\213\314\2735\265\354=\026Q\223\275l[\324=\357\033\037=\213\371\271<\252e\013>\006\220\353\273\360\205i>5^\232\277\003^&\275\355Gj\276X\034n\276\377\347\200>\330d\r>>%\347\274\314@\005\2760\365\223\275b\241\326=\367\310&\275)[$\275}\"\237\276\207\334,\2761\224\323\275\335yb\274\376b\226\275\246\325\320=\024\256G\276\236\322\201>\202W\213=*r\210<\241\276\345\276\326\214\254= \n\246\275F\323Y\276\356\261\024>\245\371\343<\006\273\261>\247\226M>\241\2049\276\0162i\276\245\367M\276\223\035\333\275V\016->z6\353\277\254\250\201>4K\242>\013)\177>\244\247\310<\211A\220\276?\343b\276?W[\276?\031\203=\245k&\276x\177\374\275\207\031\232=\220\024\321\275zpw>\225\020\214\275F\261<\276\"lx\275\325&\016\276\024\260]=:\2571>\016J\330\2756\310\004>\316\337\264\276Zd\233\276z\215\035\276_{\006\276\260\003\207\276d@\366\275m\220)>\254\312\376\275\203\302\240\275r\301Y=\217Vu=e\374{\276C\220\303\276\374q{=\266\246\324;\310\231\306\275_(\240=\250\035\216\276o\327K\2753\027\270<\273\270-\277\021S\342\275E\330\220\275\2239\226\274\013\233\001=\307\2728>\224\300\246\275\223\251\222>\252z\036;\037\205\013>W\004\237\276\277\016\034>q\346\247>A\324=\276\014\007B\276\204*u\276\257\231\374=^cw>+\030\225=E/C\276\345\230\214=\236`\237\275\230\243\007>\333\2772\274\021\340t\2757qR\276Y4\355>\240\026\203<\342#\">\330\357\311\275\343\033\252\275\354\372\205\276\037\327\226>\033\273\004\276i\340\007=/\207\275\275\376e\327\2767\032\240\276\262\200\t>\266\363=>\300\351\335<\371j\307\274rm(>\006\016(\275D\300A>\232w|>v6$=5a{\275!\217 \275\376\0170\274\300\225L>\360\205I=M0\\=#\370\277=\302L\253>B\354\214\276\351e\324\275\200\237\221>\337O\215\276\270\001?\276\017\013\025\276\221\n\263>h>\347\274\363\216\323\276\232z\235\275\025:/\276R`\001\275W\317\251>a\211\007>\375\366\245\276\237\253->\206\257\217\275\365\363\246<D\2502\276 ^\327\2759\234\031>\371\017I>\305\376\022>\251\244\006?\'\332\025>(I\327=\371,\217>V\202\225>\032\213\306>\367\347\242=\372\325\334=\317\275\007?\273a\003?0\366\336<\001w\017;\245kf\276\335\322\252\276.\377\001\276\243\351\014\276\016fS\275F\266\363\275\006\240Q=\"q\317>\222?\230>1_\336=5cq>cB\214\275MI\326\274\022\275\014\273@\207\371=\300\224\001\274\010r\020>\341\263u\275\300\004\256\276\000\251\r>\273\270m\276\177\337\237=fk\035>\210c\035>\353\377|\276V\237K\276d]\274>\326\037\201=\224\331\300\276\201.P;\2137\022>\365\331\201\275\027\324\367=\335{X\276p\266\t\277\301n\330\275L\303\200>\362\322%@.\255\306\276\307h\035>\001\301\234\275e\031\">\r\213\261=F\013\260=\230h\020=\267\321\300?N\356\327\276\376\322\302\275\263\315\r\276o\365\014\277?o\272\276\316S\035\276\322:\n\276S\"\271>\232\261\350=\035W\203\275\"\375V>f\203\014>\007\353\277>\376HQ\276\224\3367=D\206U>\366\177\236\276\372z><\264s\032\275\240\303\214>\237\216\037?%\222H>b\333\342\275;o#\275\234\212t>\320\325&\277\343S\000=\335\265\304>^K\010\2768\273u\275\323\2769\274\025\251P\276B\262\000>>?\214\276d\222Q\276->\305>\233\333\316\273\305\222\222\275\235\200&>W\354\317>vl\244\276\'k\324\275 \010\020\274\244\307o>\207\026\331>\360\277\305\276\024\"\340=\2721\375>\365\363\306>\201[W>\250\000\250>.\004\371\276\364\026\217=\252`\024>S\347\021=\001\336B\276G=$>3\304q>p%\373\275\250\251\325\276\034%/>\223\000\005?\371\203\321\276\242\227\261>\322\030\215>\262.\006?;\374\365=6 \202=\351\357\205=\263\225\227=F$\312=p?\340\274\3126\260=.\255\006=\303\236\366\275\370\302\204>\305U\265\276\251\366\231>\204*u\276-\262\275\276\222\347\272=\276\331\206>\220\365T\274\263{R\276\223\030\304\275;Q\222=\220\240X>f\210\213\277\245\363\201=4\016u\274\232\225-=\300\262\322\274\274\313\345>{f\351\276;pN>\217\337\213\276\2447\334<.\377A>\231\r2>:\006d\276\203\300*\276\234n\271\275\207\242\240>\374\306W\275\031s\267\275m\377\352>\340\200\266\275\035\224\220\276i\000O>\010UB?\224lu=\276\237:>YL\374>)\005\005\277\375\244\332\275o\010z;\177g\233\275\331_\206\276\250R\223>\226A\265=\243;\010\276\222?\310\276F\261\214\276\r\301\221\275^\327\017\276\317f\325\276q\254K>E\273\n\276\276\331\266\276\200\013\262\275G8\025\277\244\374\004?\375\301\200\276\210h\304\276\300&\213\276\264<O=\347\035\247\276\313g\031>\035wJ>\n\327\203\276}\226\347=@\244\277>\355G\212>\213\303Y\276\007\266J\276JA\347\276\274\226\320\275j\274t\276\273\270\335>0\273g>#g\221\276\275\306.\276F\353h\276\324\016\317>\004\255\240\276\243u\204\276jMS>,\272\265\275\333l,==\nw>\213\246\023\276(~\014>!\357\260:\326\342\203>u\003\245=z\337\210>\027\363\223=\335\3153\276\344\201\310=\322R\351\276\262\200\331\276E\330p>\206\033\260>9\234\271>\026\301\277>\205\321\254=j1\370\274\325%\203=IK\005\277.\305\265>}\225|=;\307\340>v\211B?\231*\310\276\377\317a\276=I:\276\023,n>\020\3141\2767\303\355\276\256\273\211>\n\364\331>\226!\336>\352!*?\227<^\275f\332\376>u<&\276\370\245~\276\003\354\363>\325\222\216<37_<&S\205\276\355d\260>?\034\244<2U\360\276q8\023>6\004\247\275\325z?\274\367\254k\275\025\215u\275o\r,>\020[:=G\002\215\275\204G\373>L\251\253\275\'\245@>\270\222\315>a\211\327\276\357\346\t>\324\267\374\276}]\206\275g\325\267\276\022\332\362>\341(\251>\0265x\276\246\355?\276=,t>\367\036\026?\317\275\247\276E\201\376\275fNW>w\025\262\275\231\323%\276j\023\207>Q\210@=t\265\325\276l\223J=.\305\205>QkZ>\240\025\210\276\215\234\205\276\266g\326\276\215\r\335<\346?\324\276U\367\010\275\235\272\302\276\2549@\276\214\370\316<HP\004\277\3377><\374\373\014>\363vd>\240\375\330\276\270\036\205>\262\236Z=\211)\301\276k\237\216\275\266fk=\327/\010?\326\000\305=_\2652>c{-\275\001j\312=m\377\n\276-\n\273=\321\256\242>\374\373\274>:\256\306\274\205\010\210>\243\222z\276H\247\356\275\010\343g\275\253\\\310=\267\r#=\207\247\307>\022NK\276\207\341\323\276\2137\242>*t\276\276\n\023\246=\3122D\276\203n\317\276\355\273\322>\323\021@<{\327\300=H\026\000\277\r\303G>\021\374\317\276a\032\226\276\0162I\276N\321\321\276}y\001\276\213lW@\313\260\233;1%\222>\2068\226>\000\250\302\275\316p\303\276\243@\217\276\007\316y\276\254T\020\275\330\357\211<c\227h\275\310^/>\006\022\024>\263)w>I\205\361\275%;\226\276\377\317\001>\304\355\020=\0216\014\277\304@\267=\347o\222\276\270\254\002\275\031\305\362=Ih\253>\334FC>\303G\304\276\371\024@\276X\032\270=\006\275\267<\241\363\312\276\340\241\230\2760\r#>8\244\321<@\030\010?\214\363\267=\001\022r\273\301\342P\276\373y\023\276,S\002\274\323\301z\276\266\241\342=\356\264\265\27416\276\273\361K\035\276\332\2174\276\2721\315>V(\022\275\267\177\005\277\244S\267=\177\337\277<\207P\245<\031\003\353\274\231\234Z=\032i\311\275.V\324=\347\340\271\275\202\312\330>\216uq\276fh<=s\200\340<\262..\276\224\331\220>\306\341L>E\330P>\313\332\246\274\226Ck\2760\273g\276\250\251\005\2760\365s\276\n+U\275\t\304+=`\347\246\274\343\252\362=e\337\205\276!Y\300\274\226!\316\275T\037\210\275\273\270\315\275e\252@\276W\004\277>\301\220\225>q\310\206\274\372\'\310\276\025\221\274\273\353\255!>\244\337>>\014\260\317\275.\004Y>%\222\000\277\300\005Y<\376\324\250>\353\377\334=/\027Q>^c\207\276\031\220}>X\250\205\276+\331Q\277J\265o>+j\220\276\004!\331\276&p+\275\231\2360>!x<=:\351\335\276\364\032[>\363<8>\'\275\357\275\232\224\222>\315\006Y\276\237\260\344>Xs`>\0221E?\026\333\244<g\233\213>\313JS>o\330\226\276\2029\n?\211\010\177\275\215z\210\276d\003\211\275\377>c>\232\224\002>i\306\302=_\230\014>\377\0047\276PT\266<\255\027\303>\347\3033<z\374>>}\313\274>\333\212}>y>\203\275\3274/\276\241J\335\276@i\310\275\326\034\200>N\234\254\276\376\324\230\276\007\316Y\276\2279\315\276{f\331\276\317N\006\276Yi2>p|\335\276\335\242\202;\233Zv>`\037\255\276\022i\033=\r\034\220=\010\006\220\275\010\254\354>M\363\236\2760*I\276\241-\367\276\'\302\016\277h\313)\277\357\344\263\275n\2050=fI\000\276\302Q\362\275\377xO>\313\363\000\276@\336\013>N(\304\275\255Q\317\276.\310\226\275\023D=\276P6%=6\224\272=\rq\214\276\022\203\260\276<\242\242=\334c\231\276\370\215\027\277I.?\276\360P\324\2764\365:=\272I,\276o/i\276#2,=\245\203\225>q\217e>;\307`>\325!\347\276OuH>\n.v\276\007%\014\277\245\241F=\343\026\363\274m\342\304=\221\325\355=\277}=>\227\365\254\273*W\370\274\352\262x\276\275\030\232>AHV>?W\333\275\373\003\245=*\306\371=Pn\273=\275\214\242>\353s5>\311\254\336\274?\250\313=$\227\337>\206\346z>+0\244\276\343\337\'\275K:\n\275\311v\256>\265\025\253\276^\2348\275\032\264\241:\251\207\310=\021\310\245\274\353\307&\275qU\351\276\031s\327\275\rl\325\275\244\302\250\276\027-\300=\361F&>\260=\303\276?\216\206\275m\034q>\037\017\375<1\261\021\277\334\202\205=\371\332\363=\234\246\217\275\253\010\267\274\254\215\261\274u\315\324>\220/a\275\227\036\255=:#J>\353\213d>j\274\244\276\002\202\371\276\003z\341<!\007\265\276uv\362=\375\335{\275\3646\226=n\300\347=\304\231\037\276*\343_\276\212W\031\275\223\343\236\276Q\330E\275\247%\026\2752wm>`\223\205\276\221D\217>\362\014\272\276\223o\266\276\236\265{>+\244|\2761\266\320>\324}\000\276aO+?v\341\207=\307\234\207=\352!Z>\254\213\253\276\300\317X>\314\007)\273\275\251\210>\333\371>>6\345J>\201[\227>\377\262{>8gd>~\251\177>cv\273;\002\232\210>W&\314\276h\320 ?\261\371\030\276X\305C?\336\377\207=\341b\225>?t!>\025\221\341=?\000I>GZ\312\276Y\372\020\276H\212\210=\002e\303>\377\347\360=\026y#<\"\375V\276\357\311c\276VH\311\276:]\326=\335\266\357\274=I\272<\335\007\260>F\265\310=\347\035\037@*\214->\242\357\356<\304w\002\276\327\027\251\276\375\301\240\276u=Q<\016\363\345\275N\321\241?\\U\306\276\036\334}>K< \276\201&\002\276:y\221\275\262.\356<\275\343\224\274\372\325\334\275}#:\275\340\271w=\215\227\356=\025\214\n=\303J\005\275\331\353\255>\346\350\361\275\211\263\242=\307\177\001=\024\350\023\276m\312u\276\007\233\272=\324C\024\276\211\322\336>6\345\232\276\243\351\014>_{f\276\263D\247=~/O;\233=p>\025WU>1B\020?1\316\177>1\224\023\276Q\210\260\276\221\n\263\276\247;\257\275\004\347,\276\257_\020\276\306\371\033>\2201\367\275\365\271Z\274\226\260\226\275\260 \215\276\202\342\247>\243\001\374=\303\330\262\276\213\371y\275\017\2719>\321\005U>v\026=<v\032\231>\265\2469=\317\240\201\275\325\262u>\315uZ\275\014\3106?{I\343=\322\373\226>\317,\t>\300\350r=LO\330=\014\345\224>\377[\231>0\360\\>\016\330\025=\315\314\374\276L\303\220\276P\341\210\274\351C\207\276\025:\257\276\312\243\033<\362\007\343>\272\332\312=\\Z\r\276\353\037D=\364\214X;G\311k>\366b\310>MN\255=\240\2466\276_\010y\275\236\322a\276\177\274\027\2759(!\275\240Q:=\371\367\031\276nL\017\276\334\365\322<\372\362b\277\350\336#>\234\3004\275\200\231o<`\037\335=\257\317\034=\274\"\230\276\371\203\201>\276\3017\276\3328\342\275k\r\305\275\331{q\274\231\323\365>\335\315\263\275b\241\206\276\005\027K>\374\373\014\276d>\200=Z\201\341\275\275\000{>\232\010\033\276\315<9;a7\354\275\257\010\356>c\227H\276Bx\264\274\303\273\034\276vlD\276\2505m\2763\247\313=Z\022\300>@\335\300<\013\322\314=\272\275\344=\034\316\334>\342X\267\277\303\236\026\276\360Pt>\267b\277>.\034H\275\306\277\217=\006d\217\276\274\374\030\273\034\231G\276o\275\246\274\026\301\037>\201\262\211\276\026\373\233>}\"o\276\311\307\223\273\023\311!\274\315\006\211\276`Vh=\305r\313\275\210\364\333\275\233\215\225<\030`\217>\367\224\\\275L\250\340<\343?\223\273aT\342\276\202s&>^\242\372\275t\263?\275\324\202w\276\235\200\346\275\377\225\025>!\037t\275A\202\242\275\2549 \276\242b|>\336\310|\276\n\334\032>\331\3167>\177\207\"=\t\033~>.\032\222\275\331\316w\274\2201\227>-!\217\276*:\022\276\3746\244\275a2\365\276\327/\370>\002H\275>(a\006>~:\256\276\371\205\327\274O!\227=X\342\201\276\302Qr>\31667\276C\215\002\275\241\017\226<\330\365\253>\010 \245\276!>0=w\274I\275^\205\024>5\265\234>\013*j=\317\332\215>z\307)>\225\017\301\274\374\030\203\276Lp*\275@\366\032>\324\020\025\275\316\215\311\276\332\003-\276\375\207\364=\205\357}\275\026\030\262\276\207\247\307\276i\306b>\314\013\020\276\3328\342=ux\010=i\342\235\274!\002\316=\260\254\024>?t\241\276\\w\023>\233Z\026\276\331\316\247\2766\352\201\276\3578\245\275\332rN\276\365\363\266>\314yF<Q\024\010>\017\326\177<a\211\227\276%X\274\276\030\351\305\274\271\247\213=\251\336z>\242\010i\275\003\tJ>\277+b>\233\311\227\275M\326h\276L\216;\276\366\227}\276\272\240\336>C\002\306=x_\225\274\372\325\214\276\236{O\276\226\230g=\224\373\035?>\313\203>\207\242\000>\261\247=\276\300\347G>\201\225\003\276t\322;>\007_\230\276!\315X>\233\220\026\275\345+A=\333\026E>\'\275o>\027\202\024?\323\274#\276\233\222\214=\2613E\276\2235\n\276\375\023\254\276\222\\\036>\215\177\037>\200\324F>\234\247\232>b\276\374\275\024\352\351;\204)\212=\304_\023>d\006\252\276\226{\001=\025T\024=Q1.\276g\362M>\225eh\276\372(\243<\325!\027\276\273~\t\277\374\344\250<\007{\023\274\257\316\021\276\2511\241\275\0265\030\276\272\332\212\276`<\223\276\272\332j>\001\373h>\317\240A>\037\2004\276W\225\035\277\016-2>\366a=\274\237Y\022\276\205\010\210\276\304Z\034>\r\375\223>\217S\014@\334\200o>B\317\226>}\353C\275\321\\\327>Mg\227\276?\251V\276\216@\334\276\"\216\345?}\226\207\276\216\222\327\275\226&E\276\326\247\034\2756x\037\275\314E\234\2766Y\203\276\223Q%=\357 6\276\302\207\022<\316\252\317\275\200\266\265\275\203\372V\276\277+B=\t4X<>\"\346\275\322\251\253>\372~\232\276\246\'l>8\272\312\275\326sr>m\377J\276\030!\274\275\260\036w\275\373\003\345\274aT2\276\222\221s\276\366\316\310=nn\';z\344\337>\025W5\276\030!\374=\024\224\242\274\307\327>\276\301\255\233=\355\266+>\242\266\215\274D\206\325=\020x\240\275V\232\324\275\030|Z\275t^\343=F\261\\>j\244\265>m\252\356<\266\204\234>\371\275M>\227p\210=a\026Z\275\255\027\003\2754\277\212>\344\017&\276]\247q>\343kO>\231.\304<=D\223\276k\361\371>\020;s\276\006\273\241>n\373\236<Kv\334>@\331\324=s\242\275\275\232\352I=.\3472\277\204\360\010\276\252\361\262\276G\345\246<\362^\245\276\3441\243><fP?\026P(\274\267\321\300\276\354\206M\276\016\241\252>\252\271\\=\354\205\002=\313\020g>\361\2002\274\214\306\020<\360\242/\276j\301\213<\312Q\240=J)(>\206uc<\302\315\030<\265\375\013>_\230\364\277W[\361=6\352\341\275\244ng\275a2\245>\350\204\260=\t\033\336=\035\346+>\216\006\020\276\345\320\242=D\375\216\275\375h\270=\327\372\"\276\216;\205\276\023f\332>7\032\000>\273~\001\276\007|>\275\261o\307=M\363.>$\264\205\276\010r\020>\274\2219\276N|u\275L\211\364>\214\326\241\276Q\245\006?%;\366=\325xi\276\372\323\306\274\235\205\275<\204\330\031>9b\215\276\335\322*=x\232\314<\326n\023\277\221\362s>=\362\307\276\033\236\036\276\203n\217=z\302\322\275\203\371\253=\263\007\032\276\356\010\227\276\240T\253\276\226\004\010>\317kL>+\023^\276\315\"\224\274\375\023\034>6\002\361=xzE\276R\014\260\275\324\357\002=J|\356<e6(\276\021\375Z=\371f\333\275\250:d\2762\252L\275\002+G=\306\341\314>1{Y\274!\352~\275\251\027<\275/\213\231>\225\267#>\207m\273>\232{\310=\334K\272>\205\266\314>\202\342\207\275\373\"\341\275?\221\'>\254\255x>\203\241\256\275)\005=>\003[e\276\220\367\352=}\350\242\275\017\360\244\274\320\354:=e\215\272\275\035\217y\276\254\220\302>\216\006\360\275\327L\376\275\207\026\211\276^\242z\276\276\331F>\006\234\305=h\"\214\276\300\354\216>\252\2650\275\255\300\020?f\332\036>\033\023\"\275<\300S=\355d(\277\205\010\330>\205\224\177>m9\027\276\013{\032>\263\273\033\273\276\203\237=A+\020>\032\243\005\277\321v\214\275\177\335\251=\256\rU>\003`\314>\307\235R\276\202\312\370<=a\001\277\273\320\334>\375\023\034>\302Q2>\351\267O>u6l\272#\020/>\200\267\260>\013\321\201=\320\325\326\275\340\271W\276\016\204\324>\n\240\230\2745\265\014>B\t\303>\"q\277>\007\266\232>\372C\263=\010\217v>\322\373f\276Q\245\206>\330}\207=\373\221\322>\022\302\343=K\344\002\275\233\0333\276+\366\327>.\312\314\276aT2\277y@9\276O\314\312\276f1\t?\215E\203\276\371I5\276Tt4\277\224\373\335\275\347ob\276\036\026\372>\252\3612\276Nd\206=\032\245\253\275\326\252\235\275\270#|>\330-\002=m9\227<\022\205V\275P\337r>\314(\026\276\312\342\276\275J$\221>l!(?\\Zm>\312l\020?\257x\252\275\210\364\023?z\310\224=\031\255\203=T:\030>iW!\275\300!T>[|\212<\240l\232\276\370S\243=U\030\233=\032\213\346={f\351>\222v#\275~\030\321\276\033F\201\275\316o\230<p\231\303>\335\007\200\276)\263\241\276\344\241\357\274m\034q\276\236\320k<\317\367S\276\342\006|\276\265\375\353\275\350\207q\276\nh\242<\350\274\246>\334y\007;Y\206X>\216\257=\276|,\375\274\033/}>\246}s=!\217`<S\256\320\276\263\231C\275\215(%@\020]\220=\n\254\322;\037K?>\330*a\276\224\274\272\275\246\3626\276\233\254\321\2750\330}?S\226\341\276\330\267\023\2731B\350\276Y\335\352\275\340\273M\275\264\"\352\274\226Z\217=F\261\314>\206s\215\275\202\213\365\276\222\221S\276y\351\306\276\326\342\023\275\260\226\026\273\276\025\211<C\377\304=d;\257\2761{\031\275\234\305K\275\225\356\216\275\207\242`\276\345\270\323\276\227\251\311\275\247@\206=C\305\230>\201C\250\276\014s\202<;m\215<\2137R\276\030}e\276\355i\342\272\351`]>\2554\t\276\212?\312\275q\254\213>J\014\222>\304Z<>#\276S\276\340\204B\275K9\337\274\313--\276\220\210I\276F\224\366\275\372\325<\276\270\223\210\274\326\034H?\337O\r\276F\261<\276\251\372U=\366Eb>\256*\213>\000\256\344=A\365\217=\365\363\266>S\350\374=\273\'O\276\332\254\032\276\'\275o\276\256\325\036=\244\247\010=\036\340I\275@\212:=B\\9=c\234\377\275z\031\345\276\240\214\221=s\327\202>\222\263\030\277\035r\303\276\232\3565=\341@(>\273D\205\276\\\033\252>\326T\226=\321tv>^\253\363;\334\235\365>\251\366\351\272\375\301@\275aSg=\224j\177\276wM\010\275H\243\302\275j\335\006<a\375\337\275\367;\224=\222\312\024=\217S\\\277zS\021>k\200R\275A\177\301\275o\366\207\275\001\207\320\275\271\252L>cz\"\276\177\333\223\274)>\276<G\254\245\276d;\037>j\3026=A\324\035\276\034&Z\275EG2\276\265\211\023\276!v\206>3\247+\276\201\317\017\276h\312\016=Dio>\023a\323\276n\206{>\346W\363=\253\226\364\274\t\210\211=Eb\302=]\371\014>J)\330>\203j\303=t$W>\362\265\307\276|H8=\203\371\213\275t^#\277\036\212b>(\'\002?HR\022=\032\206O>\265\211\323\275U\027p=\243\351L\276\330\236\331\275\247\256\\\276\033\365\200\276\036\212b>\240\246\026>\2276\034=\247\263s\276\372\325\234\2759\227\"\276N\263\300\274\260\376\017\276\000t\210\2769(\221>&\341\202=>\"\306\276\270@\222\276W\355\232<\371I\365\276C\343\t=q\343\226\275\377\224\312=E\201^\276\202\342\307\276\343\215L>\203\027}>\261\3718\276O\314\002\277\t\304\353;\034\323\203>ZH\240=<L{<d)\355\273\211C\266\275H\376\220>\360\205\t\277\"\246\244=\330\330\005\276\"\032\035\276\217\245\317\275pw\326\275\242\264\027\276\\\313$=\324\361\230\276\277H\010\276\2304\366\276\302\027\006>\370\305F:\3544\322\275#J;\276E\rf\276\024\222L\275\246\362v>\'K\255<b\204\200\276\325\347\212\275x\264\361\275\271\210\337>\214\330\247=yY\223=r\027\341\274h\313\271\275\271o5\274\r\373\275=\020zv>\204\236\315\275\nh\342\276]\026\323\275\352\313R=\030\260\204\275\271\252L>\005\250\231\276\344\326\304\275 \t\373<\202\342\007\276\316\374\232>\364\375T>\'M\203\274B\223\304<U\023d>G\312V\275\206\003\001\276\232\316N>\357 V\276\201 \240\275\302\206\'\274\222\2213\274\376e\027>T\343\345\275k\324C>z\252#\276\274\221Y\276[%\350>\375\023<\276.Y\225=$E$\276\352x\014>\315\006\001?;\031\\\276\352[\346\276C\255\231\276\375M\010\276\026K\221\275\027\016d>7\032`\276\265T^\274\217l\256\275<1\353=&\215\021\276\375M(>W\257\242=+\243\021=\215\263i\274%XT?aL\037\2746\002Q\276\213q^>\020\221\272=\311\253\243>\031\214\266\273\037\205\353\275Y\206\030?9\321\216=\223\035\033>\314b\342\275J\227\376\274\t\304\353\273\206\311\024>\344J\275<\244\215C\2760\022\272>\330\266\350=\274\"\210>\377\225\325>h\\\250>&\307]>F\2663=\016O/\276\327\337\022=\033\273d>\210\226\206;\353\305\240>\253\004K\276\014<\367\276\203\027}=\271\245U\276\t\212\337\275\362AO>\262\177\036=w+\253=\000\256\344\276\322\000\336>\234\335\332<u\2238\276d#p\276\355\324\334<1\261\351\276T\251\331=\230Q\234\276\325\312d>\270;\373>L%\362\273\033\236F@\013\265f>\307h=\276g\234\206=\341b\265\276\n\327\343=\231\273\206\276\225`\301\276\"l8?i\001\332\274\217\304\213=nn\214\276\241\370\021>\326\220\230\276c\227\350=\345D\233>\322\246\212\275\347Qq<\260U\262>\256\r5>#\370\037>\361)@>d@\206>\301\2205>,\237\365\276\361.\227\274#\241-\275\206\344$\275r3\\\276\365g\377\275K\002\364>\026j\235\276:\312\001=\317,\t\276^\276\365<\000\256\304>\373\\M\276\215\321\032>\315X\344>\257w?>;qy\275\030[\010\277\207\341#\276Mg\007\2765)\005\277\203\372\326\275\253x\343\275\262\200I>\003\262\327=\017^;\275\264t\205\274\230i\233>\"\211\216>]\277\340\276\242\234\000?\271\337\221\276\325\225O=<\245\223>\004\220:\276C\306\243\275\225\016V>\360\371\341=\036\341T\276Xs >\276\301\207>=D\203\27677\346\275\302\204\261=\022\024\037>\310{\305>\240\340\"\275\277C\221\276\200\0163\276\354\300Y\276\023\270\025\276S\316\027=\033\022\227\275.\034h\277\221&^\274\006\201\305\276\251M<>\274\316\206<\275\214\322\2767O\245>\264\345\034>\253!q\276_{\326\276\037\277\247>\265nC=s\327R\276B\353!=_\357\276\275\2034#?/\213\211>\'kT>\020\"\031\275t\265\255\277\"\303\352=\006\273\001>K\253!>\223R\240>\254\255\030?\357\254]\276\2721=\276\034B\325=E\365\246\276\220\021\320<\374oe\276\365-s>,+\315\275\211(\306\275\216;\305=D\250\022\276\333O\246=\321y\005\277[\321\246=\351+\210>e\245)?\204\202\262=\000t\030\2761\254\207:\357\376\370=\3328\"\276m\255o\276\303\r\000\277w\331\257\275\277\np=\342#b>\276\207\233\276\000:l>\215\356\340=V}N\276\037\2777\276\266\204\274>\006G\231>\303\273\334\275\221H\233\275o\022\323>\222\004a=-\261\222=\363\216\303>\276j\305\276\2237\200\275\n\327\263>HP\214\276J)\010\276Di\217\275\230n\022\275r\212\026?\367\3142\276\273\233\007\277\013F%\276\251\244\316>\037\242\321\275\225e\000\277S\227\014=\303\365\250\276\306\247 >\226\354\210\276\337l3\276\205\\\311=\251\366\351=X\250u>\343\215\234>\026\023\373>\337\370z\276\247\222A=]\0263>\207\304\035\276\353\305\320=\245\275\031\277\t\247\005>=\270\333>5{\240\276\336\037O\276\374o\005\276\367?@=X\3478\276w\275\264\275\320\362\214>\301\306u\274\350\274&\276\346\350\321\276\236AC>\022\022)\275\222\371\323\271\375\274\231\276\220\210I\276\010[\254=\223\306\370\276\2763\272\275v\032\351=\3603N\2769bm\276\272\367p\276\221\016\217=\256\022\354=\265\211\263\275\020\351\227\276\217\031\030\277\366\264c\276\376ew\276\027\267q>\207\334\214\276J^\035\277\177\373\252\276lC\245\276]\212+>T\2519\276\323M\342=\017E\341\276,}(\276\312\302\267\275\363\222\177\275*\304\243<\302\3003>\307\275\371\274+5;>g\'\243\276\330*a\276\024\004\017=i\306\342\275\334\364\007>]_\332;<\275\022>\335\357\300\276\307K\367\276Dm\233=W`\010>\034&\032\2753\026\r\276hy\356\276\3711\006>\t\246\032\275#\300i<\306\303;=I\002\201\272d\314]\276I\364\322\276\260=\243\276\215(\355\275:\257\241>\2446\021?\275\214\242>1\224\223>\240l\212>/\372\232>\002e\263>\225+\014?\007\t\221=\223\217\235=\025\306\226\275\r\252\r\275\001M\024\277\212\260A>\306\226\324\273\202s\206\276\365\234\024?A\232q\276\020@j>\373\351\277<\200H\277\276\033\365\240>u\310\215>/\027\031\277D\277v=\376\272\263\275\2341\214=\376\361&?\375\237\203\276\200\016\023>\376\232\314=,e\251>,\324\272=\227V\263\276\266\241\242>P\337R\276$\356\361>\024B\247=\367\006\037>\314E|>k+n\277\322\373\266\276\253\262\357\275\214\0224==\270;\276rmh>MJ!>g\n]\276\246\320y\276\261\3718\274\371\021?\274\204\201G>\026\371\265=C\004\014?d\351\203>E\360\037>/\300\256\276\036\334]\276_F\021\276\303\365\034@\002\271\204\275\252\020\257=X9\364\275S\267\016<\036\376:>3\212\225\276\021\036\355\275\207\026\311?\247\263\243\2766Y\323\276\026\2449\276C\377\224\276)\005]\276\014\223I>\277\016\034>Z\362\270\275\313\023\310\275\360R\312=\302\370\211=\241\241\177\276\311U\314=\226>\244>\035;h\275\376\016\245>\001\336\">\231*\350\276\026M\347=\266\271\001\277\247\226m>ff\016\277\266\276\310>&\252\027>\307\327>\2769\264 \277L\303\360\274\231*\330\275\302\245\303\275z\213\307\275\314\356I>X\342a>\317\240\341\275\306\367E\275\302MF\275K\230D;\036O\313=9\362\300\274lAo<9\267\311\275\361\021\021\276\203L\362=7\342I\274Xo\024=\357\341\322=\016\204\344=\313\276+\275q=*\276\322\306\221>`\315a\276\236\232K\275[\266\246>#\333y\276\333\205\346\274\300\321\351\273}\226g\276>@\267\275\371\331\250=DkE=t\007\221\276\367\006?\277\023\325\033?\"\032]>\001j\n>\240\244\300\273\276\274 >V\266\217<F\224&\277q\254\033\277\214\370\016>K\223\222>\030x\256\276\006\330\247\276\363q\255>Qfc>\177\274\027\276H\212\250\276\2034#\276\220\332\304\276\t\371\000\276Y\340\313\2751%\222\276}\230\030<#.\000<#\277\276\275\252e\213\275\2615\333<+\030\205\277\031\220}>\007\231\304>~\214)?\2235\212\276~WD>\013A\016\276\257w\277\276P\032,\271\017{\301\275 F\310=p\010\345\276zp7>nQf\276\315\261<<c\234_\276U\366\335\274vld>\326s\262\276G\217?\276P\217H;/4\327\276\220N=\276z\344\017\277\373\005\033\276\350\301\335\275\331|\\\276\263^\214\276\010rP\276p\224|>\267(s\276<f\000\276\034(p\274;\3776=Gw0\277\020z6\277\233rE>N\2300=\232z\275=\r\213\221\275\226\t\277\276\327\372\202>\014<\227\276k}\261>}\221P\276\350\202:>u\345\243>\312\246\334=\"7C\276\005\206\374>\007\323\360=^\271\236\275qZP\276t\352\232\276\035\254\177\276\243#\251\276$\326\342\2751\2660>\017E\201\276\232\266\037\276\354\276\303\275\357\217\227>k\202\350\275}\005\351=s\272,=\327Q\325\275\230n\322=\rT\246>\005\213\003>;\021\016<\261\337\263\275gD)=\003\225\201\276\243\036\342\276g\362\r\276d;\237\276\013{\032>\200+\231\276Bx\014\277BC\357\276p\2669\276W`\010\276\2029z>\260\216c<lxZ\276\r7\240\276*:R>\211\352\035\277\t\212\017?\362\265g>\275\030\332>\341]\236\276\265\375K\276\021\337)\276\233\003$>\025\215u=G=$>l\230\301\275\300>Z>\\ \341>}?\365\275O\036V>7\303M>\354\2433>n\243A>\277\232\343\2766x\237=\242*\246=\300\225\274\2764\235\315\276\236\357\037?H\211]\275c\234\007?\240\372G=\213O\001\275\303bT\274\001\027d=\025\216\300\275b\204\220=\325\004\301\276\212\002\275\276a\250\203=;\344\326>\027\361\335=\324H\013\276\355\237g\275\305\346#\275r\212\256>V\016\355=T\220_\275\332\217T\276\017E\321>\031\000\252:\3745\271\276X\377\027?\211\353\230=\200H\217>\241J\255>\'\203\003?\247\350\370>>\"\206\276\336\216\200>\214gp>3\026->\327\022\022\276\304%G\276\363\310\337\275fI`>\276\331\006>_\226\226\275=~o=o\365\234>\305\311]\276?\376\022\275\263\352s>\030}E\276\276\023s>\373\256\250>\025:\337\276\243\351,>.\004Y\276\211~\215\275#\025\366\276\204\365\317>\t_\251\273b-.?!?\233\274\371Nl\276\322V\200\273\263\007\272\276-&\246>\255i\276\27674\205\275\335\357\000?\027\361=>\034_\333>\341\227\252>\304\316\024>\014v\303<;\342\220\275\373y+\277\013\357\362\275\256\r\225=\355\236\214>\337\340K\275KJ\013;\301\034=>&\373\014\273\252\202\201\276\227\377\260\276\325\347\212\276 \014\374=u\351_\275\246\nF\276\016O\017>G >\2764/\207=\361\021\201\276\305 \360\275\037\277\207>|\356\204==\270\373=\020x\300\275\325<\307<\302\206\037@\223\304\222\274\276\332\221\275\207\304}\276\\U\206\276\213\375e\276r\341`\276[_\004\276\374\030\213?\362$)\277\324\200\001\275\304\320j\275\037\023i=5\014\217\276m\347\313\276$\356\021>\007a\256\275CV\027\276\357\215a=\315\000<\273\2510V\276\203\335\220\275@0g>\027\237\"\276\275\343\324\275\234\341\306=\250\000\020\277\263\230\250\276\343\210U\276e\272!<\370\342K=\020\023\303:\364\246\">\2450/=\252\2500\273\342\257\311\274\272\275D\2763\371f\276U\366\335=\002\177\270=\217\031\010\276\274\263\246>\030x.\276@\023\341\275\334\235u\276\272\371\306\274\270\037p<!\260r\276M\272\255=T:\270\276\002-\235\275\316TH=\\\033\352=R,W\276\366\227}>,\235\217\274\217\245\017\276\3062==\270;k>\327\243\360=4K\002>f\334T<\272\332\352>\356Z\322>\235- =\260\346 >\225+<\276\334c\211>j\026h=\211{,>\316P\\\275\3371\274\275\216;\345=q\311\261\275\021p\010\276!<\032>\024y\242\276\'\024b\276\3171\200>/\300\256>\035w\272>\036S\267\275\236Ac\276B\225z>v6$=\313\271\364>,\272\365\274\306\320\373:\016\022\202=\361\021Q\276?\221\207\276\035rS>\345%\177<\310\357\215\276\373\"A\276\376\267\322\275w\326\376\276\346t\031>r52\274io\200>\204\365\217\276;6B>\222\353\206\275\334\r\302=\246\017\035\276!\222a\275\007%\274\276\246\355\177>\363\257\305=t\007q>\232w<>\256\202X=\235.k>\365\326\000>\261\026\037>`\3450\276\263\315\255>\263\315\315\275V~\231=@\244\277\275\330\330%\275\002\240\212\274\244.\276\273\tm9\276\023\017H>\265O\347>.\220\340=\016Oo>\272\332\312\275W\n\241\275\224\373]>\363Y6\277rN\314\275;\252\252>\347\214(\276\353\306\273\275\n\235W>~\345\301<\325\355\354<\"\216\365=u\037\000\276\214K\325\274A\327~\275\223\343\016?\r\274\244;\205%\236\276\221&\036=u\3453>E\236\344\275\277}\335\275H\033G\276l\262\226>\260\254\024>\327\240/\275\305\311=>L\301\232<\245k\036\277x\271\010>\023|\023=\355\r\256>keb>\270v\242\275\262\017\222=\321\0055>\362\265\'>]\371l\276s\327\022\2760\364\310\275\254\375\235\274 Aq>\205%\256\276z\342y\275a\246m\276\215\177\237\276\032\027\316=Qf#\276\206\254N>\363\345\205\274\'\367\373\275%\260\271<\212\345V\276\271\031N\276\001\374\263\275\260\221\204=)\313\320=\353\3426\276)?\251>+5[>O\257\244\276Z*/\276I\272F>c\271\305\276\210\364[\276J\010V\275\177\331\275<\266\241\362>>\226>> )\002>\"\216U>\372\n\322\275r\026\366\275nL\317\276\356B\363<\320\235\340\274\313\242\013\274z\307\351\275\225)\246=+j0\276\233\003D>\3433\331<\030\\3=x\356\375\275\266\276\010>\001\030\317=\344H\247=lx\032\276\257f\370;WCB\276N\234|>\317Nf>\007\010\266>K\310\247\276qr_\276\227\220\017>\326s\222>\2504b=\373=\261\275\341\356\254<\005\372D\276\303\r\230=\342?\235= \025V:L\251\013=\271\302\023\277_A\332=\314\013\220>\321\005\365\275\243\314.\277\203i\250\276=Iz\276\026\275\323\274\254\212\025<)\\O>b\272P\275\342#\342\275\366\2313<*;\235=\267\013\315>l\225\320\276\336<\345\276\277\232\243>\222\312\024\275\364\210Q\274\272\3670\276t$\027> Aq>\242\'\245=\373\005\273\276\210\266\010\274\351\267\037?\026\244y\276\372(\243<\253x\223\276\007\357+\274\347U\035=\021\374\357\275\365f\224\275\317\275\'>\376\016\305>z\373\363\274\n\021p>\325\t\350>\242\264\027>%[\335\274\354\337\225\275\325\347\352\275\252\273\262\273,\267\364>\0220\272=s\203\301=\372\325\274\276\303\r\030\277$&\310\275\213\211M>\251\244.>\030-\233\273\350\245\"\275\307c\246>i\036\300\274\351\361\373=\014\223\251>\225+\\>X\305\233>\343\223\004\274u\037`\276\022\3322>\356_1\277W\317\t>\221\320\226\276ob\250\275o\201,@^\273\264=\360mZ\276\342#\002?!\223\004\277\201\3514<\000\343\251\2764\021\366\275\346\255\232=\211\352->\200e\345\275;\215\224\276<\024\225>\306\026\">\336\345\"<\313-m\276\003[\245>\000\221V\277~\030\241\276\232\353\364\275\242(p>\347\373I\276\021\036\r\277G\217\007?2\254\362>\255\243\212\276[_\204>#\276\023\276\356\317\005=\014\220\250=\022\240\006\276V\016m>\366\321)>JF\336>\335\230>>\226\004\210\276\362\357\023\276\246\355\317\276\301\220\325=\214\326\021\276\200}\024\276\334\363\374\274\223\345d\275+\207\306\276\007\010\246>\232|S>P\374\330\275\000W\302\276\025t{\276\036\247\230\276\013a\265\275\375\202\255>\341\230e=\220\332d>\330\330%>\244\031\013>w\370\013>V)\275\275\303G\014\277\037\273\213\275\330G\347=t\227\304=\202\342\007>\361\235\230\276S\313\026\276nn\014\276S\256P\276\326\342S>\262\200\311\275\224M\211>\2240\343>I\362\\\275kH\034>-!\'\277 FH>\031\220\375\275\026\373\353\276h\263\252\277MJa\276]\304w>;\374\245>\004\347\024?#\025F>b\333\362\276T\217\224= {\375\275!Y \276\024\355\212=`<\243\275\014<\267>&S\305>\343S\000=j\244\245\274\265\211\323\276*W8>\345\362\337\275\177\336\204>l>\256>\270X\321=\303\236\206\276\231\022\311=\2407\325\275\014Y\235>\032\337\027\275\243\001\374>\313\333\221>\246\355\337=\224\301\t?\350\244\247>r\371\237>Gw\300>\272k)>\310$\003>\257\261\213>\257\352\214\275x\227\213\276U\030\353>\331\010\264>\\U\366=J~\244\275\366\227\335=1\353\005\276p\013\026\275\342u\355>\273a\233\276\274x\277\275*\002\274\275\"3\027\275\231\323%>\3019\003>Ih\213>\211\313\026\274\251\237\027\276\"7\243\276\022\332\322\276f1\261>\326\036\366\274?\307\307<\340\276n>\'\245\200\276\221\233A\276\217\307\354\276\346\256e\276\347\030\320=\366]Q>P6\345<\013\322\354\276\036\334]=>\226\036>\013)\217>L\304\333<\223R\020\276[_$>\nh\n\277:XG\277X\220V\277\314(V>\365\204\205\276\201&B<\320\362|>\330\236Y\275\322\306\021\276\264\037I>\215\264\004\277\236\352\220\276\037h\025\277\264\216\"\277\007\323P>b\276\374\275\2721\275\274\347\000\221>A}\273\276\253\224\236=\006*\343\275?\343b\276e\337U\276\237\257\331<z5\000=\251\336\022?C\347\305\276\332V\263=>\005`>\211x\313\275\360\242\017>\253!Q\276\002\274\265>S\350|\276\0265\330=1\261)?\210\235\271\276\306m\364=\030&\323=\357\346\211\276\307.\321>\302\027\326\276\255i\376>\323L\227\275\256\236\363\276\\\033J>C\347\345\276-\320\216=\232%\t\277e\031\222\276\370<\332;\367v\313=\234\304\000>\377>#?\003\\P=\255ne\277\321tV>\202\305\241>Yn\311\276\"\377\314<\310\265\361\276\322R\331>\215}I\274\030>\002\277\274?\036>\345\n/\276F|\347\275o/\311>\240l\252>\377\354G>\030\226\277<Z\365\231\276d\351\003\275\334c)\276&p\353\276\335yb<\207\247\027\2761_\276>\313Js>\031\347o\276H\376@>\254\034z\276\025\343<>\337n\251=HP\234>\247\256\\\276N\t\310=\r\301\221=|Dl\277\341\013\023\276\302\244x=w\365j\275\216\006\240>\326\3779\277Ou\310\274\213\246\203>G\346\031\277F\231M\276\022\332\n?\0260\301\275W`@\277\316S\315>\221\355\234\276L\340\026\277\265\360\006\274\251\366q\277\203Q\031?\240T\273\276P\302D?\001j\232>\327\301A=\273\362\031>\347\000\001\276\342\312Y<\360\212\200\276\375M\270>yX\370>\224\336\207\276\330\273\177>}\226\017?,-\303=WC\302>2\003\325\275\236{\317\275Z*\217\276\214\276b>F\266\363\275W`\310>1\231\332\276\331\263g\275\251\274\255>\374V\213\275\322\214\345\276\n\021\010\2778\363\233\276\020\317\222<P\031?>\030C\031>P\031\177\274\305\000\311\275\332\344\220\275\313g\371\276^f\030\275)\256\n\276\217\307\274>\301sO\276\010<\220\275\236\357\217?\246\325\320\275\362\t\271=\237\002\360>\244r\223\274m\034\021\277\373\226y>\331\320M<X9D@\3019\323\276>\350\231\275\356%-\276y\036\254\2766\002\301\276\2407\025>\372a\244>\027\2671>\336\2536\276\204\022\346=\353\346b<\273\r\312\275\330\0171\274z\252{\277\373\350t>\203\335\320\276\310\353\001=\315\036\330\276\004\312\246\2764\327\251\275d\006J>\020\263W=ffF\2761_\036\276\230\332\222\275\321y\255>\263$\240\276\326V\014?(~L\276\366\227\335\276\337\025\001>\013\226\312=\311\216\315=\223\377\t\275\024\3503\276it\'>_\322\370\276\254\220R>\353\3732\272\202\250\003\277]p\246\275\320a\216>\326\305%?\rl\245\276\241g3>\364\246\262>E*,?`\224 \275\313\276\273\276\367\"\232=UM\200>\272\335\013\275\n.6\276\213l\'\276\201!\013>\313J\323\275f\364c\275\035\254\257>\234\341F>\376\341>\272\253\354;>\204\330\021?\3544R\276y\316\226\274E\201>\276\333\277\262\276\361h\013\277U\366]\275\246\320y\2778\333\034?\377\3179?\226\320]=@\207\371=\311\222y\275\3171 \276W\t\346>\255\027\363>8\204\n\276\257w\007?\343\215\374\276_^\340\276\013\353F\274IY\320\273\377\317A\276\027\016\264\276Nz\217>\256*\333>\346\256\365\277\361\364\272\276\354i\207\276A\274\276>a\316\"<\216\036\377\275\001M$\276\325\t\370>(\325>\276q=\n>\240\375\210>\n\205\270>\"T\311>\325 L\274$b\272>\267\356\346=\324\202W\2766\253\356\276\255\243\002\277b->>7\303m>\325\t\310>`\310\"?q\217%?\222\223\311=1]\250\275\2240\303\276\366]\t?\372\355\313\276\346\221\007\277!\352~\276\206r\342\275\343P\177\275S\350|>\033\201\310>\347R\004?\374\306w\276r\334\351=\252H\265\276\354\276c=]\247\021\275\264\220\000\275&\031y\276\274\350\253\276\232_-\276{\024\016?\375KR\2751\353\225\276\237\223>>vT\365=\314z1>`Y\351\275\377\277{;\247\"=?;\302\231\276|\361\305\274\010w\347\275\204\330\031>Q\024\330\276\247\226\005\277(\017\233>G=\264>E*\004\277u\000D\274\013\270g\275\3166\347>0\332\303=\243X.\276\336v\t\277Ou\230>\3124\032\275\035rS\276\215^\215<\2133\306=\327\243\320>\3451\271;\003&\320>ZFj<\313\020g>{\275\233\275\237\345Y\276\330\330E>$\230\312=S\006N\275\241\241?>\217\374\261>\317\276r<\224\366F>rN,\275c(\327>^K ?R\325\004\276\330\365K\276\372\n\362\276\274\263v>8\371\215\275Y\372\240\2765\265,>lC\205>w\326\016>\232\316\216\276\245\240{\276}\224\221=\035w\232\276\r\032\372=\244\210\014\276U\331\027\277k\237N\276\252\017\244=\332\254\372\275T\035r>L\246\252\276\237qa\276|\'F\277aq\270<I\203\333<s\242\255>g\233\033\276\262.^?\307\021+>x\321\027>tF4>\243\006\023\277\211\265x\2760\377\327;\205\0108>4h\210>]\2471>\034\323\343\276\202\306\214=\3333+\276W^\362\274\t\371\260\276\1770\300>9(!>\216@\334>q=\232>\224\023\275\276\325\010\375\274\300!\014?t$\037\277\200\202\013\276\255\372\214>\217p:>\230/\317>\231\017\250\275~\035\230>\351\232\001\277v\376\255\275\313\234\356=O\036\026\276\270\2243=\277en\276\305\035\357\2746Y\343\276y\351\016?\213l\267\276\t\376\027\276j\336\221=y<\255<\221~\033>\246\362v\276\222\2213\277J\014\242?\246\270\352\275\223o\206>\372e\013<\327\027\251>Mgg=\320\321\252;\274\005r\276w\204s>\373y\263>\225}w\276\020\350\014\275]\374\355<U\336\316>\026\373k\276`\315!>\321t\226>B[\026\277S \263<\365\241\013\275\333\334\000\2772\254Z\277v\211\312\276\333\304I\274\372D~>$\271\374=\352\347m\276\327\022\222\276\344\367\206>0\201\033\276Yn\351=\276\372\230\275\n\334:\276m\034\321\276\277\236/\274\377\317\341\275=\270\273\275\307h\215>\354H\232;rm\230\276o\201\244>F%1@s\242]\276\306\334U>\r\340\235\276\273\320\334\275~\213\316<\365G\230\275\341\227z\274\372~\252?^\021|>\365J\371>\234\341\306=\033c\247=Ll\016\277e\302\357\276\266\326\307\276\273\017\340>\227\307\232\274\325!\227\276!\007e>J\322\225=\302\300\023>p\2669>\2073_\276\302\027\346>*r\010\275\263\2308>\342\001\005\276\275\343\204>l{\273=3\026M\276m\032\000\274\347\343Z>\232B\307>\351\236\265=Kv\014\276?\000I\276\263\230x\276%#\327>\270\314i\276\325\320\246=\310\265\001\276\234\031\375<\\\004\206\275\232_\235\276\030#\222\275\351\232)>\267\017\324;\325>\215\276\375\202\255\276\275\373\343\276O\220\230\275\355\266\013>\017\264\302>\212\315\367>\231\201*>\024y\n?\246\362\206\2764h\250\276?\000i\276\366\rL=\326\213\201>\320DX\276\252}\372\275x\013$>YL\354\275[x\036\275\311\223\344\275\216\036\037\276o\237\225\275$\352\252\273\303\360\201>\017b\227>\334ci\276\303\236\306>HP|=\210.\210\276o\273\020>\256\240i\275\256\273\001?\331%\"?\253A\030=\004!y\276Ze&=\030!\374\275\020\006\036>I\205Q\276A\327~=\035\217\021\277\271\250\026\275\310\322g>G\220\252\275d;?>Uj\366\275\302L{>N\013.?\222\313\217\277\301\255\373\275\251\373\200\276M\363\016\276\037\327f\276\231\021\336\274y\001\246>\310&y=j\023g\276\225\3249?\221\t8\275\311\351k\274\262/Y\275\331Z\277>\264\260\'>[B\276>\302\027&>[\231\020\276\252\016\351>=\233\225\276\300\347\007>\323\207.>\315\314L=\013\265F\276Q\024\010>\0011\211\275\247tp\275\262\245\"\273k}\261\276\2338\211\276~\034M\275c(\347=\343\374\235>\217pZ>X\312\222>\211^N?S\313\226\275[B>>\030[ \277(\n\224>\274\005\202\276\336<\325\2757q\362=\334\021n\276\206 \247>4f\222<\252(\236\275o\273\000\277\027\274h>\3706=?!\007\225\276\002H\315\276\035\253\224<?\343\n?\355\r\216>\247\313\342\275G\217\277\276\2446\341\276\345\320\322\276\324\016o\277\032\247!\275\351\361\033\276)y\005\277\0260\001>\352\004\264\276\205\010\270>\315\344\273=X7^<B&Y>\356%\275>^K\350\276\267\013\235>uU \273\234m\256\276\"\211\316>\240\025\250>C9Q\276\245\275\031\277b\025O\276L\375|\276\224\207e\276\nK|>\327\301\001\275\204\022\366\276\255\335\366=\250\030\347>6Yc>\207\371\362\275~\251\007\277\261\212\007?Ou\210>\037\364l\276\202\312x=\211\265\370=7\211\301>qr\277>t)\256>4.\334\276\002\324\324\275\010\254\\>\204\022\346=E\330\200>\373\005\373=\023\271 =\240T;>\245\004\263;\336Y\233>*\035\014>`\3450>|\356\204=\211A\010?\\8P\276\335{8\277\007|^>\200\237\361>\014<\'\277\330Gg\276\2657\030\276u[\202\275\325\312\004\276S\313\026\275Q\245\366\276A\267\027\276j\"\"\274\304\316\244\276\301\342\010?\276\023;?=\017n\276HN\246=\273\235\375<\254\220\202\276x\200\247\274\326n;\276l\t\231>\334\363\374\274z\245L\276\377>c\276\326\220\030>\336va\276\327Q\025=o\236\002\277\273~\301>\322\035D\274l!\210>h$\242=\013\014\271\276\325\312\204\273\033\016\253=!\314m=P\374x>K\037R?\230\372y\276\311\260B\277\254\255\270\276\331\010\264\276\351\267\007\277\303*\336\275oGx\276\217\252\346\275V+3>Qf\023\277x\271H>\245I\031\277`v\207?\354\366\271\275\201\225c?\244\374\324>R\270\336\276\010\346\370>\305=6>\301\277\255\273\235,\265<@\301\245>\205\261\225>D\213\004\277\377\352\221\275\013~\273=\340\020\n?FB;>\350\274\206\276\226>\224>\277\361\025\276\370\215??\370\027\241\275l\315\026\275q\217\345=(,\361=u\310\255>\324\267\234>\365d\276=\377Ad\275\021p(>\224\244\353=l\tY>u<\206>^.\002>\347\303\263=\022\3322\276Y6\316\273\262c\023?V\270e\275]\277\220\276+\373\236>#\3339>\315;.@>{\256=\201\263\224=d\036Y>\304\231\277\276T5!\276\354\027,>\251j\302\275|\362\210?f2\\\275\323\237\335\276\205\266\234>*\214m>AE\025\275\217\214U=}\005I>\2446\201\276\340.\373\274\215\177\237\276\316O\221\275g\017\024\276\273+;\272\3644`\275\225`\341\276>yX=d#\340>_A\212\276\3500\337\275;\337\337>V\237K>\222\226\232>\350\2447\275\027\324\247>\260\217\026\277\3018\270<\233\3117>2\217\234>\036E\347\273\312\032\r\277\366\356\277\276\222\263\260\276\275\377\257\275\273G\226\2758\025\251\276\332\342\232=\265\375+>\343\252R\276?:\325>\247\2633\276J\265\357>\247\263s>I\205\221>k)\200\275\207\371r\276G\254\005>$\321k>p\231\003\277\201[\227\276\217\307\024?wHq\275\017\264\302>\262\021\310\276*T7=\251\301$?\264\002\263>\264Yu>}\350\">\244\031\213>\221\233\001\276tF\204\276\001\241u\274\3063\230>\032\243\305>\335{\210\2760\201\333\275\325\010\375\272\305 P>=\235\313=\273\320\034>\223\030\264>\316\031q>\336\345\242\274 \322/\276=DC\276N_\217\275!\0374>X\347\330\275(\364:=\016,\307<\r\002\206\272\0054q\276\034%\217\275\254\342M>\341(y\276\3226\236\275\204\323\">\3500W\277\006/\212>S\257\333<\244U\255=\207\373\310=\247\221v>\340\2341\277\315;n>7\246\'>\335\315\323=yX\350\275yt\303\275W&|\276\332\307\212<\314\321\203>\302\335\311>\030\262\212\276\036\341\364\275z\302\"\277\355\330H>G\310\240=Q\330\305<73:\275 \265\251=\263{\242\276\360\304l>\315\222 >\235.\013\276\022\245=\274\204\273s>\352\t\233\276\233\346\255\276l[4>\034{v\274Kv\024?\360\247\306\277\037\277\367=\212V.=\363=c\275p\353n>\334\273\306\275Z\330\203\276\375\237\203\276\342u\375>\3230\274>C\252h\275\330Df=+0\344=\226@\n\275\241\370\321\276=dJ\274\243\222\022?\245\020H=$\177\360\275\177M\026\276\220\205h<\034BU>d\351\243\276\376\232\354\275\202s&>\254\220\322>\311\2533\276\017~\342:\r\216\262>\237Y\262>\007\316Y>\264\223A>%;\346\276c\234?>;\302\331\276\311qG>\261\247\035\276F\010/\2766\345*?\372D\236\276I\200\272> A\361\275\203\027\375\275\240\303|\276\300\347\007=\362\227\026=\2343\"\276\374\306W\276G=\224>\216\006\360=\3166\367=\036\376\032:\273a\333\275\307\013\016<6\223o\276\253\321\253=3\371\206>\214\326\021>\026\336\265\276\033\236^\275\364\025\364>\250\251E\276\211{\014\2760\273\'\276\352x\214>)\006H\275\262F\255>\034\010I\276\373t\014\277rPB\277ut\274\275\t8\344\276p\232\276\275\264\037I\276\231\323\345=\230\023t=\274\263V\276\352\347\315\275\273\265\014\275\313M\024\275a\340\001?\375\235\222:\331=\371\275\nh\242\276\022l\034=\351et\276\035 \330\275\324\201\254=\203\242y=\334J\217=\214JJ\276\332r\256>\341b\025?EJ3=\362\315\206>2Z\'>\321?a\276Q\203)>\346\313\013\276\312\372\315\274b\204\200\276x\264\201>\264\023\020:V\202\205>\'\275\357\275M\370\225\276\033GL\276\221\272]\275V\237\233\276m9\027>\003C\346\276&6W\277<\243\215=\032\027n>YLl>\225\324\271>UM\240>,}(>$(\336\276\323\333\237<\356B\363=->\225>s\234[\274\321\"\333\275\276\331&>\256\323\250\276\373\3504\276\325[\223\276\3578E\276y\226\2759w\332\232\275J^\035>\263\014\021\276k\271s\275\001M$\276Q\332;\276\324`\252>\256\360.\276*\251\323\275#-\365>\352\312\007>\262\200\311\275\357\217\027\276\000oa\276N\234|>n\300\267\276/i\254>\320\'\202\276~QB=\000<\202\275\260\254\304\276\343\306\255\274\245\2035>\375\331\017\276e6 \277\tP\023>\\T\313\275\354\372\305>\352\007\225\275\0055\374\2740\022\332\275\030}\205\274\336\002i\276X\342A\276\361\021\021>\371N\214>eP\355\274\034|\241\276;p\316\276\020X-@\025\343\034>\377!\035>\335\266\257\275\363\0372\276\233b\304\273:\2267\275N\357\342\274\\ \211?\273~\241\276\336\216\200\276?t\241\276\031\216g<u<\306\276\240l\n>\030\315\212\275H\026\260>M\363N\276d\354\337:O\005\\=l$\211\275<k\367=oGX>=\230\024=\275\343\324=\234P\010>\201\354\225\276d\257\367=77\306=\013c\013\276>\355\020\276\210\274e\273\235Kq>cF8=\225\221D\273\375hx\275\360\371!\276\033\236\236\276\330\201\203\276\214I\237\275\243u\324=\351(\007\275C\034+>\235K1\2768\204\352=\214\333\210=\327\336H\272C\341\263<\373x\350\274\327\022\022\276)\350v\276\321\313\350=\372\n\322\275\202\253\274<\271\342\342\274\302\331\215\275B\262 \2763\336\326\274\336\216\020\276\347\246M\275\335\227\223=\3024\014>\204\360(>\306\337\266\275v\032\251=\3647\001\276\262\021\230>\26578>A\361\003\276\320\362\034>\204\rO>\3704\'\275\274\221\371=\272,\206\276\223\014\357\2721B\250>k}\301\276\211)1\276\321\262\256\275%u\002\276f\367\004\276\206\001\313=\027\237\002>}\256\226>_\2652>\322\214\205>\356\224\316\276*t>>\355\273\202\276\016\364\020=\357r\301\276b\363\361\275v\251\221=j\373\227\276c\356Z\276\013\265\006\276L\375\\\277\tP\323\275\016.\035\275\001j\n>\246\265)\275E\r&\276\264\260\347\275em\263=\013F\345\275\376\325\203=\224\373]\276\t\337{\275\201|\211=\274Z\356\274K,\337;%\263:\275\322\343w\274\000\251M\276\016\275E\274\204\362\276\275D\250R>\317\2376=\246\270\252\274\2613\305\275\247\222\241=\027-\300<\244\210\214\275M2r=\027\361]>\235c\240\275\323\301Z>K\223\022>\004\312\346\275I._>\251\366\t>gaw\277\365\016\267=\270\257\013?u\345\363\275k\323\330<\256\016\200\274\r\340\335>;\000\202\275\226>4>B`\345\275\274\223O\275\247y\307=\233\346\335=0K\273\274C\215\242\275\335\230>\276\354\276\303\275\240\210\305=)\355->\nh\242\276#\276\323\275V\016\r\276\250\251\005>aT\302\276.s\272\275~\030\361\276\341]\256\2744\327\t>\371\203A>y\351\006\276\"\210\223=-x\321=/\243X=*t\336=\217\241\010<\001X\323;\3020\200=X\346-<w\370\373\276\320&\247\275\267F\204\274Q\276\240<\277\017\307\275f1\221\276\303d\232\276\377\223?<\310\230\033\276<\024%>\226x\200>=\017n\274\256e\222\275\210\022\215=\217\341\261\274a\246\355=\r7 \276\320C\215\275\277}]\276\300\354\236<\376\201\262\275w\204s>\275r\275=\025\032H\275\3230<\276\374\306\027>\236)T>W\t\026>\306\212:>\302i\001\276\001\366Q\276\027\331N>&p+\276\321\346\230\275\004\222\220=\371\024\220\276D5\305\275\013{\232>9EG>j0\275>\353\3426\276\273\270m\276\365\2761=\2554\331>%0\214;\333\371\036>k\017;=\030C\231>\303\363\022\275\036\304\216>\3119\221\275N\321\021>\201\t\254\276\030\007\027\275\252a\237=\010\200\340:\335^\022\2769\356\264\2763\304\261=\351\267\017\276bNP\274\023\322\232=\214\363W>\367\3518>\252\2650\275s\322 \2744\021\346>\225\232\375\275bg*\276f\367d\276\334K\032>\275\306\356\275\301Vi>G\217\037>\236\352\220<K\261\243\274fg\261=\331\353=>\256G\221>\362[t=\345%\277={\206\220\275\n\334\312>*\000\326>\264\3137\274m\305\236>\271T\245<{\351\334;\374p\020\275\321\"\313\276\277e\026?\266\276(\276a\246\235>\010U\232\276;S\210\2766\315\273<}\263-\276\031\034\005>y&\017;\222\226J>\317\367\323\275\274\221\251>$E\224>\323\366O>\030}e>U0*\276&\2476\275O\006\207\276\364p\302=Q\245\246\276\017E\341>\211{\014>\221\n#\276\003`<>\356\226d=\206\346\372\275\246\n\006\276\212\216$>\260q}\275\346y\240\276[\013\263=\036\026*\276\002\363P=\307\016*=~8\310<\221EZ=\031s7\276Q\275\205>\021\031\246>\002\2029>u\372\346;q=\026@\327L\256\276\3551\354\273\255n\265>\217\302\245>\301s\237>/\027\241>*S\254=\356Z\252?\371N\274\276\000\035f\276]\3047>`\352g\276\010w\007\276\312Vr\273+\366\227>\325\347*\2766\253V?Y\206\270>\2073\037\276\307\364D>\362\n\304\2743\304\361=\212\315\307=\232\265T\275\010r\320=\335\226\210=\237v\370=\353\374\333;)\355\215\276\235c@>\274?^\276\265\210\250\275E\022}\276s\272\354>\221\325M\276|D,>Ic\364\275j\246;=\3063\230>\007%l>wJ\207\276dX\345\276\033\236\336>\275\214\002\276\010\224\r\276@Mm>\320\267\205\274\372\013\235=\376G&=\327\212v=\005n\275>A\267W\276\214\020\336\275\257-\027</4w>ff\346\2756Y\003>\231*\330\275\3171\340\275G \356\276>\"\206\276\026\373\013\276\036O\253\275mp\242\274K\352\204>\212sT\2743\376\255\276\304\353\002\277\362\315\206\2763\251\374\273\023\'\367\275CS\226\275\214\276\002\276\226CK\276\000\032\245<\225`\261\276\006\022\314\277\222\\&?a\252\031\275\263\230\250>\'1(>\3274\277\276\303\r\330\276\217\374!>\363T\027?8\370\002>\216;e>c{\255\274x\356\r\277\344I\342\276\301\307`\275\247?\253\276CV\207>5\014_\276/\027\221>@\244\377\277K\260\210\276=\236\226<\205\010\000\277\002\016\241\276%\003\300\274k\016\020>U\244\202\276\023~\211\276E\016\021=H\303\311\275e8^=\3336\314=\034\231\207>\3171\000>E\r\006\276\352\225\362\2758\370\262\276&S%>tF\304>\207\303\222=A\274\006\277\005\305O>\370p\251>(\325\336\276\357\221\255=s\327\262\276A\016\332\276^cW\276\010\224M\276k\324\363>\237\037\226\276io\360\275\373?\347>\'kT>\326p\021=\247\005\257\276\370\245>\276\267E\331>\030C\211\276R\356>=\305=V\276\212\037C>\t\026\007\276s\n\027<!>p\275\310\014T>w\363\024>\303*~>8\365\201\274\356=\254>\261\303\230\273\225\361\237\276\333\026\345=\217\374\001\2766\311\217<.\347r>\341E\177\276+jP\2764\272\003\276\020@\352\276\226\n*\275\323\2444>\2716\224>\243!c<a\377\225=>\256->\234O]=\243\006s\276\320\320\237>\207\335\227\275\3167b\275\353\034\323>\014<\247>\343\214!\275Tn\242\274\2027$=\343\374\235>/\206\222=V+\203\276)\225\260=\031\350\332<\247\003\231=\337\354\244\271{\365q=ff\346\275J\014\002\276\325\221c\275\003\t\n\276\033*\206\276D\372\355=4\272\203\275\312OJ\276r\212\236\276\276\274\300>\'\210\372\275\262c\003>\032\300\033\276\377\317A>#\333\331\276\260\036\367<4\275D<H\250\031=Q\240\317\275\223W\'>S?o>\311\002\206>\350\274\246=o\323\237\276fI\200\276v\210\177=\347\306\364\275\231\201\272>\217\374A\276\333\212\035\276+0\204>\232\266\177\275C\312\237\276\310$C\2769\227\342\275\214%\366\273\333\333m=R\n:\276\262\331\021\275\310\230;\276K< \277\305 p=\317\332\025\277\217pZ>\260=\023>=~\257>\300>\232\276\234\335\032=U\301H>Tn\202=`\005\270=\371\367\031\276\344,\274>\334\325\253=\334\200\017\276w\333E>]\334\346\276\354\375\241\272\327N\264=\370\031\027\276\\\254\250>\246\270J\276\264\312\254=\253!\361\276\265\337\272\275u\260\036\276\210\234\276=;qy=\201\t\034>Y\213\317\275\312\305\230\275\017\270\216\275<\203\206\275\030\262z>\212\000\207=\266-\002\277\\\003\233\276\262L?<9\264\240?7\246\'\275^c\037\277\007\353\377\275\325\004Q\276CV\327\276\307h\235\276fk\025?q\311q>>^\310<_\013z\275\001\336B>\344\275\232>\300\004\356\275#\204G>\255\372\234\276\270\222\275\275\367;T\276\337\303E>S\\u\276Z\362\230\275_\007\316\275\'\332\365\276\013\266\221=\235\021\325\276^\365\240=\303\235\253\275\234\341\306>\264\037\t>\251\373 \276S\\\225>j\301\313>\323\023\326>J{\343>\364\246b?\1770\020>\350\207\241>\027\361=\276\360\334;>k\202\330>\017\360d\275x\264i?y\001\246>\226&%\276\243@\257>j\372\214=X\377\267\2766Xx\275$\356\321>\366((@\244\302x\276/\250??\313\276\013>Y\277\271\275\232\261(>%#\347=\234\242\223>\027\324\267>\240OD\276\251\301\004\277\306\371\313\276\265\340\305>\026\2073\277\334F\263\276\022\277\"\275\022\334\210\275 \005\364;z5\300<\227Vc\276\365\276\361=_F\201>s\235\006\277\203i\230>\307\325\310=\223\254\243\275,\014\261=_)\313>o*\262>X\312\362=~\214\371\275\372\n2\276R\'@>0\022\032\275\217S\264=>\312H=-C<>=C\270<\351+\000\277\235\021%?\276\2441\276Vf\312\274\034Aj\275\274\"\020?\370\374(?\240\303\234\276*RA>\326\305\035?\242(P\276\266\363\315\276X\3478\276\332Sr=\335\265\264>\334\021\236>\356Z\n\277\3166\017\277D\213,>\303\360q\276j\244%>\005\206\254\276\304_\223=\204\r/>2\314\311\275\372\320\005\277\326\255>>;\337\317\275\341(!\277\266\363=>\220\365\324<~t\002?\301\213\376>\333\026\345=D\243\013?\365\276\241>\036N\240=\024\\\354\276\222\350\225>\025\000c>\337lS>\242\264\367=}\226\327\276\225\237\204>\371\241R\275Ae|<\266\276H\277\221\270\007>\361\272\036>a\251n\275g\325\337\277\242EV>D\277v=9\356\344>\221D\237>-\262]\276\213N\026\275\\8\340>\024y\322\275\255\243\212\276\211]\033\275\260 \375\276\327\367\341<\016\276h\277\305 \320>\rT\326\276\274\221\251\276\373t\254>\221\'\271>5\0147\277\377A\244\275g\325\247>\200\232\252\276\033\177b=\332\311\000>\323M\222\276&\2527>\036\033)\277\000\256\264\276\364\211\314>\031XG=\027\237B>\243\006+?\344Ir>\326\305m\2768\370b\276\2201\227\275\356\224\256\276\361h\203\276\213S\255=U\301\350>\251M\354\276\207\026\231\276\215b9>\005\335\036\276[BV\2773\027\230\275\326\342k\277N\013\336\275b\333\"?\370\340\265\274\230\334\210=\310B\364\274}\\\033\277\373u\'<\263{\362=\261\277\014\276\261\341\t\276yu\216<\242\'\305\275z\337\230>\362\322\235>7T\014>7T\254>\235\235l>J)\270>j\244\205>\000\306\303\276(D\260>\002\232 \277H\277\215\276W&<\276\tP\243>(\325\336>*t\276\276\017\013\205\276\023\325\033\276DL\251\275\013\230\360\276m\0006=\263\014\321\276\210c\335\275X9\244>\"\303\212\276N\271\362>$\271\014\277\311<\342\276\t\033\356>y\257\312>\366\264#\276\300!\204>\237Y2\276B\t\323\276\255LP\277\220\332\344\276W&\254>\206\311\244?P\337\002?\0324\024\276\365\271\332>~\214\251>\200\237Y\277\207\212\021\276\240\251\327\274\211\357\204>8\204*\276F\3162?\225\265M\275\371,\017?R\270\026?\002+\017?\313\370\007\277T\306?>}uU=h\\\030>\311\260*>\324H\013\277\035Z\204>@\244G?\303\360\321>\223o6?*\034\241=6\002\221\275\201B\3738B&Y>\351\324\025>\331_6>\236\230\025>\210c\335\276\256J\242\274)?\311\276\334\2741=\030!\314>\265\375+\276\'\371\221\275\344\326d=\317\363\207\275\221\'\331>\323\2444>\262\237\305<&\252\267=\327L~\276\352>\200\274\340\204\302\276\211\014\253\274\026\366\324\276\237Y\302>)\263\261>\n\235\027\277e\374\003?\216@\034?\237;A=%#g\276\202o\232\275\307\272x>\200\237\241>\364\025\204\275\212\037#\276\020n\327:\377\317\241\2760\022z>\256\330\337=\216\001\331\275\215(\205?\266\363\215>L7I?\203\300*\276fN\027\276\273\n\231>o\252$\273\021S:?\227\220??\'\024\222>\3333\253\276/i\014\276bJ\364>\336\2536>\322\214\305>\303G\364>t$\027\277\305\0032\277\030\262Z\276b\363\321>\001j\"\277[\231\360\276\342;q\276\311\345\357\276\335A\314>77F>-\317+\277\3230\004\277F\323y\276c\271e>\347:M\277A\014\364\274\233\033\263\276\270\257C\276\236$\275>\206\003\221>\210\272\017\277J\007k\275a\375\027\277\367\314\022>\261\026\337\275\355\236\034@\243\006\363\276\3500\177>7\340\343>6\222\204=\214\025\025\276B\262\000>\256F\226=\013$\230?\010\0037\277\204\365_>\014Y]<\213\375\305=\301n\330\276I\271\273\275\247\"\005?\374\306\007?\245\240\213>\257Z\031>\014\037\301\276\247\350H\276\271\252l\274\262h\372\275o\273 ?\205|\360>\005Q\007\277\335}N\275\273\325\263>=\'=>\253 \206\275\340J6>\177\220\033<\270X\321\2755^r?\030}e>\003\010\237<\024@1\275\310\0144>\376{p\275\227\231\210\273\"\032\315>% \246=jP\264\275*o\037\277\216\257\335>{\367\307>\rql>\230\300\r\277\377>\013\277;S\270>\232\010{>\337O\025?B>\030\277f\024#\277\301\220\205>\352\262\230>\377\262{\276DL\t?\201>!?\374\376\r= AQ\277\032\212\273=\372\n\302>J\264$\275\236\357\307>\212<\331\276uYL>\"\375\326>\366\264\303<\264\260\207>\307\274\216\275Ou\210>\346Ws>\025\000\003\277\206\306S\2752r\206\276\336YK?\360\205\t=+0\024?F|\'>\021r\276=/j\227\275\r\303\307=Xr\265=\271\302{\276\'\332\205>\353\250\n>\020X\271\276\325&\256>B>h\276uv\262>l\223\n=H\376\340>\001\207\260\276T\214\263>4\0216\275mV\345\277\3475\266>\231\323\345\275\236{\017\276_\320\302=\361h\223\2762r\246>\215b\231\276\215\267\025<\237<,\276\313\326\272>\272I,>6\223\017>\355\201V>\351\222\026<s\276X<\237<t?\375Mh\276\025od\276\204\360\370\276>\226>\275\303\360\241\2760\022Z>\347:\315\275\274\"\210\276\017\227<\276\235c`>\363\313\240=\034z\013=}\005)>B>(>\375\207\244\276\246\362v\276F_!\276L\303\000?\243u\034?\365\234\344\276\205\224?\276\364\032\373>\235\327x\276\341\3623\273\340-X?\243\001\374>D\335\267>\367[{\275.\342\033?\223\251\202\275\t\376\207\276I\364\242\276\244\337\376\275\270\006V\276]\376\263\276\245\332\227>5\357\330\276K<\340\275@MM>\265l\335>{\364\206<0\330\255>\310\352~\277\"\341;=\260=\343>\216u1>\223o\346>\267\356&>AHV>ep\024<\253&\250\276\375M\020?\356\261$?K\205\302\273Q\277\013\275*\346\200=\352\262\330\275\241\276\305=$E\004>\255\372\\=\006fE=\213\303\331\276\272k\201\277\2613\365>\371\017!\277/iL\276\023\312\014\274\250\342F<\251\336\332=\224M\331>\017\326?=\010 \265\276\277\357\337;a\216^\277\266j\327<\006\273\241>9\234\031\276I\200\n?\005\213\203>\215\321\252\276\264\345\014?2\257\303=\364\246\242<b\276\234>e\374\033>\323\027\302\274\335^2\2764\327I\276\006\330\347>\372\270\036\277\344N\211>\303*\356>\023\362\341>\371\367\271\276\347nW\274 ^\367\276\231\017\210<)\256\252>E\022=\276\300!T>\255L\250\276\"\305\240=K< \276\244\302X\277\256bq\274\224M\251>\275\217~\273l\004\032\277\"\304\225;H\376\020\277\206\254\356\275\000\251\335\276\n\235\027>E\234\216\275\004\034\">>\256\315\275jj9\276\254\305\327\276x\200\'\275Q\364@\275N\271\002>\327\206\372>\301\213\036?=\270C\277\235\325\202<=\233\325\275\245\275\001\276\363\2539?\214\3261>\332\003\315>#\333\031\276\236$\035\276S?O\276e\302/>\322\214\205>t`9\275\236{O\276\007\265\037=\234\242\263\276R,\227>\315\345\306\275=ay?jj\311>\253\317E\277\307F`\2760\273\'\276\237<<?\227\250\276\276\306\277\317>\254\255\310\276\035\004]=\340\326\275\275\325\004\361\276\247\"\245\276<\024\225>_2\006:\020\006\256>\006\330?\277\265\026\246=\273&\204\275e\215\032\276\331%J>\202W\013\275\215\266\252=\031\220\025\277m\305\376=9\2349\276+\336\000?\032\027~\277\017E\321>EdX\276\226\225\006>\032\335\001>\035\254\'\277\306\212\232\274s\235\026\277&\337\014>z\031\325\276\017\230\207<a\216\216\276\033\205\204\275\340\333T>\202\220\254>\355\231\345>J`\363\274[\266\226\275\025\254\261=\017\2343@\270#<>\375\331O\276\242\266\215\275\033\236^\276`\314\026\275\212<\211\276\033\200\215=\261P\013?8\205\225\274t)N>\272,F>\257\316\201>\003\262\027\277\0160\263=5^Z\276\000\216=\275\034\360y\276\344I\322\275\033\330\032?\263^\254>$\356\301>\360\026\230>\261\2127=&\252\027>\030\354&\276Mjh=\211\322^\275\302Q\362\275\353\213D\276a\216\276\276=~\337>}\221\320=w\326.>*\306\271\276\265\032\202>\320\263y>+\023\376=\250\306\253\276*\251\243>#2\354=\257\007\263\275\312lP>\032\213\016?6\310\244\276\0216\354>xE\300\276^\242\252\276\210\365\006\275\355,\232\275*:\322\276!l\302\273\017\013u\276\325=\262<\353\342\366=\362\352\214>Wx\027\276\374\373l>QN4<x\264\361=\207m\253>\255\374\262<\211\007t>\200\237\241\276\302\022O>\216\036\'\277YL\004?LT/\276\224M\231=\253&H>\301\250\224\276\374o\305\276\231\360k\276\252\016y=\236^\351\275G8-\275w\025\302\276\223\251\"\277\246\362\266>@\373\021\276\355\201\306\276\264q\244>\020u\257\276\375\331\377>\242\266\215\274\257\353\267\276\261\026\357\276\223\035\033\276\202\220\014\276,}(\276\200H\217\276\342u\315\276GW\251=\3166\227>n\300\017?\346]\225=\267(K\277<\204q<\230L\325>\206\346\232>~93\274\337ls>\222\263\220>\313\3707\276H\341\212>5\230\006>\'\203\363\276\007\221\261;\353\342\206\276\243\036\"\276\340\240=<=\'\035>\332\003\215>K\260x\276\247:\211\273\237\216\247>&\375\275=\364\303H>\344v\036\274\256\360\016\276\022\332\222>\033G\374\276h\350\337>\261\341\251=\036\371\223>\020\233#\274\030\317 >-\t\240\276zlK\274E\201^\276r\372\372<m\255/>\374\375\302\275&\035\305\275\255Q\257>Y4\035\276\r\216r>NE\n?\337\370\212\276C\312\177\277\010\346H\276\237\222\363<\250:\014\277\354\335\237\276\214\020>>E\273\352>\231\273\226>X\216P\275\356\261T\276\362\'\252\275\363v\324\276\225\237\324=\261\371\370\276\024\226\330>B\317\366\276\034E\026=[\224\031\276\030>\002>\200H\177\276\246_\302=xb\026\276#\204g>\231\237\033\274\254V\346=\241\271\016>E\273\352>\263$\000\276\337\370z>\202\305\321>ff\306\276\\8\320\275\207\376\351>\375\301 >z\337X>E\330p>\375\360\030\274\223:1?i\213\213\275l[\264=Y4}>\206U\034\276.\255\306\276\221D\017\276\345\'u\276\322\216\273=\t\247\225>}\010\312\275t\352\002?\002\267\216\275H\341Z>P\374X\276G8\025\277\217\252\246\276\364\340\256\276\341]\216\276Z\201\341\275\201\3545>,}(>\267\227\304>d#@?\374\343\375=\017~b;\274\313\365>\264v[>W\230><\307.\301\276\375M\010>j\026h=\0054\321\275\007?\261\275\355\231\245>_~\307=\263|\235\275\303\rx\276\034BU\276.V\204\276\256\2363>4h(=<\334N=)\3506=\274\005\322=\274\\D\277\0265x\276\247\\\361\276Sw\345<\243@\357\276Y\027w\276\024\350\223\276\261\371x\275]\376\223>\300\317@?.\220\240\274r3<>\343\251\007=\rq\234\276oF\315\2747q\362\275\323\301\272\276\270\006\366=+\211\354<\240\032\357=W\004?>du+>d]<>\246U|\272\322\000^>\352\225J\277\014\313\277=\334\223r\271)\256\352\275\263\3554\274\346\221\237>2\"\221\275\254\220\n?\253\225\371>\343\0314\276\330.\355<v\032)\276\221\3623\276\030\t\335>C\035\026=\007\360v\276\'\275\357<\276\331\206>I\272F>[\322Q=\367\257\014>\020;S\276K\253!>-x1\276\t6\256\274\234l\203=\247\313\342=>\256\r>\350\237@\276\362\007\033\277\342u]\276\006L\220>\363T\007\274\250o\211>x\324\270=}\"\257>\376G&<\265\336o=\372\320\005>\342\352\240=>\226\256\276\017\227\234\276\034\266\r>1a\224=\244\341T=\305\256m<=\017\356\275~q)<\023\'\027\276\345a!>\271\307\022\276\0055\274=U\030{\276\313\017\334\274\276\237\312?\257\351\301<!Y\020?\367\255V<\201[\267\276ni\225>\250\252\260=_F\261\274-C\024@\365\362\233\275\021\344\010\277\220\332d\277\251\274\035\276JF.\276\\Y\242<\'\245\340\275\202\305a>\261\373\256\275\253\333\2609\\\033*>\325\222\216\2748Is<\254\377\023\277~5G>\236\246\205\273\002\324\304\276\375\275\024=\021\0316\276\226C\013>\326\377Y>\002\232\250>\356Z\202\276;\374\225>\335\014\367\275\316\374j\275\317N\206\276\030\354\346>\307F >y]\377\275\372a\304>+M\n\276\250n.\275x(\"\277\262\361 \275\331\224\233>\333n\202=\030[\210\276\234\335\332\274\264\345\014\277W\262#\277\002\361\372\275\025\214*>mV\255\2760\332\243=\334c\351>h\226\304>\263\265\276>\263)\007\277To\275>$\233\253\274\177\366\343>.\345\234\275m\205\372\273u\216Q?\340\234\241\276\030C\t?\014v\203>\177\363\207\273j\023\'>\305\000\t=\223\343\336>\351\324\325\275i\035U>\236\357\267\276\353\213$>(\234\335\274\231e\017\275\272,\266\276fI\000?\003x#?\360PT\276/\206\362<\037\205\273>\303d\n>\274\263\366\275[\010\022>P\337R\276\242\227\021\275\245N >\361+\326\274]\3047\276D\300\261\276\232C\022=\372\014\250\273a\246\335>\273\355\202>.\220\240\276:X?\2762 \233>\35442\276\237\037\206\275F\010\317=\324\361\310\2765\007\030?@\2434=\023\n\221>[\316%\275\247?{>\310^\217>\313\325\257=6\310\304>40\362\274\020z6>C\0031;3\334\320\276\247wq<\326s\322\275^\205\324=D\2502\276\215\264\364>\311\223d\276(I\227>\317k\004\277\273D\365<4h\010\276K\005\025=\213\340\377>bf\037\275\302\022\217\276\247\221\326=(\232\207=\013\320\266=\344\024=>\205%\276>\231\323\345\276\\\3464>\322\000\016\277V+\023>\323\244t\276bJ\204>)\256\n\276&\215\241\276\271\303\206\275\035Z\224\276q\033\255\276>?\354\276\317\364\222=^\327\357\275T\320\243;D\245\021\275K\254\214\274\374\251\021>#\203\\=<2\026\2751|D\277\261\341)>\276\330\273=\"\032}>\230\023\264<\344,\214>\026\301\257\276\335b\331;jMs\274\220k\203>\354\335?>\266\363]\276\352[\306>,DG=\264Y\225\276\355\365n>w\326\006?\356\261\364=y\351\346=\345\265\222=\311q\007\276\220\203\262\276GZ\252\276\343\376#\275\214\370\316\275.t\245<.\305\035?\340\333\014\277vlD>\346\256e>/\300^>\267\265\245\2755)E>PS\253\276\031\034%?}$\305=\345D\313>\360\205I>\372\n\262\276\374\000\204=g\'c\276\352\t\023?\367\344a>_\227a\275p\261\">m\305>\276\212\260\361>\016\370\374::#J\276\355*d=J\322\345\276\314}\362<9\013\233>\362\262\246=h\\X>\006\201=\277\273\362\271>\256\323\230\276\320~\224\276^\362\177=\266gV\276 c.>U\205\206<A\234\007=\t\376\207\276\266\020D>\344Ir>\331\353\035=n\372\203\276h\\(?Hk\214\274_)\233>\212\036x\275\246a8>;p\036\277f1\221=\304_\243>)<\310=\024?\266>\013\265\306\276(\324\023\275\202\305\301>\340\276\236\276\035\254\277\276 $K>w\025\222\276W\t\026>\364\211\\>\242\264\227\276Gr\271\276y\316\266\275\n\205\350>z\031\345>\225H\322>\003\tj\276r3\334\275\227\2138\276\007_\270>\037K\217\276W\225}\276\265\303\037>\3225\003\277\310]\004=\007\263I=\301n\330>\275\251\010?^\3645\276\262\325\305=\272k\t>\244S7>`W\223\274\326S+\274_\230L\275\307F\340=\224\0235?:\271\025<\210\364\333==\013\202=t\357A>%\351\032\276\272\240\236\276\207mK>C\004\334\275\220\300\237\274\230\332\262\275\353\377\\\275\030$\235=\303\2366\277\357rq\276\017G\027=e\001\323\275\006\235\220\274\201\004\005=\276\021]\275\217SL\277\241\276%>s.\325>l\226\313\275M\277\304=\323M\002\276D\206\025\276\356z\311=FB\273>\301\220\325\275B\226\205\275\233\311\247>0\273\007@\241\241\037\277\027\232\313>\355G\n\276<\024e>E\362\225=;\252\032\276\320~\004\276\230\335\323?\205%^\276\277}\335\276\277Cq>\221\233a\276\230n\322=x\264Q>/n\223>\312\032\365=\277\236o\275\3230\034\276\364\246\"=5\265\254\276$\271\214>\214\371\024\274\332\003\215>\223\0005\276Yir>e6\010>`<\303\276\005\027\353\275D\335g\276\332Yt\274\210\205:\276\034\316\374<\352\347\r\276\365h\312=w\020\033>\305\347N\275r\341\240>`\223\205\276\205\354<\275\027\016\004\276d;_>\006\273\301\276\375\237#\276\004Z:\275h\256\263\276F_!>\034\360\271\276\337\340\313\276\273\270M>\264\343F\275\323\336\340>3\371\346<\302\335\331=\221~\313>?o\352=\360\246\333<N\321\301\276\021\001G>\215\264\014\277\257\353w\276\224\331\260\276\204\273S>\2760\331=\'\203\243\276\352\316S\275\336T\004\276\2201\207\2764\242\204\276\364\211\254>\035\346\373>\206 \007\276p\261b\2751\266\240>\253\0043\277\231\323E>\307-f=\213\032|\277\346y\320>\367X:\275\314b\362\276[\323\374\276\304\316\324=\232B\007\277\365\276\021>\260r(>\373\226\271\276S\263\227>Q\210\260>\201\317\017\276\233rE>\023\201j\274\261\341\t>:X\237\276\177\244\210>\024\263\276=\346\256\235\277\000\343\251\276T\0017=\325\\\356\274S\226\241\2769\177#\277 F\330\276\320\231t=!v&>I\364\022\276\232\356\365<\036\026\352\275\030!\354>\227\342*>\230\027\010?\200}\024>\2304&\276y\001\266>c]\001<\376H\341>\241\204Y>\311\037,>\266\3704\276\2714\276=y#\363\276P\302\274>\364\013\300\273$\321k\276v\337\261\275H\301\023\275\010\254\314\276V\232\224\275l\354\022\2760\r\243>\321\350.>\337\340k>\212\216$\276\n\272\215>\332\341\237\276\037h\005\276\310\315\360\275\233\376\354\275\2608\354\276\354l\010=t\230\007\277\212\315G>\216X+>\235hW\276\266\271\241\276G\254\365\276\016\236\t\274\251\373 \276\223\030D\275\010 \025\276\026\371\265\275\216\036?\274EG\222>\013$h>7T\354\276\033\r\020\277\235\273\275\275D\300\001>\255/J\277\331\261\321>6\002\361\275\263\014\241>\207\337\315<\244\031\313\276\361.\227\276\016\370\214\276\250\214\357>0\364\250\275$(\316\276\020z\026>\021\215\356=\325&\276>\3601\330\274\260\305n=uv\222\276\320(\275\275\025Wu>N\234\\\276\265\246\331>E*l\276P\032\252=\216\351i\276K\004\312\275u +\275\265l\255>?5\036>\243\220\304\275\266\363\375\275P\344I>\234\300\224\275\266\241\002>\333o-=@\336\373\276\320\263\331\275RD\346>V-\211\275\273\233\227\276l\317,\276\203L\202>\335\357\260\2765\007h>-!\277\276\300\004\016>\201>Q>\342X\027\276\231\236\240>\200\016\023>\210\235\211>*\221\004>b\363\201\276v\305\014=\376}\206\275\027\202\334=\277~\310\2756Y\263\276\333\031&\274\256\233\322\274\270;K\276\301R\235=\307\234\307=)\256j>P\2157>\326t==\333\242L\276\3377\376\275_F\241\276\224\301\261\276\341}\025\275\2446\021>\233\310\314\274\264\036\236\275\304w\"\2769\321n>\377\221\311=\214\243\262\275\326\343\236\275!Y\240\276\005\335\376>O#\275\276\250\303\252\275\252\267\206\276\227\230\035<z\252\003\276\205\261\205\274ep\024\276\006\236\033>\222!G\274\025\035\271>\353s5\276\023\362\001>33\363\275\201\225\003>\336\037\337>R\327Z\274b\243\254=2sA=\005\027\353\275Al\037\273\350J\204<%#w?\340G5\275\331\316\367\275To\315\275rj):\262Gh=\005\300x\276\217\337\033\276\371,O>t\2655\276A\235\362<\t\212\017?\363\035|\275\022\204\253=\016\204d>\336\260\235\276B&\031\276:\313,\275\002\237\037\276\356%\335\276\360\334;>\003[\r\277\232\353\344\276\001OZ=\361*+\275cz\">&4\251\275\222?\250\276\354\022\025\276\035w\252\276Y\027\027>\315uz>\221\355\334\276\334\270\305\274\350\366\022>b\363q>\301\250\304\2763\375\222<\274\350+\276\372\200@=\220\210\t>\344\203\"@\212\002}\276\007\360\006?G8\355\275\2608\354>*\214\025?\037\242\341>@M\r\276\035Z\334?\373\226\211\276v\375B>\365-\203>\370\301\371<\024\313\215\276,\361\200>v\246\260>\n\364\271>\213\032\314\2747\032\200\276\324\361\030>\312\375n\276o\022C>k\323X;\036\306$<`\311\225=\366bH\276H\371\t>\n\277\224\276\006/\332\276\223\306\350\275\302\372\037\276\'f\355\276\030xN\276D\335\207>-\t\340>p\224<\275\037\242q>\032\243\365=\254\312\376=\274\005\022\276\n\327\003>\007\360\226>\226\262\214\275\336<5\276?\377\275=\025R\376=\347\030\320\275nQ\006\276\346W\363=3\212e=q\350m\275\267\321\240=\226\t\377=\233\346]>\020u\237\275\331Z\217\276\315\257f\274#\241m\276Q\025\323\274\321\"[\276@\366z=\r4\277\275\313\204\237>\3230\254>\244\302\350\276\361K\375\275\265\376\226;\333\367\310\275R\321X\275^.\302>\023\'\017?o\330\206>\357g\302\273\245\240[>\010\217\346\276\301\2205\276\006\r\375=\n\272\235\276GZ\232>W\354\377>:<\004\275\246\'\254\276\244\2148=\\\347\237\275.\347\242>\216;\205\276Xd\005<\3429\233\275L\306q=\371,\317=\336\310<\275{\024\256>\007_\310>\247tP\276\236\357\247<\215(\215\275\201\004\001\300\254\2202=3\032\371<\257|V\276\344N\t\276B`\345\275\351\362f\275\332\033\374=\037.\031\276@\207\371=\327\276@=(z\005;\324\014)\274\025\214\n?\273\325\363=\310\230{>\340/\246\275\034\010\211\276\361\324#=8\204\n\276\320\320\277=(,\221\275\005\300X\276\000\305\210=\221\017\332\2763\212=?\2656\215;\362\355\335<MMB\275f\240\202\276\3642\272>\203\027\255>\345\'5>\342\314O>2wM>\030\225\304>\271\215\006\276;\252\332\275{fi\276\210\236\224=\200\270\253<\300[@\276M\370\365\276Ux\206\273S\221\n\276\273\320<>\325\222\216=\222\217\002\274\223\251\342\276\t\341\201\276\303d\312>(\n\024\2762\003\225\276]N\251\275\027\357G<\304k(;k\362\024=\240O\344\275\002\016I\277\005\3724\277\336\014\355\273\365\240\200=\320\320?\275wH\261=g\357L\275\375\366\365=\234\005\020\2744\205n\276\034\231\367\276\010\313X=\032\335\361>5z\225=s\366\256\275\315\257\346\275\303*\336\275w\333%>*:\202>\202\220\254\276$b\212>\375\274)\276$E\004>\177M\326\275$Ed\275\225\202\276>\030>\222>\303\201P\276\3578\005\276]\304W\276\302\335\031>\226>T>\363\350\006=L8t\275s\021?>\300\"\237=\241\326\244>\276\336=\276\334\332\002\275\304Z|\276UM\320=\253[\375\275\302\206\207\276\245kF>\206=\355=\006d/\274\356B\323>]\277 >b\241\226>`<\303>(\'\332;s\235f>\311\310y>\217\374\301<\000\256d=\"Q\210\275\022\275,>\210F\247>\236\357\207=%\223\263\275\214\333\250\276\230i;\276\227\220/\276+\336\310\276\216\003o=\006\365\215>y\036<\276J\357\033\276U\336\216\275)\350\026\276\360\026\270\276\3711\346=BC\177\276M/q\2759b\275\276\317,)\276\276\331f>#\025\326\276\275r\275=\262\364\241>\311\312\217\275A+0>\032\250,\276\331=\001?\252}z>8\333\234\276\272\203\210\276\'\210\372>\013\356\247\275M2R\276\363\252\216\275\241-\007\276\321\313(?d\257W>A\016\252\276\263]a=\304\010a\276d\2577\276o\323\337>(\233R\27633\263>n\374\251\275\347\377\265=\016K\203\274pw\326=#\276c?->\305\276}\313\\>xze\276\224\023\215>\306\246\025\275\201\317\357\276\024\347\310=TR\207\275\235\271\207<\223:\221>\005\300 ?\007\261s=\n\327\003\2762\346n>\257|\346\2766\003\034\275P\215\327=\355\r~\276\037\272\200\2767\341^\275$\264\265>\014 \234=^\205\024\276\344\203>>\302\206\347\275\225c\222=YPX\275\254\035\305\2752r\326\276\305=V>n\243\241\276\225cr\275g,\332=/Q]\276\027~\260\275\006$\253;C\312\237\276\277H(>\204~\206\275_\322x\276\302\2063@\231\177t=\'\210:>.\310\226=\201\363\030<[x\276\275\324\202\327\275\254<\201\274\373:\270?\300\t\245\276YQ\203>(D\240\276\032\335\241\276\371IU\276c\305:;\242l\000\273.\217\225=\240l\212\276B\317&\276\252\327\255\2746\315[\276c\356\312\276\231d\244\276d\036\211>\237\345Y>\201\t\034\276L\337\353\274\214-\004>\250\030\007>\244\3739\275\264q\004\276Z\177\253\275\210c\235>\302\206\'>S\256\360=h\316\272\275\354\331\223=\344\240\004\276\347\251\006\277\\\003\033\276\344\240\004>\033h\276\274\235\200\346\275c\016\242\275\264\246\036\274\371N\254>Y\206x>\273\016\325<\246\233D\276,\234$\274qU\031\275o\022#\276\262\317\010<n\205p=\220\367\312>\004\002\235<A\232q>W\354\217\276*8<\274\347\215\223\275BA)=\301r\204<;\307\000=n\213\242>]\212\233\276%\257\216=0\330-\276\203\243\204>:\346\234\275\204\236\r\275\265l\215>D\206\025\276\021\337)>\304ZD\277wi\303<E\360\237=Z\330\323\276\"\336\232=\325\347\232\276\222\\\356>^hN\276\006\366\230<\037\005|\272Tt\244<\321ww=\026\025\261\275K\3143\275?\221\007>\200`N\276>\"\246=+\0305>\311\216\315\2758\203?=\304\353\212\276@\301\005\276e\3375>\326Vl\277\210\205\332\275&4\356;\367\3518\276\313\370W>\242\177b\276\305 p\276\345\362\257>\027\323\214\275O\037\241=\307\204\230\274\3601X\275\224\242U=>\"\246\276\033+\261<#\204\'\276\033\272\231=\305p5=&\305G<\356B\023>/\213)>\353\220;>\1770\320\276\037\235\212\276l#\3409\212\216\004>w\306\255\273P\001\200\276\"\253;>{\203O>cBL\274\251\372\225<\327\335\314\276>\005\000>a\336c;Y\206\210\277\202\220\254>\230\302\203=:\274\326\272\336v\221>&\337\374\276\210K\016>\327L\036\276>\355\200>#\333Y\276!>0\274\236`\377<C9\021\276\302\2752=\360\247\006\276\016\204\224\276gD\211\276O>\275\275\310\357-\276\006\234e\275\224\366f>\322:j\276\376` \276\214\370\016\275*\221\004=q\254\213\276\316\031q>\331\315\214\275\316\2458>\313\204_>D\0274>\330\330%>\340\241\330>\352\354\004\276\353\220\333\275)\\\017>\002\324t>\306\334\225=\323\301:\276\356\353\000>\021\374\357\275\303\365\350=Hw\306\273\342;Q\276 {\315\276\227T\355<\325x\231\276\326\213\201>\310$C>\350M\245>\205\260\032\275Yi\242>\255\206\324\276gce=\\Zm>\327L\276>W`\310\275\327\335\374=\352\262\330=s\235\006>6\315\233>\213\377;\275\246|\210=X\312\022>\'\332\265>q\213\036;\215b9\276#\276\243>\257\316\021>\225\234\223=\221\363~=\033\270\003\275\210\235\351\275M2\302\276\225FL\275\232|\303>\240\336\014\275\007~\264=\374\214\253\276\313\016\261\275\266\201\273\274QM\t=\324_/\273\305\376r\275\3535\275\274q\3142\274\347\304\036\275U\3317>\016\025\203\276\234\334O\276\020]P\275\372\014(=\246\362\306>\315\222 >\213T\330=\247\221v\276V\325\313<\327L&\277\333\304\331\2766\006\035=\374\336F>\313\366!\275\356\3200<\177\331=>\207\212Q>\200H_\276\210\3275\276<\024e\276\214\240\221\275\311qG>\013\322L\276\357U\253\276sh\321\275\010\003O\275\364\336\230=\336\037\357=\327\206\252>b\204P\276Ih\013\276\326\252]=\220\275\316>\351\324\025>\317fu\276\2446q>\221,@>\343\307\310>!\345\227>\301\213\256>\037\364,?\346 (\275\217\252\306>0L\006\276\372\320e\276\307\327^\276\327\243\020\276\220I\006>\365\204\305\275\000\035\246>2\223\250<\"\303\272>m\305\376>\330G\347=\2652\301\275\344I\322\275|e\036=\274\312Z\275V}n\275*\027\317\273\305Ue>Q1N>\021\337\211\276\322\250\300=\364\340N\276\273\320\234\276\337\025a>\256\273Y>\240\032/\276\325\347\332\276\206p\314<\305\003\312<\247<\232=^c\027\276\r\253\030\276\337\200\340\273\210h\224>\324e\321\276)\"\003>\363Y\036>{\356\251;\322\000F@\246^\267\274\250oY\276[|j\2767qr=\\\003;>.V\024\276\031\342\330\275\262\327c?\331BP\276\2652\301>\'MC\275s\327\002\277\177M\366\276\30188\275\032QZ\276n\372\203>/\213)\276\273\320\034>\273\'\317=\234m\216\276\2137\322\276\215\013\207<\256\274d=\346\256\345=\257\261\013>C\377d>m\342\224>\013]\211<Cs=>n\027Z\276\202\255\322=\236\\S=\377>\303>\202\377\235>^.\222\276\201\225\303=\225I\255=\377\t\256\2766\352A\276\241\020A>\274\313\245\275\tm9>\'JB=q\033\r\276S?\017> F(>\002\232(>\267\t\367<\243\001\004?\033/=\276?\306\254\276\315\257f\276\252`\204>!<Z\275\222<\327<\010\217\226>!\007\345=z\252\203\276\375M\010>\030$=\275F\r\001<\254\342\315\2762u\327<h\313\231\276\357<\221\275\3475V>E\r\246>S\354\350\274=~\237>\251\301\364=b-\236=\365\365\234\275\237\3152\277\017\264B\276\327\243p\276u\310\315\276\310\265!\277\236$]\275\265\374\300\274Ae\\\276\303d*\276\335\230~>\251h,<\004\002\235<\323\336`\276\177\336\324\275\245\367\315=d@\366\275q\217e\276\351G\203\275\305\217Q\276\365*\262\274W!\265\276al\201\276\301\305j>\201\004\225\277l\262\006\276\035\260k=\333\371~=-`:?\322\343\367=\270;\353\274\236{\017>Ed\350\276hy\036\276\237\223\236\275F\225\301\275\230\276\027=Yi\002\277\217\3442\276\362\260\220\276\034y \275\257$9=\206\201\035<I\327\334>7\246\267>@\244\257>\004\002]=\377\t\006\277g\362M>pBa\276\033\273\324\276\236\014\016>dX%>\230i;\276!\257\007\275\233\003\204\276`\253\304\276;\302\311\276\252\365\331;\331_v\277.\034\000?\301n\210>\354i\'>\371I5>\232\010\023\277pBA?J@L=\274\263\206>\007\010\006\276I\272\346\275\231*X>\221a\245>od\216>\205\231\226\275\317\204\206\275\2716\224\276\273c\261\275d\260\302\275\217\337\353\276S\006\216=\023a\303\276\215\356\300>E\324\204\275S\"\231>W>\353\276\211\357\304>\267\227\364\275\335^2>\303\365\350=\241\326t>\014Y]<\363\223\212>\367\307[>\236\352\020>\330\235.=W\004\037>\014<\027>\377\317\221\276\325&\276>\355\r\006?Ih\253>qZ\020\276\300>\372\276\325x)\276\342\351\025>\221,`\276\305\311}\275]\376#>F\205 <\374]\216\273\203\276\264=\344w\344\273\321\313(=1\010\214>*\253\251=\252*4=\222y\324>\024Z\026=\367\351X>.\305\325\275l\004\002>\261\336\210=!\345\347=!\001\203=\0221E>\216#\326=\306\212Z=\017\321\010\276|\356\204\275\004\377[\276\207\304\255\276\2343\342\275a\246\315\276\026\244\331=\200d:=^\242\312>{\240\325=\234\341\346\276/\243x\276\201\314N\275\034\225[=\374o%>\310\265\341\275\334\203\220\275\224\336\027>\330\365\213\276f\367\004>\025\0351\277r\371\017>\226\347\321\276\242\264\367\275h\005\306>\034\261\026>\340JV>=~O\276^\327\017\276t\230\377\276KZq<3\033\004>\271\331D\273]3\211\276\233\033S>Y\244\311=5\013t\275\352\262X\276\261PK\276t\265\225\276\370\373\305\274\205\261E>GZ\352\275\231f\232\275\3647\341=\330Q\213;K\002\324=\366b(\276\315\"\264=\363\253\231> `m\275^\242\232>\322\343\307>+\331\261>d\036\231>\316S\315>\366@\353=6\002\221\2763\243\237<5^:\276Q1\216>\037h\325>{k\240>x\013\244\275\226\262\254\276C\034+\276q\033\315\275\227\213\030\276*R\261\276\202\305A>\373\256H=)\355m>LT\257>\276M\177>\246\230\303=\274\263\246\276\272,\346=j\373\027\276\264\252\245=\034\010\311\2760\360|>\303\266\205=yX\010\276\222\"2>\224\025\003\275c\264.\276<\241\227=g\362\025?\335\323\265=rP\362\276\376\177\274\275\016\202\216\275\375\366\325>#\332\016=\367u@\276\301\305\n\276\274y\n>C91\276v7\317\275\325<K:Q\277\313=\323\336H@\315\021h\273a\246m>\212\005>\275\031\306\035\275\00541\276\263\315M\276r\334)\276\310\352&?\215\234e\276\336\310|\275M\370\205>\263\265\236\2754h\310\276<\245C>\262\205\220\276_\\*\275\031V\361\275\314\231-\275\257|6\276>\256\r\276\220.6\275\010\254\034\276\322R\231> \234*\273\275\214\342=shQ=c\362\306\2752 ;>^\242\372=\375\330\204\275n\241\253=(,\361\275*\004M\273QK3\275\242\013\272\2764\242\244>\324`\002\2770d\365\275\276\371\255\2757O\225\276|\207\221;\240\025X\276\357VV=\361fM\275\315\344[\276Z*o\2768k\360<\0363\340\276\217p\332\275s\235\006\276\025\250\305<\323\366\257\276\263\357\n>\005\335~>\216\222\027\275\t8\004>\206 G>\t\376\207>\321t6>\360\026H>\031\004V>\254\037\033\275\030[h>U\301h\275\007\316\351>\204\236\r\276:\257Q>\360m\232\276\325\354\001\276*\251S>\220im=h\226\264>~W\224\276\272-\221\2758\241\320\275G\254\005\276\251\244\316>P\031\337\276\3127\033>;6:?N\t\010<_B\005=\365-3=\347\376\312\275\023\232d\275c\356\032\276\355\362m=\374\035\252\276\236AC>\331\353\235>\017(\333=D\213\354=l\004\342=Dn\206\276m\306i\275~5W\277\251\366I>:\007\217=S?o>\250\214\217\276U\246\030= A\321\276dX\305>\262\272\025>3\376\035>{\275\233\276\033\233\035\274\262F\235>\321\312}\2756\260\245>\315\344\033>ep\324=~\340\312\275\240O\244>EG\362\275\360\333\020=\314@\345\275\207nv\274UO&=\320\355\005\27673\237:\247\347\275\275\320`\263\275\313,B=r\376F>\373\313n\274D\243\333>\320\355\325>eVo=\305\310\222=4\200\277\277\036\304\016\276\264\037\351=}\263\235\276d\314=>\027a\n=\232%\201\276\211y\266=\203\212\212\275\215\177?>\372\320E\276O\007\262<E\273*>\216;e=#\241\215\276\324C\264\276{1\024>]\026\323\275i\035\205><\240\314>n\300\347\276]\304w\275\2304&\276W\004\177\276\023\270\245\276\000W2\276\006d\217\276d]\214>\033\022\267>\201vG\275\344\024}>\023\362A\276C\312\277\276\353n>\276\332\033\254\276c\264\016>\342\"\267\275\357\2177\276)\257\025\275X\344\227\275\252,\312\275\235Fz\276\374\035\212\274\256\266\"\276\300\262\322=\267\2325\275\242\321\335\275@\023!=K\2608>5\230f\276Z\273->W[q>\3750\002\2755Fk>-!_>S\221*?\026\301\277\275\\U\366=\n\021\360\275\310\352\306>\260\306\331\274\271\245\025>\3642J\276j\001\020\274\021S\342>\342\222C>b\330\301\275$\326\"\276\325!7>\203n\277>\216\257\275>w\275\264\275\242(\320=\031\350Z=\'\204\216=\372\010\374\274\013^\364=F\224\266\275\322\306\221\276\275o\234>\325w\276=\330\266H\276\221\325\375\276\313\277V=.\255\006\276\213\246\263<\336va\276\326V\214>\345\233\355=\236\014N>R\270\216>P6\345=\023\272\213=\373\226\031>\341\013\203\276\346\\\232\276H\300\215\273\215\264\324=H\026\240\276\023\270\225\276\3166w>\354\372e\276\367u`\274\203l\031=\307\3263=\211{\274\276\031\3052>~\214Y>&\337l\275\013\014\031>7l\273\276\362\265\'\276\024\335D\273y]\377\275(a\346>\371\275\215>\301\220\025>k\202\350\275\270\352:=9\326\265>\030!\374>L\246\n>\215\360\366<\373<\306=\0162\311>O\260\377<\210K\016\276\226\227<=\272\332\n>\177\244\010\276\246\325X?\267\230\037\275w\363\024\276\023H\251=d\345\267=`Y\271>M\025l\276l\317\014>.\311\301=>?,>S\\\245>\207NO<\356\224\016>\367\257\254\276\316\215\351=wJ\227\276\247\\\201>K\257\r=y]_>-\350\275<\005Q\367\275\366z7>\303)\263=P\031\377\275s\017\311\275\251jb\276\002\274\005\276\373\226\211>D2\204=\022K\312\274=a\211>\237\315\n>$\227\377\275m\255O>j\207\257>\223\214\234>\'\245\360>\020z\026\276\323$B\273\217\307<?\006d\257\276\233\311\017?C\310\371<\010\254\034>9\234\311>_)\203\277\262F\215>}\005\001\277$\227\277>\317IO\277D\213l\276\360\371\341\275\037\3644?!\313\202<-&\366\275s\205\367\274\034\261\326=\002I\030\275\213\341\352\274%\256c=\263)\027\276\361\021\261>fI\000>#\2052=\357r\341>\317,i>\\\036\253=x(j>\036\212\302=[\353K\276y\001\226>\213\340_\276\262\021\010>\342\001\345\276\254\034Z\276\024\355\n\276\221~[\276]\334\006\276\205\231\026?\346\005\250\276\346\005\330=?W\033\277u\315D\2760\022\332>\377!=\277u\223\230\276{\240\305>\350\331$\277`\223\205>a\303\323<0/@>\336<\025\276\327\243\240\2768\025\271\276\001\301$?\312\025\236\276!\006z=@\337\266=\332t\004\275\014v\203>\371\203\001=\260=[\277(,\361=\263\315\335>EGR\276\016\024\270\275\031\305\022\277\000r\242\275\342\222c>\354\0225\276\201!+\276\2760\021\277\364\027\372<%]3>\312\375\316=\370pY\277z\307\241\277\2652!\276\021p\010\277\001\246\214\275[D\264\275\307h=>\363 \235\275\321\350F?\240\303\\\276\231*x\276dX\265\276\030!\004?\035\005\210\273w\204;\277$\324\014=z6\253\276\343\252\262\276E*L\276\326\250\037\277ff\246>\227\343\025\275\310^/\276x\227k>\361h\363\276\360\030\236=Qf+?\356|G?B`\305\275\3745\231\276\317N\226\276\\\033r\277Zd\353>*\306\211>.\342{\276u<\346=N\227E;\267\354P=\262K\244>\2721\255>\330\236i?Q\330\205\275\345\'\205>\346\335\242\273\333\242\004\277F\266\023\276\022\367\370\276-C\024?e\031\002\276.9\016\2779bm>\"\340\020>\316p\263\2769(\301\276\336q\n\276j\3660\277\017\271\021\277\2338\311>\331\010\324\276\314\354\263=a7,>\215]B?X\305\273\276\202\250\003\277\032\215\327;\317\275\307>{fi>Z\330\323>T\035:?\222\221\023\276\017\230\307=\221a\025\276\220\240\370\274\372a\224\276\246~^\275\025\375\301\275\334.\224>)?\001?|\233\236\276_A\212>yXh\276\376&\024\276\355d0\277\340g<>\262\364!\276Z\202\214\274\021\036\005?5^\032>\276\026t\274\002\232H>\212\036x\274\014\352;>\004\347\374\276\236\'^=H\244m\275\307\272\310>\217\375l=\220\367\n\276\251\023\200\277\351};?\3166\027\277\207\211\306=\332W\236\274\210\272\317\275\357 f?\271\210\037\277\0010\336>B\225\332>~\251\007?1\263O\275\027\202\254\2767\375Y>\343S\260>j\331R?\200\361\004\277\307K\307\276lx\202\277H\334#>\246\355\317\276\021\337\311\276\002,\262=\334.\244\276\227\305\004>\007\360\246\276\242\321\255>\340\020\n\277\345\270\363\276#\333\001\277\3122D\277\237[\350<\013|\005\275\322\214e>\376&\364\276u\315\204\276\316\337D\276\242\177\">\374\211J=\262F\375\275\316\215\251>\205\224\177\276\207\376\031\277\\\036k\275\220N\375\276\010J\033\274D\372]?g\233\333\275\334/\237=\241-\367\276\307\2728\276\r\340\215\277\246\233d\277\376\233W\275\263~\263=\215\321:\277\273D\365\275\023\270\205\276\031s\227\276\314]+\276t\230\337\276_\232\242<RD\206>O\351\000>~\251\037>\221\322\214=\001\023\250\276\355G\332\276\334\364\227\276t\322\373=\021W\216=[_d\276\t3\215\276\301\034-?\235\204\222=\360\277\025\276\003\t\n>i\035\265\275\350\336\013\277\227\213\030>r\304:>\273\362\031=\025R\316\276N\271\002?O\036V\276\324C\304>\017E\031\277V\361\366\276\'k$\277\216\222\307\276\027\330#=\317\275\007>\255\300\010\277\326\342S\277\275\000\003?j\274\224>\375\331\317=\324\202/\277\275\306\316>\364\025d>\013\357\022\277*\000\366\276\373\226\021?\027\016$\276\024\\\254\276\3063 \277iW\301>\032\250l>\375\205^=\037\327&\276`\352\207>\315#\277\276\331w\205\276vq\213?d\314\r\277\205\317V=\236\357\247\277g\362\035\277f\242\310=\034B\265>LT\017\276Ae\314\276h\007\\\275\275\000;\277$\234\206>\266\363\005?\0358\027@z\245\014\277\377[\231>Z/\206>-`B>\000R\213>\367\035\203\275\302\336D;\315;\216?d\312G\275Q\210@\2759\356\324=\306m\\?bg*\276o\325\365\274\363\223j>\324\r\264\275\000\035\246\276\235\364~=h?\202>\226\317\n?\2554\351\275\253\225\251\275\020\352\"=\324\202\327\275{f\331>I.\177>I.\217\276\337\031\355<\202\377M>\232\2667?\300&\353<\267]\350\275o\rL?\260\222\257\275\355\360\327\276\320\'\362\275r\303o\274\333\374\177=\355\3656\277\317M\033\275U\242l\274\014\006\227=N\234\274\276y\006\315=t)&?\251\274\235\276\00155\276W&\004?\202\034\324=\261\250\250\275\237\000\n=\366\227\215\277l\t\261\277]\376\363>\rR\220\275Y\206\350\276\256\360\016>\321\225\210=\r\032\372\2757\032\220\276\001\030\027?\223Rp>\"O\322>\374\336\006\276$b\032\2776:g\274W\004\337>\247A\321<Z\365\331>\351&)?Q\210\340>\313\326\032>\037,#=5\230\006\2769\016<=\322\035$\277\243!c\275\340-\360\276\302L\253>\312k\205\275\r\246a>\"T\001?P\302\214\275\301\032\247=qZ\360\276\345\320\322>\230\335;\277\267]\250\276\373y\363>\231\360\013\276\303\201\240\276\246~\036?\336\310,\277\377\312\372>\330\323.\277\270\036\265\2777q\202>\036\026\312>{fi>\204\234\367<\220\022;\274O\351\220\276*t\376\276I.\177>\214\333\010>.\004\331>t\311\335\273\212\315\207>\\ \221?ir\261\274&p\333>(\233\022?\241J\375\276L\303h\277o\201\254\277fNW>Ll\316>\203\300\n\276\"q\317=\355\013(=\256\230\266;~o\323>0\273\227?\235\275\223=\242\356\223\276z\031\205\276\3475\026>\236\227\312=\266JP\277\255\335\036?\251\331#>\253\262\217>\rT\006>Z\201\241>\211\230r>Um\022<*\3069\276Uj\306>\302\027\006\276P\344\001\277\226[B?\263\006o<\216\314\223>\021\001\247><\024\035?\262\021\370\276T7\027=\000\221\036?d]\004\277\234\277\t\276\304\316\024?\032i\t\276\007\360\226\277\301\312\221\276u\002\262\277\021\307Z?o\323\237>\233\034\236=`\3450?\220\024\201>\026\336E>Dn\266>\376}\326\276\245fO>5\265,\276\300\354~\276\273\355\"\276T:\030\276\2713\023=3\334\030\277 c\016>AH\266>\362^\205\276\014\352\023\277\261m\321\276\324\267,>s\242\r\277o\273\220=\305\217\361=\334\364G>\307Ko?\301VI>\3603.\276\342u\215\276\036\371\223\276\337\370z\277\211A\320\276\345E\246\275`\002\367\276\310\357U\277\3230\274>\202\220,\277PpI?\363q\r?\351H\026?p\353\276>0/\020?N\271\202\275\207\277\326\276x%\311\273\330\236Y>\000\000\000\277\274\352\201<3\026\315\275\266\370d?\340\020\252<\250:\224\27677\366\2760\273\347=\300\354^>J$1\277\317\203\373>;\302\t\277\005\305/\276GZj\276\247y\207\277!\260\302>\335(2\274-\352\263\275\\=\367\276\337\340\203?\354\372\225\276\3242\255\273)\\\027\277v\032i\276z\337\000\277R\325\224>u<\206>\304|Y>\254s\354\276\315\257\366\276\206\254V\277x\265\234=\262\364)?\202\312\210\276\313J\303\276e\302o>Ou\250>\361K\255\276\263\315\r>9B\206=i\343\000?\324`J?\301V\001?\343p\206>9\271\337>]Y};\277}]>\335\315\303\276%X|\276\034\266\275\276\303d\202?\272\332\312\276\'\275\357>\320\263\331>\037\364\244\2775c\221\276Ou\270\276\263$\300>\330\236\331\275\334.$?\360\205)\277]\334F>-xQ\276\366(\274\276\241J\215\276\323K\214\274CV7\276\303\266\365>\231\273V\277\306\212\372\276!\223\254=c\013\241\275I\200\372>n\023\356\274\034%\017\276\010U*\277\225\325\264\275\307\364T\277\3603v?\323j0\277\356%\005?\310\354,=\255\335\366=\262F\035\276m\347[\276\205_\232\2767\375\031\277t{)\276L7\t>\024\313-\276\212\223\213>\233U\177>\235\235\234>e\307\016\277qU\021\277\214\274,\274\265\246\021\277\010r\020?m\347K?\rRp=\357\037\213\274\027\267q>\026\025q=`Yi>\252\361\212\277\0049\370>\241\326\274?\365\2344\276\336\223\037?\222tM<W&\354\276\267\356>\277\372\2706>\225FL<I\235\240>\247\"]?^\235\003\276\302\023:\275\3744\216=\320\320\357>\222\"R\276\360\304\334>\372\320\205\276cE\355>\331B\340>\251\336\n?\037h\305\276\205\231V\276\312\340h\276\035\2240=\214,\231<\322R\251>\272\240\006?\250WJ<33\023\276\244Sw\276\205\227`\274\003\354#>\027\234\301=5\230^\277\320\320\377\275?\306\374>\016g~\276(\nt>E\235\271=Yl\223=\356\010\017?S\263\017\277Q\332;\276\024\\\374\276\245\367\005?\n\327#\276\273\n!\277\204G;\276\317\332\255\276\266\331\330\274b\364\\\275,\202\237>r\277\343>\027\361]\276e\215:\277\241K\230=\221\355<?J\322\225>\322\000\256>\010\346(\276\'N\236\276\274\316\306=\321y\275>\025X\200=t\355\213\275]\304\247\276\336T\324\276\313\234\276>\241\241G\277\216\350\276=P\252%\277\nf\314\274\334.\244\276F_\001\277\334\272\273\275\267\356\346\275\352\\Q=\255\300\020\277rm\350=\303\360Q?t\007A\277fk\035>R\355\323\276\275\035\341\275\340\234\201>N\013\216>C\347u\276\201!\253>\256G\371\277\315\222\340\276\335{8\277*o\227>\035\003R?Q\274\312\274\347\246M=\227U\270=`\314\226=w\020\033>\333n\002=\021\307\372\276\273b\306\2758\020\022>\374\035\n?)\354\"\273\330\236\331\275\214\022t<\017\356\276\276\363Y&?w\326\256>\334\021\256\276\240\032\237\276\021S\342=\276\274 \276\276\301\327\275 F \277iR\312\276D\372\355=\005\250\031?\356|\237\276\216\314\203\276!Y\220\276\342\222\343=Z\201!\276_\265R\276\337\375\021\276\266g\026\276\321\\\347=\264\223\341\276\377x\007?\307K\227=\345\'\325>\1770\200>\343kG\277\201\t<\277\325\347:\277\370S\343\276\325\2625?\021\031\306\276)\320\327\276\214\241\\>\203\206\276\276\025:\217\276~5W\277\245\024T>Y\031\255=JF\216\276\036\3414\276\0054Q\276\337\211\251\276\27164>\233\311\367=\374\035*\276P\302\254\276*oG\276]\247\t\277\243\001\374\2752\254\342>\367\350\r=j\336\361\276\3328\n?\250W\312>K\002\224>\204cV=\226\3172>%z9>\223\030\344\276\213\212x\275\302i\301>\233\003d>V\202\325\276$\271d?k\237\356\276\r\253\210\276\320~\304>P\252\035\276f1\301\276r\302D=\273\017 \277\306P\376>\0221e\276+\331\301\276I\205\361\276\253[]\276s\205g\277\272\240>\277lx\272>\024\355\352=\347\030\260\276\371N\274\276@Y\347;\006\177\177=\371\367\t\277A}K>\257w\277\2763TE=\241fH=\340\020*\276\303\363\262\275\257[\244\275\257\261\273\276\321?1?\031\347\317>\025RV\277\233\312\"\275\023\017H?\224\274z\276\303d2\277hy\036>[\316%>a\303\263>\343\245k\277\375\244Z<\331Z?\276\355\325\247=\2731\230;8\020z?\\8\020>kH\274>82\007\2779b\025?\031\3477?\371,O\275\332\346\326\276\335\014\307>\356=\374>\200\324\206>,}\330>Y\031\255=\333\242L?\'N\016>m\034\321>0\365\033\277(I\267\276\032Q\212>\224\3011>1\323\006?;\307\000>\352\317\216\276-\262\205\277\301\255\233\276~R-\276K\260\310\276=D\223\276Uj6\277D\243;\276\031\347\017\276\330\330\005\276\370\031w>\357\254\315>,+-\276v7\337>_AZ>\332 S\276\341\007g\275*:\222\276-!\337\276\000o\021?\234\334\017\2767\032\240\276\353\213\304\276\367\314\362\276Y\243\256\276%z9>\317k\024?\322\251\253>\002\232H\276T\035\262\276{\300\234=|a\252?\240\247\241=\203\300\n\275<i\301\275}\313<>t\007\361>\240\375\310<\352\262\350\276\336\310|>/\243\330=\264v;\276\317,\211>\000\035\206\276\223R\300\276\014#=\275\214\236[=\3267\220=j\3361\276\2279\375\2764\327)\276&\374\022>h\221\215\276\206 \'\277\253\264\305\275(\017\303?N\264\353\276\364O\020?f\024\013?b\326\313\276GU\323\276\225\267C\276\036\212\322\276Mg\347>\'\332\225>_FQ>\305\251\026\275\354\335\337\275l[\324=\2510\306>\0324\024\276Bv\276\275\370\031\247\276\013\014\351\276\232w\034>\036\212\242>\352\204\206:\215\234%>\013\357\322>\340\204\"?\nh\202\276\004\255`>\243@\237>\031s7>:\262\262=\322\343W\276\276N\212=j\030\336>\231\201\332>h V=\347\035\247>~\000r>\365\326\260\276~\030\361\276B!\242>h\226\224>\004\342\365\276\353\036\231\2755)\305=)?!?\366\1776?\216\351)\277\361\272\316\276\342u\215\276Q\330\205=\257_0>\n\364)\276n\213\n\277Q\332{\276\251\373\360>\206\033\225\273o\273\030\277\247\256\004?Gr9>\310\357\355\275C\032\025\275\264\260G>\315\222\030?\326\305-=\371I\325>\016-\222>\270\036E>kH\\>\207\376I>t\230/\277\006\365M>5^z\276\017\013\225\2756\313%\275,\274\373\276\372~j>?\214\200\276\005\305\217>\204\022\226>\177\336\264>6\345*>/nC>eQX\275\022\237\273<\373\311\270=\217\245\217>\t\336P\275\361\200\302>W`\010?\315;\236\276\272f2=\017bG\276\000\341\303\275\177\366#\276\013&~\274\252\361\222\276?>>\271\205%\316>T\361\220\273J~\244=_\014%\276\031\347\017?\271\252\314\276R\355\023>\272\236\310\275%\313I\275\337&\222;x\356\375=e\034\243\2747\032\260>\255\243\232>\221\'\t?\270#\004?\363q\335>\030!\374\275\\\254\010>K<\000>\344f\250\276u\315\004\276*\221D>\010w\347\274\372\325\334\275io\220>w\363\204\276&p\313\275\3441\003>\217\310\322\273\360\334\373=\2132\213>\032\335\341\276Z\327(\275\336q\352\277iR\002\277\003&\320>\037\272\000\276\377\t.\276\227\342\332\276\217\307\314\276\356\010\'>\031\305\362=\001\336:\2773\006\014<a\027\005\275\225\016V=\n\327#\276\363\001\201\275\264q\324\276A\267\347\276\317\020\256=a\216~\276\035\247\215\273\310\230\003\277fI\000>5{ >;\302)\276/i\354\276\321\223\222=D\250r>\261\244\\\274\255Q\'?\230\372\371\2762U\360\276;\215t=b\370\350\276RD\006>\270\314\331\276\026\373\003\277\322\373&\276\341E\217>m7\001\275\022\3322\276\324e\301>\316\307\r\277Qf\323\276)y%\277\213Tx\276E*\004\277\270\036\265\276\360\026\210\276\366\177.>9\271\217>\2174\270\274\230n\322=\222\256\331\276\031\251w\274\277~\310=9\177\003\277\366b\210>YQ\203\275\213\250\311\275\202\213\205\276\321t\366\275\226&\345\276%]3\275+0\244\276f\243\223=\342\351%?z\031\205>\214\363\307\276u\315\304>\335\007\260>>\317\037;3\246\240\275\361\272\336\276,\274\253\276\237\223\036?\222y\004\276d\006\232\276P6\225\276\2338\001\277\236A\243>\213\211-\276\262..\276\265\303\037\2758-\310\276/4W\276\020\006~\2764\242\304>E\022\375>)\313\300\276\227\377P\275\302i\001>\271\215\246\276\357\376\210\276\023\325\273\276%z\251>u\223\010\277\212\223;>\214\331R=*R\221>1|\304>\300\262\202\276\265\304\312<\305:\325<2r\026?6\0021>\344\024]=\024\"\320>\355\365N\276U\336\216\276\\=\347>\220\275\336=\001j\312\276n4`>H\212\310<\255\027\243>\317\203\033\276i\254=\275`\310\272>T\000\234\276\017\360\304=\316\215\t?\001\333\241\275\373>\274\275\243\001\314>\001\207\320=O#-\276\205\317V\274^\276\365\274\013\322\354\276\232?&\274\205\224/?\375\242D=\245\340\204\273\326\356\r<\377!\275\276\367;\224\275|~\350\2766v)>\354Q8\276\036\026J\276\374\214\253\276J\007K>\271\307\202>\253$r=\221(4\273\013{\212>?\035\237>\327\206\n>\'N\026\277\273\325\243>\244\337.\277\362wo=\301\312\221>fk\215>\301\034=>\3372\207\276c\014l=\370p\231\276:z\\>\220\2400?\204\273\363>\022k\001?\212>_=\310\007\005\2779\227\n?V\330L\275\201&b\276X9\204\276\266J\020>\263\014\261?\014\0371\276c\355\257=\317\332%\277\376\324X\276\303\365\220?\306\027m\274\341@h\276\320\325\256?\230QL>\005\300\350>)y\365<\237Y\342>\341\320\033\275mm\206\273\375\366U>\246\n\006\276\210\200C\276\266\370t\276(e\022=1\261!?G8\255>\245\203U>)%\204\275\227\342\352>e\252\360\276\221\2357\274\261\250\310=\201\225\323\276\001O\272=\014Y\035\276\200H\177\276|\3620=\320~\344\2755C*<\001\371\022=\'\302\306\276G\003\310\276\311<\222\276\372\320\005>6vi>\264Y\365\274cb\343>\t\341Q>\252\232\220>$\177\220>:\006\004\277\014\352\213\276B>\010\276fI\200>E\201>\276Ig\300=sK\273\276\342\006\234>\301sO>\270\257\223>\254\305\267\276j\023\007>\2137R\276\331\231\002>\351\324\325\275\202\277\251\273\266gV\276V\202\005?*\306\311>;\302\231\276\220h\202<V\274\221>[\315:\275a\375\217>O<\207=5\265\014>\200+\021\277\373y\303\276\037\364\214>\266\3267>\0358\227\276\316\245p\277\326\250o?\367\036\316>\362$)>pBA\276\221~\253>^\361\024\275\310\352\326<\312o\261\275e\001\303\276\233=\320=\314\262g\275\037hE>t\265\205\276s\364\230\276\226v\252\275O\006\'\276\261P\353=\"P\235\2755c1\277\376\361^>\215\321\032>\335\315S\276\277\232c\276\273}V\275]P\027\2775A\224=\nh\242\275Z*\357\275\010\224M\275\337\246\017?\375\207\024\276\336\216P>\366|M=\004\347\014>\364\032\373=\220\332d\276\254U;=h\256\263>E\365\226>y@Y>\244\031\013\276\323\274\223\276\241/}=Q\370\354\274\300[\240\276jj\331\275\367\314\322\275f\334\324<\032\336l\275\324`\032\276\013F\005\276:\3147>8\333\234=\'1\260\277\215\227\276\276Z\365)?\314z\261\276\236\007W\276\272\332\372\276\335\n\201\275\034|\021?\177\336\014?\241\333\013\27629\265\274\352\2252>(\017\003?\007\010\006\276\317)P\271\310\007\255\276,H\013\277-\262}\276\306m\024\276\303*>>\177\244@\277L\246\252>\306m\264>\353/\005\274\205\266\254>\323j\210\276\3230\374<\212\216$>\363\253Y>Sy#\277\302hV=\001\336b>\363v\364\276\216\036\037>9\013\213\276\356w\000\277p\353\016>p_\347>3\371F>\201\t\234>\316S-?\243\0063\276od\256>\351el\277\032\335A\2761\010\354=o\364\261=\030[\230>\217\372\213\2753\247\013\276m\255\317\276$\356\301\276\'\302\226>H\334c>\305=\326>\305\033\331\275\373WV>sgf=A\324\335>\303\365h>\323\336 >\312\340\020\277\257[\204=\n\364\211\276\352\004\204\276p_\037?U\367\250\275\234\373\213=\321\350\016\276\246\014\274=\214\271\203\277\204\201G\276\200}\024\276\212v\245\276\205\010\230>\000\214g>\006d\237>\371f#\277G\003@\277\350L\232\2759\227\262\276[\2310\276\371\367Y\276+\331\221\275\231\235\005\275z\215\275\276\376&\024>\375\274i>\267D.=\227\036\255=2w\215\276\311\260\312\276I.\277\276\245\275\301\276NE\312>z\215\r\277g\177\200\275\224\335\214=QfC\276\002\324\264>\017\326\237\276\225FL=\300$U=\224\301\021\276\357UK\276\340\367o=nn\314>\020\006\236\276\205_\"\277\001/\223=>\226\376\275K\310\'\2766\261\000\2758.\303\275\342\001\265\276 $\013\276\306\205\003>\304\010)?5\230\006\275\207\026\331\274\322\214e>\370\215\017\276\010U\352=\275\030j>\210c\035>\244L\017\274@M\215>\202s\266>\345D\373>\252+\277=\340\020\n>\305U\305>}\221\000\277\311\311\004=\362A\017>\226!.\277\272Nc>:u\345=\001j\352>\017\265\355<\020\006>\277\013$\210>\271\245-?\000R\273=\253!\031\277y\222\364>^\024\275<\006*#>\311\253\023\2769\320\243=u\0370\277\371\240\207>[-\013\274\246\017\355>_)\253\276\341]\256\276\223\214\034\276G\217\217\276U\372\t=\2338\351>\320\362\234>\216@\\>\217S\014?\230Q\334>t\265U>c\271e\276\342\001%\276\366E\262>\245.\031\275\253\317\235?\312\211\036?-\t\020\276E\236\244</\205\247=Z.\033=\316\374\n\276\036P6\276\013)_\277/\335\244=\310^\017>\304\010\321\276S\226\221>\277}\215>\301\377\266>\"pd\275\233=\010?\255#\375\273\307\200\354\275N\356w\276p\010\245\276\\\254\350\276\275\214\242\276!<z\276\235F\232\276D\337\275=\245\367->\240\025\330=*\221$>\026\247\332\274(\233\362\275o\365\274\276Gr\331\276C\377\024?\306\334\245>e\245\231>y\004\267<\3436\232>\277}\235\2742\001\177=\373\007\221\2748\366,\275\270X\321==\'\275\276@\366\332>\366\354\231=~\214\031>\305\254\327\276\332\2174\276\260r\350\276\004!\231\276\3372\267\276U\244\">\"\032E\277RI\335\275\274\313M\277\233\033s>\346\005\330>\221\355\004\277\002\331\313\276\026\301_>\225\352\247:\304_s>\274\221\t\277\322\373\006>@\030\370\276\344h\016=&p\353\275\231G\236>\032\335\301\276\223\0005\276h\t\222=\257\316\021>\354\300\031>\264W\037<C\004\254>\303(H=\214\240q\275z\307\231>+s)\273aq\000?\002\361z>\351\324\025\276\225H\002>\317\203\373>V+\033\277\355\013\250=\246B\274<0Go>\214\274l\275\223\000\365\275\302\335\331\276,\232\216\2764.\334\276\344\203\216\276 F\010\275\365\271\332\277G8\r> A\301\276[\\\303=\217\241\010<\201Y\201\275\327L>\276\177\336\324=\304wb\276!\352\336>\355\201\206>\010\346h\275\361\201\275=\375j^?p%[\276\265T\276\275\nh\032?j\302\226=k\202\270>\302\335Y\276\361-l\275\355\365\316>\351\357%<t\265\305\276\022\367\330\276\027\237\222>N\354\241=\360\277\245\2762;\313\275\333\212\215>y\351f\276\023I\364=LTo\276\324`\352\276\213\303\331\276\031\000\312\275\254\250!>U\213\343;3\334@\2778\275\013\275\240\251\267\275\004*\322\273^c7>\364\340\276>C9\241>^c\227>\207\212q\276e\344,?\230i{>=G$=\250\000\330\276m\034\201\276\254\213\373>\235F:\276c\264&\277\277+\022?\222?\330>\330\266H\276\271p\200\276\000\254\216\275\336\345B>\301\213\316>F_\301<t\265U\276{\332\301\276?\214\340>\004\342\365>!\310\021\277\374\214\333>\240\032O>$E\344\276^\236N=k`\373\276j0\255\276\343p\346=\3121\031=9\354\276\274n\243\t?/\304\252=Ve_>v\340\274\276\370\374\340>%\351\272\275\315\036\330\276U\023\014\277\nK\014?\022\237;\275\331w%>#\276\203>\305\033\331=\313-\035\277\265OG>K\315~>V\232\264\275`Y\001\277\275\000\333>rP\">\213\032,\276dX\005>\336TD>~\374\245\274P\302\274\276\2451:\276\351\362f;\227\250\216\276k\324C\276\224\301\241\276\336\260\r>\273\'\357\276\313\370\267>\367\006\017?\326V\314>\236\007\247\276\244\337\006?\215z\010>Z\330S\276\r\246\301>\240\025X\275\000\035\006>\373W\373\273\n\205\010\277\377[\311<\262K\344\276p^\234\274<\024\365\276\215\227N?MJa>\0324\364\276\302i\201>o\r\014\276\372_\256<k}\021\276N(\344>D\243\033\276\306\341\214\276VD\215\275\273\325\023\277\321\\/\277\036\212\002=^h\316\276\321\\\'>\2343B>Q\371W\274{\024>?\332:8=\240\340\222>\001\302\207\274\003\317=\276\014vC\276\267E\331=.\221K\275\300!\024>4\2424=_{\306\276\"O\022\275\324\323\307=\337\246\177>Q\275\225\276L\211\204=\232\261(>?R\004>\000\343\211>\\\217\002\276\305r\013\276\016g\036\276\033\0176\274e\216\245\275F\263\262\274 k:\272pw6>\014<\347\276\\=\347=,+5\277\346\256\305>L\211\224>\016\333\006\277\260\346\360\2761|\264\276\304Zl?\233\251\020\275\2652!>\231\360\013\2761\230\237=]\244\320\274{\210\266>\334\021\376\276\034_[>i\000\377>6\225\245=\337\211\211>\301\032\247=\2029:\276\216\001\231\276f\026a=\233Z\026\276\026\244\211\276{\210&?T\305\264\275\224\274*\277\265\303\007?\256\r\225\275G\346q\276Y\243>\276u\037\300>\264Y9@F\316R\277l#^=\201&\002\276P\211\353\274?R\004>fk\035>\230\030\213\275w\276\327?\317\367S\276 {]>\355\234&\275\242\321]>\036m\314\276\027\237\002\276\260\311\022?\2554i\276\006Gi\276\255\335\266>\360m\212\276\242\177\"\276\0014\312\275V\267\372\275\010\"\213\275\274$\256\275\013$\210>\212\330\026\274\241\333\253>a\3409\2760\007\346\273<.\312\2755\014\037\276\361\022\\\275\320\t\301=\236\352\200\276\260\217\356\276j\207\217>\004\347\314=~\306\225\276\373\256\210>\337O\235\276\271p\220>F\232\370\274#\276\223>8\275\313=\257Z\331=qYE=\363vd>\233\313\215\274\262\235\277>\256\022\214\276}\226\227>K\310\367\276\365\273\220\275\023\233\017>\005Q\037?m\342d\276y\311\277=\227\342\332>\035r\223\276\2238\313=\252e\353\2761\266\200\276\200\270\253\273\246ax>\262\364\241\276\232|\363>`\223\245>\007\261\263\276E\r\006\2761\231j>\363\306\311=\212\255\200=\205%\216>E\330\300\276\276\331\206\276\240\246&?\327\027!\277\312\303R?\027\237\032?\031\034\345\275@\023\241\276\224\3367>\320\355E\276f2\234<I\273\321<>zC\274\330G\267\276R\017\t\277<k7\276\377\317\t\277\301\341\205\275\017\037\"<\233\000\003\275\2304&>\367WO=mV\205\277\343\302a>\307\021\353\275\346\256E>_^\340>\241\276%>\1770\360\275\370l]=;D\022\274\347\000!>^\327\217\276\313g\371>?5>\276\020;\023=j\244\345=e\336*\275\374\373L>_{\006>iW\221>\316\376\200\275\275R\326=\323\364\031=z\031%>\330c\242\275,}h\276\022`\242\273S\2560\276od>>\366\227\335=5\265\254\276\241\363z\276-`*\277\027\331\316\275\025\216 =\361)\200\276\240\303\374\275\312l@\277j\243\232=\303d\252\276\261P+>\207\372\235\275\222t\r>\337\303%>\005Q7>\270\036\205>\250o\t?\343\030\311\275\223R\320>J\363\005\272\265\246\271>J\230I>\373:\020\276\233re\276q=\212\274p\227=\275\212vu\276n\243A\276J\210\250;I\235\000\277%z\031\276\365\326\010\277=,T>i5D\276\241\204\231>m\377\n\276\030\005\001=\000\306\363\275rP\222\276&\031Y\276\023D\035>\2176n\276\022\024\217\276a\375\037>\327QU>\351`\355>\025o\034?\271l\364<\253[]>\205\353\341\2761\261\331\276\237Y\002?.\220\300\276\235K1\275\032\372\207>\263\014\021>\215E\203>+\022\223\274@\207\251>\350\244\027>\374R\177\276x\226\200=kH$?\217S\364</Q\r?\262\200\371>)\005\r?0\365\203\276vlD\276\241\363Z>k\361I\276W\225]>vq\273=\235c\220>\240T;\276X\254\301\275\253\347\344\276\230\335s\276\007\3169>\333\304\371>B\2252?@\331\024\276\032\372\'\276\356%\335\276\227V#\277\032\213f\276?o\232\276G8\235\276_C\260\275\321\313\010?6\352!\276\376+\313\276\253\004\003\277\000\251->N\177\006\277\276\371\255=\0024%;\036q#<\261\304C\276\322\035\224\276Vc\311\275\037.Y>O\222n\276!\002\316\276t).\275O#\355\275\013^\014?5\265\234\276\330Go?R\270\376>\316S\035>\373t\314\276;\205\205\2717\303M\276K?\341<\264\310\026>)\226\003?{k\240=\361.\247\276=\362\307\275^h\216>\003\225\241\276%#\207\276\000\035\016\277S\256\300\276\325\262\205>\324\267\254>\210\272\257>\232|S>\371N\214>\221\362\323=\233\2541\277\005\336I<\365-\023>\342#\022?\236{O\276\277}\205\277\206\217\350\276\031\220]>V\267\232\276\026\275\023=\207\341\243=\362\357\203\276\322\247\325\274\344\275\022?~eo\273->\225\276\004\350\227\275\021\034\027\275\013\2656?n\374\t\275/6-=0\201\233>\022N\213\276\302\277\210\275\344N\t\276\036\026b\277_\322x>\n\364\231>>^\250=\007\356\240=a\303s\276\201\225#\276\347\253\204\275\325\222\216=\230\206\341=\346\\\212\274M22>Y\335\232\276-\354\231\276#J[>\233\312\202=\312\375\316=\342Xw\276\346\006\303\275\0358;@\346\374\271\273S\256\360=<\024%>\006\200\252<\3172\253\275\375\331\017\276d\037$\275*W@?6=h\275u\003\305\275\376\272\223\275\314&\000\275\246\3209>Ll~\276_B\205\275\027\357\207=\224M\371\275d\006\n\276^\364\205>|,]\276\346\005x\276\001\205\272=@12\275!\3158\276\034\3609\276\022\243\207\275\226\354\330<h?\202\276\204d\241\275T\306_\276\310\267\367\274,\237\005>\275\035\341=\202\252\021=\374\306\247>\370S\343\274c\013A\276\274?>\276\t6\256\2750\023\305\274\310\315\020\276B!\002>V\327\241\275\225e\010\276a\026\032=\034\353\342\275\312\340h\276\340\326\215\276\311q\247\275\n\241C=&\2527\276%]\243\276H\247\016>!<\272>2 [\276\035w\212\276)yU\276\246^7<\233\003$>\t\376w>\006L\200>]\304\247>\002\232\010>\351b\323;\'h\223<u<\346=9\231\270=(C\225\275}\005)\276\307K\367>\253A\230;T\034G\275\001\242\340<\033c\307=\326\255\336=\251j\242\276N\227\205>\303\r\030\277\352\312\207>\320c\224=<\024E\276\333\024\017=\376` \276\247\226\235>\360\304\254>Rv\237\273#J\033>\211\263\242\274zp\027\276\231\204\213\274\335\3570\276d\311\034\275\013\265\246\276\260r(\276d\351c>\362A\237\277io\020\276\363u\231=*RA\276\237\310\323\275\311)p\273\276\336]\276c\267\017=\303GD\276}\263\315\275\252!;\273\030\263e=\261\300\227\2752w\010\274\307\235r\276\325x)=\031\344\216=\320\270P>\315#?\276\357X,\275B>\010>\"o9\275\362\265\227\276,}(>9b\355\275\363\306\311<\367\312|\275 \360\200\275\\\033\n>\352\225R>\376{p<)\"C>$\234\246\276l&\337=\215\233\272\275G\003\350\277a\032\266>\314]\013?\0363\020\275\n\366\337\274\366(\334\275\255i\236\276<f\000>?\310\262=2\314\251=b\330\241\275\2555\224\274s\364\210>Z\275C<\246\n\006\2768\204\252\276\364OP\276`v\217\276]\277\340\275Z\236\227\276b\025\017\276X\342A><K\020=\237\260\204\276\241\204\211\276\0049h\276X\220\006>\207\303R=_\322\210>\032\300;\276\007\316\231\275\266L\206\274l\226\313\275\233U?\276[\266\026\276\230\373\204=\352\347\r\276#2L\276\321\004\252\275\032\206/\276\267\266p<\246ax\276\214J\212\276\331?\257\275\013^4\276\357 6\276,\327[\274\'\332\025\276\371N\234>|\264x=p\261\222>/\027\021>\317kL\276\312O\n>}\221\220=\325\313/\275e\217\220\275\204*\265\276\271\031\016>;\374u>\377\262\373\274\272\236(=\264\223a\276\003\225\361\275\013F\345=\013^T>r\334)\276$\234\026\276\231\331\307=7OU>E\022\375\275\346\003\242\275\t\207\236\275\022\203\260\276\\=\227>y[i<\204G\233=\310$\243\274\013\265&\276\346\346\233<\335\315\203>\350\202\372=A\325\250\275\202\253|=,\361`>\235\021e>D\207\300\275\017\326\037>a)\334:\250\035>>\320D\210\276w\276\337\275\340\020\272>\357r\321=\250\030\'>\240\340\"\276\347\253\344<\346 \310\275I\205\261<_\230\014>6\002\241>D\335\207<-\225\247\2765)\325>\0216<>k`k\276\354Q\370\275 \014\034\276\023fZ\274\367\344!>V\202\245>\325>\235\275\201\354\365\275\346\256\345\275\332\253O\275^\327\357=\2137\022>\252\016\371\275b\327v\274\246B\234\275W`h>\tP3>fL\301<\242\227\021>\232\231Y>\004\220Z>/i\214\2759(\201=P6\r?\034\360\211>Y\213/>\274yJ\276\003\356\371<\234\334\277\276\212Yo\276\3372G>\312\322\030;\370g\253;\223\030$>J\014\002?N\234\234>\205\"\335<\024\\\354=\220k\243\275\211{\314\275u\"\001\275\337\334\277=3\3041<\272,\306>\244\252\211\276\030\317\320\276(:\334\272\317j\201<3\375\022=\364\340\356=\317\334\303<\201\006[\275\347\035\247\2763\3417>\3019\343=\243@\037\276i\251\254\276\023\014\307\275\253[]\276\340\020\232\276\217\344r\274\004Uc\275\221\356\347\274\270\006&\277\323M\362?\302\211h\275\002\267.>\221\233!\277\206\000 =\226\262\374\276\346\256-\277\310\3150>\217\302\225?\373\2542\275\"\3756\275V\270e\275\243\036:\277&\036\320\275\203/\334>\2240\023>\212\350\227\275\027+\252\276\311\253\223>\253\262\357\275Wx\327=>\t\314=\235.\253>\251j\n\277\317\237\226\275\362\\\237\275\366#\005=\014\252t\272j\274\264>\360\371A>\036\033\321\276\360\334\213>d;\337\275\014@#\2742\003\325=\022\367\330=g\236\234=\303\r\030\276\004\216D==,\324=\341\014>\275\226x >\000\343Y>B\t\303\276d;\277\275.\255\306\276\311<2\276\017&\005\275D\205j<\026\373K>\273\n\211\275\004\220\332\275\310\007]>\315#\037\277FPk;\250\000X\276\305\254\027=\345\263\254>\030\'\236\275\014\312t\275/\027\341\276\036\304\236>\023ac\276\264ro=\341bE>\024\320\034?\006\236s\277\270X\t?S\320\315\276\347\306\224\276\013\230@={\240\r?\352>\200>\230i\003\277o\022\003\277Q\206*=K\345\275\276\320\2700\275D\213\354\275\364\340\276\276\322\214\365>w\365*\275kH\334=:X\177\274\340Ka=?\221?\277\014\260\037\277\364O\200>Z\330s>\364\246B>\226\004\250<\222\260/=\313\3656\275\212<\251\275\376Cz=\033\330\"\277\343\031\244>\253\347\244\276\314\227\247\276a\246\355\275\315\006\031\276\362\014\232\276\227\312{\277\334.\344>E\201>\276\204\201\017\277\037h\205\274\3024L\277C\377\004>~\251\257>\230\372\351>\221~;>\206\003\321>X\220\246>\310\352\226\276i\000\017>f1\201\276Di\217=\334F\343>\345\233\235\276*R\201>\213\032$\277l&\237\276\2446\201\276\260\217N\276v\303v\276\007\266j\276\005i&>J{\263>7m\246=\033\330\272\276\032\206\017\277\340\276.>%\351J\277\333\304)\276K\253\241\275\304\261.>\037\364\314>\\Z\375\276o\330\246\276m8\254\274e\252\200=\226\316G=\017a<=y\222\014\277\233\253\306\275\031V\031?{\210\016\277O\341\255\272\016g>\277L\375\354>\005\213C>5{@>\023\267\252=\037\021\323\276\244\337^\276*\000\036?4K\322>y;\202>\035=\376\275\201\355\240=\027F\372\274\3166\367\276\246\325\260=\361c\234>\r\253\210>\230\027\340\275g,\032\276\204da>\227\312[>\257\224\305>mV\035>\\\254\010>\223\032\332\274H\334\243\276\237\315\332\276\032O\304=\rT\006>\017\271a?\321\\\007?\205y\017=_^@\276\3333K>\261\247\035>\215\234%>A\324\235\276\356\316\352>D\244\246\275P\307#?\225I\255\2756Y\243>.\377\201\276r\371\017>\227\250~\276^h\356\275\341z\224\274\005\242\247<\220\332\004>A\232\361=\rl\225>\312\375\316=\260\217.\276\020=\311\275v\032\231\276E\365v\276\033dR>\200\267\220>8g\264>\271\252,\276\251\370\177\275\330\365k?\366b\350\275\265\374\200=\010>\306\275\273\n\371>\212\253\272>\\U6>p\230\350<\372\233P>\247\350\310>O\"\302<\232_\215\276*\221\244>8gd\276\340\366\204=\215\010\206=\335%q\275am\214\275\200\235\033\2752Up\276\273~\321\276\241\333\013>\275\214\342=\311\312\257=_\322x>z\202\016\274f\210C\277x\227\333>\377\317\361\276\231\r\202\276_A:\276\205\010\370\275\300\262\n?T\000$\277*RA>|D\234>y\314@?\202\305\221>\006\201\225\276\241gS>\244\033\201=\351\357\245\275\375\331\217=I\272\366\276^h\376>,\271\252\275O\006\227\276:;!?\207\242`>\322\214\245>\316\031\241\276\243X\356=\354\243\023\276M\370\205\276\'\302\306\276\331\320\255=\266JP\276\335\261\230\275\030&C\277\367\001\350>\004\033\227=y\007\370\274\204\360\350<\216W`=\320|\316<\263^L=-xq\276*\251\203>\370\210\330\275\311\216\005?\246\177\311\275\017\356N\276\316\245x>y@\001?!\315\330>\372\362B=z\253n\275\227\255U\276\327KS\275y\311\177=\016\020\024?\217p*\277@\301\305>[B\036\276\005\027\233>N\177V\277\302\027\366>\223\035{\2763\026\315>|\325\332>^K\210?\340\020j\276\0010\006?\016\333\226>\\qq=\332\003M\276\305U\345=\300x&>\236^\321?d;\177\276\'1\010\275\371h\361\274\202\305\301\276\213\340\377\275\310^\037\277#-\205\276o\202o=\004!\311>\005\335\336\274\350\244O?\372\356\026=k\2327=e6\010\276\2448\007=\301\255[>\321\037Z\275\tm\331>\037j\033=@0g>W\317\311\274\243u\224\276`\345\200\2763\033\264\276\366\233I=\361g\270\275\252\324\354\275\2120\017\274\260\033\366\275,\202\037\277\307c\226>B\225:>\275\251H>\224\244\353\275\022\332\362\275\355\325\307=\301\2504\277\345\2703\276\217\337{>\215\227.\276\221D\007?\304]\235\275c\234\257>\267\234\013\276\007\360v\2763\212E>\214\023\037=\027\267\021?2\003\225\276I\242\307>GqN=r\277C\276\271\245\225\276\305\003j\276.\305\225\275\317I\277\276\315#\357>\326\305\235>n\277\274=W[\361\276L\211\344=\231\365\202>\315u\372\276\030\262\212\276y\036\024?,e\231<H5l=\240\0258\276u\315D>\364\025\224>\367\311\221\275\025:\217>h\263\212\276\226[\232>#J\023\277P\307\223>/\2062>\233:\257\275\323\207\016\277\246D\262>\247\256\034>\"O\342>\242\320\262=\t\026\'>\214\241\034\276\007|\236>Jy\215\275\206Z\013\300s\205\327>j\207?\276\223\310\276\274\356\010\247\276g\n\025\277\350j\013\276\330\r\253>\325\263\240<\022k\361=$\234\326=\024y\302\276\37459\276\310\355\027=\n\3705=\326}\266;6<=\277\201\262\251\276x\2641?\rq\234>8\202\024=\205\316+\276\252\325\027=\363Y\276>\236\357\207\276I\205\361=\373tl?\324\202\247>\034%\017\276\242\356\003>\224My>\246\017\r?\t3\215=4/G=9\231\270<\\Z\035?\273\n\351\275\263\316\230=\327L\016\277\254\305\347\275~t\002\277zS\021\276\027\237\">sJ\300=\373\221\342=\017\271)?\010<\260=\265O\267\276\232\352I\275\362\352\334\275\222>\255=a\302\310=H\371Y?\030x.\276\334\235\025>\304\010)?\255\372\214>$\326\362\276-\264\363\274\031\377\376\276\003`\\\276\310{5>\034|\241>?:u>C\255\001?\207\026Y>\336\345B>\235L\334\273d;\247\277\370\031\027\276\302\300\323\276\246&A=\305\311=\276\300[\240>l\317\014\276?\307G\275Bz\212<\334cI\2768\204\022?\306\370\260\275\002\235\311<3\245\265\275\326\034\260\276\251g\241=\276\244q=&\000\377\274\343\376#=\270\036E\276\006G\211\276mY>\275\251\336\332=\316\301s\275y\2224>\320\325&\277\317\024\232>\343\031\364\275\031VQ\276LT\357>\373t\004?d@\366\275\223\214\314\276\272\274y\275D\335\007>\206=\r\276\3230\214>\257\261\213>\212\260\341=\337l\223>\322\030M>\265\211\323\275\363\345E\276a\032\326\276\327i\364>\007y}\275\314b\002?\3274\357>u\310=?\177j\274\275lx\232\276N\321\241>m\305\256>\210c\215\276\311\223$><\206\307<\311\002\246<\225\360\204=u?\247\274\322o\357>\376e\267=]\334\226\276\316\305\337\2743\3041\274\232B\'\276\231\360\353\276\344h\216\274\363\310?>\303\330\002\276\200}\224\276x\236\323\273l\224\365<\234\304\000\2776\223\277>;\307\260\276\022\024\007?\270;\333>\005\305\317\275\225\323^\275`\000\341\274\004\004\343\276\237\037\326>\345\320\002>\357U\233\276\342Wl=\031\034\005?\355G\n>\230Q\254\274>\224\250=Tt\004\277\346?\204\276\325u\250\274s\200@\276(\270\030>\356_\251>\t\247}?H6\027=\027\274\350\275\002\267\016>F\261\254>\341\321F\276\217\031\230\276|\017w\276IK%>!\310\001\276\264Y\205\277\231\273v\276\026\373\253>\000<b=pw\266=Nd\206=\353\377\214\276\221\355\234\276\354/\313\276\352\t\013\277\036\033\241\276z\374\276>K\260\370\275\372\270\366=\212\253j>\316p\023?*W\330>\0054\301\276\250\306\213=\241\204\001??\035\027?\304\261\336\276\334\327!\276\376\016%>\275R\306>\266\276\010>\251\301\024\277qUY\276RaL\276\202\256\275\2759}}=~\214M@t\352\332\276\226CK\276\020z6\276\225e\330\276\316\252\257>\234\334\017>Q\203i>\023\014\307\275\364\246\002\276\335\225\035=\215E\303>n\206\313>\177\301\336>\306\212Z=\227\034\367>;\3745>\342\314O\276\013$\310\275\324\232\026\277HP\374=\276\206\200\275\006d\037\2774\0216\276\253\tb\276\321\\\307=\'k4\276B[\256\276\335\230.\277\3172\213\274\375\365\212=\036\033a\276L\246J>\356=\214\276\303\323k\277\363q\r\276?:\225\275\354\022\225\276\037h\225>\360\247\206>\352Q\002<\365\271\332<\240\210E=\200H?>\331@:\274\236\010\"=-z\247=\234\247\312\276y;\362>\353\220\373>\327\027\t\276\361\235\210\276\310\352\326>\234\247\252\276\315\344\213\276\217\337;>\034z\213;\225c\262=\035=\006\277\204\236M>\346\010Y=`\257\260\274\264q\004>\016g\016?5\265\254\276\317\272\246\275\3377\256\276\000\037|\275g\325\227\276\242zk>4\364/\276\241\204!\277e\374#\277-\'!=\322R\371>.\2561=\223\214\254>\215(\205\277C\347\345\276@\302\220=\305 p\276\021S*?\271\031N>\357\311\303>y]\017?\205\266\034\277\'\245\300\276\365\020\255\2765b\346<\377!\335>\201\t<\276\212\223;>A\361\203\276R\n\372\275\006G\371\276\t\212\357\276\264\223A\277m\305\376\275\353\250\232>\220\240\210\276\230\205\366\274\261\026\337\276\320~\324\276\200+Y\274\377\312J\276\245\332\247>\212<\351\276\225\237\264>k\232\227=2\257\203\275\226\317\202\2768-\270\276\216\006\360>h\320\240\2765\270m\275.sz\276L\340\246\276\221\270\307>]1\303=\250R\223\276\347\214\350>\330\330\245\275\270\315\324\274\'\332\005?vl\344\276\352!Z>+\2076\276\326\251\262\275W`\010>\331\231B\275\027H\200\276E\236\\\277\343\210\345>\025o\244>x\rz\275\320~$>\324`\212\276-!G\277\024\256\007>y#\363\275&\252\327>F\353\230>\324\324\262\276\003\2627\276\323M\202>\266gV\2765Fk>\032\243\025>\345c\227\275\354i\227\276$\013\330>\014\315-\277@\331\264>J\3174=I\200\332>4\2355\277\242b\314>\327i\204\276z\310\224<#\241\255>\315\344\233\276\274?~>\201C(?\234\371\265>\234\212\024>\022N\313=\350\244w\276X\341\226\275B!\002\276\353\342V?\022kq?\242\036\354;\351`\235\276\317\240\341\275\375\207<\277\316\215\211>\002\232\370>\374\214\213</n\223>\344\024}\276F|\207>\220jX\274\037\276\254\275p\266\351>\335\014W>\203\027\035?\355\326\222\275\253\315\177\274\253=\314=m\220)>\300\003\003=\251\301\034?j\241$=\374\214\253>\3372\'>*W\230=}\004\276\275\351d\251\275\002\237\177\276D4\232\276V+\263\276\331\010D\276\350i\240=y\257\032=P\303w\275T\251Y>\342\314\037?\253[]>\007B\262\276\212\216<\277\330\266\350\275\013\322\314\275\233\006\240\2724\2355\277V\237k\276\023D\335\275\313\271\324=O\351\240>\032\250L>\211\267\016\275\234\026<>^\274\237\274\224\331\240\276\311\301\021\274\010\217\306\276*R!\276\244\337\216>\231*\230>^\327/>\021\036M>bJ\004?\377\347\260\2768\333\354\276GU3\276R\322\203=\374\030S\276\322\251\013>-`\322>Q\336\247\275\246\320\311>\030\354\226\276\312\247G<]\212\353\275\245kf\276$\234\036\277zV\262=\301\254P\275\256GY\277tA\375=T\035\002\277GU\203\276\362AO>\007BR>\00541\276\343\0314>\274t\343>\220\210\311\275!\223\034?^\326D<\315\257V?\205\321l=\346\313\013?\346@\217\274\034\266\255\276\237\315\312\2750L\346=\2072\024\275\0221-?\357\2177\277n\335\335>u\223X><\207\262=\365g\377>mY>=\\w\343>\331\224k\276E*\234\276\237u\215<\234\025Q\275\200\237\361=j.\267\275h\226\244\276\032\243\r?\301\377\326>\311\260\372>j\3737\276\222\226\002\277n\024\331<\367\312\274=\351+\010\276\304w\002\276R\362\332\276\265\303\257>\203\247\220<;\001\335>\033\365\220>\376\267\322\275\340g\314>v\340\334\275\262\364!>5^\242?,\324\272=k+v>3m\377>\214\363\027\276\305YQ=77f>:\314\227\276,eI@\303\365\010\276\205\316\353\275:;\251\276\304\316\344>d\351\003\276S\005\003?^Kh>\325\006\247=\230\027\340\276+\244\\\2763\026\005?\341]\256>\251\206\375\274\356\261\204\276*\035\354\275EF\254\273\001\2070?\375\331\377>\244S\027>\261\277l\276:\351\275>oEb=\335\"\220=7O\025>\313\2714>k\237\016>M\241\363\276g\013\250=J\356\260<I\235\260\276\004\004\023>\253\347\264\276m\305\236>}u\265\275\221\233\261>\265O\007\277?\035\217>U\030\333\276\034x\225=fN\347\276\247\221V>\214\203\213\2752\034\257=\277`O?P\302\314>\346\\\002?\266-\n\276mV\315\276\374\030\343\276V\232\344>{\273\305=\212<!\277\363\037\242\2767\211\201>\246\'\014>m\255\317>\031\002\240=^\327?\277#j\202\275uv\002\277F_\221>k}\021=\236\322\321\276\017\177\255>\367\2226\277Ic\224\276\373\221\032?<1\253\276\205\224\217>\223:\001>\010\311:\277\260\034\201=\014\002k\276\311v\306?S\313\006\277JC\255=\307c\006<2=\341\275%\010\027\275\370\302\204\276\005n}\276\354\022u><N\021?\267\354P\275D\372m>\006\236{\276\"\340p>}\320\263\277}?\305\276aqx>\237\216\207>p\231\323>\372\263\037?\215\356\020?Uj\366>7\303\335>\231*8?r\277\323>$\323\241<\202\306\254=!\347\275\275\301V\311>x\264\221\2766\345\252>\210\200\023?\361FF\276\032\243\225=\\\000\272=#\204\007>\360m\372\275\253\317\305\276zp/?\315\314L\276\375\202}>\324\267\234>\330G\347>\236{\017\276\214\276\302\276_^\240>\206U|>ZG\025>\217p\032\276\"Ob\2772ZG\276\255\300\300\276\203L\362\275+\302M=J\322=?m\347\233\276\013F\205>\373\226\271\276\205\261\245>\301\250D\276K\035\244=A\267\267>vR\037\275/\372j\276T5a\276\203\027\235>:~\003<r\277\343\276u\310M\277*\000V?\240\375\010\276\305\033Y?\034\261\226\276;oc=\330G\247\276$\264\265>\265\025\353>.\312,\276x\321\247>F\316\002>\tm\371>1\2619\276\222\256\231>.\034\370>\031\034\205\276\325\315E\274g\270\241>\265T\036\276\267~:=\356%\315\275\315\222@>`\347&=\335\265\364>\324H\353>\273\017\000=\214\367\343\274\213O\201>8K\t\275\360\372\214\275\032\213\246>\231\360\373\276|\363\033\275V\274\341>\245,\003\277pw\266>eU\004\275\311\216\315=B[\356\276Xs8\277B!\202\2764.\\\276Z\233\306\274\253\317\265>l&\337\275\376}\006\276\235.\033?\'f\315>\016\241J\276a\340\271\276\033\325i<\331\010\204\276\375\370\313\274\351+\000\277\336\310t?h\263b\277\375\244*\277\205\231\246>Uj\006\277%\002U=\350\244\367<\335A$\277o\365\024\277p\231k?\260\2176\277\332\217\024\275\343k\017\276\277C\261\276\321\"\353>\360\242o>>\260\243\275\232_\r\276\013\014\251>\305\033\331=w-Y\277\205|0>\013\014!?L\340\246\276Mg7?\365\204\365>\301\357\225\273\313\236\304\275\t\212_=2r\326\275\263)\267>+\024i\275V\202\265>SxP\274\225\232\215\276\312\300\001=\215E\013\277h\350\237\273V-\251=wJG>L\343W=\037\364,\276#\276\033\277f\210\343\276\272\332\312>\325>%\277B\257\277=aq\270>\000\251\315\275\273\'O>\024\313-\276\351}#?\033\366\273\275\200\356\253=J)H?\243\211\301;\020\257\353=\264\253P=\304\010\t?\317\275G\276ff\246=\255/\242\276\305 \000\2779E\'>\277H\350=\275\031u=\307\364\244\275\252+7?\311v\356>\325^\204=7\375\351\276\215\264t?9\356\304>\004\025\237\2736\310D\276\275\214\342>,}\350=\024\263\276\276\035\217Y>\373ys\276\245,\243\276KY\206>A}\273\276\213\303\t?t\265\245\276\026\301??\247\005\257>8\366\254=\214\370\316>\003|\267\274\032k?=.\255F\276\032\213\226\276\017\271\231<\252\364\023\274\314\356!@\3019#\276l\262\346\276\301\250\024?9\271\377\276\207\207\220=\300\354\336=\\ a\276\257%\364?\311\345\257>\035Z$\276\277\232c>R\362\312\275BC\217>\354.\320\274\034_\033\276,\232\216\275\327\335|\276\212\260\261>\237Y\302\276;\215\304>?tA>\315u\372>\200+Y>\216\256\322<\267]\270>\204\330\271>+\207\006\277V\237\013\276\340\020\252\276\032\300\333\276C\377\204>\352[\006?\372\320E\276~5\007>n\300\'>Y5\210=\204\236\315=\372D\376\276w\204C\277\270@\262\276\342;\021>\237Y\322=3\341W=*RA>\243@?>\2510\226\276\202\034\204\276\326\346\237\275\330\323\316\275\342\006\034?\330F<=z\245\234>\224\3367>\256\022\014>~\310\273=<\242\002\275:\351\375=\236)t>q8\023>\002e\263>E\360?>\\w3>\344,\314\276\300=O\274\2379\313\275\222\\~\276\304\231\317\276\017\356\016>\336Y\033>\252e\233>\267\227\364=\0010\026?\317\3673>-\t\320\275[\010\022\276}\221\020\276E\330\020\276xb\366>K\037\272\275Y\027\207\276A\267\027\276\364\246\"\276\334\327!\276\270\344\210\276\203\335(?eQ\330<\255\300\320\275\310$\223>+\301b=6\037\227\276M\241s\276\261\277\014>\363\035|<\2034\263\276\307*e=\267\321\320\277\016\020\234\276\311X\355<\201C(\276\227\250\236>\022\024\377=\262K4>U\373\264\276\356_Y>\r96\275\351eT>\322\340\266\275^\363*=\244\3744\277\340J\366=\331\010\264\276Xr\225=a\216\256>\350\366\242\276\022\367\370\276\251\331\323\276C\3475>\344,\014>\366\315\242:\211\322\026\277\331|\\>\031\312\231\276{\277\321<PSK\274\342\036\373>\313\201\236=\001\030o>z\215\r\277\366E\222\276 \322\237\276\352%\306=\357\346I\2760\273\267\276\221a\205\276D\334\234\275\367\001\250>H3\226>_\014\225\276\233\376\014?\231*\250>_{\036\277\366]\t?\230\335s>6\310d>\247;\017\275\227Vc>j\207\257\276X\220\306\275\223o\026\276x\177\034>\345\233m>HP\334>\326\213\241\276\251\237w>\262\200)?5$\256>\251\237\367=\005\206\214=\260r\350\275\327L^>,\232n>P\0010\276\324\324b\277\344\332\240\276\031\364o;\354\206\355\275\361)`>|,\255>x\227\333>\215(\215=\003w\240=\355\360\327\275:u\225\276W\tv\276\274\005R>\326\250\007>\234\244y\275\340\241(=\306\026\"\276S\005c\276\206U\274\276\207\3712\276I\021\031\276\215z\230>\3265Z\275[\3234\277\035\346\253\276\233\376\014\276\232\231Y\276\211\266#=rP\302\276/\300\236>\200Fi<\370\215o>\033d\302>\366\014\301\275<\203\346>\037K\177>\370\214D\2757\375\331\276\346\\j>;S\350\275=\325a>\273\361\356\274\3122\004>\306P\216>\026\373+\276j\274\364>;\3111\273\216\036\377\275\327\022\362=p\355\304\275\276\3017\276\223@\336;\266-\252>\3642J>h\350\037>\304%\227>Ih+>\367XZ>\210\327\205\276\354\243\203>+4\220=\355\266+>O@s>2\252\214\275\230\0234\274\2717\277=\031\347o>\037\272\340=Z*\017>\306\337\226=C\220c>\0221\305\275\313--\276\336\001^=\345\270\023>E\365\306>\213T\330\2757\340[\277\025o\344<\034E\266\275\245I\021?\3063\270>\021r\276=^\021\034?\036\371\243\276\345\362\017\277\275\214\342=\351}+\277U0\n>$B\303\275\276\237:\276\002\331\313=!Y\320\276\352\354\004\277\237\216G\276\346t\031\276\021\252\304\276\244SW\276c\234\357\276\263A\346=\236\352\260\276\232\353\204\276\003\354\263\276\322\373f>\306\304\366>\332 \003\277u\002\032>\354\361\347\272\312\246|>?\221\367\276:@\300\276\200e\r?6<5\277\220I\246>\212YO>\371f[\276\347\030\320\275q\3142=)\006H=\270\001O?\261\304#\276M\370\345=G\351R\275=\n\207>\271\210\257>\025\033\263\275\331\261\021\277`\352G>\304\353\"?\351\326\253=_a\201=\361\327\364\276GZJ?Y\213o\277N\014\311=\334dT=\325\312d\276\303\365\370?\202\034\364\276t^\243\276\262\364\261>R,\307\276\2447\274=J\265\337>\205%\336\2755cy?S\005\203>\210.\350\276\373\\\275\276(\010\303;\017\356\216\276$\321\313>M\020\245>Q\024H>\212\253\212\276\234\373\253<\346\"\216\276\002\267.>{1\204\276-\225w\276T\251\t?\035=\236\276\006\273a>L\032#\276\245\275\t\277\353\377\214>KV\245=-`\202>\365\234\304\276\254\312^>@M\355\276\275\214\302\275\356\224\256\275O\317;<Jb\t\275\352>\240>\376\016\205\276\016\276P\276\245\024\364>B!\302\276\210h\364>\025\343\034\276\017\013\225>y\005\302\275#J\233>\016\276\240\276\370\245\236>\376++?t\014\330>\03630\277\232w\334=d;\027\277\3645\213\275/\335\304>\264\310\026\276\027\324\227\276L\252\266\274\325\224\244=)\256\312>\326\305%\277p\353.>2U0>\267(\243\276\302iA>\266\326\007\277\213\375\205>\324\232\006\276d\314\235\276m\377\312>\226\317\202>\006\203\213=\275o\234\275\265O\307\276\350i@=cz:\277\337\032@?\005\335>\276n\027\032=\326\377\211>\225\016\306>L\373f=\207\304\025\277\177g;=\254\305\007>D\372m>SY\271:*\343\237\276\271\210o>]\247\221\276i\306\022\277Ttd=8\363\273\276o\237\025\275 c\356\277\037\277\247\276\3539\351=/\027\201\276Kv\004?\376&\364\276D\027\344\276}]\306\275\340\276\316=\033\r\220>\205\317\226=\345\n/\276\025Wu>\n\277\224\276d\314}>m\342\224>\324ea?\233\347H=\316\337L\277>y8>\320\320\037\2765F\033?v\032I\276r\376\006>\002\274\005>\326\213\031?\375\244\272>.\004\331>>\263$\276\223o\366>b1\212\275\240\033\032\274\222\263\200\276\201\260\323<\3745\311>\277}%?R\323.=.\342[>\203\335 \277\254\227\025;\355\273\222\276\213\032,>\346t\031\276\344,\234>\006\021\251=\1771\273\275E\241\245=\200\016s>Yi\022?:X\277\276z7\226<\2549\240\276\350\023Y\276R\362\272\276/\206\022>\213\340\357>&\036\320\274\266\204\374=\363\002,\276+MJ>Mg\267>\177\210\255\275\353\305\360\276\210\021\242\276\274\005r\276\222\"2>\371\203\321\2766\037\347\276\376}\246\275\266-j>\202V\000?\367u\340=$\321K>{f9?\260\346`>\3554\010\274\245I1?\232\262S\275\324\265v\274u\216\341>`<\243\276\325\347\252\276\321\"\253>\206r\262>=}\244\275\201x\035\277\310\227\260=\033\237\311\274\000\214g\276\rTF\277\301\2553\277\373\\m>_$\344\276\371.\205\275\364\373>=\245\377\033<Y\027\347\276\322\342\254=\346\351\\=\004\312\306>\023f:>\305X\306=\345a\001>\266\020\004\276\226\262\034\277\335{\210>D\213\014\276\327\300\266>jM\263>\r\216\362>\303\323;\277B`\325\276\006\273\241\275\204\330\331>\032\243\245>\243XN>\217\250\020=\231*\010?R~r\276_\357>>9\227\322>+\331\221\276u\253\247=\324\324\242\276G\003\350\276\275\214b\276\341@\000?\3328\362>-[+\276-C\204?\025\307\301=\247@&=^.B\276\237[(\275\330-B\275\003\262\347\276\004\377{>\362\3573\276S\313\346\276Ho\270<+\025\224\275\332U\210\276\237<,>\242((\277-\354I\2760\360|>\'i~\275t\321\220\275\232\352\t=\324C\244>\024\313\025?\223\030\024\277\254\305\347\275\320\263)\277E\022\255>5c\261>\262..\276\216\222\207\276\234\247\032>\310\230\003\277\263\357*\276\034B5\276M\370E\276\202\255\222>\307c\266\276Q\2755\277\021\001\'\276\273\233g>\227\002\322;\237YB\277=I\352>Nb\020?\356\316z>^*\266<\372D~>^K\230\276\341\266\226=\337R\216=\326\305\275>o\330\326\276.7\275\273\315u\232>H\277=\277`\002\207\276\354\022\325\276b\203\305\275\353\213\004\276\264\216J>&\337\014>\014W\207<77f>tA\255>\010\260\310<\264v{\276\305\0339?\231\273v>M\276\331>333\276Di\017\276_)\313\276\002\232h>\357\220b\275d\006*>\307\327^\276\023\362\021@\364\025,\277\311qG>\221\267\034=&\0360>A\232\361=\0265\230\274\354\022\205\276\366\227\325?\\\346\204\276\262\205\000\276j\276\312\274M.F<\025\000\003\276$(\236\276\214\025u=\261\304\003=|\233\236\276u\216\201\276\210e\263\275\301V\211>\344\331\305\275,\274k>\341]\016>\212\223\213\276\362\265\017?\020\003\335<\253x\303>l\\?=\374\211\312<\230n\242\276\303\202{<8iZ\275;\035\310<b\241v>\016\276\240\276\007\357\253\275\"O\222\276\243\036b\276\371f\313\276l\354r\276\264\216\272>\200cO\275\372\227d=\233=\020\276L\340\246>\006*\003\276\350\023y\276\232\223\227<\333\205\306>\353\377,\277\375O~\274\333\340D=\255i\276\276\000R\333=\263\n\273=\300\3502\275\007\353\257\276-\231\343\274\246D\222>\355J\213\275\230n\022>\220\202\'\275\336\253v>\227s\251\2765\265\334>p\266\271>\361H\274<\376}F\276\366\227\315>\350\275\261\275\244\374\244\276pz\267\275\030\022\346:\210F\027>\2445\006=:\316\215\275\201?<\275`\037\235\276j\244\025?\307\177A\275\300xf\276\363vD\276\314\177h\276R\270\036>LP\203=0\3653\275\355\360\207>\372\320\005>\236\316\025<\321\350\216>\010\003O\276![\226=\375\301@<\031\255\343\275\222\"\022>\357\311\263\277\024?\006>\001/s=Nz\337\276\215\177\007?0G\277\276\244S\247\276\322\251K\276\263\007\212\276+h\332<X\305{\276\203n/>u\223\210\276c\271\245\276[`\217<tA\275\276\001\244\206\276\264\260\007\276\207\371\362>YO\255\274ADj\275{\330K=\312\342>\2751z\216\275\243;\010\276\202p\305=\222\226\n>\313\326z>\373\350\224>\014\3155>6\310\004>>y\230\276\342\260t=V\361f\276\362\265\007>\370\302|\277\331\314\241\275\357\003\320=@\030\030>\335{\270>\241\202\303=\333\370\223\274\244\031\253>\302\300;\277\377#\263=\325P4\273\211\352M>\356\010g>\305\221\007=)\320g\276W\225\255\276\331\231\">`\2204\275\253>\327\275\016\202\216\275\222\221s\276cb\303>\307\027e:\004\034\002>nL\277\276\037\200\024>\277\272*=32\310<\356_\271=p|\275\276\352\354\344\275\t\212\177>5&\304\272L\245\237\275\026\030r>\262\205\340=\031V)?\324\016\377=\235K\361\275\r\340\355\275\201\260S\275[\0102\276\023D=\276\245\273\353\274\341\013\203\276L\335\025\275\3647\241\276b\025\257\275\272/\207\275\242E6\276\177\207\002>\"T)>O\314:=\275\305\303<\257\261K>\313\333\001?\363\254$\274\355d\240>\321\003\237\275nQ\036?\322Q\216\275;\031|\276\221\233!\276c\227\010\276<\0250\275\314z\261<\217\250\320\274n\335\355>\255\212\360<\352\312g>\201[\027\276\267\013\235\2760*)\276\242\264W\276k\232w>\241\363Z>\335\007\200\276\352\312\007\276YnI\2768HH\275\203i\210>\3771\276;\312\341S\275Y\243\036\276\331\263\207\275\301\324\005\274\201C\010>\334\274\361\274X\3122>\254\220\362\274ms\243\276p\261b>\214\241\214>M\241\013?\226&\005>F@\005\275\226x\220\276\265S\363\274\307H6=\375\301\000>\345{\206=\271\374\007\276x\234\302>\231\3616=\361h\203>\330\324y\275\034B5>n{\314\273\373?\227\276\026\373K=\331\261Q\276/4\327\275X9\224\276\316T\210\273\027\331.\276u\002\332>\376H\261\276\376e\367\275y\222t>Lq\325=\236\230\325\276\237\345\211>\002\324\264>U\301\350\275\033\273\244>\017\177\375\276\257\231|\276\337\025\321>q\254\223?\350\331\274>\245\275\201>\'f=\274t\322{>\007y}\275\263\250\031\274\353\001s\275Q\367\001>\374\212\225=\201\225\203>\004\034\362>X\250\365\275\231\324P=q\216\272\275\237\260\004>)\"\003\276/\213\t\277\344,\014>\3230\374=\313\363\220>\222\227\225\275\275\251\250\275|D\274>\207\247w>\304\231_\276\232\266\317>\235h7>\317I\277\276\201[\227>\314E\234\275\367\216\272=\310`E\274;\374\305>\306\371;?0\366\276\275\235.\013?\227\344\000\275\340\326\215\276=_s\275\366(\314>\n\364\331>K\315\336=\023\364\227\275\327\022\362>\213\340\277\276\032\372\207\276n4 \276\025t[>}?\r@d]\034>\314\321\343=\312\375\006?=\017.>\233\003d>2\003U>bH\216=\341\227\232\276Hm\342\275\316\246\243=\3269&\277G\000\227\2757O\005\277\226\225\006\276.\377!>]\213\026\275\317\312,\273\233U?>\266\021\317\274\004\312f\276=I\032?,\360U\275\324\202\327=<f\360>?\035\377>\374o\265>\313\370W\276\216\222\027>\327L\216\276\310\007\335\276\0049(\277\2029z>t\230/>\337N\242<x\'\237\274;\304?\275\315sD\275\023DE\277\356\316\332\276\373?\037?\3204\027\274\001\260\360\272\277C\261=i5\034?\262K\344>\"\340p>\347\373\251>0\273\'\276\360lO\275\210\327\365>i\306\342\275~5\227\276\3578\r?\001\244\246>\352\262\030>6\253\236\276\033\2018\277GZ\252>\252HE>\'\367\333\276!Y\360>\024 /:\252\237u\272\231\365\302\275\3024,>\023\270\035\277\340\333\204>\333\304)\276\270\222e?\333m\307>\372\'\230\276\231\273\306\276\343l:\275\275\000{>\357\341\302\276\373y\023>\333\371\376\275q\033\355\276B\t;?\003\t\272\276*\377\332\274_\357\356>KY&\277M2J\277\346\313K>\033L\023?\372~\352=X9\264\277\320\263\t?\232\316\316\275\243X^?\273a\033>\360\334[\276\225}\327=VHy\275\022\210w>\247\"\005?\323jh\276\352\225\n\277\211\352\235\2765\232\034=\303\240L=0\236I?w\020\013\277T\374\277=r\304\252\2769\355\211\275\"\246\024?\250\306\233>O\036\226\276;\252\272\276g~\365\275\321\005\025\276\247\263\323>>\226\036\276\207\376\211>]\212\333\276`v\247\277\000\000\010?d]\374>\001\373\010\276\274W\275\276#\333\261\277\340\324\254;C\305\030?\2137\322\276\006\236\273\276\237<\214\276\020X\331\276\351}\223>\350\334\255\275VH\021\277r\212\376\276\026\207\243\276\227s\t\276\240T\233>\315X\204\276Z/\006\276\213k\274=\t8\034?4H\301\273\205\261\245\276\261\340>=\305r\313>\212vU>5c\201>;6\222\276C\345\237=28\272>S\3136\276\004\034B>P\376\356\274I\200\332\276\376C\032>\324\016\237\276kH\334\276z\031\225\276\364\320\210\273W[\261\275\306\371\253\276\347\035\207\276\025-\n;\334\204;\275\363T\307\276_\007n>\331Z/\277\247\256\\\276O@\243>\211\352\275>\366(t?\025\035\231\276\341\264\340=\267E9>\351\270Z=\037\2777\276\307\021\233>\331Z_\276\300\315\202=\233r\205\276\373:\020\276\227\305\204\276\000\221>=\002H\275\276\004\3474\277Z\360b>\236\007\027\277\240\303\274>\346\005x\276\3539)\277/Q]>\373\313.\276\236\352\240>\321\315\236=t\322;>\372\'\350\276\247y\007\276\177\023\312>xZ#<\017\177\335\276\277}\235>\214J\352\275\202r\333<>\263d\277\226\262\354>\370\301\231=\371\203\261\276 *\215:A\267\347\276\2068\326\275\254\220\202\276\337\025\301>L\340\306>;\307@\276\335\014\367\275\372)N\275U\030\333=\231d\014\277=\017n=\322\306\321=\254\340w\275\372~\332\276\277\267\311\276\3544\"?\254V\006>\006\330/\277\021\031\326\275\177M\266\276\203\243\224\276Z\330\223>\010Z!\276\025W\225\275&\374\322>a\304\276\274\2446\361=0\330\r\277\022\302\343=\257%D\276\371I\365\275\265T&\277\335$\266>v\3036\275\253 \006=\027\361\335=\246\nF>\000R\253\276\264\002\013\277K\345-\275\375\274\251=~\343k\276\235\327X\277\3171\030?h\256\323\275\234m\356=\007B\342>\035Z\344>h\"L>\205%~\276\006\2015>\002a\'\274B\225:>H\026\360\275\354\335\177>\231d\344>\210\205\332\275\272\275\344>\026\325\307;\322o\257>\206Z\323\275\\8\010\277\251\027|=\023\2705\275\010\254<\276\316\210\232\277N\356w>f\203\014\276\003\t\312\276&\375\275:\345\270S>n\335-?\'\332\365\276\334c\251\276\323\301J?*\000\346\276\233\311w>\344\367&?x\177\254\276\304\261\356>\357\311\303>MJ)\277\342\222\343\274\274y\332>\343\307\310>\003}\">\237\002\340>W\t6>\234\247\002\277\222\221\023\276\034\316|\276\230\340\264=\351\267\337?K\310G>8\370B;\234\026\374>\327\372\242>\254\213\033>\366E\002=\265T\336\274\352\262 \277\024\"@\276\232w|>3\341\007\277\274\226\260\276\363\253\211\2763P\311\276I.?>\270\314i\276}\"\017>K\315\216>RI\035\276\300\256\206\275 \014\374>a\211\227>\324\324r\276\361h#?=\270\023?|,]>xE\020\276\367\344\221>f\024\213\276\026\207\323\276?W\253\276\205\266\274>\371\275\235>\306\3345>\215\264\204>k`\233>Pq\234\275\037\205\203\277s\235\366\276\212\216\024?\373\350\024>^\272I>\331%*>\300!4>\347\343\352>I\2051>\355\360/?Y\213/\2763\212\305>\376\361\006?sh\361\276\246cN\275X\377\327>\206Z\003?N\264\273>w\326n\276R\'\240\276\270\222]>\307\235\022?\024\350S\276\271\374\347>\3647A\276\217\344\362=\006\236\333\276S?\357\275\353\342^\277\022\2107>\335\322\312\276\022\203\220?\341z\024?\363T\327\276\022\245\335\276\347o\202\276\375\020\033\275\273\233\207\276\250\343Q>\271\225\024\274\337m^<`\352\017?\n\200\241\276[|\312\276\375\244\352>\032n\010\277\375\3317\277\241\020a>\321\"\373>vn\032\275\200\267\240\277\306\304&?\305\376\362=\\ \211?k`\013>\307/|\275X\250\265\276\033*F<\377\261\220<\365\234\344>\203Q\371\276\307h}\276\010\311\322\276\312Q\000=\335[\261\275\370\215\357>\364\303\270\276|&\273=\310\357\235\276\307\360X<\236\352\240>%\351\002?\016\241*>;\250D\275\321W\320=\036\334}>U%\333\273\352>@=\001j*>p_\017\277<1s\277\244\307\017?_\322\330>\"\375\026>M\326h>\224\207\335\277\362A\317=W`0?j\335\306\275\222\221\303\276\251\023\340\276\316\337,\277\372\n\322>\336\216\020>\327\027\t\277Q\024\350=x\356\255\276\035\224p>\225\237\244>*\000\366\276\270\257\003\276\005i\006?\244\307\007?\020\0022\275\303\r\310\276)\"C\276\222\221\023>b\236\265=\264<\277>\311\260\272\276\333\334\030\276F|\227>-\t0\276\277`\027>,\267\364=J\354\232=`\310j>F\357\264\275\010U\312\276\014\310\016\277P\307c\276\223\214\034>T:\270\276\371\202\226\274\270\001\257\276\206\311\204\276\333P\301\276\352\262x>?\2217\277\373\\\335\276\023\325\023?6Y\243>\001\030\257>h\226\204\276\016J8>\004\255\320>\334\203\220<!\007%\276\212[\205\275\366\264\303\276S\226\341=vq\253\276\220\367j>|\325\372\276b\020\330=\200}4\276\231\330,\277\321\"\373>0\273\307\276c(\227>\373y3\276\260\376\377\276\021\031V>d#\220>\266\333\016>\375\364\237<\360\026H\276,\274\313\276\005\305\007\277\212\345\266>\301\250\304=_{\306\276\310\t\023=\342\222\303\276\363<x>\252\232p\277\322\251\313>\361\275\177=Gr\351\2763\250\266=Nb\240\276S\350\024\277\0015\225\276T\342\272<$\227\337>x\264q\276tA\375={\203\017\276\022\302\003\276X\305\253\276\305\217\361=\242zk>\026\301?\276\353\220\273\276\003\357$\275\275\2510?Mg\267>u\223\240\277\273\270\335\276\372\325<\276,\237\005\276\037\016\262=\336\345\342\276ioP\276\256d\007>\236<\321\273\351|\370\274\352x\334\276P\031\037>\237VQ\274\221,`>\3711\006\277\241J\r?\236\265;\276M\363.>i\214v>\320~\304>\'\024\032\277g\325\267\276uu\307<\244\245r>>\313\323\276o\365L\277\320\2700>_{\246\276\310\007\035>J)\350=l\225\260>7\246G>\006/\332\276\275\344?=\334\200o>(\'\022?\267zn\276\264Y\225>\2176\376>P\374\230\276)\"\203>\210\364\233\276\257\231\354>\341z\364>\300\004\216\276\316\302\356>\024\263\336\275\037\277\027>t)n\277mr8=\370k\262\276<\275\322\276\230QL\276\3019\343>\037\235\352>8g\244\277\201\230\304\275#g\321>>\350\331>\211\352]?\\\003{?\305\253\254</\243\330\276j\274\324>Nz\237\276\252`\344\276\366\321i>\031V\t\277\230\335\213?JFN\2762we?\033\273\204=\006\330\327\276\037\2777\277\037\021\023?\316\031!@\362\225\000=\275\345*=\026\207\223>\377\313\265<a7\014\277\3322\005\274\033d\202\276t\357\321>\314\321\343>M\025\274\276o\273\030\277\320\322\225<p\224t\277\303}d\274\034\231\327>\201\354\305\276\217\213\212\275\336\310|>S\324\364\2724.\334>\343\374%?\315\036\000\277i\344\263=\310Bt\275\325\t\000?`\345\320=\362}q=\016\333\326\275\310\352\026\276\302L[<G\311\353\276V~\031=<\2752\276\2657\230\276\267\013m\276\377\225\225>\206\033\240\276\2034\343=<\367\316>}?e?\341\227\352>y\005b=\343\215,>\3377f?*\253)=\362\265\'>\005\027\313\276\226C\373\276\3647A>L\340\326=\032\3021\275\357U\373\276\006G)?y@9\276\336\223\037?C\347\265\276\260\251\223\275y\222\344\276\344\017\266>&\344\263\276\034\\:\275\262cC>R\327\272=\3438\220\275c\271\005\276\370\3740\277\3328b?\3122,\277\215\013\367>(~\034?q\312\234\275\261\340>\275\233\311\267\276W\225\375>M\241\263\276G \336<\353\254V=\320a~\276\234\026\034>\323\207\236\276\336\310\034>\206U\034>q\217\345\2750\201\333\276\212\223\233>\025W\325>Z\360\002?=\n\037\300%\226\224<\246D\222>\027\016d>\035r\323>\226Y\304\275[\266\246>o\236\252>\003x3?\302\243\r>D4\272\276Y4\025\277\307.Q>\342\002P=\212\310(?\246\362\226\275\264qd\277^\333[\274?W\033\276\3019\263>L\032\003\276\002.\010=\032\372\'>\200\231\257=\306\026\002\276\342\222#\275\342\344\036?\345\263<\276\270\351\317=\352\225r>z\344\'\277\210\272\377>k`\353>\177\244(\276\017b\007>\007%\334>\343\210\265>\273\'O\276\333P1\276D\372\355\276H3\246>\t\210\211=8-8\276\307c\006>I\235\200;C\220[\277P\031\'\2771\266p\276\327\372\"?\037\235z>\376\267\022\276\264\037)\276\237\260,\277D\2065\276(\325\036\277r\313\375:\320\325\266>\261\334*?\255i\236>\226\t\217>\353\250*\277U\301\370>i\0355>\252`\264>\271Py=\006L`\276%zy\276\355\266\233>\365\022\243=\311<\302>V~Y=*R\241>\r\253\030>\250\214\277\275\003[\325\276$\177\360\275\375\023\034\276\030&\023\276\314\226\254;GUS>\207\207\220\275\327\372\202>tA\375=j\206\264=\236\230U\276\310\356\202<\260\217\316>\005\250\351\276\003\tR?\311Y \277\321W\320=\222\\~\276\350\244g\277\304\316,\277\253\tb>\250\343\201\276\003\354\223>\037\021\003?\272N\203\276\"q\217>\360\334[\276k\237\256=x\234\222\276\222\263\240\276\036P\306\276\017\270\256\274\274?\356>w-\031\277l\354\202\276\220N\335>*:R>\222\313\237\276\376\232$?\177\336\324>\216!\200<\215\234E\276\244\210L>N~\013\273l!\020\277/\206r>\227\3770\277\022\210\367>\262\362K\275\263$\030?p|\355>\0261l;\223:1\277\351\363\321<W!e\274\310\315\030\277\377\354\347>\030&\033?\t\304\353\275l\004\"\275\363\037B\277\270\257\203?m\305>=\245k\006>\352\354\264>\242B\365\274\217m\271\275\366\n\213<\234m\336>\016\204\004>\262\200I\275\230\243\007\277\331\261\221\276Ic\024>\030>\222>\004\347\274\276*\214\315\276\366_\347\274P\344I>5{\340=\247\2216>jM3>\331\316\227\276\276\300\254\275\336\310\374\275c\227h\276\314\264\355>\266\204|>w\241\001\2776\315\263?\302/\245\276V\200\357\274\n.6>\224j\037\276~\341\225<)x\312=\"4\242=\266/\300=T\000\014?V\202\205\276C\370\274;\256\022\234>b\204\020\276\331\261\201>I\364\262>\005iF>\027\272\222\274\203\263\245:\025W\225\2764\277\252\276~\000\262\2760\022R\277\254;\026=f\240\262\276\253\347\324>~\0358\276\021\252\344\276y;B>w\367\240=<\367\256\276x\264\221=qZ8?\005i\036?\361\235@?\3711\006\276\nu\"<\252\201\306=\220\366\277\274_$t\275\375\301@\2761B\210>\356\224\316>\302\335Y\276_Ab?c\360p=.VT\276/i\214\276\243#\t?\216\006\020@\253>\027\276\357\003\320=Q\275\245>L\032#\276:ue\2761@\242<\306\026\">\032Q\332\275|\'F>F\261\034\277\275\343\204\276\031\220}>\262c+\277\252\267F>\320a\036?O]9\276\217\342\274=Z\022\300>\373:0>]o\273=\215(\335>\253\"\034=\031\220\375\276N\321\221=\210.\030?\032\300;?\277Hh\276T\343\205>\276jE>\211\322^\276+\030\025\276+5\033\276\201\224\030\275\344,\014\276=\362\'\276RD\246>\371I\365\275\'hS\275\030>\n?\342;\021?\305 \300>\334\327\341>TR\'>Zdc?\317\203\333>\235\366\264=\244\215\203\276\2071i<\\w\263>\226\347A\276\271\307\322\275UO\346\274\301so?\223R\320\275N\227\325>A\237\310\276\317\240\001>>\"\346\275\245\240\233>\311v\316\276\242b\274>*t\036=\316\302>\276\341\356\234\276Ic\244\276l\317D\277\277\267!?\202s\326\276\210\330 =U\030;?\316\364\267;%\3144\274\336T\304\2768\276\366>\262\235\337\276X\250\345\276\336\345\262>QkZ\276\271\210??uW\366\274` \250=\367\344\361>\214Jj\276\262+m=\274\350\253<\000WR\2769\227:?\343\245\013\300\3606o\275\270;\013\276\321t\206>\030\225|?WC\002\276\253!\241\276\320\362<>\036\371C>\216\314\303>\321?\261\276\016\370\\\276|\233\036>%\257.>\331\316\227>*\214\355\275\374\214K\277\203/\234\276\362\007\003\277l\262\366>DQ\240>\311<2>\273\355\302>~5\247>\r\251\"\275\217\252\346=<\203&?\254\220\362=\356%\275\2766\223\357=\016\363\205\276A\361\343>\261\247\275>\200\361\314>\232\231\211>\266\020\004>\313\363\000\276\345~g\276\024\320\004\277\376&\364\276\2147\215\272\327\242\205\274\035 8\276n\206\233>e\375\346\274\223W\367\276s\235\006\277\026j\255\276\342\257)?\374\035*\276\036P\026\2772\254\342\275\250\000\210\276\330d\335>\240\246v\276\356%\275>\231\2360>\221\270\367>\250:\004>N\264\353\2753\341\'\277\267](?\362\007\243>\020XY>\205\0100?\345\'\245>\343\031\264\276\236\n8\274H\334C\276\270\006\226=X\377\347\275\300[\000\276\247\005o>P\001p>n\371\310\275\315\036\210>r\0266>\207\277\326\276\0317\265<9(\321>\026\366\364\275F\010\317>A\202\302>\016ND\275h\005\326>\023\325\233>\201\354\005?\241\2049>\350M\035?`<\323\276n\206[>\265\303\177\276\234\212,\277\033\201 \277\315;\216\275\2510N\277\323\331I<\377\004\007?\rlU>\276\262\034\274\363\216C\277JAW\276\201&2\277\020;\023\277\311\223,\277\305\033\031>B`\225>G\000\267<\014\352;\276\031\220\215>7\211\241>\376&\224\276\351\016:?\032n\240\275Q1\216>q;t=\005SM=\347\035\267>\350\274\016\277AHV\276\303+I\275`v\237>\335\315\223\276\350M%>vT\245>\rUq=\201&\222\276h\226\244\276\346\346\273=\245\024\244\2761\320\265=\\\003\003?\325x)>#\330x=c\356\372\276RDn?[\266\026\276R_V=\306\205\263>Z\r\231\276\374\373\314\275\001\207p>\327Q\265>\211\007\224\274\022\367X\276\317\332M\276k}1>\372\263\177\276\277+\n?s\361\267\275sh\261\276\321@\254<\366+x;!;o=\323MB>\270@\022?6\310\204\276\005QW\276yW=\275\006*\343=,\201\264=7\032\000?_\t\304=\300[\230?\375\2074\276\001\301\314\276\376+\233\276\355I \275s\274\242=\233\217+\276=\017N>\"\252p=zS\321>\323\237\275\276\261NU=\230\303.\275\252`l\2772U\325\272\252\016i?\r\030\244\275{\203\317>\311\216\215>U\244\362\276y;B\275\022\302\363\276k\232\027\276\276\023\023\276\035\003\222\275 \265\t>\364\211<\276}\315\262\275b\241\206?;\307\000>(\'\032=\"\340\320\275\362\014:\276\254\034\352>\272\275\344>d\351c\276\373:\300\276\343k/>&\307\335\276Y\027\027\276\000\305\310\274\210c\215?Sv\372\274\000W\262>\027\331\236\276CV\227>\206\254\356>\320\nl\276KWp=\032Q\022@\026\303\225=\201x]\276p|\r\277\032\300;>\037\200\304\276$\320`\275aT\202>e\374[\276\247\\\321>GW\211=U\244\222>5\265\354\275\207\250\242=-\262\035>\t\3767>\351\263(;\256\310\371\273\013)_\276\350\300r=s\235\006\276\205w\251\276\233Z\226\276\312\025\036\276\341\321\246=\014=b\275\032\255\376\273cz\002>:\255\273=\217\031\350\276\032\027\236>\224\3671=T\0352>\354\300\031>\036\371\363>3\341W>F\366\367;i\213\313=]\026\203>\"lx\275\200\016\323\276@j\003\277\351\257\374\273wJ\'>nQf=(\016\240\274h\226\264>\256\326\251\275\214J\212>_\263\334\274*\214\255>\010U*\276\261\340\236\275\207\214\307<\274t\223>\036\371c>\2138\235=t\230\257\276\304\010\341\276\203\206\256\276\207\334l\276\215\321\032\2767OU\276\332\346F\275\335^\342\2762\346\016>\375\022\221\275h\",>\277\202\304\276\374\343%\277\010\346@?\026\366\304\276\323\301Z\276q\033\235>*\343\377>{\024n>\265\340\225>\335\265D>s\021\317\276\211\0074>\017\3579=\030x\016>\262\200\271>N\'\031=\334)]\275\n\271\322\274;4\214={I\003>\340\276\336\277\035\217Y\276Y\300\004\275O\225/=\240\340\">\035_\326;@\207y\276\034|A>\325xI>\214\025\365\276\320\357\273\275M\242\276\275\273a\013?ni\r?{f)>\n\327\203\275\371\367\031\276\210\274%=\341\270\254=\361\235\210\276ZI+=\331\224\013\276qr\277\276\336<\325=N$9:\312O\n\276O]\031\276\224j\037>I\201\305=\322\030\355=\200e\005>\177\336T>p\266\371\276Y\337\300\275\352h\013<\327/p\277uv2>\357\033\237>\213Oa\276D\243;\276\241\200m\274C\311d=\363\002\354\2754\021\006?\201\t\374\276\370\374\020\276\347o\">l\004\202>\203L\222>B[\316=\024\256\'\276Q\245\346\276\220\210\231\276\356_\031\276\227\305\264\2763\247\013\276\316R\262=\223\306(\276q=J>-\226\202=\256G!\276\033\330\352=\3127\233\276\260=s\276\316\210\022\276\271\302;\276\210\271\244;c\357\245\275\220f\014>]\277\340\275\030\317\200\276m;-\275\272f\322\276\0216|>\255\372<\276\006\365\215\276\315\3512\274l\350\306\275\356\264u\275\277H\000\277M\025\274\276@\366\032\276\025\306\226<L\216\373\2762\003\025>-\225\207\276epT\276\0054\201\276N\356W>\306\372\306=\027\021\305\274\363T\267\276 A\361=\335\315\243\276\345\355\270>xE\220\276\231\236\010\277\000o\301>(\017\253\275\025\251\220\276c(\347>[_\244\2752Z\007=\206\311\324=\243X\316>\rq$\27782\237>b\370\210>v7\277\276\034\360\211\276\034B\325=\021\307z\276\020;\323=\377\004\327\275\360\374\242<\267E9\276\253x\203>2\003\225\276\310\357M>\252e\013>\013\322\274\276\234\371u>k\232\367<\310\352\266>\332\254\232>\236{\317\275\241-\347=\325\0041\276\327\372\">0\201\213\276\3377\376\276\336\223\327\276D\213\354=\231d\204>\3578\345>oG\370\275{\275\213>\222\350\345\275\314D\221\274\241\242j=\010=\033>\300\\\213\275\005\213\363\276\277`w></\265\275\337\025A>\367\344!\276\245N\320\276\246\325\020>\353V\017\277\n\272\255>\346\313\213>\253\352%\275\363Y>>VH\331>b\2040>-\262\335\276\372~*\276\262\017\262\275\307H\366<\257\224\005?;\252\252\276A\327\276\274\362$\031?W>+>a\305\251<\337\246\357>\263\014\341\276r\211\243<f\275x\276?\2547=\350N\260<\2346\303\275\240\211\360=rPB>r\243H<@js>\262F\375\275\307\327\276\275\246\362\226>\201\313\243=\025\035I>\326\213\001>\310\230\333>\225\267\003>h\005\006>e\215\232>\363\223\352\275\200H\357>\254\250\001\276U\207|>\027\331\256>\366@\273\2767\214\242=\341@H>:;Y\276\250\033\210\275C\342\036>\3372/\277x\177\274>\303\202;=Uw\033<#\276\003\277\226\370\222\272\342X\003@V\237\373\2763\376\375\276\267\325,\274S\")>)\226{\276\225\202\216>}ya?\226\262\334?h\"\354\275\376\016%\276\252}\252>\205\357}=\r\211\033>\251j\202>9\013\233>w\370\233\276\n\242\236>.\347\022>\355\273\"\276R\233\030>\301nx>\035\003\362\275\014Y\335\275\271\306\307=}\313\334\275P\374\310\276\244\252\211\276\211\0074\276>\355\360\275\017E\301>\000\251\275\276\304w\002\276\252C.>pwv>rP\222\276UM\220=j\366@\276\177\373\252\276W\350\243=\030\262z>\233r\345>RI=\276\311v\216>\177\023\252=\351}\263>\255i\316\276\352\262\250>\224M\331\276\020@*?K\253a>4\242\344>p\266\211\276\300z\234\275\324CD?N\234\334>\244\215\343=\327\027\211>\025\251\320\276:\314G\277\177K@\275H\277}\276Qf\003>\304\353\232\275[\261\237>\266J\360\276\204F\220\275Z\365\231\276`\223\325>\204d\301>tA]>\230\372\211>\022\240\326>\354\023@\275\232B\207>\275o\214\276E/\223>\263^4\277\377[y?\220\203\322=\371\024`\276\334FC\276\343\030\t=\200~_<\276\336\035\276\3476\201=\014\007\"\276\265O\227>\333\334\350>_\230\014\276\'1\010\277w\241\311\276\365\241k>\325>\335\276\023ac>\017\362\372\274\304\261\256\277\246b\303\275\013\014\331\276\320\326\201=\360m\232\276\336v\001>\233 \352\275\261\333\014\274hy\376\276\267\321\000>T\036\275\275\234\242C>\017\271\351>\200\232B?Q\275U>\323\206\303\275\205w\t?\226\t\037\276\301\213\016\277\030\262\n\277\312\211V\276\320~\004>\003C\306>\"\032\035>\222y\244>\331we>\257_\300\276{1\324>W\317\351\276\242\226\213\273\251\366\231>\343\374\315\276[\316e\275\334\017x=xz\005>W&D\277\341@\010\277mV\r?\255\372\334\275\250\000\250\276\222\221S\276?\000i\276\212v\025\2768\025i> \264\236=\232\t\006\275j\207\257>\273\n\231\276\311v~\276\323\336 >Y\335\n\276\254VF\276\263\323\217<\026\336E>\005n\255>9\227\002\276\351\324U\276\014<\027>\224\372\262\275`X\376<HP\\\276\024y\022>\323h2\275\206;W=K\345m\276\017\227\004?\017\356N>m\250\030\277\013{\312\276\006\365\355=\027\232K\276\265\246\371\276+\207\226=\246\017=>\364\025\304>\325>\025?\301\220\245\276M\370%\276\312\303\202\277}\256\226\276\352>@>\346\256%>\037K\037>\346\313K>;\344&\276Q1N>\355+\217\274\250\214\277>\262\364a\276\032\243U>W\317\t\276\t\304\353=\000\215\022\275\345D\233>\251M\234>\037/\304\275\203\372\246\276\204\3309>\3538\236=\004\377\233\275u\037`>\325\t\010>\352\347\315=\1770\300>\263^\014=\313\003\"<y=\230=#\370\'?\245\203u>\371\017\t>\000\256\324>\343\374\r\276%\351Z\276)\320\007\276\016-\022>\377w\244=F\353\310\275)?i>[\323\234>y\036\374>\225`\261=\265T\336\275RI\235=\003`<\276\243\314\266\276\257_\340>\364O\360\275?W{>GZ\252\276\375\366u>\243;(>\023f\n?Q\301\301\275!\310\261>?\344\255<1|L?\356w\000\277*\221\024?P\033\265=i\266\341;\2446\261\276&\031\271>\276\022\210\275\0049(\276I\235\000\275\303\365\010\276\t3\r>\005\206\214\276,}\250\276\342\222\343\274\275\214\242\276)\005\235>t\322\373=>\263\264>t\264*\275\323O8=\214\024\252\275~\343\013>28\n\276\350\333\302\275>\"&\276\r\032z>\252\344\255;w\276G?/1V=\303\202{\274q\003\276>1_\336>\347\030\320\276$\326B>gGj\275\r\211\373\275\325\t(\276\312\375\236>\215cd\275\246\233\304\274\212<)>\315\351r>%]\303>\022\277\242=%#\037?\301W\364<\233\257\022\275Sy\213\276\216@\274\275Q\275\325\276x\013$>\201\005\220=T\343\245>\251j\362\276+M*\276Q\240\217\276o*\n\277\345\233\355=\217\252\036?\275o|\276*o\207\276\337\025\301\274sh\221\276\233\350\223=\273\n\251>f\240r\276WCB\276\314\264\255\276M\204m?~5\247>|~8>+\331\361=>\223}=Z*O>\234R\236=\306\242I>\2343\302?\032\300{>+j\260\275\'\210\272\276\373\260\336:\330\273\377\275Y\213\237>\3578\225\2762\216\261\275O\352K\275\360m\032\276|\270\244\276\211\007\\\277\334\350\255\273\003[\225\276\323\336\200>\260\217N\276O\347\252\275\005\250)\276g\362\315>\270\314\351>Hm\">f\275P?\342\222\263\276\325\262\265=5{\000>\224\373}>\204\324\215\275LTO\276ca\010;\265\246\031\276<\332\310>*\340\236<\202V\000>N\321\321\275\000\306\263\276\0222\260=\367;\244>d;\337\276vl\304=@\207\021\277\225\202.>\177/\205;\325\317\333\275\267Ey\276\364\025$>\337l\023?\026\301\377=\274\263\206\276c\177\031\2769b\275\276\265O\347\276V\324\010\277\231\360\313\276\307\364D>Z\201!\276RH2\275\000\251M\276q\005T\275-\231\303\275/n;?\2068\266>JD\270=\322:*\275\217\252\346\275*W\330\276b\204P>A\361\323\276\234m\036\277\204\360\310\276?o*?y\351\366\276\336\253\326\275\274i\351;\366@\253>\325[c>\205%.?\344\237\271=I\364\362=\230\300\315>UM\020\276\016\276\360\276z\375\t=\273D\265\276B\350\200=m\347{>Pp\021>L7\211<RI\001\300q \004\277\351\016\202\276pC\214=\025W5\276\255\372\004?\261\210a\275\277+\302>\307\235R\276\353\250\232\276j\244\225\276\301\221\233\272\341]\356>\210\272\317\275\375\2373?R\362j>\260 \235>^\272\271>\226&\225\276\302\205\274\274=\233\365>5{ > zR=\312\212\201=\326\034`>\310\263K\275\256\273\031\276\270@\202<\343O\324\274\354Q\210\276\335\352y>-\260\307:\237\315J\276\332\346\346>\375\237\003\276: \t=Zhg\275\275\033\253=\003\225Q\276\002\021b\275;\3029\277\320_h\275MJ!\276\315\257.?\242\356\323\276x\234\">\213l\'>\351}\203\276\340-0\276\370\252\025\276V\361\006\276\272\367 \277\322\375\234\275{\021-=%\"|\275r\304\272\275\2407\345\276\300\317\020?\366\177\316\275\010\003\217\276\244\245\362=oc\263\275\206\254\376\276\003}\">\371I\365\275ga\337>G\003x\276\236)t\276]\371\214\276\344\203>\276\271\301\020=-x\241\276K\037\372\276@\366\312\276\\w\243>\303\r\250>\273a\333\275&\374\362>\315;\256\276\262\325\245\275\r7\200\276=~\317>(\321R\275\0358\347=\2716\324=T:\000?\354\372\325>=,4>\330\365\353>G\003\030>N\013\336\275\221au>\362\322e?<\333#\274\237\037\306\2765@\251=\372D>\276\226&\345>sc\232>\376\324x>\245\275\221>V}\356\275\340\271w\276\001\023\030?\272,f>~\214\311\276\264\312L\275~62=\\r\334\276M\204M\276\344\024\275>\371\275m>\311q\'>\212\315G\276\317\203\313\276\274\003\274\275\245I)>\370k2>\213\303\231\276\261\207\266=\273\362\231\276.\305\325=v\303\346\276\352\312\307\276\000\035&>>\313\363>\235K\261\276T\306\337>\320_\350<\17700>\305\311\255\276\240\375\250>\206\311\224\276\243uT\276)\263\241\276}?\205>\320a\036\276\332\003\r>\327\335\234>S\256p\2768\370\002\276T\000\314>\230\243\307<\337\032\030\276\235F\272>w\242\244=~\213N=8\025\231\276\2611\257\275\'\302\306>\031VA\277\000\000\010?\272\332*>s\021\337=\2343b>\033L\003>o\rL\276\"rz\274$\177P>s\235\016\277`9\202=\274\005\242>\267\227\204\276\242\356\323>\334\327A=\332r\006?}?U>E\236d>\364l\026>\000f\010<\344\205\364\274 )\342\2757q\362=pw\026\276\212u\252=\003\373\371\272K\223\362>\321?\301>\366\013\306\2769\264\310>S\350\\>!\345\307\276&\036\220\276\006cD\275*\251\323=^\2353\277\257BJ=#-\025\276\322\034\231=\330\201\203>\271\302;\276X\250\265=\0319S\277\020\257\213>\233rE?2q+\274\272\203\310>uY\254\276\332\311X\277\257\010\036>\376\233\227\274\003`\\\276\222\221\003\277\000\227\266;N\3211@\261P;\277\0362%=\177\373\372=\027\361]\276\034\3527=[\261\177\276\277HH>\022\245\255?\310\322G\2765\n\211=\003\t\312>\371f{>\327\372\262\276#g\241\275\347\214\010>`\352g>#\024\273\275\342\332\032<\233\313\215=%#\247\276\254\220\242>\200\363\202\275\315\352\275=|,%?\344\300\213\275\020\351\307>\027d\253\275\245O\253\275\376\232L>(I\027\276>\\\202>[\353K>W\004\217>\252\016y\276$b\312=\t\247\245\276\346\313+>TR\227\276\244\031\273>\204\022\006>\232\261\350=\344H\307\275\3577\272\275sK\213>\235\271\307\275p\010\305\276\301\253%=%\006\201\276\304_\263>\205B\014\277\007|\336>\002+\307\276\002\014K=#\370\027?_^\200>k\016P\2768.\203=wJ\'>R\355\223\276\336\310|=\237\223\376\276\315s\304<\246\r\247=\311v\036\276D\2502\276\031\347\357\274D\250\202>\341\227\212\276o/\211\275\272\367p>Z\365y>\321\005\365=\270\036e\276\010\217v\276\007\263\311\275V\232T\276\021\031F\277&\3742?.\0049=\242_[\275\260\003\347\275Fa\027\275\366\356\277\276\211\265x\276\333P\021>\242\376\304\273F\354\223\274\262\327\353\276\"\252p\274\366#\325>\320*3=\276\336\375=\215E\223\276B\317\306>\006*\203\276s\235n\277z\307\031?E\360\277>]\304\227\276C\230\221\273\007\232\217\275m\255\017>\033\362\317\274\364\303\330>\203i8\276&s\007\273\313\020W?`YI>\024\005\"?\336\345\242>\2451\232>c\356:>\274\226\020?\270Xq\276\306\375\307\275\227\377\220>s\021\337>~6\262\275\277\016\354\276h\314d=c%f\274\331_\366<\213T\330=m\312\205\276\341\264\000\276*\306\371\275\301\305\n\277\323\207\016\276\014\262e=\027\274H\276\037h\225\276\230\372\371\276\270s!\2759\232c\275-\262=\276\343\026\223=\312\246\274\275\027\331N>\2338\211>\342\257\311\276h\313\371=_$\204\276Bxt=\n\327\223\276\320\355\345=$(\276>\334\235\005\277\023\233O>\366\264c>O\220X\275\326V\354\276To\r>M\333_\276n\336\230\275g\362\275\276\366@\353\275p\231S<\340\326\335\275,\274\253>\005\027\213\276\356wh\276<k\027\276\212\315\027\277\366\013\026\276U\373\024\276x\321\307\276\036m\034\276\026\336\265>\336\002)\276\267\177\025?\342XW?\377!=\275\304\353Z>3\334(\277CV/\277\313-\235>\341\270\214\275t \220\273\324\233\261\275a\032\006>\355\177\200\274\325\004\021\276\t8\244>\240\025\210>NEJ\276s\021\177\276\353n\026?J\357\233>E\201>>\377\317!>D\335\'>\360\304,\276:;\271\275\232\227C;\n/\301\274\363\002\354>\314z\021>\367\036\356\275\277\271\177\275\0324\364=\327L6\277\240\245\253\275:\222\013>a\032\306>\355\201\036?\206=\355=F\323\331>\013\014\371\276\342\351\205\276\000\215R\274\027\202\314\276T5\001>\331\316w>\267z.?\355\231\305\275\033\330\372\276\202\342\'\276r\027\201=S\263\347\276;\215T\276\325\317\233>/Q\035\276I\327\274\276\2343\222\276\346\350\021\276X\305{\276`\352\267\276\234\334\257\276\252\364S\275\332s\271=\245,#>\215\013\007\276\316\252\017?\235c\260>5\321\307\275\265\246\t\277,\274+>\301\255\373\276\025\214J\276\343\374\235>\237\345Y><\027\246\275\314C\206=L\032\303\276\232_->p\266\371\276\251\023\020\276\300\t\345>\306\247@\2767\251h\275\364l\006?\363\253Y?\317k\014\276\342\006\\>!\007\225>=\233\r\277\025\341\246=L\377\262\275O\351\020?\006\016\310=\005\371\331\273pB!\276*\000&>\302i!>*\306y\276\001P\305\274\350\244W\276<\026\033\275jjq?\363\002\014\276\241\204!\277\344\203^>\257w_>8\025I?\270\3448\276A\232Q>\373ug=}\350\262>\002Hm>\272\275\344=\312\375v\277v\033\024\275\270wM=J\230\231>C\220c\276K\315\016\277\335E\230<\344\022\307=\251\203<<\r\032\252>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000s\200\340\276Ae\334>\205\266\374>\344f\250\276\025\035)\276\202\305Y\277\302QB?\020\257\013?\r\375\323\275\3274\033@\376+\003\277\321\350\316=\274 b=Xs\300>!vF?\010\224\255>\274\226\320=\227\305\344>\376\326\316\274\223:\031?~Un=\315u\332\275\270\257\303>\252\362=\275cE\215<\223\337\"=\303\273\334=\355-\305\275\335\2324=\367\344\221>\207\2477>~\220\345<<\025\360\274\341(\271\276\201>\021>\364\246\222\276o\r\214>N+\305=\230i\003?`Y)\276\212\253*\276*\214->\026j\255=t\007Q>?XF\275C\220C\275= \032<\321\315~\274`\253\224\276(Iw>7T\014?T\000\254\275V\237+\276\226\370\355\273r\335\264\275\307\327\036\276\230\372y>\010r\220\276!<Z>6\302\354;)\\\317\276}\\[\276\226\2256?\005\250\271>!\223L\276\247\"\245\276\232w\314>Z\022`\276@\366\032\2762\037\260\275\023\233\007?\027\232\353=82\257>^h\016?\2279%\277u;;=o\235?\275\342#\002>\305\217\361\275:\351\315>\275\377\217<\376*\200\275Q\275u\276c\270:\275\212\253j>ToM>\275\343\204\277\367\036\356>\234n\331\274\203]A\272\024yr\276X\2505>\035 \030\276\300\004\216\276a\340Y\276\243\001|\276gF\177\275\310\3150>\026\336\225>{f\021?\363TG>\324\202\247\276HO\021\275\227s\211\275ni\025\276\"qg\277+\023\216>\242\013\n>i\205\016\274\332\037h=\n\021\340>1\316?\277\262F\215>c+\210=\230\027\340\276g\325\007\276z\252\223>\223\247\254=\376\016\305>\262I>\275u\310\315\275\256\274\244=\266-\212>\217\307\234\276\361\200\262\276\034\010\331>\213O)?\363T\'>\207\333\241<\272\240\276>.\342[\276\304|y\2769\177\013?t\230\017\277\350\331\354=,+\035\277\365\333\247\276\355\326\262=5^b?\027ev\276\316\252\207\277\004;\276\275\214\241|>]\371\274\276\t\341\241>\201\004\205\276K\352\324>\261\026\237>}X/=\363<\020?\027\324\267\276\233po=D\372\335>\271\375\262=K\345M>\264\002#\276\211\232\310\275\213lg>?5\336\275\t\212\037\276\316\210\362\276\377w\304<\243;\010\276\274\\\\\277\016\370\234\276\260\376\217\276\345\324N\274<\2752\276F\t\272\275\334\200\017>\252\232 >f\203\234>r\212\016\275\253&(\276p_\007\276\006\022\204\276\200\267@\276$\013x\276T\3765<5\3570?\322\214\245\275duk\275\0216\374\275\025\306\226>\332\342\232\275@\331\024\276\006G)\276\254\220R>c\271E>`Z\224\275\325x\251>\004\255@\276A+\360>\227\250^<\222\350\245>\373W\326=\257w\037\276\302/\205\276\030\262\312>@\373\321>wg\235>Q\332\333\275od\256>\352!\372>\237\310\223\276o*\022>\027\327\270\275\002H\275>\311\037\214>\316\374\372\276\377\347 \277D\206\325>\223\306\350=s\226#\274\352!Z\276y\257b?\327L\256\276\001\302\247\275\376e\207\276\"\216\365>\224\023\235>A\324=\276}?\205>\340J\036\277\354/;>|\233>=`vO>\324+\345=W[\201>H\3044>\361hC>\233\254q>\314\356\t\276\220\365T\273q\217\005\276h\2563>\343\336|\274\260\346\000>\360<\247;e\245\351\276\210i_=\001\023\030\276=\3277\275O;\214>\206\220s<8\363\333\276=\2010\274\371hq=\"\375\266\276\266\370t>\306Pn\276B`\345\275\276\244I\277\312\032\325\276\017\200x=\367\307;=(c\234\275\246\361\213=\215c\204\275C\220\223\276\031\377\006?t\230\357=\317\203\333\276\007\266J>\264Y\365;\025o\344=\222\222\036=*\274\025<\210c\355>\261i\245\274\233;\272\275\273\270\r\275\301\304\237=\033d2\276t\322[>\'\244\265<\200\267\200=cz\"\276\251\207\210\276\376\016\205>\033G\334\276\355\330\230\276\331\353\335\276\021\307\212>\3539\t>3\371\326\276\362\265\247\275\027+\352=-\t\220>\361\021\021\277\352\004\304\276^.\002\276,-#\275\000\251\315\276\241\276e\276\001\301|>z\265\022\274\252`\304\276\256d\367>\003\317\355>\2760\211\276q!\257=F\343\032;\367\351\000\277o\365\234\274\305\376\362\276\207\277\206>m\220\t?q\0379=\027H\000@\221_\344;\330\364\300=2w\255=[_\344=\343S\010?*t\216>{\023\243=\0260\031?s\200\240\276q d>\335$\226\276\305\033\031>\232\010{>\017%\377\272~:~\276\230\372\211>\374\377\270\275f\024K\276\221,\000>-\314\302=x\177\254>\236$\335=\266\363]\276\206U\214\276h?2\276/\213\371\276\301X\237\275:\257Q>\340\271w>\306\303{\275\332\254\372\276D\300A\276\357r\021?\315\222@>\201\\b\275\030\262\272\275G ^>\345\263\374\275\341\321\006\276\327\027i>/6\255\274\271Xn:\247t\020\276D\212A\275:\222k\276\377\225\025;\205\2316\276N\321\221\275\027\022\013<\303*\276>B[\316\275\235F\332\276\350\023\331>\262\021\270>\207\212q\276@j\323=\334c\001?\246\230\303\275V\267\372=1\230\277\275\320D\230>\302\300\223>\222\0054?\346t9?\241\271\336\276>\256\r>\222\"r>\322\342L\275\225\202\356=\020@\332>5Fk<\0363(\277\367\307\373=\365\201\244\275\276j\325>\362\230\201>|\355\001\277\275\214\032?\274\\\304\275vTU>\033G\354\275\025S)=:Y\252\275\305\376\322>\305 \260>\377x\237\276{\240\325=\301s\017\276\02658>\212\037c>3\212e=\203\366*\275\201\005p=h\005&\276\342\344\216\276\373\\\315\277\333\242\374>\354\335\037\276\306\242I>1\266\000?\007\266\"?&\036X\277\026\301\027?Z*\317>\265\032\002\277\354Q\023\274\313\326\022?\363\216s\276\343k\337>\346\222\252=z9l\275\034\261\206\276i:\213>\367u\300\276k+\366\276\331_\266>,\237\r?s\235\206>\274?\236\276d<\252=\325\225\337\276:\010\272=\003\317\335>1\2243\2773\026\375\276\276\336E\2772\217\014\277Z\200\226=\300\004N?\273\354\027\275\263A\006\277\301\034\255\276\215*\243\275\013A\336\276\221\355<>\003C\226\276\025\221\t?;\337\377>\270\3448>\235c\020?\234\336E=\005\243\322\276\341\013\023?U\333\r=\346\005\250>\271\3072>\357\003p\276o\236\032?\346\256E>\344N\211\276\034\266\035\277\3172\346;\2402^\276d\314%\277\331\224\353\275\357UK\276|\266N=\213\303Y>(CU=\212r)=\363\223\312\275c\r\227\275\247\\!\276\016\370\374\275\210H\255\275\317L\220\275\315\035\235=\353n^=q\217\205\276\237\002\000?\213T\250>\250\033\210\275O\225o\274\322:j>)\263!\276Nb0>3\341\267>W=\340<Di\217=\327\373\215=\030x.?:\314W\276\r\211{?!\007E>\0010\036>J$\241\276y\005b=&\036\320\275\354\372\305>\313\242\220=Q\367\321>\217\215\010\277-`\262>.\035\263=Q\203\231\276\320\263y>k\232W\276t\007Q\276\260r\250>\0221\205\2763\334\010\277\220\024\221\276\016\241*\276;6\222>\265\032R\275\226\t\037>\377\320L\275p=\257;\227\342\372\276\036\371C>\273\017\240>\304\2253\275\361\0211>\225e(\276\247\313\202>\340JV\276\353\220\333\275PT\266\274\325x\251\276\252\361\322\275m\375\264=\255n\225\276b\025\357=F%5\276\222\350\345\274\2175\303\275\372~\352\275\246\355?\276\336!E=\275\373\343\275\371\240\007>z\307\251\276n\372S\276;p\276>\222z\217\275\273\'\377\276y\221I\275\257\231\214>\362\007\203\276\004\034Z?\272f\022\276\350\024\344<6\315\023\277\301n\030\276y=\230\274\013c\013>\235c\240\276#-\345>\347R\034=\352\354\204>0d\025?\350\331,\276\272f\n\277\007@\034\275\n\332d\275\302\333\203=T\035R>o*\202>W\004\007?\270\254\242=&\340\027\275\256e\222\275\202s\006>\221\320\326\275r\026v>\370\302D\276\204\r\217\276\257\336r\273\352\317\276\276\367!/=\257%D\277\205\261\305\276/i\254>)\320\207>\345a\221>=\017\356\275\2755\300\276%#\'=\327\022R>\247\225\202\275\355\266{\277o+\235=\234\247\232\276\3230\234\276\005\213\323\276\246\362\226>\322\252V=2Z\007\277\\\346\344>tA\235>\237\310S\276\037\2777>\307h\255>1\231j\276\367\344\001\276\346\350\241>\236^\231>7\340\363>\377!]>?W\023@R\n\212\276T\035\"\277$\177\220>\370p\371>\273D\365=\374\251\221>\025R^>\2201\007@cz\242\276lx\212\276\244\337~\276c\234_>\345\325\211\276u\307\302\275F_\001\2768\333\234\276\350\301\r?\316\302\236>R~\"?T;C\275\256\266\002>\331\354\310\274k\232\307>\371\367\t\277jj\271=K\0024>l&\007?\2721\215\276O#M\276\370n3=S\"I>\005\206\024\277\244\213\r=h\260\211\275\376\271\250=a7,=t\357\221\276\205\231\246\276\331\231\242\276*\035\014>\3436:\276\305=\226<z\3378>\247y7?S\\u>V\016\355\275v\303\366\275\252\236\214=w-\301>\317\275\007>M2\222>\314\227\307>q\3467\277\033\201\250>\246\320\371=\257%\264\276v2\250\276\302Q\022>\240OD\276^\021\\>\'\024b>n\026o\275\361\327$>\252c\225<\207\243\253\274\245\203u\2762\254b=!\352\006\277vT\035\277\264v\333\275`\027\017;\220\204}\275\374\035\212\276\024\2623\275\330-\242\275\263AF\276\325\354\t\277\361\200*?H\304\264\276\376\232\254\276\033L+\277uY$?\254\034*\277\001F\037\272\301V\021?\341E\'?\003}\222\276\226\354\250\276sH\252\275\234m.\276S?\317>\361\364\312\275\211\'\273\275\221\320\266\276\344\332\220>\244p\365\277\026\243n\275\231*\030\276=\230\224\275XV\212>~\304\257\2755^\372\275`v\217\276\3647A>\350\273\333<@z\324;5)\345\276\211\322N?\023D\275\276\205Bd\276\365\363\346>\364l\206\276~\214\t\277\374\214\253\276\304w\002>\247t\300\276\231\327\221\275\024\354?\274\344\332\320=\316\210\222\276\272\t\010<q=\212\275\342u\215>;\304\277\275g\233\233>\177MV>\340\363c>y\351\346\276\325!\307>1\232\225=\362\007\003>\221\233\241\276\311\260\n\275\331\316\027>\226>\224\276Z\365\331\276\216u\261=~\343\273\276\305rS?Tt\024\277\325\004\021?\020z\266=I\200\252\276y\351\226?\326s\222\275\rT\246\276\010rP\276W\004\'\277\256\326\311=\234\370\352<\206\306\223\274ZG\025\276c\356\032>\n\327\303>_F\241>\252+\037\276\373\\\315\2767q\322>W\262\363>\002\330\200\274\363\345E>5F\333>\003\t\022\277\232\373\365;\034\360\251>\307.!\277l\t!\277\017\0135>\026\030\022>\326\360\343\273\335[Q\275\013\014\031\275J\230\t\276\025\311\327<6r\275=\375\366\025\276\025\031\235\275\351Cw\276\260\346\300\276\270\036e>e\374{\276zp\367\276\371N\214\276/\250\237>\006,9\273\305\033\251\276*\306\371\275*\304\243\274\252C>\277\201\262\311>\223r\227\275e\374\213\276\3019\223>\213l\247>g\233\333\276\362\352<>\000\002\326\2743\033\224>c\320\251\275\314b\362\276\2137\222\276j\302\266=\344\3320>\242\227\221\276sc\232>_\322\020\277\217\031\210>[_\344=\222\"\242>\373:\200>Uh`=\214\271\273>4K\002\2767\303->\322R\031>\003[e>E\273*\276\235FR?\013F\r?u\037\000\276\357\254}\276\206\003\241>y;\002>\020x\200\275\265T\036\276+\023~\276\232\353T\276b\366\262\274Tt\204>VH\031\276\277\361\r?\"6\030=o\273\320\275\327\372B>P\307#\276o\330\266:&\374\242\276\304\013\242<\215]b>2\217\274\276_^\200\276\222\256\231>\257%\204>\237U\246=\312\246\254>=\270\033\277\363\216\203>6\037\327=X\312\302>j\302\226\275\351}\343\275\273\233\307\276\302\027\366>\255L\270=\355\330H\276_{\346\275\216#\346\276\235\364\256\276\361\327\034?\377x\357\275\356w\330\276E*\354\276\342\314\257=\247\005W\277\225H\002\277\022N\013>\000W\242>\366]\301\276\233=\030\277\325&\356>\026\023\023?\376\324\230>\014<\247>\261\242\226\276fI0\277T\035\362>\002G\242=W\314\010=\320\356\260=S\221J\276\3578\305\276\323M\202\275\224\275\305\275\365\276q>F~}\272\232w\234>3PY>h?\022>\257\224\325>\256\326\211=\335{\210\276Kv\014\276J$q>\364\303\210\276\247 \277=Z\3303>\306\212\252\276\277CQ\277\373\313\006?\226C\313?\321\006\240=\021\250\276\275U\030\213\276\244\307\237\276\313J\263\276\214K\225=\306\031\003=D\213 @\030\354\266\276\327N\224\274j\244\205>n\243\241\276\352\347\355\276U\373\364<\274t\023?\330*\261\276\007\316\031\276\010rp\276\3225S>\355d\220>.\2200\277;\2154\276u\260\316>\233=\320>\372\320\005>\372\265u\275\004V\256\276\260 \355>\326\220X\276d\312\007=\\\003\273>\210\326J=\302\336\304\275\321]\262\275\000\256\004\276\351+h>\025\035\001\277\271\337\001\277d\314\215>,\267\024>1\231\352\275F\010\017\276\362^\305>\020\222\205>cE\335\276+\366\347\276\2072\224=\025\251\010\277\036\304n>2r\326=\215E\003?\200\237q\275U\331w=B!b>\350\207!?\372a\004\275\224M\271\276`Y\351>\372\317\032=\314\264]>\254V\346>\301V\251\276\336\253\246>$b\232\276R\017Q\276k+\026\276\210.(>\204\360\010>$\321+\276KY\226?Nz\337\275\337\375Q\276\244\344\305>3\371\266\276lB\332\274sh1>G\003\230\276\256\236+?M2B?\3274\357\275\376}\006\276\014v\303>V}\356\276\264\035\323<M\357\007<\260r8\277\352!\372>\212\310\020>\020z\226\276\304\231\177>\244\374\264\276;5\227<B\225\n?M\204\315=y\262\233\275\313\020\257\277zT<=\037K\037>\303\323\253>\210\200#>\016\370\214>7T\274>\365\363&>\262c\343\275$(\316\276\rUq\275\236$]\276\230\243G>\014[s=\331\224\233>\013{\212>\252\233\213<\324H\313>0\330\r\276\355\273\002>3\212\325>\246ax>\227\342j?\257\353\347>!\345\017?A\361\013?\270\344\230>\277\324/\276\307\272x>\212\037#\275\223\214\274\276\351&1\276<\275\202>\010V\225\275\341\014\236=\320\263\211\277$\356q\275\260\003\'>u\253\'\276\263%\253=`\345\260>#\367\224\275\"l\210\276C\034\313\276z\307\t\276\252\267\206>\211\007T\276\345D;>@M\355=\361\327\344\275\225\016\026>\003A\300=c(\007>\326\255\216>^K(\277\376}\006>\242\321\335\275{\275\373>K\217f\2755^\252\276Y\243\036\276g\322&\275J~\204={\026\004\275[_\034?\245I\021\277Y\243\036>*\251\223>t\\\255\275\240T;>\343\2522><\275\262\276Lq\325\275\356\224F\277\201\t\234>\245e\304\275\266\204\254\276/\335$>\324`\032\276\273\325\023>\324\267\214>\200`\316= \357\245>$(^>f\275\010\277\272\275d\276\226\t\337\2760d\245\276\354\372\025?wgm\276tF\224\274\367\257L>\354\243\263\276\207\341\243\275,\237E>D2\304=U\207\214>\200`\336>\262\203\312\2759\177\023>\360\277U\276\210\237\177<\022\274\301=4\200\367>\221\r$<\241\370\021\276\321\221\024\277\022N\233\276\302\371T=j\331\032\276\034\266\275\276b\025\277\276\256\267\r\275\357 ~\277\276M\037\276|,\375=`\037=\276:\314\227\276\267\266p<\316\030\206\275\246\'\014\276\372\'\310>m\255\017?\263\230\330>:\314W\276\260\003\247\276`\036\222\2750\360\214>\217p:\276\321\350\336\276\010Z!>\361F\206>a\375\277\276S\256\360\2764\0216>KY&?\337\375\021>2\003\025>\274\"\370\275[\323\374\2755\007(\277\260=s\276\255\333`=\007\353\257\276\\\033\212>\037.\231>2=\221\276$\0138>?\221\347>\367\307\353>U\023\004\277\342\351\205\276\256E\253=\202\254\207\275#\241\r>@\366\022?\021\031\016?$\t\202=,\232\276\276\215\356\360\276M\025\334\276\274\350#\277v\251\221=\251\301\\?9\271_=\263{\022\277\21372\276\017^\273\274t\322\233\276\225+<\276\"8\216=%\314\204\276\202sf>9\177\323\276\372\263g\277\372\355K>jM\363\276\233 J>\263\357\212>fNW\276B`\035\277\373w\275\275z\213G=DLi\276-\317\033\277\250oI\277\376++\276(D\300>\362\007\023?\312\371b=]\334f\276\251M\234>\036P\266>=\017\356\276\267z\016>\304%\007\276\037\277\267\276f\024\373>\263^\374\276\262\327\313\276U\331\327\276io\260\276!\007m\277H\305\237=\226\262\204\277\325\262u\276\314]\313\276\375;\221\273\264<\377\276\367;l?\213T\010\277[\261\337>q=\222\277r\277C>\203\0275\277\357\311\033?\223K\010<\005i\006>7q\302\276\335\322\312\276}\"o\276\234j-=\220f\234\276+5[\276\243\005h=%\257\006?\304\231\337=\362\352\034>\220\275\006?\201\t\274>W!%>\201>q\277^c\'?\352\312\367>\326\220\350>6\223\237>*\251s\277\241\241\037>`\003\242<\202\305\321\276\357\003\020\276\230L\205>V\202\325\276Q\333\206\275#2\234>\346t\031\276\341\177K\276\251\331c\276\234\371\025>\003\354\343\275V\274\221\276\325\350\325\274\205_j\276{\024\016>\232%\t?3\334\240>gD\211>\n\272\275>\310\315\260>S\005\243>\022\272\360\272\213\340\217>\032\372\247\276\301\305\232>?R\204>\232\261\330>\032\335\t\277\205\316\313\275k\272\036=\356\261\364\276\213\375U\277\366EB?*\251\243>I\364\022\277\250\000\230=\222\"*\277\270\351\337\276\263\352;?\006\273\001\277M\333\317\276\352x\334>\0217\307\275GUs>\215\267\265=\310\007}>\247\"M?\265\214\024=\313-m\276\275\373\243>\373W\306\276\306\341\274>\2304\006>P\344\231>\214J*>\320\263\021\277\177\373\312\276^\205\304>\377\tN?\224\366F>\006L\240\2751\010\304\277\302iA\276*\000N?\024\"0\277\372a\304\275\330\273\037>\204\022F>%@-\277\016\363M?\036\247\210\277E*\354>\216\001\271\275~R%\277\210F\327>w\2419\277\257\316\221\276\263\265\026\277\277\232\343>y\257\n\277\364\211\004\277\204\r\217?\371f;>>\350\231?\321\221\214\276c\303\211\273\373?\'\276\325\317\313>\014\261z=\036\341,?\240\246\036\277\221\325\335\276\235\245\340\270\036\334}\277\212\216d>w\204\023\276\"T\371>!\007\265>6\225E\275\017\326\037\276u\260\376=uU =\3225s>\016\020d\277\3333+\276\315\006\231>\211\230\n?\257%\234\2778g\224>|\355\331=\002\324\024\276\332\033\224?P\215\267=\341\225\304\275\311>\010\275\374\035J\276z\340\303=\367\222\366>\0363\340\276\325\347*?\244\215#\276c\356\232>\205\231v\275H\247\016>\237\037\306\275e\336*\274r\332\370:*\221\224>\375j\026?\346W\013?*:\222>(\266B=\375\244\312\276\2613e\276\335\357\260\276\315\314\334>{I\003\276\320\'b\2776\357\023\274\326\034\220\276\324\361X\276\277`\027>t$\247>\216\352\224=>\\R>\005Q7>\020\006\276>\320\233\n\276\314\013\340\276\2755\260\276o\201\344>\326\377\t\277\002\237G?\232\316\336>\020]p>Lq%\277\252\267\206\274s\363M\275\021\001g\276:\257Q>\215\227&\277+\244\214\276\271\245\035\277\037\200T\275\231~\211=\216\351\231>\275Rv>\331\3167\276\223\0005\275:\006\344=A\267\327\2752ZO\277\340\333\034\277\270\257;\277\261m1>\351&\221\276x\2649\277\220\367\352\275fI\030?wJG>\024\256\307>F]\353<\335\357P\277\246\325\340\276\247\263{\277D\0274>\022\245=>\336\253\206\276\2722\210=\302i\001\277PSs\277YQ\003>N\013v\277M\025L\276\277e\026?\033\3650\277q\311)?\025\035\t\277W\010\213=\244p-\2777\303M>\267(\023?Bz\212\275\374\373\004\277\273\320\034>\213\375\205>-\316\030\275\302/u>xzE>\262\364\221>3\026\215>\014\002\233\277&\036\220\276\237q\031?\271p(?\016\276\360=+\244\234\276\364\025\324>\337\303\205\276\202\034\264\276\3122l\277\217\252&>\032Q\372\276\033dr>I.g\277\211\265x<\322\000\006\277\270#|>\207\371\242>\353V\317=[\323<\276\202s\206>\230k\221\275w\243\257=\021\036]?f\203\334\276Z\201\031\2777\375\001\277&6\257\276\261\371\230\2761\353\245\276[|\212\276\213T\020\277\205\010\370\275\0324\304\276?\221\007\276\020\257\213>\247\\\021\277\343p\246\276\327\027\231>\377Y\263=T\033\\\275/\243x\276\200e=?\365\333\027>a\032\346>\021\337i\276\370\302\224\276\327\300\016?\033\330*\276\335\010\213\274D\303\242=\205\266\234\276N\271\362\276\231\360\023?\323M\252?\242\227\361>\317\024\212\276\313\327\245=3\244\312\275\363v\014\277\025t[>X\305[\276r\371\367?\205_\372\276\251\275H=\246\nF>\270\3448\276\271\210O\276A\327\236=$\271\334>\332\311\010\2776\352\361\276\341\177K\276\307\200\014>A\237\210>\307):\2775\322\222\276|,\235>u\315\004?\017\271\311>\243\222\252>~\000r\276R~*?\346\225\213\275_\014\225>Z/\226\276g,Z>2uW=rm\210>\231G\376=\377\003,\274jM\223\276\004\312\306\276\331\224\213>e\001S>\342\222\203\276\252\232 \276\260\254\204>mY~=8\202\264\275\372a,\277\215zh\2763\376\355\276<\332X>\232w\234>\2068\006?\t8\304\276\301\305J>{\371\235<rm\270>,\262%\272K\253\241\276 {\335>\316\302^\276`\310*>\214\271#?\3063\210\276\343S\000?\026jm\276i\214\226>u\310\r\276q\003\336>.\377a>M-\333=;\001\235?\322\030-\275\025\310\254\275\000R[>j\370\026\275\372\010|\274\341^\271\275\254\250\261\276\035U5?y#K?\352\350\230\275?oj\276a\211\267>\005i\266\276\255\302&=\245N >\303\201p\276\310\265A?\246D\022\276\230Ql\276\213\207\267=I.\237\276l\035A;\035\346#?n\030\005\275r\376\246\274\246\n\346\277\030x.\276\206\346\272\275\r\340\255>\263AF>\n\205\370>\0011\251=\270\257c>jM\363\276m9\267\276\026M\327\276\322RY\276w\327\031=\204\021\373<\031\312\231>\033*\006>u<\266>\\\311\336>\351\232\351\276iR\252>qZ\360=\247\263\323>VHQ?\034\266\025?rP\342>\206\217(?\025W\365>\211\2302>\207\340\230\275\003&\200\276p\353n\276C\377\004>6\260\205>\020@\352=\321\\/?\321\\/\277\216\351\t\276\025\035\351>J\230)\276\312\303\002>v\375\322>\021\303\256=\332UH\276\244\031\233\276RG\247=\245\332\'?\313\271\304\276\3436\022?\263^\234>\231-Y=g\355\366=\201 \300\275U\024\257<\364OP>\026j\335\276j.\334;O;|>\326\250\027?7\027\237=\037\364\374\276\2240S\275 `\255<\365\234\364\274\313-m\2765F#?\217pZ\276tF\004?6\223/>\036S\367<u<\366>jM\203>R,\027\276oI\016=\253\004\033\277n\335M>\261\304#>nLo\276\245kf>it\'\276>?L>(\325\336>\230\300\005?\2343\342=\370p)>A}k\276\207\371\262>\024?\206\276\232\316\336\276\244\337\356>\301n\250\276L\246\232\276;@\013<\307)\022\277\211$\372\275E/\303>\347\373\311=\310\245\340\273\256\3307?\036\371\203\276\375\237\203>\307\200\214\276\321X{=\235F\212\276\3058\377>\331@:<x\357(<\322\343g\277\375\274\251\276!\343\366:\233\346\035\276lx\n\277\\\217\"\276\237\223>\276\207\026\231\277R\357)=\3024\334>\004VN>&\036\260\276{\274\220\274\nf\254\275+0\224\276\366\264\223>q=\372>\037h\245>Y\334\177\275\245k\226\276_F1\2761\261\031>\253\225\231\276\240\305R=>Z\234=\270\222\335>\341\0133\276r\334\251\276w\025\322>\363\002\274>&q\326<\305=\206>Pp\201\276z\035q=\362^\025\277\374\214\313\276`\310\312\275\3578\365\276\312\211\226>7\032\360>\212\260a=0G\257\275\375j\256>`\260\333>[%\310\276@\244\217\2765c\241>\353\255A\276\223\306(>1\231\372>.\034\210>\3377\256\276jhC=\3745!\277}\"\357\276!<\312\276\242\227\021\276X\342)?\346?$>U\207\034\277\356$\242<u\222-\275\005if\276?W[\276\205_\232\276\252\361\242\276P\302\234>$\264\205\276k`C\277$\266;\274`\002\017\277I\366\010\274\237\037\016?ff\346\275\323\237\315\276\000\035\006>\000\251\315\275\n\200\t\277^\021|\276\037\205k\277`\310\372\276\231\330\004?\231\r\032?\005\300\230\276\226\004(\275<\367\016?\344\203\036\276\312\025~\276\224\021\227=\257\224%>\241\370\031?\202\347\276\276\344L\223\275\213\246\343\276\301\220}\277\362\322\315\274\0010\316\276\215\356 \276\"\375\356?]39>\202s\306>yXh\276\217\250\320<\365\276q\276\n\242.>\262\327\373\275\264\310\n@\3578e>\263z\247=\0319\353\2765\322\202\2767\375\311\276Y4\235>e\031b=\202s\006\276&\337l>\332\376\225\2752U\320\276\203\335p\276\35442>\0015\325\276C\034k\276}u\225=\373\\\255\276\035\311\325>\n\021\300>:X\337\276\226&e\275\372\314\376\273\362$I?\256Z\343;/\'2\273\212<\251\275\034\353\242\276\202\220\014>\266\020\244\276\031=\267\274\220N=\276\036\334}>\274y\"\277\nf\214=\357\376\270>\236%\210\275\266\333\256>\021\304\371\274\261\212\247\276y\036\334\275n\367\262=\\r\214>\017E\341\276\334\200\237>*\346\240=\232\263~\275ke\002\276\231\360\213\276\204I\221=\r\032\032\276\366\316\250\275\214\370&?!Y\000\276\226&%>b1\212=\354M\314\275\324\324\032?\362\355\035\275x\227+\276\353\377\274\276\'\203\243\276?:\035\277\034\261\246\276\367u\360>\365\363f>\215\210\030<&p\353>N\271\262\276\313\333)?t\227\204\275O\002\033\275\324\230\220\274\030\317\240\276\201$l<uY\274\276}\231\203;\216uQ>0/@\277h\\8>\307e\274\275\307F\200>\201!\353\275uZ\227\275F\266s\274\256*;\276P\214,=\254VF>\263{\272\277\313\274\225\275Q\275\365>\212Y\217\276G\346Q>i5\344\275:X\037>\275\306\276>G\311\213\276q=j\276\005iF\275\206\037\234\275\'k\244\2765c\321>$\013P\277N\271\202\276\263\357\212=\361\363\277=*\343_\275\2757\206:*t\271\273\224\274\372\275\351\0208=\335^r>\301so\276\217\031\330>y\001\246\2767\216\350\276\033\330\232\276>\"\266>\373\350L?\n\327\243\274;\344f\276\357\376\330>aO\213>\260\254\324\276*Ra\276c\177\271>\006\363\267=9\326\345>: \311\275\273_E=\204\363)\274\350\273[\275\263$`>\333\371\036\277X\2505>1@\"\275\232\224\242>\252e\013>\366]\201\276\0015\365\275\317\201\205=\022\302\203\276\005\243\242\276a\340\231\276\t3M>\2721m?(\270x>\026\024\206=\204d\021\277\356B\223\2756\315;>\316S\355>\337\340\313\276N\234<\277\016\241\212\276\306\304f\276\214\333H>__\353\274S\313\366>\244\252i>8-\270>\307F@>fN\247>V\237k\276d\222q>\"\210\223\275\025\221a\276\3750\"\277r\334\211\276x\177\\\276\005n]=<kW\276\264\223A>S\227\014\275C\305\330\276\342;\341\276M\204-\276{I\323\276\370\337*>\237\310\023\276\n\272\335\276@\024\014\275\247\223l\275O#5\277\003[\365>\023\233\'\277\242\177\"\276R\n\032\277\245\203u>\375\366\265\276\3228\324\274\376\361\336=\323\301\022?\t\371\200>2=\301\276[\0102\276\327L\026\277\230\025\n\275\227sI\276.K\005;}\\\233>\276\336\235\276py,\275~\305\232\274b\204\220\276 \230#\276\324\202w\276MJA\275`\001\254\275\260r\350\275\037\235\232>x\321W\275\335B\267=\372D^=?\215\373\274\035 \210>\221y\t\274\360\242\337>p%\253>$\264\245\276kH\374\2766v\331\276?\342\227=iW\001>\"7c>\002e\263>\247t\360>\005\213\323>\251\274\215>\217\252f>\204\360\250=H\334\243\276\347\306\344\2766<]\276\207\245\001==\017\336>,\271\n\275~\343\023\277\245\024\034?\201\262i>G\254\365\276\242b\254>\260\253\t\275\353\213\324\276gE\324\274y@\271\276z\031e>\346tY\276\300>\252>\001\300\221=\237\216\227>\370\031\267>\253>\227\276\311\223d?W\t\026\276\000\221^\276\350\331\254\275\023D\r\277U\372\t\275\327L>\276\300\004.>3P9\276\261m\241>J\265\217\276E\2714=\366@k> \322\217\276\304\nw=\314\321#>\373\256\210\276\211\322^>%X\\>^\241\017=\021\337\331\276\255\334\253=;\034\035\275\207\247\027\277\216uQ>\250:\204\276\223R\240\276\2608<\276\252I\220\275\357 \346\276\224\373\025\277\346?\014?\333\277\222>\035rS\276F%\025?\210F7\276\372\233\200>qZ\260\276B%n\275\207\247\377?-C\374\276\351\232\331\276w\205>\275\350\207q\276\351:\036;\355\236\334\276$\tB=\313\020\317?\224M\311\276\212\345\016?\334K\332=S\"\331>\024\256\'>Z\273\355\2751\010\354>\027\016\004>\256\266b>\374\245\005=\000\221\336\276\'^/;}\263M\276/\250\237\276lC\005>\213\032\014\275\321\005\325>\325\223\271=\216u\201\276_\'u<\243\036\002>\236\230\365\275\265\375\013>\221\362\023\276\350\244w\274A\0175\275F\224v\276\360\331_;\213\340\317\276e\307\206\276cC7=\234\247:>\003\317=\276\234\247Z\276]\341\215\276:\351\375\275@\264\240\273\3058\277\276q=\n\275\356B\203\276\214\241\\\276\236\014\006\2777\303->Z\360\302\276\255\206\204>5F\253>Q\024h>3\247K\276\"\340X?-\\\326\274\340g\214\276 $+\276oG8>B!\"\276\024\355\352=\373?\247>*7\261\275\r\215g\275\210\201.<\331we>\325R\0178\264\345\004?\245\203U>\014\260\377>`\037\335=&\036\220\275i\033\177=\252\361R\276\260\254\024\277\245\240\353>\205\261]?\375\242\204\274\"\253;>\271S:>\234\341&>t{\231\276\320c\224\275\363\310\377\276\350j+>\201\262\351=\374R\257>\004\004\243\276\323\025\314=\315\006\331\276E\272_\275\356\353\000>\221a\365\276\356\353\014\300\340-\020>\362\352\314\276\372z\276=C\342\256\276\305\033\001?3\376\355\276s\2057\276\363\310\017\277\306\334\225\275h\320\240>\013\263\260=Q\210 \277\335\3578?\320a\376\275\232\353\204\276 $\253>\366\321i\276?6\t\275\367v\213=\033g\323<\037\327\346>\274\005\242>\305\252\301\274u\0040\275W\t\206>\317\275\267\276\252H\035?\212!y\275\203L\222\276H\341\252\276\274\005r\276bJD\276U\030{\276\353\213\244>\247\007\205\2741%\322=\013F\005?\014\352#\277\210F\267\276\301\220\345\276\252\016\371\275\362\265\247>\350\301\255\276!\225\202\275\267\013\335>\377\312\252\276\005\027\273>wgm>\355\236\314>\347:\215>j\207\377=\344\275\272>\271S\372\276\317\201e\274&\001*\276\373\256(?\204\r\277>)\226\233\276\030[\010\277-\317\003>`\352\327><\240\014>\016-2\276\333\304\331\276\231*\270>\rq\334\276\247\005\017\276!\007\325>?\001\024=\317\240\241\276iq\306=\204\372q; \230\243\276\035\"\356\274\234\277\t?\022\245\275\276\351*\035\275\202\312(\277\2029\232\275\254\342\275>\251\244\006?\2608\354>\217\307\214\276\217\245\217\276\357\033\337=\03630\276\371\275\235>\005Q\327>k\267\275=\021\374\277\276\n\235\027>a\216\036?\207\026\331=l\004\222>\227s\t>\331\'\300\275\210.\010\276$\326\002>\036\033\221\276\214\370>?\035\260\313\275:\314\207>\202\034\224>\241J\255\276\265\025;\276\030xn\276\010\254\354\276\337l\363<\303\366\356;,\237\005>c\227\350\275+\301B>\226!n\2776\345\332\2761\263\317\274\304\010\001>a\375_=\253?\202\275\273\355\"\276\036\334=\276\264qd\276\233\217k\276\331z\006=\023\270\035\277\301\305\312\276\327\022r\276H\212\310<\250R\363\2756<\375\2757\373\203\275#\243\203\275\240\025\330\276\300>\212>(\026\256\273\265\303?>\344\240$\277\005\372\364>&6\337=\265\211\023\276\274\2219\276\362\352\334>l\225\340<\247\\\301\276\334\274\361\274|\362\260>\221a\025>g\325\347=\245\332\267\276\305\004u\275;\344\346\274S\227L=\362]\n=\371\203\341>\243#\231\276\323\336\360\276K\000>=wK\362\274\370\034\230=\313\271\024>\003\225\361\2760\022\232>\007%l\276b\326[?m\034\021\276,\267\224\276F\353h>7\246\327>\200\'-=\377x\017?O\006\007\277\315\257\346\275\327\022\302>\326s\022>\030\262Z\276\337\340\003\277\305=\326\275\275\251\370>\264<\007?4\242T\276\223o\226>&\344\203>\206q\267=\254V\266\276\261\212w>io\260\277qU\331>\203\245\272\275\037K\177>\345\263\034\276+\207&\277\241\333\013>\341\227\372\275\311\253\343>aT\302>\"S>\275E/C\276\214\3668=\250:\324>\025R\036>K\260\270\276\243\222\312\276\260\033v>\233\033\203>\323\274C@7\033\213\275\004!9\276f\364\243=}\026\225;\014<\207>p&\246==\'\215>\321?i?\254\342\235\276\360\026H\276\313\370\247>6\002\361=\255\240\016<\255\214\241;\300\225\334>\341\321\306>\365\2426\275\301f\312;\356^\256=\236)\364>\240\303\034\276\320`\263\275V\232\224\276W>K\2753\355\254;G\344;\274\254sL\276\244\245\022>\202\250\213>\263A\306=9C\361<G\257\006\275\376+\233>u=\261=$\r\256=C\305\350>\262b\270=\033\236\316>\277+\222\276\365-\223\275>\350\331>\2721\375=\013)\377\275\351}C>p\265\316\274c\271\205=\212\223\033\276 \353\311\275\266\020\264\276\251\366I\276=\325\321\276\303\201\320\2751\225~\275\333m7\276Zc\320<\274\"\030>\271\302\033>\317\275g\276_F\261>\237q\261\2765\356M<\236\230\205\276l\354r\276\315\001\"\276\225\361\357>F_\001>\214\241\234:=D\203>\201\225c>\251\237\027>\225}W>\006\r=\276\231\273V\276!Y@>\021\036\r\2764.\034>\256\236S\277\305\002\337<\022\302\003>t\265\025?P\374\210\276?\221g\276\330\267\263=\346t\031\276\244\210\274\276\305 \220>\215\317\304=\266\235\266=\\\346\224>LTo\276\27609>\023IT\276p_\'\276Yi\022>\246\320\331\276$\271\274\277`\315a>\355d\360=J\316\211\273>\315\311=\014\007B\276\026\373\213>\215\177\237>\252\013\270\275\237\037\206>\211\265\270\276\237o\260;^Kh\276\025\035\t?\362\014\252>\'\203\003>\300[\300>\365\331\201\274%\222\350\275\354Q\370=V\237\353=\303\266\305\275\213q^>l\264\234=\354\372\225>\236\352\320=\275\251\230\276\235\273\335<\t8\264>\361h\003\276eS\356=\027\361\035\276|\265\243\273\350M%\276\376\272\323\274\325\317\233\275\253^\376\274\264\260\'>\301\213\216\276\023C\362\2740\360\334=j1\370\274.\004\251>+\3311\276#\204\007\276\257\':\274\006\022\324>\261m\261>\257\314\033\275N\013\336=%Y\207\274\3554\210\273\366\266\231\274\340\024\261;\347\343z\276\002\274\305\275\353\305\240>m\312U\276RF\334\274\310\014\264\276$\356q>\'k\324\275\221\362s\276(\017+\276\227\250\016\277\376\200\247=sG\237=#\241\355=gDI\276/\300\036\276\260\376/>\267{\271<\307\327\236>>\\\302>5\267\302=9\326\305\274\2034\003>|a\022>\336\253\326>jl\217\2753\2506=\0221\345=E\022=\276\321\221\034\276\307\021\013>\262F=>3\3417\276\035\346K\276P\252\375\275\305\217\241>\031\252\342\274\237Y\222>\252\2021>\322\306\201>\300\225\374>\270\314\211>vc\213;\262.\216\276\322E\371\273J$\221\275E\270I\275\225(\233\275\321;U=\256\2363>\276\207K>\010\224->\335$&\276\354\027\234>JA\207>c\271E\276\010r0>}\\\333=\267(\363=\365\241\333>\372\270\306>\354\333\251\275pB\201\276O#\r\276y\330\372\272\036\305\231\275\007\353?\276h\313\211\276\r\032\252\276^\272\t=^\242\032\276z\341N\275X\255l>Y\027\367\276\276\331&>\226x \276\3538>=\225`\221\276\246\355\317\276\337\027\027=e\307f>YN\002\275\306mT\276\343\014\017\274\374r\346\274\226C\253\276\276\204\n\275\232\260\375\274\332\254\232>\036\026\n>q\005\264\2756>\223\274\276\274\245\273\255\335\366=\205\231V>S?\237\276%ub\276L\307\274=j4\231\275We\225\272W!\005?\367\220\360<\236\357\347>~\030!>\017}w=\350\026:\274\264v\353\276?:\265\275w\204\023\276\2510\246>JA\207\276\007\316\231>\314\264\275=\236AC\276\271\302\273\276\262\022\363:\272\367\020\276\t3M\276\236\354\206\275\351C\327\275<1K>f\203\014>\004\310P\274Q\022\022=\324\324\342>\306\304\006>\027\233\266\275\360\304\274\276P\376n=r\370\304=\007\353\177>U\301h>|\233\026?\252H%\276T5\201\275\360\334\373\275\200H\377\275\365\276\361\275\233=\320=\264\253\200\276\210es\275\373]\330<\232\223\027\275\331\316w\276\037h\305=\264\037\311\276G \336=\270\223\310=\0358\207\275k\236\203\275u\002B@\303\266\205>\200\267@>\021\212\215=\324\266\301=\020\257k\276\227\255\225\276j0\375\276\315X\264\276\236x\316;\243\036\">\2608\034>E\022\235\275Q1N</n\003>\330*A\276\214\333\350=xG\206\275\351e\024\2761\317\312=\265\211\303\276\270\001?\276\300\262\202>\2279\235>\215\355\225=\272\370\033=\306\247\200<\016\274\232=\235\235,>o/)\276\353\377|\276+\371\270=8\272\312\274$\356\361=\222\\\376=Sy\233\275g\271\314=\017\355\303\275\r\021\334;\202V\240=:\314W\276LUZ=9\321N>\245\367\r\276V\272\273\275{\203\237>\"qo\276\366zw\276Gw\240\276\000\376\251=\272\024\027>;\307`\276:u\205\276\264XJ=\002+\347\276\024]\227<\035 \230=\244\307/>\336q\232\276\270\0066<{\242\313=)\320\'\276\n\274\223=\371\240\'\276\227\3770\276g\360w\274)\013\272\272\342X\327\275\235*\337\274\273\'\217\2765FK>\202p\005\275]\334\246\276 \2633<2 {\276p\224\034>\233r\265\276\316\374\252\276e6\020\277\266\241\002>1\353%>\302~\231\273\226\225&\275A\324\315\276\2201\017?\271\302\033\276\361F\206\276\306\341\314=\342\006<\276\307\021\313\276\0015\205>\010\343\247=\205*\220;]\212\353=6;\022\275cEM>\032\300\213\277\221\221\375;x\356\035\276\026\207\203\276~o\203>\315:\010;\226&%>B\354L\276\274\221\311\276j\366\000>\222\0371=\003^\346<\027\237\302\2765\356\255=4\241\t\275\242\321\375>`\345p\276\340\020J>\315\316\242<l\004\302>\352?\213=\2202\342<\007|\356\2765{@\276\027+J\276y\036\214\276\"\253\253>\203i8\276]\026\323\275P\215\327=\177\3364\276\210\275\220\275U\337y\274+\030\325\275xF\233\275{\203\247\277\0367|<\032\213f=\340G5=\333l,=\332 \323\276\234m\016\2768,\255=\301;\231\275f\240\262\2753\243\237\275j\2744\276a\303S\276\306\277O\275\3066\251<\370\210x>G\004#\275\002\361\232\276\t\033~\2761B\370=\215z\210\276\034\010\311\2753\033D\276\013\263\220\27581\204=Q\300\366\274\272,\006>\034\014\265\275Y\332\211\275\362\230!\276\237\350\232\275\241\275z\275~\306\205<\315\222@\276\014u\330<\020;\223\276\330(\353;O\037\301\275\031\220]\276\2302\360<\334K\232>\2410\210\275\264\253\320=\247@\346\274\234m\016\2760\203\261\275\007\360V>\265\2438=Ag\322\274d\036Y>\244\210L>\3745\331<\315X\204\276\334\327!?\t\213\252=\371,\257\276\275\001f=\206\217\010>\312\340(>_^\000>#\363(\276\330\0171<\217\302U\276\323\023V\276\214\326\201\276S\005\003>{N\372=\026\023\033\276Y\213\277>C\3058>\376b6\274\263\352s\276\351\356z\275\000<\242<1\266\320>\261N\025\275\222\"\362\275\261\202\204\273\305\254W\276&\307}\276\365\023\016\275T\306\377\275\234o\004=\216\254!\274\007%\254>\234\212t>\373y\263\275\357\341\222<\330\2369\276\1770\360\275@\275\231\275\312\247G\274\374\032I\275\350.\251\275\2505m>\357\250\261<g\356\201=\225\202\016>\024\\\014\276\237\260$>(\234\275=\263\356_\275\2338\031\276\235\364\036>\262h\212\2763\033d>\265\340\225>\235\205=\276\243\036\242<\220k\343>\333\245M={\275;\275\302\030\354;\300x\206=)<h\275\310^\237\276(\2332\276\367t\365\274\005\027\013>\301\220U>\022\332\262><\332\030>F\010\217;\357\032t=\200>\333;\301\312a>d[\206=\002\016\001>\207P\005\276\313\241\265>\216#\206>#\363h>\303\364}=\232\352\311\274\344N\t\276\372A\235\275\030\321v\275?\032N\275\226C\233\276f\274\255=O\037\201\274\242D\013=\221\325\235>\327\022\362<\362\262\246<\021\001\227>\265l\255\274\231d$>\213O!\276\r\216R>0\021/\2753\304\241>i\234\027\273(\n\224>\225\237\224>\026L!<\277bM=E\022]>\365g\237>GU\023\276\004\036\230\274\302kW\275e\344\274>\333m\347>\024\355\022?\266\3267>>\313\203\276\276\023s>\245\332\227>E\330\240?\261\341\211>\312\2116\277T\251A?\030!\214>6Y\003>\343p\346=W\225\275>\262.\n@^\242\n\277\210e3\275[\316\005?X\377\'\276\266\204|>rQ-=I\325\226=3\334\260>\340-\020\276\030\317X?7l\273\276\014\310\356>\005i\006\277V}\256>&\031Y>\373\221\202=\304_\303>\222^\024=\215\227n\276=a\231\276:\006d\276\247t\200\276\033\241\237=6\352\241>\013\014\271\276\016-\322>w\276\177\276B:\341\2734hH>\3647\341\276\216\036\027\277`\310\272>v\211\312=du+\276\321\003\037\275\2068\226\276\036m\034\275$\321+\276y\222\344\276\"lX>NF\225;(\nt>\nh\242\276\300&K>\327i$\276\254sL\276\211\267\216=5{`\276\325\347\332>w\333\205>O;\354\276GY\277<-C\\\276\023,N\276\216\222\027\276\014\225?\275\031\347\217\276\326\250\'?\233\033\223\276\005Q7>\013\265&>\236{\317>\016k\252<+\301\"\277\342\217\"=\037\021C\277pB\321>Xs\030?\020;\013\2774hH>\363\377*=\271\252l>\3328\262>i\214\266>4\272\343\276\017\321\310>I\364\362=\'\210z\276\233\257R\275\321\313\250\274\224\245\226\275v\375\"\276\222\256Y>\0221\225\276{I\343<\243u\024>\377#\263\275\356\353\350\277\363\345\245=/n#>\3647!\276@\025\267=\231\rR\276\251\244\016\276\211\007t\276\000\035\366\276\205\353\321=$\326B>\202\377->\016\365;<\'\274\204\275\274\"\270>\356\261\034?\007\010\346=\203LR\276\242\tT=\350\366R\276]\341\355>\345\320\"\276\326\213A\276\245\026\n=\257\010^\277\214\363w>(\270\270>3\340\254\275o\236\252>\026\023\033>F_\301\275\356\\\270\275m\312\025>\223q\214\274\262F\375=\000\306\033\277\356\316\312\276\363\002\234\276L\375\214>Y\335\212\276\355\330\210<\370\246\211\275\0265\270>\317I\017\276>\355\260\276s\327R\276Bx\324>\216?\261=]\334\006?\315\351\222>p\\\206\275Q\332\023\277\330}\307<\360m\232\276\373\002\372<&\001\212>\367u\010?\234\206(\275\355\014\323\274\030w\203\272\253\262\357=g\n\315>\227\305\364\276\\\254H\276\305\217\221\276\354\027,>\340\017\237\275\024\263\006\2776\002\021\276\336\345\202\276\221~[\276r\212\216\276\342\314O>j\336q>-\t\320\276&p\313>+\334r<\022\302\203>\331|\334\275\003\263\302\274{\210\016?\023\n\021\276\353\3426>I\200\312\276\375M\250>\356\315/\275\371\240g\276\t\376\247\276\274W\r>\033\201X>\231\327\221\275\263\006o\274h\320\320\275\325\312\224\276\035\314\206=\343\245;>\224\207\225\276\022\367\330\275W!e<\233\254\241>\240\032\357>\252+O\277_\322\030>\213\375\245\276\232|\343\276^\3645\276\212\310\260>\255\211\205\274\266g\016\277g\362\r>/\370t\275\300\225\354\276\217\307\214\276\2652a\276\214\363w=\352\347\035\277\205%\236\274\0324\364\275}\n\333;o\330V>,\330F=]\304w\276\255\206\004\276\277}\215>T\306\377=pw&\277F%U\276\274\037\267=\t\371\300>\201\263\224<g\325g\276\304\010\241=\304\231_\276\216\003o\275\3022v=\313\204\037>\255\243\352\2754K\342\276\300\320c=\263\354\t\275j\210j\275\320a~\276\232\3534\275\342\006\254>\314bB>\002\201\316<\371f[>\372\355+\276\305\311}>\265\375+>r\030\214\275\271\031\256\276@OC\275\250\030\307>t\357\261\276\202s\326>\203u\322\273\205%~>\266/ =Y\243\036\276\013\014\371\276ep\304\276\244\253\364\2741_6?\250o\251\276Hm\262>\032P\357\274\341]\336\276\002\016!\277\r\032\272\276Ra\354\275\213\032\334>\262c#\276y\222\364=Nz\317>\374\373,\276Y\246_\275\311\253\013?\346\256\225\276v\244:\275\\\254\030\277\365\326 \276\245k\206\276{fi>\017\017a\275\002\016a\276\270\254\202\275\373\003\345\274\223\214\214\276h\005\206\276\331_\366\275\324+%>.s\232\276\275\000#\277\004\004\363\2758\020\"\277[\010\222\2766\352\301>\300!\024>@\366Z\276/\300\356\276P\001\240>\305r\253\276\027\267Q\276\022\024\003@\260 -\276\207\341\303\276\\Z->\321?!>\036\334\275\276\341\333\3139;\2154\275\324\232\226?\363\216\023>\315;\236>w\241\211\276O[#=wg\215\276\211$\332\2764\200\367\276\201>\221\276,\363\026\275\316S\035\276#J\373=\177i\021\275c\013\201\276\027\202|\276\"\214\237<AHV\276\273\010W\272o\r\014>R\017\301>\251\024\233\275y\257Z?\217\374\261>\t\304k\274\303\266\025?\321\221<>lC%>d;\037>\3711\036\277\016\204d\276\231\204\213=G=\004>\300\262\322>k\267\035>\243\314\006>\204\273\243>M\274\203=\310\315\220\275\254\312\376\275\351\232I>\026\366\264=J\014\">a\211\007>J\357\033\276\3328\362\276=\362\'\276\276\274`\276\320\'*?\223\343\356>\036\3414>\213T\250>\023\233\017>\257\231\254\276\032\206\037?h\320\300\276\336\216\360=(D \276\306\205\203>\244\245\262\275\323j\330>N\013\336=\216\001\251\276\177\2747\276ys\270\274\322\3437\275\021\3049=\253&\270>mV\005\277\326\305\215\276\210F7=\017(c?\024\355J\276<\2752\276\036\026\352=\232\"@=\372\361\027=\211\352\r>\030`\217\276it\037?\355\017\224\275\214g\260\276\262\324\372<\210\362\245\275\2410\250=l\225\260\276!\316\243\275u\310\255\275Z\022\200=\216u\025\300\343\215\024\277b\370\350>\336\345\322\276<1+>\373!\226\275Q1\276\2769\326\005>\306\205\003\276\307c\326\276\005\250\231\276\"\306\313\275\274?>>\321 \305\275H\371\271\276\013\233\241=\007C\235\274\2549\300\276\235hW\276\002\232H\276V\016\025\277F\0069\274\370\031\347>\324,P=\232%\341>8\241\020>\221,\340\275\363\002\254>\2242\311=+5;\276\335\320\264\275\266d\225\275r\210x\275RD\006>\230QL\276\203\372V\276O\351\030?\365\241\023?\221\2357<|\270\004\276\t\371\260\276Q1\016\276t\nr\274:u-?\237\002\200\276~\251??\004V&?$\177\260>c\271e=\377\007\270=\336va\276\337\370\332\275\036Q\201\275\320EC=\241\370\021\276D4\022\277\206tx=V\202\245=`\350\261\275\356\353 \276u\002\352>\371\017\351>U\331\017?\263\014\321>\264qD>u\260\026\277u<&\276j\022\274<\206=\315>]\303\214<\254\250\241\276Q\202>=\1770\340>\270\035\232<l\354\002?\322\035\024\277jj\001\277\227si\276G\003\010?\372\355\013\276\251\334D\275V\274\341>\230\372\211\276\206Z\323\275\330\365\003?-`\242>.\342\273>\255\206$?\373\030=:->e\276\264qd\276\342\036\233\276lC\245>N(\264\276\356\224\376>al!>\320DX\274\024\317\331\274\306\026\202;\025\221!\277a\216^\276\032\212;\275}y\241\276g\n]>\223\306@?\003\352\315<\352\347\275>3\212e>d@\366\275\245\275a>\360\205\311\276,\361`>\361\272.?\266\204\334\276\2505\235\276\243\257\000\276\322\253\301=\020\351\347\276\352\317\376<\234\2124\276w\363\024\276\024\\l\276@\212\225;\376HQ\277\355\323\261\276\017\227\004?U\030\213\276\003C\206>^\327\237\276\322\035\304=vPI=\2554\001?y\006-\276\262\235O\276M\273\270\275\'N\036?\351\362\306\275\366E\002\276\216\314\013?X\2505\276\2073\037\276H\277\035>aT\022\276\352\313\262=P\307\203>m\2214\274\351\'\234<\002H\r\276\372\270\226\276TR\347\275\031p\026\275Q\371\327\274\327Q\325<f\210\003>\232\357\300=\034\230\\<+M\n>(,a?Rh4;\352>\260\276\273\270M\276\344,\254>2\254\"\276\210\021\022?\030!\314>\357\311c>\204\234w\275\326\213\301>\223W\327\276I\275\247=5\322\202>\020\261A\274\332\341\217>%\261$=\230\243G>_)K>{f)\276\341\227\022?b\025\017?\030\354\306>\204\237\270\275(\'z\276K\223\022\276;\031\034\277N\234<\276\200\232\372\276\226\317\362:t\265\225\276]P\237>^\242\372\275\263\014\361>\307\235\002?\205Co\275\306\341\234> cn\276\037\200\324\275\373yS>\352[F\2767\373\243=\206\033\020\276;7\255\275\345\nO\276\024\"\340\2759\271_\276\345\362C@\373\373\326\272*\031\200<\371\367\371>\2549`>\257|V\276\035w\n\275\"3\274\273=\325Q?->\265\276\200}\364\275/\242m\273\366\360\205=\301\252\372\274O\262\225\275\007\266\n\276\313-m>\035w*\276\246D\202\276\001\023\030>\224\023\255\276\203n\277\276\3374}\275\274 \242=I\021\331=\223o6>[_\224\276yXH>\247\261}=\010ZA\276T\251\211\276\377\314\200\2750\330\215>\227\3770>\264\216\n\276\246\r\247=\361\234\215\275\346\0058\276\2235\272\276F\353\250;\346\221\177>\331\231B\276\201\262I\276\316oX=o/)>\014\260\007?b\241\266\275\315[\265\275\006\r\375\275/\2438>\341\361\355\274\242\010\251\274\336\257\002=h\351\212<b\020\020?\304\010A>\"\303\n>l>\016\276.t\245\275\210h\224>\"\2165>\362\007\223>\260 \215>\271\031n>\341\356,\276\207\336\342<\320\2700\276\377\317a=}?\205\276.W\277\274YG\037\274\013^4\276%\\H\274\233U\237\276\262,\230\274\035\255\352\274\030!\214\276\367u >k\202\370\276\357U\253>\256F\366<\223\214<\276\212\257\366<\337\340k\276Q\240/>\261\026?>\345C\020\275\"\216U>\244\3445\276\345\264\'\274!\002\016>>\\\302\276\265\375\233>\007:$;\032\370\321<\244\247\310=\237<\234\277\305\251\226=\237<\014\276\205\266\\\276\224\023m>\270\257C>\035\224\020\276\003C6>\004\342\365\275.9n>9*\2639\224\331@>\223R\320\275\206\254\356\275\374\0303\276\257\':\273\202\213U\276,\235\217=y\257z\276\356{\324\274Cus=q\251\n=\200\202\213\276;\374\365\275\037\021s>\363\223*>\223\251\002\275\253\350\217<\361cl>\246a\250>N(\244\275\314$j\274j\3361\276i\031)\275t\010\\\275\321\"\333\277\331Z\277>;:\216=\2402\376\275\217\337{>\tPs\276\275\251\210\2764\273\356<\350\207q>]\304\027\276&\001\352=\246C\247=s\365\243\275\267b\377=\322\211\304\275\251\244\006\277#\022\205\274\366\227\035>N\321\021>%\314\024>Po\006=\347\377\325<\304|\271\276\237\260\004\276}\263\315<\347\214\210\275\356\224\216>\335\322J\276\265\211\323>\363vD>\344\332\020\276\272\240\036>\0265X>\371\017\251\276<\207\262=\035\003\362=\2608\034>\007?\221=j\375\010;o\365<\276[B\256\276\313\333q>\202\220\214\276K\002T\274y\351F\276\302\022/\276\030\262:\276p\266\031>1\224\023\276VHy>0\330\215>r\334\211>\240l\272\276\017\264\002>\224\373}>-\350}\275\252+\217\276<\275\022\2765\007\010>\303G\204>\231\r\022>\315\314l\276bT\010<\210\364[\276\n\272\375=\354L\341=\305\253\214=]\212\353\275\274\263v>T7\027=\240\306}=T\035\002\277\2451\252\276\376}F\276\272fR>\337\246\377\2750Lf\276\301q\231=\221\270\207\276\236\0077\276\242\356c>\322\373\306<\017a|\275$\3612=\t\212\237\274z\307\251<Z\r\t>\260\036w<,H3\276\210.\250\275\236\007\367\275D3\317<\324+\245>n\304\263=[\"W\275\352<\212\275\345cw=CVw\276\204\365_\276\341\360\002=\227\255\225>\263\007:\276\277\362\240\274&\247\226=\244\031\253>\235.\253\276{k@\276e\245\t\276\234\277\231\276\334.\264>\240\220x\273\014\345\304\276\3328\202\276\\\004\246=\330\321\3769,\273 \275?\221\307\275\0363\320<\246\320\371<Tq\343\274I\2427>\246~^>\346t\331=\317I\257> \265\271>nQ\346>\206\003\001\276\200\232z>3\304\241>\020u\177>\251\336\232>\243\036\">\324CT>\203Q\t\276.\220\220\276\212\000\247\274\265\334\231\275\337\030\302=\321\005u=m9\207>1\010L>\316O1\275\276\365\201=\341bE>\305\255B\275\261P\353\274\241\276%>_Fq=\251j\202=\262\272\325\274:\257\261\2767\303\215>\\\217B>\302\303t=[\261_>\342\352\200<\370\374p\276N\177v\276\224\373\235>s\2057>\227\346\026=\274!\215\274o\r,>+M\032\277\333\026\005\277\325\262\325>\342<\034\275\277\r1\275ff\346\275A\361\017@}\003\223=\223G\001<]\304\207\276\223\000U>?\221g>\220N\335\276M\326h\276gD\241?O\005\334\274\010\311B\275\266\326\327=\373\221\"\276\311\253\023\276\017\013\205>\333\304I\274T5\221>2\217\034>\301\305J>\335^*\277k\361\t>\346\350\361\275\002bR\275r\370\244\275\025\035\t\276O]\371=\364\340\236\276\003\263\242\275\263\315\315=\323O8\275W\262\343\274\266\020\204>9\271\007?\207\242 \276\225}\327\275\233\256\247\275\207\212q\276uYL>;\342P=\326V\214>\307K\027\276.\312\354\275\030\262\372=\025\251\020\276\316\210\202>\352xL=\356Bs\276X\342\321>\201\321\205\275-\t\320>\207\277F\276\222t\255\275\243@\177\276,}\230\276\327/ ?jjY\276\331=\251>[B\236>\345~G>-[\253>,+\275\276\270\001\277>\361\240\331\274\262h\252>+\207\266\2755)\225>\027a\212\275\256g\210=5\007\010\275K\344\002=\221\017\232>\313,\202=\225\016\206>P\302\314\276u\315d\2761\262\244=\211\357\224\276o*\"\277\344\202s=\273\3253\276\371\240g\276\242\262\301\275c\177\331=T\214\243\2762=\001?\350\366\262=l&?\276aq\030\276%@\025?\3024\014\276\017\200\270\275B\225\332=\265T\316>\264\345\034\277J\357\033\276\000\214\007\276\314\321\013\277|\321\236\274R\325$>\000\000\000>\367;\324=\003\262\267\276T\374_\2746\035A\275\1770\220\276&\215q\276\266\333\256\276\006\271\213\275\177\274\207>\332\346&\276/4\227>\230\243G\276\243\221O\275\275p\207=Va\263<d\0361?\225H\">\005n\005?\037\021\323\275\002\267\276>\362\321b=@j\303\276\030\t\215>\216\001\371>\253[]>*\255\177=[\266\326=T\251\031>\223m\005<\206\346:\276\n\242\356=\025\3066\277=,t>\266L\246=&S\265>2\003\225>#\363\270\276\215\355\265\272\007\266J\276\263\322\224\276~\035\350\276`\315!>\0358G>k-\314\275\206=M\276S\320-\276\r\212f\275\024\350c\277\230\243\247>7\213\267\275\035U\025?\305\217Q>|\324\337\274\274\263\246>\341\321\226\276\244\303\203\275\261\341I>\310\265!\276\325\004Q=\203L\242>R\236\371\274\002\364\273=\205%\036>\305\254W>{\332\321>$\271<\276\221\355\\>\'\020\033<S\320-\276N\270\327\274\351&\221\275\312\375\276>\220\024\361>\377\347\020>\200\232Z\276|\355\271\276=\233\325\276\345\270\323\275\r\253\020?\236^\231\276\354\243\223>\305r\273\276\367\307\233>`<\323\2760*I>\245I\t?\217\3442>\243w\212=\306\341\234>\t\026\267>\370\245.?\001M\204\276;\337\257\276\277\267\271><\275r>w\241\271>\004s4>M2\362<r\334\251=D\250r\276\233\376,\276\232B\347\275\370\245\236\276\227\256\200\275\t8\004>\332\003\235>\3750\262>\010U\232>\376\267\242\276\207\247\347\276\262F\315\276g\3556<J\007\333>\374q{<\007\231\364>9^A=\372\361\267\275g\3556>\361\272\256>\3024l>\211~\355<+\301\342\275\302\022\017\276*\306\001\277\347\216~\275\224\211\033=*6&\275y]\377\275&\357\322;\316U\263=\n\021\320\276\342w\223\275\2451:>\n0\314\275\305 \360=|\362\020\276>\226\256\276B&Y\2764MX<k\0160\276DLi\276$\271\374\275%?b=\207\336\302=;\307@>zpW>\016-\222\276\345\325\371\275\271\031>?j\331\332\275\214\271K\276\320\320?>\255\206\004>T\374_=\373\256\330>\374\245\245=\030!\034\276:;y>e\374\273\276\304B%?>\355\010?9F2\274e\344\014\276\324\231{=\351\271\245\275\3436\232\276\216\257E\277\n\334\212\276\017\234\363\276\021ph>w\365*\275\022\332\362>U\366\335=\245\335\210=p|m\276\277\265\023=\364\032\313\276\270\257\003>u\260\216>\364lv>\215\264$\277\314\321#>\366(\234>\025o\024?\210\364\013?\2510\266\276\241\020\201\276H\251\204\274OXb>g\n\335=\3642\232>\310\230\003\277\005\213\243>\310\014\324\275L\021\005\274\004\306z=\210\327\345\276\274\263\266\276\265\375k\276N\177V>X\312.@\373\261\211\275\326\213!>\264\003\216=%X\\\276\235\200\346\276\357rq\276Wx\307\276\264\260\367>k\361i>\326\376N=0J\020=\2549\360>\235\272r\274\0320\210=%u\222\276\3578%\276\271l4=X\250\025\276\376\201r=f\203\014\276\364p\202\275Tt\004>\305=\266=\034\261\266=\343k\017>c(\347>)\\\007?L\335\225<\031\216\307\275;\344\206\276:\316\255\275\353Vo>Mg\347=fg\261=\n\334z\276\304|9>\204\rO\276U\373\204>v\375\322\276(I\327>\037K\337=K\002t>iT`\274\r5\312=\355\360\247>=\360\261\274\036\341t\276\313\271\224>\266\275]\275[\231p\276\352\225\242\2764K\"\276[\231\320\276\"\216\225=\323\301\032>\254s\274\276\320\325\226\276\211\322\036>\314\361\312\275\304B\215>\017\227\274>\363v\204>\376d\214<\211^&>\025\221\221\276\227s\t\276\000\221\376=\241-\347\276\006\201\205\276\002\237\277>vn\232=\260\217.>\177\336\324\275\367;T\2766\223/\276h\221\215\276\215b9\276\005\375\005\275\024\350\033?\024\227c=\205\353\021>\230h\260\275fk=\276\240\251W=\336\207\315\273\325\036\233;?\035/\276r\247<\277\330\323\276>\301\032\307=8J\036\276\'f}>\rq\214\276\216\351\251=B\317F>U0z\277\323\026\267=\027\202\314>\375\207\024\276\226\n\005<O#->\227\034\327\276\232{\210\275\033\016\253=TW\276\276l!\010>\3578\265>\357 \266=i\306\n?_^ \276\337\246\017?\341\356\254\275\201>\021><\024\205\276\3225s>Mg\267>\321\313h\276\3745\031>\204\252\007\273\306\333\n=,\235\217\275\'\210\372\275\324CT>\366@\213\276ML\227=K\352\004?,\016\007\277\nh\222>s\204\214\275\306\304\006\276\221\017\212\277\321u\341<\025R~>\253\260\231=#\020O\276\252+\257\276\241\333+>\351}\263>\312O*>\213l\207\276\332\217\024\275\330\273?\276/\374\200\275J{\203=A\203M=\3271.\275\200J\225<\365\363\266>I\272f\2760GO>L\3030\276w\326N\276!\002\026\277\020u\217\276\264\253\320=\323\026\327\274V+\323>\325\256\211=\220\024\361>{\203\017\277_\230\014\277s\364\370>\007B\222\276\361F\006>2=\t?9G\275=\375\024\307\275j\366\200>\2451\212>\322\373F\275\205&\311=>\313\023\276\216\314\263\276\360\031I=5{\300\276\006fE\275\360\277\205\276\351&\341\276!<\332=\250\343\321>D\333\221=K\345M\276w\326n\276$(\036><\364\335<\260\3460\277\223\343\216\276\33346=\212\310p>e\031\362>\232\353\304>O@\363\276\241g\023>\342#\202\275\177j\\\276\027\016$>@\373q\276\314zQ>!\\\201<w\025\362>x\013\204\275\366\360\245\275\001\025\256=-[K\276\332\346\016?%;\266\276Q\2755>\000o\301=\023\270\245\276\333m\347>\224@\224;\225+\374\276\312O\312\276\221\325m\276\216\037\252=K<\200\2769\1773\276\324\324\362=\274?\036\276]\0263\276\017\271\311>D\0274>\312\375\216=\206\254\356=T\343%<B!\302\276\201C(\276\324\325\235\275\374\000\004>w\242\304=\232wT?\t\\l\271GZJ>;\377\266=h\"L>\234P\010>.9\256\275\307F\000\277\354/\213\276\371.e\275q\312\274\275\023\364\267=\271\031\216=V\326\266<l\010\216<\372\t\'=\377\t\236\276\317\203;\276\374\373\234\276\371\275\275\276\034\360\211\276g\355\206>\232#\253=jjy>\363\310\277>\355\201\026\276\320\325\026\276[\224\251>{\2405?\017E\301=\320\263\031>qV\304\274Y\337@<\312Q\200\275\246\270\352\276 {\235=(C\372\273+\030\345>\266\326w>\342\257\t>p>5\275\014X\362\274\271\245U>\350\331\214>\t4\270=\006\r\355>\351+\010\276!\222a=\007%L<o\273\200>&\344\033\277\001\024#=\014\222~\275f1\261\274&\036\320\274\254\213{\276t\357\221\276YQ\343\276\234\2124>=\017\336>\230j&\275`\352\007?\305 \020>\351\267\257>\221,\360\276p\224\374=p\355\204\275f\301\004\275n3\265=\'1\\@\031\342\330\275\222D\n\273\014Y\r?\017C+<\263\006o\275\271\337\321\276\"\216-\277\275\306\006?\035\346+>W&\374=\276M\377=\310$\013\2770\330\r>\032\335\201\276\367\346\267=\375\366\r?\250n\256\2743\212\305\276\252E\304\275\374\030\023\277\220\240\000\277\253\225\t\276\302\022o>Z-p\275\217\215\320>\360\337\274=g\3625?\270\006\366\276\342\006\234\276\362\315\366\276\006\r]\276\226y\213\275\301Vi>\216\314\343=\346<\203\275\345~\247\276\"\3756\277\270Wf=\247?\253\276\334\327\201\276\276\240\245=fk\235>%\224~=\3578\245=\257\315\306<\177\207b=\022\245\255\276I\274\234\275\333\374?=\"7\003\276\036\335\010<?\031\343\273\026\023;>\010 \205>\340\326\275>\261\212\207>{\244\201=E\022]\276\252}\372=i\376\270\275\330\201\203>\372\361\227\275\275\035\001\276\343\305B;\252}\232>\321?\001\277\363\002,>\331=\331\276\221\270G;\037\021\323\275\\r\234=%\222\010>GU\203\276\200\237\261>&\031\211>\211{\234>\265\211S\276?\306\314\276\021\036\375>\202\307\267<+\331\301\276\322\310\'\275!\315\030\276h\263j>\367X\372\275\332U(\27682\317\276\220\203R\276=a\t\276\367;\324>3\026\275>\030\t\355\275\034\266\355=!\223L>A\016\002?\002\232\230\277\346W\023>y[\351<\001\275p=]\376#>_A\332\275\306\025\267=\212\253\n\277\273\227{\275\016\202N\275s\327R>\235\364>>\256\273\031>Nz\257>\323l\236=x\177\314>\235F\232\276\371Iu\276\255\246\213=\203\372V\276\246\270*>\361c,\276(\312\357\273\303}\344;\354\243\023\276k\'o;\266B\242;\373t<>\373\005s\277\370\376F=[%X>\213Tx>\031\346\204\2741\010\314>\230\027@>\375\023\334\275Z\365\371=\204\365\377\276x\321\227\276\302\372?\276Q\332\253\276m\250\020\277\311v\216\276\032\243u>\246\362\346>\310{u\276\003\262\027\275F\231M=\245\025\337\274\010W\300<\020\257\213\276\2652\261\276k\016\340\276\026\276\276\274\220N=>\201\262i\277\343S\000>`\037\335\2769bE\277n\027:\277_@\217=eq\277=\244\337\216\276\205\266\034>Q\367a>yu\316\275\303*\236\276\224\244\213\2760\236\201\276@\244\377>o\017\302\2758J\276>l\317\354=<kw\276\246\320\251>\'\240\251\276\252+\237\276\277\267\211\276T\340\244\275\236^I>\2073?\276\324\014\211=\007\267\265\275\021p(\2765\357\350>r\246\211\274\331\231\002>\236\254\177\272\210I8<\251\206}\275\337\303e>M\240H\275\2451Z>_\357\036\276\226\225\266>u\253\267>\326\377\031>x\216\022<\334F\243\276k`+>Z\017\237\275,+-\276\325&N>\022\240\206\2765\322\002?@\366\372\275W&\354>4h(\276\213\303y>\245\240[>\023a\243>\030x\256\276\035:}=G\003x\276]\212K>^.b\276\225}\207\276V*(\275[`O\275X\214\272<\224\241\252=\345\355(\277E\330p\276(\020v\275`Z\264\275j\331z\276\006\273A>To\r\276A\274\256\275\270\344\210\276o\r\314\276\017\013u\275\226\227\274=b\363\361=\200\234\260<L\211<?\246\270*\276\205\353\341>\004\255\340>\347p\255\274\352\262\310\276\031\034\025?`\002\247\276\220\210\271\276J^\035>\234oD\275\332\343\005\275\300x\006\276\323\237\235\276\335^\322\275\016iT=w\363\244\276\214\370\256\276=\270\233>\257\013?=\226!\236\276\367\221\233\275\024yr>\236{\217>f\205\242</4\327\276\266J\360\275\222y\004\276\030[H?p\353.>\201!\313>_\014\345=3\214;=RD&>*VM=\'\024b>N\3567>3\376\335>\352\225\262>\307\021\233\276\211)Q=F\323\031\276@\373\221\274\242\177b>s\242\035\276\003\260\201\274\267\356\266\276\037.\351>\370\231\304\273\226\225\246\276\325\"b=\350\207\321=&\024G\273\022\332R\276\240\336\214\274\221D\357=\027Jf\275\034\266\235>\t\304\253>epT>\324\361\030=\031\244\205:ff\346=\314b\262\276\240T\373\27574\245=U\207\374>\216\007\233=\3269\366>C\034+@\3706\035\277\270u\227\276\2073\037>\024\320\034?\351\232\031?\3063\330>gD)>\231\273\006@\031\342\030\275\006eZ\275}\005I>>\256\235>\242E\266\276\326\213!\276\262\205 >w\363t>w\241\001?\366\227e?\354\027l\274\n+\025\275\375\244\032\276?W\013\277\337Om>uY\014\275\017\227\334=7\375\031>\311<\202>\037/\244<\330*\221\276\027\274H>\177\207\262>0gv=\027\267\261\276\242&\232=L7\331\276\\ A>X9T\276V}\356=\374\220\022\274\227\345\313=g\233\353>d;?\276&\303q\274\375\330\244\275\201\004\265>3\376}\276\014\037\241\276\264[\213=\2279\235>O\"\242\275)\317|=\364\340\016>U\331\227>\205_\212>\006*\323>-x\341\276\373\226\371=\370\026V\275g\270!>v\306w\275a2\245\276\373\221\202\276\337l\203\276\214\370N>\363\002\014\276\374\214k\276 {\375\276\266\2711\276\004\312f>E\310\212;\216\350\236\274\2554\331>\374\302\253\275*:r>\250\306\253\276FB\233=\217\302\215\277\007\353\257>B\225\032\276\247\256|>\007%l\276g\356!=0\360\004\277\302\243\215<1\275\263;\215(\355=\262\200\231>\346W\363\275\250\251E\276\202r\273\275\002\267\356=\264qD\276\026M\347\276\3127\333=\3544\002?p_\317\277\302\022\237\276\351}\203>\311\253\203\276\372\270\366=\036\033a\2762r\226=\337\370\312\276\311Y8\276R\355\223>,\232\316\276=,\024>\014\315\265>\030\351\245\275`Y\t>B\225z>\007\262^=*\214\r>\356\"\214\275\304\230t\274\320\263\231>|c\210\274\360\277\205>\0006\300=\222|\000<\254\305\'>\016\276\260\276A\200\254\275\327/\250\276\362A/\276wJ\207<\342\314\017>\310}\253\274\3122,?\035\220\204<\310^\'?\336q\352\276|\014\226=h\3139\276\342\261_\275\177\301N\2762w\r\276Ic\204>\202s\226\276P\3748\276C\034\353\275\214\271\233>\372z>\274q=\232>\001\366\261\276#-\025>\346\226\266\276e\377|\275\004\004\023>\233\311\207\276S\263G>c\263#=!\345\227\276\344f\210\276\210\202\231=h\351\212\275\337\032\270=\005\305\017\277\306\371\233>S\256p\2768\204\352\275U\366e?gD\311\276\323K\214<FA0\275?W\253\276W\010\253\275}y!?\256\266\362>\330\273\177>\226\347A<\350\207\221>\261\247\035>~5\347\276\002\016!\276\022\277\"=\272\300\205=\"T\t>\254\220\022\276\344\017\006>\026\244\331=\254\312\356\276\336v\301\276[B\036>\001\212\221\275\224\274:>\201\004E>ZYl;j\274t>\rT\306>/\244C\275\254V\346\275\201\225\303\275<k\307>h\005\266\276\361\2358>\2755\260\276*\214-\275*SL\274\355\231\345\275\3063\000\277\212\216<\277\257Z\231>B\007\335\274\347\251\316>\030\t\235\276l-\002<\325!W\276\212<\311>jl\257;j\301\333\276f\203\374\276Q\210`>\227V#?\372\177U=\302\372\037\276\244\337\376=\324`Z\276\205w\211>?\214\240>\244\337\256\276;\252\232>\023E\250\275\224\023-\276B>(>\300_\254=xE0>W|\036</\213\031?\375\241\031=\251\277\236\275YL\374\276\007@\334\273\346\\\312>\231d\264>\307g\262<0\r#>\264\253\220>\2554I\2768f\031=q\3467\276\267\t7=\243\222\032>/\301\251=\337O\335>\317\024\332\276\333\212]>\322\251\353\276!Y@\275!\315\230\276\230\243\227>\3702\261=\030&\323\275\310\014\364>v\246P>\321\313h\277\033\273\304\276\247\263+\277\244p\205?O\256\251\274\262\021(>\010\346\350\273\027\016\204\276r\304\272\276NE\n\2779(\341\276\0260\001?\263)\347\276>\256\315=\362\007\203>\240\246\026=\246\231.=\340-P\276\231\201\232>;p\216\276\312\211\326\276\006\276\"\275\275\030\002\277>\256\255\275S\005k\277\342\001E\276k+v>i\311\203\275\223\343\336>_\'\365\274\201!K>\n\272}\276\344\024}\276\221\325\315\276\035U\375>\211zA<\327\335\374=\225\324\271>V\361\006\276\021\344\200\2765F\023\277w\333\325>\226\354\000\277\270u7>\235cH?\324C,?\202\250{>r\341(?Xs\360\276wg\375\2769E\367\276\223\000\245>\020\351/@0L.\277\261PK\276\376G&= )\"?\304Z|\276\273\3253\276H\247\256\274~os\276aq\310\276\225HR\277\304\353\032\276\007B\302>\374\373\334\276ZG\305\276_\230\314\275\036\304\016?6\352\301>@\367e<\'f}>]\304\307>\355G\022?\224\336\027>\332\254\272\276\237q\261>\3058\037\2765\007\350>\341\264@\276\206rb>\026l#=,}\010>\222\0036\275e\213$=\253\315\377;\037\235\232\276\002\274m\277\340-P>h\221m\276\323\2615\272P\252\r\277\007%\014\276\373\313n\276\300\\\213\274\034\323\023?Zg\274=\350\330A=#\370\377>3m\007?\3230\374\275o\360E\276\244S\327\276\272\203\030\277w\276\217\276\270;\313>(\017\023\277\035r\223>\"\216u\276f\210\203>LT\277\276\377>\003?\025o\244\276{\275\233>\243;0?Z/f>DL\211\276r\334\031\277\371\242}\2755\007\250\276\216\3473\275F\353\000\277J\265\237>\224M\371=AH\006?T:\230\276\'\240\251>\306\277\317\276\261\247\035\275B!\002>\266\020L\277\373\\m?\000\000\240\276 \265\271\276(\270X>\316p\223\276\231d$\277\342\314\217>\311\"\215=\034x5; \322\013\300!\260\n\277\314\r\306\275\336\216\000?\023\325\373>x\264\201>\352\354\244>\233\003\344>x\234\"\276r\026\366<\207\2121\275ip[=E\273\312=4\242,\277\223\000}?\004\034\222\276\372\320\005\276A\324\235>nn\374\276\232\261\210>\267b\377\275\266\370\324>\331z\206<\257\010\016?\204G\333=\330dm\276$Ed\276F\320\270=\207P\225>\"T)\277\336\260m\276\364\025\264>\337\340+\276\274;\222\275q8\343>R\325\204\276CX\r=\352\312\307>\211\007t\276=~\017\276^\235C>\003>\377\275 \322\337\276IK%\276\206=\355\275\267\2274>\323j\330\276h^\256\275J\354\232=\227\034w>\2073\217\2761\225\236\275y;*?6\315\253>\032\335\031\277\333\247\223>{\024\236>\377\004\367>\200\232\332=\364\303\010\277\352\tk>\241g3?\3333\013>\371\332\023>\017\321\010?\354\243\223\275\360\242/<\035U\315=:\317X<U\301\010?T\3765=\330\235\256\275\356A\210\275S\"\t>l\317\354=\264\253\220>P\001\360\275lx\272>\373\347i\275\377\317\201\276\366\267\004=>\355\240>\361\364\n?\246\362\246\276\217\307L\276d\257\367=Ppq>J^}>YL\374>1_\356\276\223\266\247\273\004s$\277\2510\366\276e\302O\277\276\301\247>]\247Q>\224\366\306\276\265\211\023?\341$M=\236\230U>Lq\265=\305\346\263\276&\374\262=^\205t\276\265\211\323=&\215\241\276 \322\207\277O\351\360\2769\177S\277\211a\307=lx\352\276\333\304)><k\347>\366\227U\277.s\002\277\272\203\000?\227\213\330>\036\371\263\276\n\235w>,\324\332\276d\036\271\276f\333\251=Y\213\277\276x\177|\276\034B5>\356[\255\274\237\253\215\276\373y\343>\360\304,\2766\254i\275\253\225i>K\315\036?N\227\305\276\216;\325>\003[\265>\267]\010>o)g=w\020\233\276\320\n\314=I\021\031>\361\022\234\275(\270\330=\365\325U\275\203L\"\277B[\016? ^w\2767q\022>\246~^\276\343k\217>\274\221\001\277\260=\203\276\262\272\245>e\337\325=D\206\025\276\036\033\001\277\002\361\372>\346\004\215\275\331%\232\276,\017\322<0\3653\276A\267\347>|\200n<\215\227\036\277_\230\244?\343\252\202\276\337\3751\276\351\267\337>bJ\004\277\261\212/?$\360\247=\341)\204\275t\265U\276\253\347\364>\032\206\017\276\241-\307\276G\346\221>\031\031\211\273f\240\202>]3\271>\302\206\227\276\325\312\364\276\004\006\244\272\365\212\002\274/\300\376\275\004\255@\276\374\030\233\277\326Vl\276\004q^\275\034\354M\275\302/\205\276Z\360\002\276\334.\364>$\321\313=b-~\275\241\363\232>\266O\"\274\254\0342?X\305\003?/\206r>\334\272\213>\276M\037\2762U\020>N\321\t\277\205\316K>\305\376\222\277\206Z\213?Ed\010?U\336\216>\257\010~\274\237v\370\276\340-\210\277\270@\242?\245\275\035@\201\t\034\276\311\037\214\276$\321+?\202\250\253\276\366\264\003\2779\234\371>\036\341\224\276\252C&?K\261\243<@0g\276U\336\036\277\312\302\227=\304w\322\276\312\005\035\274\026\245\304=Q\203)?\244\337\036\276\025\000C>\325>\215>\233Z\026\276\316\210\232?\336\223\007\277\360\334\003\277\205\353\261>\002+G?\354\333\211\275i\214\326\275\260\376O>*\000\246>P6\345=\270\036\r\277\335\322\372\276\036P\366=m7\241=\273a\253\276\225H\262>\245\240\253>\327L>\276\304y\270=\006\365\215>@\374\274=\335\262G\272\002\016\001>1B\230>>\320\332>$\264e>S<\256=\202\377\215\276\006\r%\277Xu\266=\250:$\276\251\207(\276\2402N?\2505\025\277+\207V>\325v\023=\377\262\333\276\334\327\361>\325%\343\274)\\\337\276\217\344\"?u\002b?\325&\336\276<\210\235=\026j\r>\272IL\277\204*U?4\235\255\276\037\205\023?\243\003R\275\244\374\364\276J\t\301=W\225}>\013\014\271>\010\311\">\246B\234\275\005\213\363\276\033/=\276\367\036n>\331\231\242\276~R\375>\352\t\233>\017\234\223\275\266\370\224\276\256\022,>\241g\223>/47>\001\336\362\277\316S\215\276\320\n\314\2765$\316\276Q\275U>=\270\313\276%\\\250=\262\272U>\233\254\201>X\312\262<A+8\277\212\315G\277O\036\026\276gC>\275\260=C?2\026\027<\267]\020\277C\037\214=*\000F\276\304\231\257>\312T\001\276d]|>@\366\032\277\362^\225\276\344\275j\27633\243\276w\025:?\301o\243\275\274\"\250>pB\221>\263\007R\277;\252Z>`V\250=dX\005\276\215E\323\275\316\252\217=\366\177\276>\372\270\206\276\267b\277=#\363\310\276\222\007\302\275h\\0\277\227\255\345>F\010\017?[\261\237\276|\n\020\277Z/\226\276q\033\255>\270\222\335\275\332\217\264\276\230Q\214\275\253@\255\274\224\301\301>O\005\\\275\260\256\252\275\226\347a>\263\265>>\235h\017?\324`*?H\033g>\305X\206\275\255\206\304\275\272\331\037\274lA\357\274\2446A?P\374X\276`\002\327\276\234\304\030\277\214\276\022\277$\264\205=@\366\002\277o/)>U\030;\276\322\030]?\244\210\034\277?R\004\276]\3047\276y]\377\275^\203>\274\377!%\2775\322R\277s\021\017\277\326\034\000?Bx\024>q8\223\2768f\031\275\373\\\025?\206Z\323=\347\251\336>X\220\006\276\245,\013?\200H\277\276J\014\242\276\354\300A\277\016OO\276?\214p\277=~\277>+\207\226>1\266\000?\234\334O>x\234\202\277\263\014\361\276\031\305Z\277\010\311\302\276a5\226\273\333\242\014\277\226!\216\273\273~\341\276y]\337\276\3227\251={\237*=[\323<\277\205|0?\341@\350>\236\265\333\276\337l\243\276\"TI\276R\355S>\347\000\341>\230n\222\2768\020R\277-&\366=\330\360|\277\033L\363>\271\374\327\276{1\224>\323\301\352\276\032\300S?z\302\322\275\t\033\006\277$\325\367<l\317\374>m\250\250>\000t\310>\210\021\242=\207\212Q?\255M\343\274|,\335>\272\024\027?\352\317\316\276\246\017\315>\357\346I>G=\264>X\305[\2762ZG\276RI]>\220h\242=Yi\322=\243\001|>u\223\000\277\024\"\030\277VH\271>z\252\243>3P\331=\270@\242\276\242\233}\274(-\274\275\264\2530>\354\206m>+\030u>b\366\262\275\242z\213>\352\353\231=\262\364\t?\nK\374\275Z\330\323\275\350\274f\276\343\245[\276\243X\336>\211\007,?\332 \323>\023f\022\277\212\037\363>\253!\t\277dX\305>W\t\226\276\223\035;>\341\264\010\277\274\"X?\262Kt>\312\335\'\275\264\216\212\275\232\316\356\276\035 \350>\036\026\312\276P\307\203\276\371\367\231\275]\0263\276i\340\307\275\336TD\276^cW\276j\274\034?\351\177\271=\357U\003?3P!?\340-\020\276]\245\233=%\314T>\305U\345\275Gw\010\277\311v\376\275Z\326\275\275g\'\243\276:\314\207\276\227\220\357?\245,\003?\223o\026>qr\237>q\035c\275\3706\215\276\t\032\263\274v\340\374>\367u\230?{\203\357\275E\2714=j\030>=\310\0144>\002\232\010\276\231\323\225>\003>_>\236\265\353>u\216\301\276\021R\267\275\210\235\t\277\346y\360\276\351+\210>\334WT;I\235@>Ot\235=\005n}\276S\263\207\276\037j\333<8\276v>s\340\013\274N\321\321\276I\021\211>\203\302\240\274x\321\367>d\036\371>\007BB\277\2608\214>s,o=;\344\036\277\210.\030?\223:\001>1B8\275\306\242\251\275R~\022\2771%2?{\024\316>\24075\276\332\254:>\320\'r>2\000\264=@K\327\274Ve\177>\022N\213>\222\256\351\276l\225\340>\027g\214\274\000o\221\276\026\023\253\276\371\024\200>e6\000\277S\221*\276\267(\023>?\216\346\274A\377s;)\350V\276\323\207\356\276Q0\343\274*q\035=y\314\360\276*\221D>\204\272H\2756\260\325\276\216\311b=\345\325!\277v2\370\276\312Oj=9\234y\276\210c\235>L\251\313=_)\013\276\307F\340>\001\373@?o/\t>c\356\372\276\210\200\003?P\307\243>(\nT\276\316\337\004>Pp\261\276[_$>\330D\346\274F\263r\275\353n\336>\255i\216>\317,\251>\260\344*\275\261\341\361\277h\\\250\276J\322\365=\302\366S\275\274\004\247\274\272,&>\310\265\341>%\256\343\274\024\226x>\2068\346\276\"\216\365\275?\221\347\276\002\235\211\275%z\331>\330\236\021?FB{\276\320bi=\323\2444>\031\221\210\2752\346\356=)\005}\276[{\037=\201x\375\276h\\\310\276\201x\235\276o\271\232=\377\317\221\276EG2\276\206\311\304\276\027\232\373\276\014\260\007?\343\252\022\276dXE\276\t\376\027>\016J\210\276$(\216?\026i\302\275\320\362\354\276\031\034%\276|\n\320\276iRJ\276G\257F\275\317\277\035\275&\344\223>K\253a\276\372a$\276\2613\245\276\030&3\277\017\332\006<\300&K>&\215\201>\304\231\027\277\327Q\205>0\360\214\276\264\002\303\2767\252\263=\023a\343\276\330d->\350\244\247>\203\243|\2777\246\347=\240\244\300=o\365\\>V\202\005>\366\177\236>\373\005\213\276\002\331\033\277G8\235>\300\317\230\276\217\247e=\014\262\345<\345\325\331>\374\376\315\274\341\356\234\276M\241\363\274\274?\036\276j\301K\276\022k\361=\311\345\037\276\247\005\237\2762r\326\275s\242\035\276\256\323\000?\244\344\025\276}\226\227>a\032F>\324+e=\rRp\275\023\270\r?\002\202Y\276\244p\255\276\311\221\216\275\3578e>\233\217#\277\017\356\316=\317\367\263>G\254\205>\300[\360>\267\177E\276\3024\254>\334\364\007>\221~\233\2767O\225>\2608\254\276N\264\013?\373\256\310>w\370k>\236\007\367\276\306\371{>h\256\243\276=\017n>\360\334\213\276\214\333\010\276\307Kw\276S\226\001>\000W\022>\020@\n?h\005\016\277io\320>\314\177\310\276[\266\326\275\263\007Z>;S\350\275vlD\276\255i^\274%u\202>\352\314==\250o\231\275\037\203\025=\233\217\353\276\205_\232\276\375\203H=@M\035?\3328b\276\377!==\262K4\276\373\350T<\300\347\'>\314\177\310\275\271\031\336>~t*\276\256\330\217>\354\335\277>\317\371\211=p\224\034>\2657\030>\000\342\256\273`\307\177\275\313J3>l!\370>\300x\326\276\255Q\317=\242\227\221\276\244\252i>\300\304\n9\316\374\252=Ttd\276\326\034X\277\213\0337<=,\224\276\'N\026?=\n\347>q\033\315\275C\312G?\210\3643\277\370\337\372>\361\200\322>\373<\306<\321\243\363;_\265\022>\203Q\001?\245\240\373\276\007\010F>\341]\356\275UQ<\275\251\373`>&\215\301>\010=\233>\315\255\220\274:;\331\275\344N\251>;\215L\277\010\254\354>\337\303%>\315\222\000>B`\265\276\302Q\202\276\366|M\274\367\001\230\276n\213R>\336\260\r\277\244Sw\276\257|6>%#\247=\301\220\205>\237\253\275>\344\017\206\276\013)\237=^K\210\276\260\346\360>u=\321\274\204\022\306>\351\361\373=\206Z\023\276\005\305\037@\365J\031?\014\220\250\275\351\232\231\276\310\014\264\2767\216\250>\274?~\276\344\275\n>}\\#?\247\005\017>D4\272\276\253>W\276\225\267\263\276o\201\244\276\n.\026>\220\204\375\274\272I\214\276\322\3061\276\315#\277=D\300!\276(\233\202>2U\220>\206U\034?\240l\272\2760g6=\233=\010\277\016-\202\276\006L\200>\2176\356\276\330\273?\276\371\3679\276\321\005\205>\255\027\003>\222\350e>\270@\242>U\366\355>\336\004_\275\254\377s>{\024N\276^\327o>4\242\364\275\345\320\"\276\307\327\276>\354\211\256=\215F\276\275\235e\266=O\257\024>t\264\252\275\316\207\014\274qr\177\276\234\341&\276\304\230\224=\370pI<l>\276>{f)\276q\003\216\276j\030\276=\004\255\010?\n\272\255\2764\200W>1\316\377>;\252\032>`\346\273=\366(\374\276\361\200R>\221D/\276\204\232!=\267b_\276\311\345?>I\272\346\275\023\2705>b-\036\276\201\262\251\274\207\371r<\322\373\346><k\227\275(D\020\277\247?c\277@\366\332>q \364\276\004\347L\276\271\215\206\276\256\235\310=\321\226\243>\307F\360>9\234\371\275\215b\331\276\t\033\256>\007\323\240\276\037-N\274X\255l\276\002\331\353\275`\345\260>|\270d>\2132\253>c\234\037\276\226!\256\277\315s\304\275\267(\363=\377\t\026?6\036\214=Uj6\276PU!=\000o\261>\305Ue>\014\316\200\275jM3>\206\254\376\276Z\022\000\276\210F\207\276Nb\320\275\341\225d\275\261\026\237\275\3328B\276\033d\262>-\n\233=!\345\247>\316P\034\275W\262#>_\317W<4\236\010=U\366\235==\270{>\013F%\275\331wE=\020@\252\276x\362\311=\277\270\264=|\233\216\276\037\364\274>V\325\313=77f>a\032\266>D\372\r\276\314]\003?\213\211\335>K\351Y\275\\ \t?+\373\016\276_F\021\276\233\033\023?;\216_=)y\365\275\362]\252=\275\030\n\276I\021\031>\205%\276>\010U\212\276S\350<\276\213N\226<\224\207\305\276\314(\026>\346\\\n\277\017E\241>|+R\275\016\243\240<\003>\007\277\214\326\021\276RDf\276\251\372U\275Nz\237\276\004\254\225\275\220N\035>C\004\214>\023\201*=\037hE\276\022\332r\276\002H\235>x\t\316<c\234\317\276\220\024Q>\223\214\\\276\274\005R>\210K\006?$\326\202=\314\356\311\2761a\017\273\005m\262\275\221~\373=y\036\234>?\216&=\344\367\346\276`x%=\200\361l\276\230\243g\276^\235#>W\315\363<\225\267\303=\301\253e=\013F\345\275\277\232C\276<\275\322\276\364\211\374\275\324\273\230\275\247\263\323>X\220f=|\326\265=\270#\034=\017\013\365\275\326\220\210\276W\225=\276vq{\276\034|Q?\366b\330\276io\220\276\254\3773>\245N\340><\367\036>\036\033\301\276O#\375>\257Z\331\275P\307c\275\221\2357\275\0049\230>\005\372\204>\225+\\?\322p\n=\004\254\225\275W\354\257<DQ`>u\002\312>\377[\311\276\206Z\003\277\356%\025\277x\014\257\275\375\301\000\2773k\311\275\256d\037\277m\347\233>H\210r<A+\300>\034Bu\276\377[)>\232\0070\273\203l\331<WC\222>K\221|=d\314=\276\277I\023\275\0049\250\276o\201\264\276:\006\264>J\265\007?\3274\357=\235\364\376=c\322\037=\227\250\036\276\346\313\013?\252C\316>\321\221\254>,\267\024>\372\270v>gDI\276\344\332\200\276C9)?\274t\323\276\334c\351\275_\014\265>\3327\227\275XU\257=\020\351\327>\223\343\236\2763\247K\276#\370\277>S\\5\276\371\203\241>\331\244l\273>\2629=,\267\364=k\362\224<|e^<\233\346=>\322\035\034?\344fX>\341b\r\277b\020\230\276\342\351\325\2757\343\224=\260\003\347=\315\351\262\275\375\202\215>\220N\035\276P\215\267\276\210F\037\277b\021\203\275\300\317x\276Y\205\315\274\261\341\331>\232\321\217=\350\202Z\276\2137r\276n\023n\274n\367\222\275\177\244\030\277A\361#\276,\274K<\263)\327=%\315\037=F\013\220=Dnf\276\227\220\037@O\314\272\276\023\233\017\276\3750\242>\270\344x=\256d\367\276\017\324\311\275+j\020\276\325\t\210?\337\370\272\276\237\255\303=1B\000?\212\315g>\017\264\">~\305\272=\267\013\275\276%z\031>\004V\016\2767l[\276\341\356,?\376}\226\2760\3622\275\242\356\323>\324\202\207\276\253\257\256\275z\374\216>\027\361=>\321\256b>5\r\212<\310$\003\276\203\027\355\276\320\'\322\276\310$c>\022\275\214\274\354l\210\275]m\005>\000r\202=KYF\276GU\323=0K\233\275vQ4=>\350Y\275\020u\237<M\363&?\230\372\031\276\000\343\371>*\255\277\275#\025F>\345\355\010\276\243;h>\223\252m\275*;==\232%!\276+\336\210\276\017\013\345>\010U\312>\005if\276$\234\326=4\016u\275\347\214\250>u\315$>\207\242\260>\2554\t>\022\203`>\224j\337=\305=\366>\232\266\177>;\215T><N\341\2767\340\203>\3225\323>\257\231\374=\350\366\022\276\326\255\216\276\241\204y\276\267zn\276\0235\007<\003]\273=\'\240\001\277\'\203\363>\321\350\016\275\370\374\360\275\276\242\333\274\314_!=\214\025\225>\022\332r>\0010\216>\257Bj>]np=\365\020m>\022N+\276\222\\\316\276\033G\014?\215\230\331\274;\345\261\275\372\n\202>\302\243m\277nN\305\275\363\345\225\276P\374\330\275\211\007\324=p\355\304<\322\000\216\276/0\213=\345\2703\276Z\273\355>5)\365\276\372\232%=\333\247\223\276\230\300M\276\325\312d>0\365\203>\263$\010\277\233Z\026\276[\323\374\275/Q\215>\226\004\350=[\010\362=\212 \256\275\336T\204>\256(\245\275L\216\253>|\017\207>\236\230\265\276\317I\017>\371\024@>\301\250\004>\035wj\276\266\271\021\276\304\265\332<\205B\204=\343\245\353\277\021\000\034\275\372\n\022\275,b\230\275h\226$>P7\320<\213\341\252=\23389>><\313\275\311\310\331\275\210c\255>\224j\337=/\0271>\341\013\263>s\241r\275\244\344\265=\226\3548\276\027\274\000\277\352\2221\275\032\336,\275\242C\340\274s\021?>^K\030\277\215E\203>.\342\373=T\251\031>\311\253s\275o\362[\275\303\365\230>\023\233/>\352!Z\276\2763Z<\r\340\215>\340\363\343\276@\336k>\r\303\347>\367\036.\275\304\010\321>d\222Q>\333\277R>\342Z-=\264Yu\274t)N\276\215\n\234\275\241g3>\332\376\325=\024=p=\310\265\341\275i\214\266>fk]><\024\325>g,\272=\257_\340\276\257\010\016\277P\302L=\306\242I\276\330\r\273\276\022\3322\276\363\216\363>\331Z\037?\247\"\325\275\324\361\330=\256\266B>U\366\375\276\257\n\224=Q3\304=u\256\250=T\343\005\276\t\376\307>\303G\204>\024\321\257<\374\305\214\275\256\326\251\275\213T\030\276\236\317\200\275&\0360>\000W\262\275\341(9>P\001\260\276\311q\'>\260\033\206>\036\340\251=\201>\021\276\301\342\020\276\214\240\261=\374o\345>\265\340\005\276[_\204=T\306\177\276\356\261\244\276]\304\007\277\000\003\301\275\272\203\230>\306\247\300>\372\263\257\276\300{\247\2751|\244>^\364\r\277\236\357\227\276\271\337a>\251j\262>\233=\200>\200`\016>O\222.=\357(\004<\031\220\315\276\206=m\276V\020\203\275\232B\367\276\315X,?AH\026>\220\240\250\276\3603.\277\314\264\035\276\204d\221\276\245\024\204>\222\256\231\276P\306\270\2754h\210>\363\314\213=\251\022e=/i\274>\216\036?\274\236\014n>\314$\312=^\327\277>\313\330\320<_\rP=\002\016\341>\246\320\t?C\255\t>\020\257\313\276 c.>/i,\276A\232q\275\347\035g>\276P\240\275\003\225\221\276\\\254\350\275\303d\252>\202\255\202\276\022\245=\274=\363\262=\303\362g\275\205_\252\276\r\375\243\276\312\303b>f\332\216\276\306\334\365=(D >E\273\352\276\"\306\253=ni\345\276}\314\207\275\201\225\203>\234P\010>\226&\345\275(\325\376\275\3225#?2 \373=\027\324\207\276;s\257=?\214\220>\273\355\242>\227\377\020>\324\267\234\276Y\331c\273\242\321=?\314\177\010\276d;\033@S\\\r?2 \213\276\340-\320\275\323\205\030\275\337\340+>\002\267.>p\010\225>\033\r\200\276\255\027\263>~\000\222=\351+\310\276\022\240\226\276\217\374!>\023f\232>\252C\256\276\215\323\020=\337\211\331=\013F\305>\010\254\\>?:\225>\207\201\025\272\201\317\317>\376\355\262\275{\367W\277&\374\022>\343\314\n\274\006\273\221\276\243\314\266\276\351e\024\277\256\364\272\275\301\255;>\317,)\276\365\204\345=\352[\016?.\377\341=\354\0225\276L\336@=\307Ia\275\353\305\200\276\227\034W>+\331\201\276p\316\230>\315W\211\275T\344\220<\304\354e\275\231\270\225\275\205\353q\276\265T\006\277\226[:>^\200\2779\021\252\264\276\005n\275>&\252\027\276\033L\323>\225\016\346\276Qk\272>}\346l=w\025\202\276[\316\225\276K\037\212\276\221\233a;\357\033\217>Z\270\314\275\203LR>\220\024\241\276\263\265~>\257BJ\276,\362\213=\362\2600>\"T\351=\004=\264\275\371K\213\274>\"\006>\334\327!\276\315\324\373\271T\306\237>\353\034\033\277\"\032\005?\245\203\035\277\311\345_>\264</\2762U\200>1\224\343>\013^t>3\334@>\274W\215\276\306m\034?\200\202\333>\367u\360\276\367\222\246>RD\246>,}H\276\313\204\037>?\221\347\275\276J\276=\224\366\236\277\254\250\321\276e\252\360\276\020$\357\274GwP>\206\251\255<\0162\t\277\267\177\225\276P\307\343<\177M\036\277i\343\210>\375\237C\276\214\370N\276\202p\305\275\252`\244>\277\324\337\276\t\247\225>\037K?\276:\222K\274k\361\251\2761\356\246=\022\024\037?O\221\203=\t8\244>!\345\227\276#\335O\275\026j\315=G\346\301>%\351z\276\262\241[=\n\364\001\277\350\202\372=Y\213\237\276A\237\010>8\020\202\276\204\022n\277`w:=\024\256\007\276h\350?\276\300\004.>\307c\326\276\001\243\213=\337\212D<\214\370\216>\032\206\377>\235\327\030=\017\321\350=,\3618?\202\347\216>\257|\016\277\276\274\200>\333\277\222\276\243#\351>\352[F>\021p(?\000\221^\276\002+\007>\337v\374\273\004\377{\276\333\304Q\277\233\033\223\276\240mu\275\036\341\204>\242\013j\2748\025\211\276TRG\276,}\250>\342\001\345\2763\304\201>\'J\302\274A\267\327\275\337\300d<\026\244\331=\014\352\273\276\341(\211\276\'\210\212>\355\360w>\354\243S\2768\363\353\276\267\264\332\275k`\273\276\320\t\201\275\322\030\r>\266-\372>\375\244\332\275\207PE?/i\014\276eS\316>\267]\330>\333\276\307\274/\372\232\276\330\r\213\276?\221\'>\353\342.\277ms\343\275\350j+\276Q\332\333\275\235hw>\352Y\220\275r\371\217\274\t\247\325\276\243\001<\276c\264\016>\200\016s>\322:\332\276\230\335\363\276\212\216\324>|\357\257\275\216\007\273\275=~\357=Y\243\276>\256\362\004\274\200GT\275\037K_=\246DR=\321\"\213>\010\315.\274\351\222\026<\022\024\277\276_\355\210=R\270\036>\206Z\023>\214-$>\354\372\205>\256\365\245>\006\365\355\275\331|\234=g\232p\275\332\341O\276\276\023S>\'N.\276\364\303h\276|\325\332\276\354ig>\r7\000\276\302L\213>\000\035F\276\036\245\262\275\344\367v>\005\335\016\277\307\366\332\2749(\261\276!Zk=\223v\376:\260\004\022=ms\243>U\301\230>_)\333>\243\222\212\276\301U^=\330d\255\276 \230\343\275\330\360\264>~\214\251\276jh\243\275\375\274\021?\356\316\332\275\344\241\357\274+0\364>\330\323\256>^\364u>0\273\307\276H\371\351\276R\362*\276\364\340\356>a2%\277\372\362B\276\253\262o\276\226xH\277GT(\274\017\356\316\275\030$\375\274\023\n1\276\262h:\276b\020x>n4\240\276z\3733=\243\006\363\276|a\302>\n\205\010\276J\322\025>\207\341C>\363<X\276\306\242\t>o\201$\276\230\206\241\276\376\016E>\302Q\362\275{N\372\275u\345\023\276>\320\332>\003C\306>\000\306\243\276k}Q=\023\233o\276\277\016\234\276\330\266\210>H\024\377\2720\017\031=\217\245O\276\313\363\240\276\\U\206\276R\355\223>\222?x\276\322\000\n@P\374x>\221D\017>\377\005\002=R\'\340>\256\360\016>Y\210\216=\2032M\275\270\257\223?\020]\200\276x(\002\277PS\253\276\337\211\331\275\213\032\014?\016\276\200\276y@\271\276~\303\204=\027\232\013\276\256d\207>\266\271Q\277\215(\375\276\2510N\277t\375L;\230\027 \276\030\225\324\276\034|a>\203\026\022=\333\263x\273\302\027&\276\244\210\274>\325\317[>r\277\323>\352\262\370\276k`\003?\317\332->\371\327\262\275\235\235\214\276\310\315\260\276\361c\234\276\027\274\350=\241\020\341>p\353\256=\243v\277\275\300\315\202=\251\367\024=?\341,\275\204\325X=-\262\235>\362\322\335\276\377[\331>Yir\276\211\230\262\276\244\340\311=-\225\027\2769\271\337\275\254:+=\202\251f=\207\247\207\276\327\372\302\275\206r\n?[\353\253\276\234\304`>\363!\003<\335\007\220>rP\"\276\221D/\276\034|A\276\332rn>nh\312<n\027\232\275\266J\220\275:\005\231=\337\334\277\275\267\013M>%\222\270>\234\341&>\t\033\236\276Q\240o\276K\260\350>&[\270\273\263\322\224>\312\375\316=\233p\257\274\245\276,=\313\020\367>\224j\337\276x\321W=\234\334\237>\234P(>_\354}\275\256\271#=1\266\320\275\316\031\321>\377@\271\274\330\360\364=vq\333\275\361\364\022\300H\304t>\270\257\303\276S\313V\274\030]\236=A\362\216=\246D\322\275\314\013\200>\344\367\226\275\301\255\273\274\316\374\"\277\311\223D>\254\312\376\275\003\317\255>\257}\301\275\353\377\334=(,\241>\032\371<=\315;\276>\311\345\177\276\325!7\276GZJ>\324+\005>\242\227\261\276\000R\333=\360m\372\275\'1\010\276\201\354u>\344\275\212>\363\256:=\227\305D\276\356%\275\276\005\305\017\276#\3707\277\330\365\233>Q\276`\275o\323\'?\274!\r=\217mY\275\016\370<\276\274\313\005>\273\'o>\304_\323>K\002\024>\263\315\215>\030\354F\276-x\021?\322o\377>\272\332\272>\341\264\200>\317NF\276\213T\250>\224\240\277;\265\025[>\344\017\326\276\245\344\213;\"\375v>\022kQ\276a\340\231\276\376\267\302\276\330\323\376>9&\253\275\271\3366\275\231\016\035=\336<\025\276&\034z=\014\352\213>\006\302\251\273\315[\225\275\0256\303\275\306\341\024\277\216\257}>r\334\371\276\251\366\351=f\203\234>\343\302\t\277\371\365C=v\211\352\276$c\265\275\274?\336>\214J\352=j\331\212>\\ZM\276Y\335J\276\261\247\275>9\326\025?W!\345\275\332rN>Tt\324>g\325g\276\\\033J\276\r\247\014\275\345\233M>\275\251\000\277o-S=\024 \252= ^\227\276_^\300\276#\332N\275\235K\261\276\274\263\366\274\254\034\332\275\314)\201\275\026\3664\276` \210\274\217l\256\274\370S;\277\376(\212\275k\232\027\276o\273\300>\267\227T\276\002\237/?\224\277;=\275\251\210>\224\336w\276 {=\275\241g\343>\224M\311\276\242\013\n>\330H\222\274\030`\237\276\025o$>\014\352;\276 $\273>e60?.\004\231\276\345\355\210>\350\331\354>\357r\201>A\267\327=H\334c>)\262V<Z*\357<\272,\006\2765)5\2774\327\231\276\214\333\350\275\267|\244\275\007:\244;\'P\244=~\251\177\276\377[\251>\252\232\340=M-;>jhC\275\326\220\210\276P\337\202\276&\216\274=\000\256D\276\230\3729\276\376`\340\2750\202\006=\234P\270>\177\244\010>I\326a<\002+\207>\222\223\251=g\'\243>\207\211\006=<\367^>\005\206\334\276^\364\025>\326\250g\276\221~;\276\234P\270>\305^\003<\256\330\237\276\203i8>\253xC\276\037\026E;jj\001\277p\227\235\275\355\325\307\273\363<8\276)\313\360>\211\352\355=@\373q>m\215\210=\016O\237>F\007$\275\324\361\030\276X9\244>\256F\266\275\000t\030>\0162\331\276t\322\333\2769\234\371\275\240\303\004?<\332\250>\013\322l\276\337\207C=\211\264M=k}q>Uj\346>\253%\235\275%\346\031=\000\221\276>\2451\212>_\007\356>FI\243;\'O\031\275\234\026|=\377\262[>\346\2266>M\025L@\345\231\267=\374\336F\276xz\345=o\365<>\014\310\336>Cp\334\274\t\306\201=EGb?\000t\350\276\310^/\276@\350\017\274\340\2341\276\333\304\t\277\010\003o\276l\230\241\275\254\347\177;\321!\220\275 \t\273=\221,\000\277\006G\211>\354/;\2767\032\210\277\200\232:\276\"\032=\276\256\022\354\275\247\263\303>\314\264\035>Ve_\276\300!\204>\303JE\275\256\361\231\275\210K\216>\317\332-\276\013\t\230\274\314(v\276A\232\321>\323\274\363\276\352\262\230>\235\235\254\275\200\016\023><f\200>\325\317\233\276C\305\330>\031\376S=.\255F\276\335\224\222\275\346\221\177> c\356\276S\256\360=\304\316\224\276R\n:=\037h\265>^\242:>\3230\254>\224l\365\274\273\340B9\263\007\032>a\375_>(\356\370<Z\201\221>\245\240;>O\323\302;\331B\320\275\317\367s\276u<\226>%\225)\275xi\036<\025Wu>5A\224\276\354K\266\274\222?X>\330\330\225>Qk\212\276\220\242N\275\225\237\324\276D\027t\276\233 \022\277\271\340\254\275\022\024\237\275\030x\356>\237\223~>lCe>\346\3501>\003{\314\274G\223\013\275{1\224\276\357\376\030>Q\245F\276\236\230\365>\372\263\037\276\371\017\231>\222\256\351>\326\216\202=Hmb\276\274\221\371=u\260v\277\354L!>1\356\306=t\357\321>\365\234\034\277\346\313K>\325\262\225\276A\325\250=\244\374\264>S\263\247\275\214\020.\2774\0216>\377\004\267>\306\026\"\276\231\236\240>\004V.\276p\010U>\340\241h\276\335\230\276>\001j*\276S\226a\276^\366\213\275\257\352\214=X\342\201>\310$\203>\212\260\001?\237\253M\276)\005\335\275\357\222\270=g~\225>\000\000@\276P\374\270=\347\035\007?\004\377\333=\\8P>d#8\277\352\354\324\276\376`\300>b->\276\201\320\272=}\005\351>e\337\325\276\201A\262=&\001\352=\304\353\372=\001\366\031\277`v7?\346\221\177\276x\355\022=B`\325\276\245f/\276\214\370\316>\006\022\244>\375\274i>\210\235\311\276\313\020g\276\002\232H\276\231*\330\275\230/\237\276\204\365\317\2769\271\037\275%[]\275\032\300;?\016-\242>\270\003\365\274\021\337\001?\272f\302>\211\322~\276\300\354\356>\346\256\365\276\016\363%>\254qv\275f\367d\276\\\346\364=\033\3650>\357 v\276p_\207\276k}\201\276\367\001(><\275\262>p\224\374\275\200e\345\276\357\341\342>\270\351\377>!<\232\276\032\027N>\206\003\301=r4\307\274\'f\275>\313J\023>\325\225\377>m\312u>\305t\301\275\364\303 \277\021\036m>\321y-\276\3127\333>\227\250\256>1\316\037>\354\300\231>A*\245\275O@3>\3745\271\276\370S#>H\341z>\316\245\210>\303\323\353>BC\377=\317\332\275\276\224\373\035\276\004\034\242=$ED>\354\300y\276\301\250\344=\010 \205>\243\001D?v@\310\273)\\\007\277WC\342\275{\240\305\276\367;\324=\373t\254>\245\365\227=\362$\211>\013\322\314>t\352\312>\351)\262=R\017\261>\343\342\250=\\=\017\277J\322\025\276W&\374=\260\254T\276\232\353\364=\2451Z\276\007\010&\276=\'\375\275\254\000_\274\216\257\035>\243\257 >\242\321=>C\000\260\275\340\234\t?\343\374\315\275\376&\244\276\276\331\346\2765\265L>e\031B>GZj\276\220I&>EG\202>\301\2205>\025\034\036\275\034\230\\<du\233>>\350\371>u\315\264>\000\035&\276O\257T\275\243\347\026=\034y`\275X\2536\275<\203\306>\202\377-=5)\005\276\"qG?*7\021\275\247\263\323=\333\334X\275\013\230\000\276\242\227\361>]5\017\275d]\034\276\204\360\350=.\377\001?\310\265!>\303c\277=\027\232\253\276)_\020\275A\361C>]\336\274\2751\261\251>\220k\003\276S\"\271>B`\245>\367\351x>\"\032\315>\256b\361\274=,\024\276g+\257\274\370>\013\274\204G\213\276\215]\262>\227\3770\276U\277\222\275\021q\2249A\2677?\27550>\363\310\337=)?\311>2 \013?\321tN?\036\371\303>U0\372>Tt\254?\305UE>9\3564>\021SB>=\n\227>\360\304L>\360\212`>]\026S\276c\177\r@\343p\246\276\003Cv\276\231.\244\27533S\276\221{[:\266\326\347\276\035Z\004\276\004\004\243>D\367\254<\241\020\341>\321\313(\276s\205w\276\322\034\231\275\364\025\344=\343\302a>\244S\017\277\307\021\013\276\363v\344\276\316S\355>\273\'O\276\272I\314\2761|$\277\361\327\224>\3711\206\276h\"\354\275+\023~>\'\024\342\276\266-\232\276\232\353\364=\216\257\375=6Y\323\276\337\340\273\276\243!\243=d;\177>\345\266\275\275x\271\210\276\230\031\266<\263\014\361>i\306\322\276\3539I>Y\335\032?\321\222\307\274\2073\177=h\226$>\n\364)\276\271p\300\276TtD>\'\275\357\275\356\353\300<\357\254\215>$\r\356\274\244\305\031=\237\002\000\2760G\317\275\353\034\203\276\364MZ\275\261\242\246\276\237\343\243\274\365\235\337<gaO\276\223\3150;E\273\212>\322\000\036\276\305=\226<,\324\232=\004!\331=\356_Y\275;\345Q\275 \322\207\277FB\023?\004\347\374>\241J\005\277{\275\313\276d\257\347>\253\226\224\275\024?\036?\373?\267>\251\336\232\276\3058\377=kH\254>(\327T=\036\026j>\352[F\276:\257Q\276S\226\t\277\354M\314\275\256\236\223>\347\373\351\277I.\257>\360\212`>\2451Z>\226!\016>\377\312\n\276i\251\334\276\365\276\021>\322\030\355=\331\316\227>\354\372E\276\325>\255\276<\240\354>\204\323\262\276\251\244n>\341\321\026\277\037\205+\276\205\353\361\276n\372\363>\314\335\035\274SX\251<\225+\034>/4W<O;|>\212\310\200>?\035\357>|\362\010?,\234d\275\274\350\353\275OX\342>\033d\222>H\341\272\276h\256\203\276\307\007\007\273\264\351\310\275\321y\315\2765*\360\274\313\325\017=\027I\273\274\310A)\276gc\245=-\354!?\307\200\254\276\001\030\017>\343\307\210\276\243:\235\275q\254\333>Gr\271\276}\350\362>\303\266e\276\n\021\240>\202V\240\2762\346.>W!\345=\243\314\366\276\237Y\262\276\263A\016?zpW>L\306q=]5\217=\271Sz=\201\260\223=AEU\2755\322\322=\240\213\006\275&\001\352=\377!\355>\350M\225\276\355P\003\274-?\360\274\343p\006\2764\021\206\276\307K7\275\025\255\234=\215(M\276-\354\t>\362A\017>\271p\340>\'\203\003>\215(\275\276!\310\241\275u[\"\275E*\014>\337\246\257\276\267(\203\276Nbp\276\212v5\276\006\275\267<\372\355\313>\314\0130\274\231\r\022\276uv2>j\244%>k\202\350\275\353pt=\017\326?\276\373\221b\276O\346\277\275\030\317\000\276\357UK\276\366@\013\276\235\327\250\276x(j>\374R\277\276,H\203\276d\3513\277{\275\313\276\215\2644\276\323\244\024>=~/\276&S%>!\315\350>G\310\200=\223\035\233>?r\253=\034|\001?\363\253\351>?o\n>\177\373\232>\221\355\234=\013)\177\275\334\200\'?\267\231\212<\210\200\033?Eo\247;\215\324;=\305=\346\276\325\225\377\276\253x#>c^\247==a\251\276K\223\032\277\"\216\205>\231\360k>\030>b\276\n/\201=\363\345\005>\003\206\033\274\267\320\265=\221}\260\275sH\352\274\202\250\333\276\314E\034>\240\342\270<\254s\274\276\227\305\324\276/4\327\275\253xC\276\372*9\275\252\324$\277/\213\371\276\340\364\216\275@M\r>JF\216\276\363q\355\275\235\021\005\276\222\313\177\276\n\277D?\201#\201=d\256\314=\026m\256\275\347\306\204>\240\025\270>}\256\246?=I\332>8\025)\277\204\225/\273\010\313\270\275\231G\256\276\330dM\275\325[\203\275)\320G>\236\322\241\276\256\\\024<\314b\222>\352\317\236>\344\024=\276\204\365\177>\373v\222<Y\206X\276:;9\277\355\273\302\276]\334F\276\256G\001?\361\204\336\274\202\214@\275%\222\250\275\321\350\316=\302\373*=\243\351\254\2765E\000<\205\2316>\t\033\036>Rd\255==\270\033>\256\016\300=\210.\350=\346\"\376\275\351d\251</\300\036\276\020Y\204=\255\372<\276.s\252\276:\261\207<\246\233<@\363\346\220=xE\020\276\014\037\221>P\250\247\275\214\277\255\275v\303\206>\017\234\363=(\233\022>X\220\006>T\251\251\276\236$\035\276\024\006\205\275\215\234\005>\310]\244=\247?[\276\006L@>\022\203@\276\366%\033\275f1\361\275\263\265\376=\217\215 \276\246\355_\276e\031\242>\241\3701\276QN\024\276.\305\365>V\237K\276$\232\240=\310\265!\275\360\026\010\276\371I\025\276&\253\302\275\'\203\203>g\017\364=[\316%\276\021\036->\344f\030\276H\304\244\276g\017\024>\271\337\341\275w\333e\276\301\250\244<\241\241\037\276\365\234T>\336\310\034\276\025U\237\275:\006d\276\326\306X\275\262\272\265=\220\020e\274t\230/\2761\261Y\276\361h#>H\341\332>wgM\276\20686>\335\014w>\024\320\244\275\302\300S>\341z\324>\321\\\247>Y\026\014\275 (w=\246\325\220=n\027\232>\275\344\377<\366\t\240<^KH\274\234m.\276F\224v>+Qv\274\321\255\267=#2\014\276\263\315\r\276\341\177\353\275c\264N\276\371,\217\276\210K\356\276p$\260=\222?\250>A*\305=\004q\036=\031\347\357<\262\364\001>\246\362\366=A\237H\2745\007\000?Di\357=f\024\233>|\325J=\216\007[=O@\323=\032\243\025>\334)\035>\336<U\275K<p\277\024\005\372=Z\330S>)\320g>\217\337\333\275\252I0\275Qk:\276\333\304i>]\341\215>hy\336\276sY\026\274\343\214\341\274\362{\253>\021p\330>\036\212b>\213\303\231>_F1>\241\366[=\235\240M\275|\362p\276\304z\243<\20686\276\213T\030\276\343?\023<s0\233\274\334K\032\276\216\221\254\275\371,\317\274\24461>\202\255R\275\336>\313=/\250\317>3\247\213>m\342\004\276E*\014>#\276s\277\004\347l\276\205U\006\274\204\273\243\276N\002\345\272\306\205C\275\027\324?\277e\031\342\275\314\227\227\276\321\221\214>\315\313!\275\236\001\032\274fI\000=\rq\354=\334)\315\276Z\365\271\276\235FZ\2767\246\007>\321\226\223>)\007\263\275\246\'\274\2769\357\377<m\342d\276\005Q\027\277d\257g\277\243\305\276\273Q1\256\276\314\264\315>?oJ>e\374\233\276\242\243\017\272*\000\226>\377\354g\276u\315D\276\240\246\366\276\205$3<\000\306\223>\037\364l\276>\\2\276\'\302\006\276\337\340\333\276\254pK=-\257\\=\024\226\030\276\353\377\334=\277\014F=\014\007B\276\303\016\343<V\266\217\274\001\301\274=%#\307>\303d\n>\024Z\026\275\241-\207>\036\304.>\301\255\233\275\"\340\240\276&\251\314\274\266\271!\2779\271?>\347\306\364\275P\307\343\275\277\257\333\273\357\376\210>wg\215>\234\212\264=\027\267q\276\224j\337\275q \224\276\373W\326>v\375\002>aq\370\275%\222h>\271\337\241\276\315\345\206\274{-\350\274\027\324\367=\233\002\231<\277\016\234\275\000\255y<\376\361\356>\362^5\276\017E\201\276q=\212>\037\034\"\273\331\224\353\275*\343?\276\010\217v\275\200\237\021>[\2249>\261o\307=\006\236\353>\334\364\347=\306\277\217>\031s\207>\301\312\201\276y\350\273\274X\305\333>\007\230y=\247\350(>\257\231|\276K<`\276Xs@\276\"\246\004>O\351\200>q D>\321?\341>\373\"\301>u\253\007\276\355(\316<\366\013\206\276\336Y\373=\036\320\010\274%=\254=\342\036\233>\347\010\317\273\307\365/==\270{=V+3>(\2708\276\010\003\357>)\315\206=\307Kw\276\323\366\357=\250Wj\276b-\036\276{\371]=!\345\347\2752=\341>\376&\204\276tF\034?\365\020M>u\001/\275\376d\254\275M\021\200\275\257\351\001=C\305\230\275\3165L<\256\2739>\270\257\243>@\301\205>\270\022\313\2737OU>\331=\371\2753m\377=\322\252\026=\303\270\033\275\323\024\241=\321\"\213\276\000R{>\324}\200\276W\223\207=,\274\253>\200\2371>$\234\266=\374\336\226\276\337O\315\276)\313\020>\177\334~=?\316\017<\247\313\002>\305U\365>n\024\031\275G\311\353\275b\237@\275\241\363\232\274\010\003O\276\230\301\030\275\004ps=9\264@@\212\345\206>\230\372\371\276\237Y\342>gD\001?\333\334X>\314z\301>!\260\022\276\035\003R?n\335\035?\307h\025\277\203\300\n>\226\317\202\276,\324\312\2762\001\177\275R\360\224\274\325>\255>\320\'2>\243@\177>I\242w>\256\201\255\274\302\372\377\275\226\t_\276\334K\332>\221\362S\2762w\215>\375\207$?Z\365\031>\376\324\230>\345\320\342=*RA>\"S>=\301\034\335>\371\367\031\276\013D\217\275\304`\236=_)\013>0\201\233\275F\261\\\276\325\347\212>\323\207\316>Y4}\276YO\255\275\020y\313;T\214\243>\364\246\">\231d\344\275\337\025A\276\310\230;>P\000\305\274\2345\370<\227:H\275\233\217\353=J^%?\217\215\240>\272N\243\276`!\363<\n\334\252>lCE>z\374^>\213q\036> F\210=W|\303\274\202\342\367\276\324\nS<\266\363\r?\350\207\021>\017\227\034\276~\030!>\225H\362\276$\321\013>\t\212?>3\212\r?x*\240\275X\034\016>6\352\301=K\037Z\276`\315\361\276J\322\225\276ni\225\2769(\341>\323\205\270=Pp\261\273\177\274\347>\3500\037>\264\345\274>8\363\273\276H\026p?d;?\276\303\237\241=\016\020L\275\037j[\274\010\002$=#e\213=\264<\017\274\233\376\354\275\346\350a\277]P\037\276\226Z\257\275\266\271\241>\226\355\203=7\224\020\274O;\034\276\203n\317>\031\311\236<\002\232(\276\255\371\221\275\363\307t\275\376\266\247\274\314(v\276\352\347\235>\313\241%>\222\256\251>\006G)\276\223\000\025>\264qD\274\\\035\300=\342;\361=\374\027\310\275y\351\206\2762\311\210\275\247y\227>\226\t\377\276%;\026\276\021\214\203<G\003X\276\367\222\006\276\357\346Y?\3171@>\255L\370\275~oS\276/n\233\277l\225\000\277\340\333\364>\263{\"\277<\240\354\275\264\216\272>D\250\322\276\250:\004>\023\265\224=0\360\354>6\223\237\2760\332c<tF\024=cb\363\275U\336\356\276\336q\n\276\247\\\361>\244\031K\276\362\225\300=\334)\215\276\245\024\364\276f\332\256\276_\014\225\276\331BH\277\1770\300\276\327\301\001\275\377\262\273\276\224\336\227>\233Z\226>\237\223\336\276\367\351\370=>\320\232>]P\317\276\022\211\302<vl\264\2763Py>?:5>\334d\324<?o\n\276\224\022\202\274\007\231D\276\365\020\275>\3377>>\007|\216\276\324\236\355;\316\252O\276\312\032u\276\265\031\247\275\244\214x=\250\030\307\276#-\245>2=\201\276l\222\277=\275s(\275\3171@\276\350\277\007=\322\035\204\276\nh\242=\226\004\330\276\205\231v\275\307\r\177=\352\347\215>\177\336\024>\355\231\005>\347\214\230>$\271\374\275\033\201\270\276\350\274\366\276+/y<\250\306;?\037\024\024=K\310G>h\314\304=\310^\007\277\'N\016\277\375\301`\276_^\320>_\351!<\177m}\274^K(\276\200\324\026?\031\312\271\276$\271<\276\342#\342=\277e\016\275\267\234\253=\237w\343\274it\007>\3475\346>\233\346\375>=b\224=\342\314\257>1\353\245>l>.\275?:5>\303\323\213\276\335\265D\275\363\313\300\275\264\223a\276\021\372:\272\02658>\001\301\214\276\030xN\276\364\2114?(\270\270=\376`\360>\366(\\\276P\031\337>\013\014\211>\016\276\360=\307\235\342\276\334\177\204\275\327\372b\276jjY>\306\277\357>~\030\001\276e\245\t\276\237\310\263\2769\t%\275\377\262\033>\256\266b>\231*\230>\270@b>X\342a?\342;\021\276\314b\342\276\252\177\220\274y\257\212\276_]\225<v\022\266:9E\307>\202\213\325\275\023\'\367\276\016\025c\276\325\004q\276\362^5>X\255\214\276\236\357G\276\3127\273\2755A\034?\"\216\365=\352\2174:\2721\035\276\017\227\334=Yi\022?\320^\375<\356\316\372>\n\334\372\275y\003\314\275U\023\244>{\203\337\276|\017\227>\3171\260>\037\327\206>%]\023>V\237K\276l&\177\276\247\\\261>\206V\247\275\341(\031\276\206\311t?\354i\227\276a\303\303>\325\"\"\275\374\336F\276\n\273\250<q\311Q\276~\214\031\276{\2405\2768\370\n@m:\202<\266\363]>Gw\020\276 {\215>\345\320\242>\371\240g\276g\325\247\276\n\235\027\276\345\'u>=,\244>\003}\002?\004\034\222>\n\365t\275\2451\352>\340\272b\275\r\216\322\275a\211??\033\236\316\276\032\213\366\276\301\250\244>\234\375\201\274p\010U\276|\235T<8\025\211\275c\177\371\276^\205t\276\2068\246>\003\225\261\276|\'&>2r6\276 $\233\276s\242\035\275\354\206M>UM0\276\200)\003=\264\216J\276\275:\207\275\212\002\315>\374\001O=2U\020>\257A\337\274\002\267\356=T\000\214>\001j\372>z\212\234=%\260y\275\252+?>\006\020>\275U\030{>\033*\366\276k}\201>^\235C\276\343\027\036=\320a\006\277\242\234H\276\363<\230>\3230<> \230\243\275\021\030\253=\272\240^\276Lo\177=\357\376\270\276\n\272\035\277\334\331W\275\014v\223>\304_\263\276\034\013\252\275\274\256\177>\326\034 >.s\372\275\350\237 >\227\342\272\276vT\005\277\022\367\270>\225a\034=\225\266x=\232w\244\277\256\365\225\276\221\362S\276\361\200\n?\357 V>0*)>i\000\357=\003[\325>R\362\252\276\\rT?\343\304\027\275\331BP>hy\036\276W^\362<\316\215\351\275\024\"\020\277o\330v>\216\314\203\276\022ki\2776\352a\277\030`\037>\376\233\227\274\364l\026>+\277\014\274x\265\274\275\300Z\225=\022\302C> C\307\275\230i\373=/\213\t\276\007B\262>%]\203>>\320*>\262c\343\275PS3?\237\036\033=\2760\331=\317\332m>s\242\035>\371\024`>\375M\230\276Ll\256>@\373q\276\257\261\313>\362\265\347>h\263\n>\333\024O=`\253\204\274\223o\326>\366\177N\276%@\375\276Yi\202>\255\335\366\275\262\200\t>\036m\334\275Ou\010\277\231\r\022>\023\323E\2753m\317>\374\251!\277\322\035\324\276\n\205\270>\t\033^\276\233s\220\275%[\235\275\224\366F>r\211\243=\354QX>m\253Y\275M\025\234\276\227\310\005\275\302\243-\276\206\346\272\274\206r\262>2vB=\224\022\242\2754\274\271\275\370k2>\302\300\323\276\201C(<\035\217\031\276o\273\010\277\372~\212>z\307\t\276\225}\227=\363\216\363>\005\305\257\276\032\373\262\275\253\262o\276\243\316\234\275\226&\005\276\345\233\215\276\330\2369\276\347:M>\nh\"\276\305\306\274\274\306\243\324<\357\376X>yXH>\372\320%\276\253\262\017>\336\345\202>\302\027\306\276\317\243\242\275\022\210\017?\036k\306=;\344F>\007\231\344=\2549\030\2778\241\000\277\251\301\304>\233\376\254>`\310\232\276\024?\206\276.\002\303=\350\023\211\276\256d\247>|~\330>kH|>:X\217\276\241\363\372\276<1{\277(I7>R\362\n\276\346\\*>\204\273\223>\331\010\224\276\221\n#>\251M<>\347s\256=H\340O=\275RV\276\376\361.?\352[f< \270J<<\203\006>\0006\300=\033*\006\276\271\211\032\275\262\021\370\276W=\340\274\363<\210>\231\323\265\276\300{\307<j\274\024>\204\360\310\275e\302/\276\223\214\334\276\357U\013>L\335\025\275\202\220L\276\262K\364>\rl5\276@0\207>\303G\264\276\032\2435\276\225e(>\025\2510>8\363+\276\031V\201>\007\353\177=\300u\005=4.|>5\270\255<\253\317U\276\365cS\275\277}\035>_\226\366<\262K\004??W\243\277\273\'\217>\370\245\036\276p%\233\276\302\206\227>\2755\020>\276\274\320>?t!>\3543\347\2745\007\250\275\013^\024\276\225\232\275>\275\305\203=\003Cf\277\320\263\331=H\341\372>\231\022\251>\342\351U>3k\211\275\256\202\030=\256\330_\276gao>{\332\201\276\214-\004?w\333E>\332\311\340=\022\024\277>G\217\277>\036\247\350>\234m\356=I\327\214\276\016\333\026>\320\355\005>]\341\335\275M\276\371>\273\nI>\213O\261>=,\324=H\277\235>\031\305R\276\3272Y=\307\272x>\354\243\303>rPb\2768\370:\277\244\307\017\276\035\254\217\276\342\001\265>/\243@?\276M?>\372D\216>\236\007\247\276\331_\206\276\032\367f=\030C\031?}\005a?\310A\271\276g\362\335>\210.\250>\310\014t\276\001\301\234>,\362\253=6\253\026@\243\001\374\276\313,\242\275\332 S>\027.\253;\277O\260;\336\345\342=\037\364L\276G\001\202\275J)h\276\032\250\254>\210F\347\276\033\330\352\275N\231\233\274\245,\303\276,+\r\276\304\351d=+\207\346\276\241\274\017=\234\212\264>\315Y_\275\217\344\362=-`\002=2\346\216\276V\202\245>\017\271\211\276\365\271\212>?\326\035\273]\305\242\275\306#\247;\237v8\277ga\017\276\036\342\037=*\251\323=\023~\t\276\311q\037\277P6\245>\376\232l\2768J\256\276\313\363\300\276YQ\223>\n\205(>\302Q2>\350\207Q\276Gw\030?\030\225\324\275\307\235R\276\013^<?w\370\313>$\014\203<\204\273\023>_\265\262\276\220\273\310\275j\334\233\275\032\243\345>\000R[>\321\221\334\275\267b\257\276\350\335\230\275\250\030\347>_\321m=\241Ib=\230n\222>\223\000\205>\205B\204>i\035\305\276\301\250d\276qZ\020>\313\234.\276Nz\257\276\253x\303>q=\332>w\326\356\275\023I\224\276\037K\277>\336\345b\276J\357\313>?\035\317>JF\316\275l[\324=gaO>0*)>\313g\001\277\350\274\366>\032\206\017\276~\030a>\225H\202>\027\267\301>)\355\355\277\236$\275\276\315\314\254\275:\257\201>9\326\025?=\233U\277\242E\026>\235\364\236>\233\035\251\275/\304\352<\263\2308\276Q\240/\276F\261\024?33\203\276K\345M>\272\0247>\n\277\024\277\362\266\022=HO\021=\003\225\261\275\010\217\266>\325[\203>\032\335\321>\342\003;=\3230\274\276\017\0135>\230\206a>\332U\010\276)\256\272>\273\n\271\276n\243\241\276\331Z\037>uYL>\264q\304\276\034\3233>J\322\005\277\342\344^\276U\030;>t\227\204\275\'k\224\276P\215w\276S\354\250\275\354j\362<\352\317\036\276fI\260\276\322\214\265>\243X\016>\201>1\276\366A\026<\307J\014=\371\017\t?\244\245\202\276\323\366\337>\217\374\221>$*T=\321w7\275\334\235U>\303G\264>\035\217\211>\005\250)\276;6\342>\031\312\211>y\037\307\275\356\010\227\276\203\027}\276\270\222\215>\025\343<\276\300\004\016\276\205\n\016=\330\330\r?v7\237>+\207\226=\356\316\212\276\210K.>\375\0221=+\025T\275\224\226\333;\240\025\370>\202\034\324\276C91\276FB\333>\341\226\257\275\224\336\'?.V\324\275\342u\215\276\225}\327\275\206\346Z\276\225H\"\2766Y\203>\240\246v><1+>\374\347\304\273\265O\007=;\374\245\276\332 S\276w\326.\276\336\345B\277\351\232I\276\261\304#?+\373\356>\241\240\264=R\270^\276uv2>\300\262\362\276\\=\037\277e\344\374\276\367u\360\276\014\007\202\276D\335\307\276\211A >\005N\266\274y\006M\276\033\022\027\276=~?\2776 B\275B\225:\276\026\206\010=\342\3515>\020z\026?\375\202\335\275\027.\213\275\277\3615>\2402\236\276\266\024\220<\265\303\257>R,\247\276jg\270\275\377\316v=\342X\227>O\222\016\276\343\245;> $\233>\021\374\337>\205\224?>\220\203\202>w\363\204>S\005C>\272I\314\276\333\304I\277\337l\023?\247?\273\276\202\254\'<F\266\023\276\277C1>\313\370W>\220\2032>\020\222\205>\2760\231>\276\301w\276T\310\025\275#\020\007\277\030\354&\276\311\310\t?\022\203\000>;\344\006\277\221a\345>\324\202\027\276!\037\364=\t\371\200\276}\257a=\304\261\216>\026\023\033\2766\037\037\277G\003\210?A\353\247\270XV\022\277I\235\300\276\362A\317\2750L\346\275\036P\246\2760H:\275b\2416>Z\330\023\276\271p\300\276\240\246V\276\331\224\013?\240\025\310\2766\311\017=d@\326\276-\2257>$E\034\277B\t\243\276\334F#\276HRR=V\2025\277\206r2\277\377\\\264\274\206=\275\276\335C\302;[\231\260\276\247\3158=9\"\004;5\177L\275R~\322\275\022\275\014<\261\242F\276\264qD\275\274\005\322=\320\233*\277$\234V\276\356\353\000\276uv2\276\312p\234\275\007\353\037>\234\242S@\n\364\331\276`\217\311\275\010\217\226\276n\206\033\276\013\r\304\274\257ZY\276\275o<\2762\346\216?#\276\303\276_)\313\275\345\325Y>9b\355>\212U\303=\370Sc\276\002\016!?N\013\276\275\242\356+\277\227\305$>.\034\270>\014\223\271\276x(\n\2761|4\277=,\004\277h\256\223\275\331{\221\2750d5>\324\370\340;\336\345\222>\205\353Q\276=c_=\301\305\212<\274\350\353\275\322R\271>\002HM>\274\311/\275\303\266\205\276\016O\357\275 \230\343=\303\365\010>xE\200>}y\341\276\340-\000\277\234\303u=\254\220\362\275\275\035a\2763\3417>T5!>\034\266\355>\272\203\030\276\320\362\374\275\330d\215>\256\3230\277\326\210\005<\324}\300>\251\331\013?A\323R\275\035\217Y>\241\326\364>Q\240\017\276\033\022\027?,+\315=\306m\364=F\261|>Gw\200>\356\224\036?\265\032\322=<\275\222?\024\226x>5c1?\000\214\227>!v\226>\357\033\377\276\377@9\274\r\340\215\276\233 J\276\3500\007?\277}\255\276\237q\301>D\211\226<\212\223;>\204*\245\276{\240u\276\344\022G\275\264\310\366\275\027~\025\274c\3214\276\\\217\322\276\363\310\277\276Y\335\n>\007\360V>\016\020\234>\333\277R>\215ES>G8\235>\232\266\317\276RI\255\277l\262\366>\230m\247=\355*\244\276\344\332\300>\253[\375=\310\231\246<\347\343Z\276\035\254\357>\221a5\276\'\275\017>K<\220>\334)\035\276\272k\t\276#\020\217>\336q\n?Ra\334\276\t3\215>1\266\320\276\337\211Y\276\223\001\240=\022\275\354>D4\032>\231\022\311\276\037he\276\344\024\275\276\311\345\317>\n\334:\276\221\355\254\276\000\256\004\276K\002T>\255\243\252\276m\2163=\356_\231\276l\225\010?c(o?\215]\002\276Z\331\276<\346\005\350>\002\361\002\277v\341\307=\251\302\277=\276\366\014>V\237\253=\252+\317\276aT2\276\355*\244\2769b\255\276\314|\247\275\220\024\261>\271\245\025?\022\204\253<\270\036%>\017\231\262=W\t\326\276\360\026\330\276\226\004\350\275\022\2107>^\205\224\276\'\024\342\275\204\021\373\274\314aw=\361K\215\276F\231M\276\320_\210\275\365J\031>\025\214J\276\200\2005\274O<\307=W\262#>UM\000?\330d\255\276j\331z>\340\276n>Ae\034>\254\305\327>\360\304\314>\224\301\201\276Y\332\211\275\326V\014\276\211$\352>\252\'\263\275\252eK>\005Q\347>P\000\305=\241\363\332=.\377a>B|\200=I\3307<&\345.=\000V\247=\305\346\303>.\255\226\276c\356:>#g!>\264\260\'?\305U\005\277<1\213>\321\"\233\276\342\"\367\273\211\357D<I\272\206>s\200`>\261m\031?E\365\326\275\375\277j=\306\026b>\304\224\210\276\327\027\231>\340\020j>s\242\315>\002\331\213>h\226L\277\212\253*\276\240\0258>\360\371\201\276\370\245\256>!vf\276\337\303\345>}\350\202\276\247\"\245\276\355\233{\275\321t\366\274C\220C\276B>\210\277\266\241\032\277\354\022\205\276wH\261\274\014\310\236\276\247t\020??\255\202=\250\252\260=\356w\270\276\324\'y=\032\027\356>\240\244@\274`\002\227\276]\371\034?9b\255>!\002.>\245f/\276\312\303J\277\0363\300\276\257%\364\276d<\312=\025\000C\276\277`/?->\205\276;\365\222\271\321W\020\276\021\344\260>\233\217k\276\304\353\212>\357\013\236\273\257Z\351>%\352\205<\265O\207>\212\216\324\276\307c\206>cz\202\276\345\325Y\276\314]k>\311\257\277\275\320\270\020?]\341\215\276\270@\302>\227\342\352\276\242\227\321>5F\013\276@\2079\276\002\364;\275\035\2547\277\314\264\375=\3019\363>0\307\341\273\t\371\000\277\210\364\033>\233\033\263\275\225HZ?\014\223\351=\264\256\321<\346\256e\276\032\206\027?\255\3356>[\266\226>\027\202\034\277\301\213><\204\236m?T\214\243>\023f\212\2767\211\201\275p\354\231\275K<\240>\337\370\232\275\334\235\025\276\023\362\201>#g\261>\315\351\262\275{\332\201=w\241\331>\007_\270\276\343l\272=\264\260\307>\r7\200>/\335\034@M\331i=y]\377\275\257\224\265>H\341z>\'\240)\276\370\030,<\333\023d=x\013\234?\265Q\235\273\004W\231=@\205\203\275\344N\311>\225\237\224>\261mQ>\306n\277=\324\361\330=\307):\276\315\314\234\276\273\017\320\276\256\365\025?\214g\240\276\034|\201\276W{\230\275\t3\r>]\334\366>\364\372\223:%\007\354\274\300xF>o\236j\276l&_\2764f\022=\257\261\253>\301\312\001>\006\271\253\275\340\204\002>\311\377\204\275W\004\377\275\002%\252;\211\230\222\276ms#>3\212\245>x(\252\275\361e\202=\021\374\017\276^.\342=\214\276\202\276\252\273\222=\203\243\204\276\210\000\026< \265\t\276\200`\316\275\032\206\317\275\300\317x\276+\372\303<\312\246\034>-%K<\200\014\235\274~t\352=\271\253\267\275\350j\233>E*\314>\"r\372\274\004Y\017=\253\t\262>\003&0=\322\035d>\361\200\022>\266\242\r\275}%\020\275\354\210\303<\335{8>y\222\024?\217\252\346\275D\301\014=\370\245>\276\354\027\314>\037G\263=\342\006\274\276p|\275>\204\236\215>\302\300\363\275\356\261\264\276\260\033\366=5{\340=rP\002\276\364\211\034>\313\326\212>\230/\277\2762w-?Gry\276\367\222F>\206\254\216\276&:\013=\3063\210\276\337\335\312;\001\207h\277!\313\002\275\344\024]>\264\002\203\275\344\017\006>d\006\212\276M\020\325\276\004!\031\275\367;T>XU\257=\342\002\260=\324\202\267\276\311\257\237\274\366]Q\276(\325\256>_\357\376=R\270\036=6\"\270=o\365\234\274\031s\327=\215\320\217=\034]%<\377Ys\274\020]\320\275\265 o:\311<\362\274)\005=\276\222\\^>\373W\246>!\260R>[\320\273==f\373\273?o\352\275\270\314\251\2754\277\332\275\315\314\334\277\322\001\251=\022\023\324<\343\215\234\276\231d\344=s\242}\276\014\352\033\276n\206\233<\221~\233>\314zQ\276\216\001\031\277.\217u=x\325C=}\313\\>\335\014\247>\005\212\330<\017\230\207<q\217%=[\264\300\275\367\352c=\323\203\002;2F\332;|\017\247\276=\363\362\274\206\033\020\276\274XX\275\014!\347<\244\307/>|\362p>\204\236\315=\242zK>\\w\203\276\236$\315\276\253\316\312\275*R\221\276\022\275\214<\236A\003\276\266\272\274\275C\3645;\230Q\354\275$\321\313\273\321\005\365\276\220\275\036\276\257\320\307\275\276\331\246\276\322U\272\275M\365\304\275u\310\235\276\020\257K\276\266J\020\276\217}\332;3\213P\275\034@\277\275V\232\364>\377\347p\275wgM>\247\313\002\276\242E\266\276Q\245\326\276\332\346\006>\010\312\215=\300\225\254>\200\327\247=#\203\\\275\250\000\310>\267EY=\332\256\260\275\305\254\207\276\360m\032\276\210\235\311>\336Td>\347r\203\275\354\027l\274\215\177\257\276\3104\t<4\200\367=\342s\207=\3711\226>\005\300\030\276\003x\213>j\030\376\275A\360x=\355*\204\276f\024K>\017~b\275\304|\371\275\332V\263\274\204)\252\275\027\361\335=k\202\010>\322\030\215\276\372B\210=f\367\264>\361\177\207=/\372J\276r3\334=\277\016\234\274]\213\266=\025\214\252\276\345B\305=\025Wu>\341]N\276;\302\351\275#\3630?\232_\r\276h\350_\276\3578\205\276\\\311.>_a\301<~\306e>nQ\266\276\247?{\2767TL>\273\325\203\276\254\215q=\314]\233>gD\351=\371\370\244\275\203kn\274\033\273d>\320\235\240=\342\352@=&\031\031>t\352\332>`\352\207>\021\031V\276\307\021\353=:\314\267\276\341(\001?\340\333\364\275p\261\322>YQ\223\276Y\372P\276\313J\203\276\224\366&\276\342\314/>p\264c\275\355\272\227=c\227\350=\375gM=\325\225\357>\223Q%=\201\354\225\276$^\236<\325\312$>N\177\366\275\222XR=\330d\255\276\374R\037>m\220\t\276\020\222\005>\225\324\001?\330\330%\276\237\311~\275t\263?=\3124\272\275\330G\227\276\372\320\205=\365i\025\274\356\224.\276v\306w<3\376\255\276$(\006?\3225\303\276\256G\201\276\375\274\t>$E\204>\276O\325\274\240O\244\276M\025\354?F|\267>\241g\343\276>\350\251\276\247y\307\275\351\324\345\276\"\340\320\2755\014?>tF\254?Z\236G\276\\\346t\276l\225P?\231\236\200\276zS\021\276\235\2722\277\016\023\215=\352\354\264\276b-\036>\250\030G>\304w\"?\251\244n\276\235J\246\275>\313\023>y\007\270\275\237\260\244>\310\014\024\275[\231P>\334h`>%\257\256>\t\212?>\245\275!\276\246c\316<\020u\277\276\267\322\353\274\313\204_>\364O\260\276(\n\244\276\366z\027>\310a\260=A\201\227=\221\355\034>\270\257\243>Y\372p\276\302\206\267\276\322\306Q>\216;\245\276O\257\224\276)\005}>\010\217v\276b\363\221>\343\341}=\373\345\223\275\025W\025\277\317\205\221<x\234*?\221\355,?\261\247\255>\205\316\353\275\250\343\361=\r7\360\276\222\350\245>9\326\265\276\264Yu>\032E \274r\026\026>\023D}>&6\337\275$\264\325>$b\232>\232\316\016>I\242/?P\307\003>\006\330G\276\006/z>\0318\240<Ed\330\274\271\215\006\277\2201g\277\347\373\021?\007\353\257\276:\314\207>\270;\013\277\260\311Z\276\033G\254\276\223\254\003=u\002z>\001\373\310\276\214\276\032?)\230q=\232\253\013;fI\260>\002\274\305\276\005\256a\273\204\201\207>w-1?X7\336<\002\274\365\277\t\376\227=\213,\343\273\235c\220>=\233\025?\266\276\250\276\223\000U\276\246\320\021?\360\212\000?\013$h>\375K\222=\263{\322>)\"\203>\225`1\276\336V\372\274\2716d?\264\216\"\277\035\001\334<.9V\277\333\2056?\321t\266>.\255F?\241\204I?\343\301\026=.\004\371\275od\336\276\032\3351?\201\317\217\276\266\200P\274^\331E=?\002\277\275\355\231%>c\234\377=\253x\243>x\227\253>\252\016Y>H1\240\275\024\355J>\207\245\201=\026\207\223>\211\352\355\275\365\271\332\276Q1\256>VG\216\274\256\201M\276+\030\325\275\275o\034\276\343\337\007\277|\266\216=\036P&?\337\340\213>\330e8=I.\177>\222\263\240>\025\306\326\275\337\025\001?\322\254l=\377\354\227\276\232\311\334;\372\233\030?Y\335\032\277r\334\231>\353s\365\276\000W\262\274\036\304\216>\030\354\326\276\210\017\254\275\003\262/\277\013\357\362\276\346\256\245\276bgJ\276\325\004Q\276\277\232C>\363Y\236>~QB\275\275\251H>\014\315\005?\341`\357<#\333Y>\016\025c\276\315\006\331\276\303\2010>L\216\233\276\234\301\237=R\017\241>\370\210x>\256\266\"\276\347\211\347\274\321\313\010?\t\212_\276\255\3711=;\031|>\371\240\207\276\275\373C>UQ|\275\221C\004=\265\303\237\275\256\365\305>x\227\273\276s\201\313\274\212Y\237\276/n\223>r3\254\276\262K\304>\332\311`>B[\316\275p\225\247\274\020\225\306\275y\222\304>dX\035?\377!\355>\321\005\365\2753\304\341\276\303\274\247\275\023\361\326<c\271\225>\253b\205;e\302\017?\256\236\243>\347\306d?a\337\016=\273D\r\277\242]%\276%]\023\276\373t\274\276\335{\370\276RI\035\276\226&\305\276Z\360\022\277\322\373&>\234\304@>yu\036\277N}\240\275\246\233\344>\217\252f>\367\315\375<\342\001\035\277\334\200\257\276\220\2439\275\372\361\027\275a\375\177\276itW\277\016-R>_F\361\276\303\360\221<\027\324\247\276\371\275\275>\317/\252\275#\370\177\276p\010\245>\"\216]\277\274ts\276\255\300\300>V,\276\275\004\312\326>\201\225\023?vl$?6Y\203\276\\\254\310\276\'\024\222\276\372\362\n\277ToM?\310\006\022\275\317f\345>\304_C?\276j\005>\343p&>\270;\013>!\007%>0L\036\277\203Q1\277\0010\036>\036\033\001\275\2133\006\274k\232\247\276\232|\243\276P\215\327\276\363\330\340;\304|Y?\301\342\020\276\200\267\030\277\367\000\275\275\360\026\270\276\303\273\214\276\331\316\027\276\343\245\033\27777f\276l>\276>\230n\302>\0162\211\276o*\002\277\341\356\234>Ra4?\270\036\345\276G ~\276[@\310=\205\266\334\275?T\032=)\350\226=ms\263>;\302\371>\2755\020>W\317\031\277\356\224\016\276\270\257\313?\342\344\216\276\250\246\304=[|*\276}\005\021?\376,V\275\305\217\261>\013\357\222\276\340-\360?\322\251\213>\343S@>\311YX\276GU\023>yu\006?\027\361]=\261\026\037>K\260X\276\373\274\030<|ar\276\357\217\227>!<\232>6\253\316>\314E\374\275|~\330=a2\225\275\005\372\004\277\262I\376\274\212\253J\276\001M$\276I\205\201>/4W\276\037\2004\276\273\270\255>Na\245=\356_\311\276\203\243\304\276\322\000\336\276\014Y\335\275\325\312D>\371\240\327>F\353\310>\256\327t\274\304\261n\276D\300!>$\271\014?l>\336\276\303\365\210\276\254\255\010?+\206\213=fN\367\276\177\366c\275\325\347*>\205\224?>xE\300>~W$>^gC=\013\013n<\223\030\204\27677\206\276^\020\221\274\243\036\362>BC\007?\313.X\275\3372\'>\330\233\230<\273\355B>\204*\025>X\001~=}\354.\275\372\'\030\276\221\362K?\373\221\342>^.\342>P\001\240\276[\224\251>\2304\366>\016\274\272=\313\332&=\320a^\276p%;=\210FW>\276N\252\275\"\306\253=<\210\275>\214-\244\276\345~\007>y\006M>\201\262\031?\220\367\352\275|\017\307>\323\274\243>v\211\232\276n\206[\277\230\206\341=\306\304\346\276mV}>l\262\006\276\313-\355\275\n\242\356=\362{\033\276\225\361O>%y.=\255Q\257>\005\027\353>u\260~>\361\235\310\276o\240\240\275rm\310\276v\337\261<\352x\014>p\316\210\276\355\231E\276\273|k\275*\035\214>m\347\273\276F\353(\274\344N\t\276\325&\316\275\224\302\234\275\225\016\226\276\215\264\224>b\202\232\274B!\002>\275\214\342\274\200\236F\275\327\332;=\370\031w\276\307\364D>U\331\367\275\252\312\010\274\264\002#\276%;&\277\316\337\344\276Bx\304\276\244\374\224\276\310\007]\276\231\201j>\327\022\262>\241\326\224\276\230Q\014>u\216\031?\353\250\352=\316\377k\275\3349\203;#J\373=tA-?w\276\337=\313\326\032>0\201\213>eS\216>\275\342\311=\232|\363\275w\204\323\275\250rZ\275Y\213\257\276\031\312\211\276\033L\363\276\247\313\"\275\304L\021;]\247q>\252\271\274=\237Y\322>\270\036E>\231\022\t\277\230\335\223>Kv\354=^\205\244>\024yr>\351\016\342\275By\237<_\322x>d#p\276EG\222\276\270\344\210\276\023\233\217\276\230\027\340=h\005\006\276\317N\006>;\301\243\273\2446\201\2761\266\020\2760\r\023\277\'\245 \276/\300^>?R\204>\275\343<?V\274q>f\024\313\276\216;\265\276\220\203\022>\005\301\203\275\336\216\220\2761{Y;vq\373>^\3645>0\3622=\336\223\007\276d\036\351>\214\333 ?\364\336\230<\326\307\003=\361\272\036>\353SN\275%\366\277;\323\366o\276n\372\243\276\n\334\232>0\201\003\277\316\245X>\027H\020\276\335\n\341<\366]\241>\374\000\224>\215\324\233\275%z\271>\027\267\241>Q\332\333\276(\270x\276\014vc\276^\272i>\265l\355\275\216\220\301=\227\342\332>\324}\000\277!\345\'>\310Ai\2762\311\250\276X9\264\276\371\017I\276\377\354\327>\r\306\250\275\025\2541\275\264\216\332\276ak\327\270\221\320\026>NE\272>\210\272\'\277\003&0\276\342\001\005>\370\376\006=\316\374\212\276S\221j\276\214\206\314\275\264\253\320\276[\231\000\277\227\250\316>\344\017\036?\234\247\232\276R\270\216\276}\033\007\2745{\340=\316\337\304>/oN\275\202\220\354\275>\355\220>\332\376\325\275\332\341/\274\004\347\214\276\275s\250=\230n:?]\247\241\276\374\340\374\274\263\014\221\276\033\330\n\276\226!\006\277h\227\357<\344NI>0\273\'>\227\342J\276\313\234\216>\n\242n>\245f\317>\021\252\024= A\361\275(,\361;\375M\330\276\006\2731\277\317\240!\276\321\313\330>aq\310>\273\n\351\275a\246\315\276A\267\327>7\032\000>\014\0371\276\274?\336\275\026\026\\\274\372\355\253\276\017\227\334=:\\+=|\231h\275\026\0302>\242(\320=\327\206j\276\370U\271\274;p.\276ZGu\276\016J\270\276G\375\032\274\261\247}>b\241Z@\371\024\020?\215*\203=;\344\346=\225H\262>\361\365\265\274\312k\205\275uX\201\275\271\337\261>\005\250)=\324\322\\\274Aa\320\274\240\303\034\276\212Y/\276z\337\210>\350\237 \276\360\277\205>B?S=\006\022\344\276\250o\331\275\344\017F\276\346\221\237\276w\025\322=\265\0322\276y\005b=/0k=C\221\356<a2\025>\337\246\037>\323j\310>\324e1\276E/c>\001\371\022=\235\021\265>\014:\241=\206\306\263\275\356\272\022\274\324CT\2765)\225\2765$n\276\331\261\321=\207\371R>\027\273\375\274d]\274>\010\344R\275\213\371y\275\010rP\276\341\227:>B&\311\276\357\311\003>\265\341\260:,H\243\276\025\2541\275\033LC>\273\231\261=\251J\233=\376G\246=\340\017?=\236$\235\275(\362\304>\370v\246;~\304/\273\355dp>G\350\347\274_\007n\276=\267\220\275\006/\372\275[\323|=\256\236S\276\370\245\036>\307\364\224\276\226\313\306<\356&\370\274P\302$\277_)K\276\230\300\255\275\310$\243\274\030\261\217\275\232\010{\276\307\364$>\333\242\274>\301\342\360\275\257\316\021\276\356%\r>RI\035>\006\275w=\373WV\275%\006A>+\210\001\2746\260\r\277\376+\273>\343\214\301=\355\365\236\276\2379\213\275)\262\226=\270Wf\275\365\271\252\277\014@\303=I\273\221=\314@\005\276\350\244\327>\303G$>Bz\n=\336\216\200>\300&\353\275\322\276A\272z\245\354\275\023\'w>+\366\267\276\207P\225\276\335CB\274\306m\264<$\324\254\275jj\211>\244p=\275\331=\031>x\tN=)\350\366=\304\353\032>\r\251\"\275\367\350M=\375jn\276L\216\373=2U\220>\265\032\322>\354\027\254>\344\275J\2767\n\177;\342XW>a\032\346\276\221D\217>F\224\236\277.\305\325=\343\241\024<\337\032\250\276T\343\345=r\301\031\275\323\274\003\276\344f8\274\251\336\032=\300]\366\274\006\022\264\275\276\237:>g\'\243>\204\323\242>\017E!\276\343\210\245\276_\177\022\275A\245\245;\\U\266=\r\211\253>\005\243\222\274\253\t\342\275U\3703\275\277\324/\2760c\312\275\005\027\353\275\345D;\276\3602\303\2736\002\221>\225\327\n\275z\3022\276\270\316\237=\204\365\277\276Mw\350;\315r\231\275]\245\273=\337\375\361=\316\032\234\275\031\255\343\275\300&\333\276\rq\234>R\362j=\203/\214\276\365\201d<rmh\275-%\213\275\305s\226\275\003\264m\275\217\212\277\275\354\300\371=}\256\326>#\272g\275n\362\000<\313J\263>\001\366\301>\267}\017;r3\\\276{\335\202\275M-\033\276\223\000\365=K\004\312\275\332\376\225\276\023\233/\276\nh\"\275\274\\$>\212\3100=A\r\337\274\016\333\326\275Yi\242>\226C\013\275d\002\376\274F\323\021\277r3\\\276\001PE=#\204G>i\343\350\276\266\326W>\266\332\243=z\031\205\275\227\377\320\275qY\005\275\264V\264<\263\014q>w\241\211\276w\333E\276h\010G\274zm6=n\277\374<\355\177\300=\320~\034?\022l\\\2756\037\207\276\205|\200>S=\231<\234\277\331>,\324z>\022j\006: )\202>\327/x\276@\331\324\275k\237\216=\354\335\237\276\236\352P\276b\370\230>\250/\360;+\301\302\276\227s\351\275&V\206\275\204\014\344\274g\355\266>H\355\217\273\341\177k\276C\312\317=|\201\231=\272\203\310>d\006\n\2772\217\\\276\014\311\311<r\277\003>1[\262\274\007B2>\017EA>\254\213\333=\252e\373>!\037\004?\243\024\276:\320\355E\276z\337\250\276\004\255@\276\273\362\331>E*d?\363\345\005\2767l\333<\312\025\036\276A\232\201\276\261\242\226\276\235h\367\276*8\274=h\314\304=\232\261\350=.\004y>(c<=\312\210\313=(aF\276\251\373@>V)\275\274z\246\227=\371\367\031>)Zy=\231\360\333\276\343\302\221\276\2505M>\372\325\\=\264Y\225>[[\270\275Pn\273=/4\027>\306j\363<hX\254=\305\3762\276i\214\346>\317\330\227\275\"l\210>\204G\333\2754\235\r?\242}\254\275W\261\270\275\306P\316=]\334&>\270\036\001@_^@>Uj\026\276\022\275l>\366\321i=\351\232\021?\313\271\324=\016\333\326=\020X\271?\2614\360\2739\234y\276\237\310\203\276s\271\301\2757O\r?\264\345\274>k\236\243\274\231\201J>\273&\304\275od\276>\353s\225\276\246_\"\275/\300\336\276N\234\214>\274\"\370\274weW=\023\362\201>\223\251\342\276\0216\034>\271\"\014\273\352\t\273\276S\263G\276\363Z\311=/\246\231\274\310\352\026>\352[f\276\276\336\025\277\240\341\215=\214\235\360\273\216\316\371;\303\273\334>\377!\235>\332U(\276i\306\002>\377xO>j\207?>\263\007:\276\014\316\300\275\320\017c>\231\rR>B\262\000\276J\265/\276/\0271\276\264\002\303<Ed8>! _=\273D5\276^\276\225=\305\003*>\207\212Q\276\314\2277>W!%\276\371\332\343><\242B\275\303(H=\314@\005\276\205\224\037>\022\002\250\2729\177\203>/n\003?\264\037\231>\213\246S>b\241\026>\322pJ<\203\336\233\274\036\341\264\274X\216\220=\320\362|\276l\004Z\277\265\375\023?V\016M>\240\335a=\242!\210\272\005n]>8\276\026>\355\323\361=/\213\311>8g\204>\342u}=\r\306\210\274#gA>o*\262\275@\303\033\275\205%^\276\257B\n\277\307\327~>\207\376\351\276\350j\263\277\265\303\177>\213T\000\277\026\300\224\274\\Z\315=\2035\216\275R~\n?\312\340\310>Y\375\221<}\221\020\276=)S\275s.\205>3\340\214\275\022\302C>\032n\260>6\345j>\251\331\243>z\302\n?\301V\351>\013\270\347\274\327L^\276\367\222\006>&\215\321\275\0322\276=\007\261\363=+5{\276w\276?>\272\242\264=S\226\221>\376\267\222\274\363<\210>t\322\313>\254\313\004\274n\213\022\277\245,#>\013\230\300>\246D\022>\023\233\257\276\275\251h\276\177\301\016>\365\363f\276}\263M>\021\344`\276A\203\r\275\201\317\257\275\325\262\265\276}\005\t?\266\276\270>\005\333\250=\214g0>\201\225C\276\017)\006\274M-\253\276\010r0>P\215\247>u\037@>\330-\302=]\371l>(a\036\277\350\2746\277F\224\226>Z\r\211>\234%\267\273\311\223\004>k\267\275\276U\366\355>\217\252\326>\344N\t\277\232%!\276\331\260&=\321\221\254\276\350\366\022>\204\330Y>;\031\\>\327\027\251>W`\310=u\006\306=J_H\275\177\023J\276\364\025\004\276jMs\276\345\n\017\276M\204M>\031\342(\277\300[\240=\366\013\026>\326;\034\2754.\254\276T5\241>\325\222N\275\253gw\273\363\2163>v\340$?i\343\330\276:\347\'\275\001\336\022?\335\265\004\2770\201;\276\302\335\031>QfC?\373\221\342\275\365\204%>\274\\\204\275\355\231\305\276\254\312\356\276~5\'\276\257\353\227\276:ue>\347\035\307\276\252\202Q>\262hz>\311\3109>u\216\241\276D\335\347>\242\264\367=\263\225\267\275\325\317{>7\032\200\276\353\031\302\275\025\306\326\275\014<\027\276+\023>>\273G6\275\303\273|>}\350\342>\331BP\276*\306\251\276\"\246\004>~\214\031\276\252}\332>J\265\217>\275R\026>\334\327!>\021\252\224>\312T\001\276\207\210\233<\367\222\206\276\220\203\322\275)\317\274\274\003\225\201>\r\246\301=\032\250\014\275\343S >\374\310\255\275\222\226\352\276\014\036f\275\034|\241\276^\274\037=\025\0364\275\204\330\331=\350\202\372\275\260\310\257\273\236)\024?\346\350\221\276}\226\'\276e\344\234>\244\373y\2754.|\276\254\377\363=\211A \275\321\221<\276\337k\310=\335\315\203\276\211\323\311\275\233U\337=\273D\305>\245M\225\275\t\026\'\276\013{*\277E\311u\2730+\224\275\252}\252\276\301\002X\275>\320j>\324\361\330=\343S\300>Yi\022>\212\037\323>\273Gv\275\200\232\032\276jj\331\275\303\330\002\2758\020r>\223\251B\276\247tP\276W&\214\276\342[3;N\356\027>\2407\265>\226\354\210\276(\362\014\277\002+\247\276^M\236<hw\210=\236)\204>\230/??\223\035\033\276e\245\311>\304Z|\277U4\266=\204\330\211\276P\307\203\276\342u\255\276\232\266\357\276{\0242@.\342;\276]3\271\276h\263\352=\010={>\246\270\352\275\337\340\313\276\357\341\202>M\363\002@\225\232\375\276\231:\331\273\371f\003\277\371\024\300>\311\223\304\276\311\221\256=/Q=>d\002\276=mV=\276\363\037\242\276Y\207\243=\241\271\316<\033\r\220>y\314 \277\267zN>\260\033\226\276e\215\312\276z\302\222\276\021\253\277\275\343\245{>\006d\017\276\\\311\026?fN7\276\277e\316\275\366z\207>j\240y=L\246:\277\235c\360>+h\332<\034\010!?\306\3345\273\'\237\036\275\362}\221=.\342\273\276I\021\021?\344\024\315>\342<\234\275w-!\276\265\303\257>\036\026J\276\235\273\235=\021S\"?\227\034\267>Z\273\215\2762=\201>\352\262\230>\204\324-=e\337\035?j/\242\275\006\022\324=I\205Q\276\373\"A>IK\205>8-8\276\250:\344>\326\034\000\277\n\277t>\255i\236>\025\221\221\276\204\360H\276\2451\252>\304\231\257\276;\215\244>\347R\274\275Uj\206>\010\003O>\341\177\313\276\\U6>\230Ql\277\002\274\275?\022N\213\276\256\273\031\276\310\322\017\277f\240\242>b\025\257\276B\2620\277.\312l>\22017\276F%\225=\274\313e\276\215\226\203=\023\017h>\323\207\356\276y\222\204>\375M(\276\361\326y\275\277\364\266=>\350\271\2774\272\263>\366\013V\276\323\244\344\276\341b\365\276\017\234\363\276-\t\000?C\034+>\026\373\013>]\212\353=xz%\276\013\265\326><\367\236>\t8d\276\275\306\016\276\275\343\304>I\206\234=i\343(>\224MQ\277\223\030\224\276\270\001O\277\351\014L=\227\255\325\276\315\036\230>\020v\212<\263\006\257\275\327\206\n\276\302\243\255>[\010\022\277\220\367\312>\013{\212>k\232\207>t^\263\276\336T,?k\361\271>*:\232?\211{\014>\251\023\360>y;\002\276\340\343\002\274\031\215|\275\314E\\>\305\311\035\2762\003\035?\310\007\315\276\256\233\322\274\002\202y>\037.Y>\344I2>\016\333V>\025\3066>\3224\250<8-(\277\201\317\217>\346\352\207\275\370\337J>\356ZB\276K\035$\275\023\'\027\276SA\305=>\3751;\313\020\007>\230\300\r\276)\355-\276\247\256\\>\336\223\227\276S\320\355\275\322\251\213\276\005\243\322\275\022\245\375>\353M\261\273EG\322\276\027\232+?\327/8>\317kT?\"P=\275\002E\254\275\237\315\352\275\327\372\002>#\335\217\275p|\235\276-\225\307>\376e7>\024\"\000>4\272\203\276\366\177n>\344\332\260>+j\030\277\375\366\245\276\006\365=\277\246\017]\276\315ZJ\275|~\250\276iR\212\276\222y\264>\254\034\032?jhC=\254\031Y=bJ\264\276\002\2328?\027\365\311<\026\334O\275B[N>\000R;>\276\366\034\277\3269F\276\335\357\300\276\261\247\025?v\211J\276F\261\274>\030\t\255\276Tr\316\274\202\220\314=\235\272\202\276S\221\312>q\254k\276\313J\023>\217\252F>%@\215>}\010\252=\316\252\317\275\225\324\211\275:!\264=\032\333\353<RD&>\022k1>Ae\374\275\027\274\210>\266\333\356\275\374\343\025?/\300\376=,\016\247>\217\307\354\276\376\232\274\276\2240s\276MJA\276\341]\016>\266\235\226\275\272,\206>\010Uj\2752Z\207>6\345r\277U\207\\\276\367;T\277\305t!=\010v|=\332\305t=\212C\221\273\211\226\274=P\215\227<\310\265A?t\230\017>\021p\210\276U\301\010\277\204\331\204\274b\277g\275\"\253\333\274eS.\276z6\353\275To=\277\270\006\226\276\010\344\222\275*R\201\276\n\272\275\274Wx\247\276\035\224\320\276\240\246\306\276%\314D?x\013\344\276\337\246\177\276\372\325\254>\377\312:?K\351\271=\321\274R;}\005\351\275~5G\276:;\251\276ep\224\275\"\032\335>\366\013\246\276.\220\000>a\375_>\355d\020>^\362\277<o\273P>\342\351\225\276`\315A\276\177j<>@i\310=\"q\257>hY\267=\213\304\004=h\314\204=g\017\324\276\242\227!?\374\373\034?\336<\205>\220N\215>\321\313\210\276\375\202}>\350\237\300\276\322\251\233\276\223\000\265\276\310^o\276|a.@\366\321)\276%$R\274Ic\264<\014Y\335=\311Y\230\276\302/\225\276\235h\347>z\245\004@w\276\177\276\277+\302\275\342X\207\276\316\337\224>\272\0247\276\222\256\001?\257B\252\275\321<@=\364\032\033\276Q\240\217\276\320\355\345=+\331\221\276B\t\023>o\r\014\277\376\016\345>\002\330@\275K\0372\277H\370\276=M\207N\275\241J\215>\316\250y\275\334\364G>\036\341\364=\007&\267\274#-\365>\350\202\332\276Ve\317\276\321y\005?\256\235\210\275\030x.>|\270d\276\006dO>\003\2251>x\321\207\276\202\250\013?\212\345v>,}(\276\377>\343\274\232BG>\021\036m\276=a\231>\305\311\215>a2\225>\257\3537\276R\' >\001\301\004?\307)\372=\232_M>\313J\223\276?\000)\276\377\317\001\276\370k\022>{f)\276n\300\017\277\000\035F>\r\303\247\276.V\024\276O]\251>\377\317!\276\n\277\324\2750\360\034>\313J\023\276ept>\034\231G\276A\274n>\212\260!>\301\312A\276\373\\\355=_\265\342\276RI\235?\217\245\217\276\267\356f\276[\323\024\277\361\327\004?\305\217\341\276\301n\020\277qZ\020\276\255n5\276\242\321\035=\263)\227\276\371f[>\365\234\224>s\204\214\275\237Y\322=\375M\350\275\246\013q\275\371\205\227\275\335$\216\2779\264\270>n4@>\002e#\277\177\336\364\276\035 \370\276_F!?\034\323\023\274FB\233>\243#\031>a\303\263>\246\'\354>\234\371\205>\021\030\353<\270#\274\275Nb\300>\'\3325\276@3\310=\214J:\277+L\277\275A\202\202\277\nL\207=\301\312\001\277l\004b<\'\237\236=(\325\356\276\365cS=\037\205\253=\226[\232\276q\3467>j\301+\276e\252@>o\330\366\275\2034\003?\372\362\322>X\220^?\020]\320\275E\360?>p_\207>T\310\025=-!\337\275\375\025\262=\321ym\276\244\302\330>\240O<\277\023\'\307\276\232\"\300=*o\247\276\330\2369>_|\261=,}\350=\\=\207\276S\\-\277k`k>ep\324\275\260\311:>\360\026\010\276D\027\324<\2279=\276\\U\366\275n\027\232>\022l\034\275Lp\312\275\343\215L\274z\336\r=\342r|=\351\016\342=pB\341\276\305\032.=\234\212\244>\203\206^>\243\036\362\276\366\321\021?\007\323\360\275\244\344]?\215\227\016>\307\235\322\275?\376\322<L\034\231=U/\177\2750\360\254\276*;}\275\215\226C=\331\224\273\276\372a\304\276T\214\203>\244\252\001?\357r\321\276\025\343\234\276\325\t\250\276\263_7=\2652A\276\220\206S\275\242B\225\275\262cc>Gr\001??W[\275\232C\3048\211\014\213\276q\033\375>8\363+\2745\357\230>f1Q>~W\244>G\311\213\276b\2040\276-\354\351\276\205\266\334>\2505->zp\267>v\340|\276\254\377S>\177\244\310=\363q->\230QL>\247\256\374\2757\337\210=}\313\034\275\0319\233>L\210\271<e\307\306\274\255\243\352\275\016\363\005?\350i\000=K\345m\273\320\270\000?m\342D>\343\252\022>~\216O=\372\321\260=K\002T<m\255\357=\3274\357\275\1770\240\276\200\237\t\277\277\267i>_C\220\275\250\031\022=\377\347\200>y\314\200=rPB\274\241\0201\277\rT\206\275uY\334\276\265n\003\275W\262\243\276\"\033\010=\206\346\212>\035 \230>\363\223\232>#\275(=\3019\243=\316m\002\275>\313\223\276\0216\\\276X\342A>\t\376\367\275K\223R\276\364\246\362\276T\306\017\277\201#\201\275v\340\\\276K\260\210\276\252\267&>\232\224\322\276#ga>\256\r\245\276\356|\037?R\233\230\276o\365\274\276\226\t?\275\273\270\005?+\244\374=\270#|>\361F\226\276\037K\337\275\235h\027\276\340\2717>d\004\224=^\205\344\276!\352>>Nb\200\276\241\326\324>\261\242\006\276\301\3420>G!\311\275\327\316\346;\327\300\366>\206Z\323=\027\201\261\275w-\001\277\315\036\270\276\323\237\315>\303\323+\277\377\t\016?\350\274\266\276<\024]?\233 \352\276M\344\233\271\020#$\2778-x\276Tr\316<\020 \303<\370\245\236>\201\225\017@\204\r\377\276\006\022\224<|\017\'?\026j%?\266J\000?\203n\317\276\035=\036\276w\276\003@\366\013\306\276\'f\035>\3436\032\276\257\260 \275\315x\333\274\377$~=\350\237 \276\320a^>\006G\211=\344,\004?\361)\240>\032\246\266;\tP\203>U\331\367=\007x\322<\t\374a\275\256\201\255>\266\020\004>\244\3445?/\367\311<\336\345b\276:?\245\2751\231*\276\242\234h\276\\\311N\2766\310\264>8\025i>\214\020~\276\330G\307\276e6\270\276:\036\363=\223:A>/n\243\276\330\330\005\276\253\347\264>\336\2536\276[\316%\276\327\245\206\275\034\322\250\275\323\301Z>w\025\242>\3476\341\274\2407\005?\336\314h\274\341z\024=\266\326\307>\013}p=|\325\n\276\211\204%\273\264\222\326<\270\006\026>RI\275\276\261\247\215>U\030\273>\302\206\207>\241-\247\276d\257\367=\032\206\277\276\201\262\211\276\222\313\177\276V*(<\032\243\025\277\370\374\360=l\225`>\255\206\004\277\013\rD=_\322\230>\303\273<\276\301\305\n\277\345\356\263=\225\324\231\276\316p#?\203L\022\276Q\240o\276\035\254/\277\337Px\274\376H\321\275\332\376\245\276,-\243\274\233=\320=]\026c\277\320\263y>\254\255\030\2765\265\234>\204da>\303\360\241>v\032\351>\266\204$\300i\307\215\274\036\250\263\275\233\346\215\276\256\365\205>\212v\025\276\344\240d\276\352\317\036\276\354m3=C\255\211\276[\316\265\276\321W0\276*\221D\276?R\344>\2073_\2760\201\253\276G8%?\336\310\\\2769\326%\276\316S\375\276\231\273\026>g\233\333\275\017\233\210\275S\350\334\276\260\376\237\276\323M:??\251\366\274\301\034\035>\004\3760=jj\231\275\357\255\310=\302\372\377=\210\364\313\276\034\360\211>:\037\236=\016\020$?\316\252\317=\201\004%>\236\322A>\375\237c\276\016\025\243>|\265\303\275\233\217\013>\271\210\217\276\355\323\321>\361) \276\326\342S\276\335\014W>\001\023\270\276\302\027\346\275$\321\013\276\366]\021\276\003C\306>\275S\001\275vl\004\277$\356\361\275\001\207\030?\363\216\303\276\324\202\367\276w\333E\276fff\276\377\004w>-\354\211>\3122\004>\274A\264=Yn\351\275\351\rw\274\223\247\254=L\246j>>#Q=\216\351I\276\364\303 ?s\273\267=\2407\005?\025\221A\276\306\205#\276\\U\016?u\261)=\227o\375<G\254e>\003\354\203>\372\233P\276\307\327~\276\001\301<\276\023\'\367\275\202\342\007>\202\377\335\276H\270Z;\200\267@\276E\366\201\275(I\027\276I\205\361=\3266E<\204\022\306\276\224\207\225>\336\223G\276!v&\276r\304Z\276\3225\223>&\307U\277\367\036\216>\213\211\315\275\251\237\207>!\"\265=R\325D>\t6\256\275\260\220\271<t{\311\276K\312\235=\377[I\276h\221\005\277x\227k\276\326\213\001?|,\035\276zSQ\276\271\376\275=\323M\222\276\020]\260\276\303\r\370\275\202T\252\275\332U\370\276\354\027l\276\221\355\354\276#\334\304=\035=\216\276}y\021\277\010w\247>\007\261\363\275B\354,\276dXE\276\260\037b\275\217\306a\275@\023\221\276U\301H\276\361)\300>ga/>\376+\213=\335\230^>*\214\235>\347\000A>\321\005U>w\333\005>5A\264\275\222\350\345=\356]\003=\307cf>\365\253\357\273-\'\301=\206\217\250\276k\361\351\275D\335G>8\364\026\275\377@\271<)\"\343>\305\220\034\275\372~\272\2769\271?\276\221,\020\277v\032I>\372\320\005\276\347\214\350=1\322\313=\277e\336>\306m\204?\323\207\216>\267z\276\276?\000i>h\256S>\002+\347\276\n\200\361\274V\272\233\275\214\275\227<\3269&>\320a&\277\252\202\341>\321\\\247=7\302\"\275\235F\032\276\245fo\276\203L\302>\257\376\031<\240\340b>\221\355|\276uY\234>9&\253=\217\215\000\276\035U\315>\210\235\251\276.V\224\276\265\033\235\275\332r\356>u\315\204\276\252\232\340\275>\256\275>\203Q\311\276\327/\350\276\272ki>\363\216\323\276\261\341\231\276\247?\313>G8\215>\330\330\205>.\252\245=\276\366\314>;\001\325?\320)\310=N\322<=X\001\276\275O\351\300>J^=\277\272\332\n\276p\224<<F%\005@)\263\221\276\201x\335\275\367\344\031\277\"\303\212\276o\022\003\276]\247Y\277\372\263\257\2761\323v>\307F\300>\366E\022\277%@\355>?W{\276I\024Z=\312lp\276\323\024\201=\263\352\303\276\304B\355\275}\226\'>\227\220\017>g\270\301>\257\321r\275p\010\205>\255\206$\276>\313\303\276\237\314\237=\353\255\341\276H\376\200>y\001\206>T\253\257\275\242`\306<J\322\245\276\010w\227>p\266\371\275\207\026\251>\023,\016\276\233\033\323<\352\354D>o\360\205>y#\203>L\375\034\276\005\206\274>\336Y\253\276~tJ>\220\2032>\310{\245>\324\016\007\277\001j\352=o/\251\276\025\343\214>\177\207\322>\252H\r? \227\270=\230\302\203=\3063\000?\024?\206\276\257w\037\276B\225\212\276\227\250\276\276\023\201j\275;Sh\276\330\177\235<\377\262\003?\302\022\357>\"O\362\276&\307\335>]\276\232;\315u\232\274.s\312\276\267\177\205>?\214\220>\'\203#>0du\276ffF\276\\\033\232>P\302,\276\223\002\213<\210F\307\276%u\"\276\300\226\267=\352x\274\276{O\245=\236A\303\276*\000\206\276\301n\210\276\272I\314\276\215\264\204\276\375\022q<\221\017\202\277\213Oa>\270\222\255\276{\367\267>\326\305\255\276\322r\240<I\327\004\277\034\010)>>\"\346\275\343\245\253>\035\003\362\275\372\355+\276b\370(\276`\310j\276@\023\301\275\353\213d>\215(\215\276{k \276s\273\027=!\261\235\275K\001\251=\371I5><N\241\276\331|\334=C\000p=\215\264$?3m\237\276KV\305\274\233\311\367\275\020u?>\3269\366\276\337\032x\276\204\361\023=\005\250\351\275u\315D>\351\267\327\277\323\336 >i\3062?(a\246\276wJ\267>nQ\366\276O]\t?\357\214\266\275\227\342j>\345\320\"?\013|\005\275\221\270\267>\365\271z>Bx4>\360P\324\276,\016\007\276L7)>\332\341o>\340\020j>$\356q\276\"\216\025\276\006G\331\276a\211\207>\230\302\003\275\365\0167=f\024\373\276H\371\351>\202\250\233\275\244\252i\276\223\254C\275\375\333\305=\347\035\227\276\301\305\352\276\366\356\317=\263)\327\276\271\307r\276\235h\027\275O\351@\276\310\223\225\267^.\">yX\010?\223\306\330\276L\303\010\2772rV>\026\336%>\340\362\330<k\202\350\275q\217e\276\235h7>\235\327\270=\266\204\014?\236\'\236\275i\3430?\363q\r\276\312\375.\276\241\333+>c\177y>\025\253\206={Oe<\035=>>\315u\212\2762\311\230\276\005\372\224>\210F\327\276\2237\300\274\263\315\315>\027e\036\277\n\0210\276\t\212_\275Q\206\252<\241-\347\275\354\300\351\276\254s\234>\220f\014>\373#L=\375\331\037\277=D#>\216X+>f0\246\275\307\020\300=m\347;>}\221\200\276\237\005\374\273\306\026\002>\340\234q\2766\260\245>Nb\320\275\363q\r>\336\307\021=\000\251m>\347:\005?\244\344U\274\177\331\235>\035wj>\276O\265\275\027\274(=\254\031\231=O\\\216<\243@\027\277Ifu<\002\237\'?\272,F>\252d\300=\334\021\236>\034Bu>%zY\276\032\277\220\275F%\025\276X\305;>\326\343\276<o\273p\276\305X\206\275\252\267&\277\034B\025\276\267(s>k\r\205=T\000\214>\373y\323=\365-S\276-\223\206;\014v#>\020\004\010=DQ\200>\250RK\277q\311\261>\225\324\031\277\263a\255\275\272\275\204>\014\310\376>\024\226\250>$b\312>\335\357P\276r\212\006\277+\207\266\276N\265\226=aqx>\203\372\326=\377!\275>\333\212%?<\203\306>\267\317j\275\306\205\263\276O]9\276\202\213\245>\021\215\016>\nK<\276\346\351\234=\342#\342\276x\177\374=b\370\350\276\236\265\233\276\273\320\214\276\354\243\243>\215\227n\276\344Y\023<\375\276\237=w\326\336>\013\357\362\2758\025I\276\'\245\300>\242\n\377\2749EG>\257\353G?PS\313=\003\262\227\276A\324\375>\332\346f>\326\220X\277%\257\316\275H\277\325\277\252e\013>y\314x?\335\230\006?\321\005\205>\331!\276\2752\346^\277\232w\264?s\021\257>\245,\303\276\247y\227>\305\003\272>\230\372\371\275\342\314\217\276\370\210\270=\335\265\004>=\201p\275?\000\t?\323\207F\277\206Zk\2770L\266>\363\216\323\2756v\t\274\374\035\352>\217\374\001>\027\202\214>w\364\237=\312\340\310>\243X\356>\327\0222?\251j\262>/\027\031\2779\264H\277\236)\224>eS>?\366z\267\276D\335\'>\214\326\031?\267\177U\277\340\333\024>\375\274\031?c\227\230>\273E\200=\243\314\206>t\265\r?J^5?=\'}>\243\036\002\277\313\234\376>\274\224:<\212\257\226=D\027\304\276\234\341^?T\304\251=R\270~\276\362\352$\277\362\265\267><\240l>S\263\007\276J\230i=t^\263\276\022\210\247\276G\254\245\276G=d\276\325\354\001?2\003u\276\320\'\222\276\002e3>\202\342O?\2029\022?\211\007\024\276\020#,\277\376\326\216=\252~\245=2U\250\277\263\357\232>\256\273Y\276\361hc\276\201\320z=\356Z\262\277\233 \272\276{\365\221=\231\r:?\303\330b\276\202\310\242<G8u\2773\3417?\r7 ?\265\032\322\276K\260\330>\265\025\333>y\222$\277\222y$\276}\263\235\276\"\340p>w\241\251\276\024?\326\277\333P\221\276\343p\206\276H\247\256=cz\242>n\336x\275 {\005?\353Vo\276\244\252\331>\310^\357=\347\211g=@0\007\277\233=0\276\357 \226><\203~?]\334\206\276\373\226\001\277\031\034\005\276o\236\212>\224\2443?\211\322^\276\0324\364\275\252`,\277;\337/\276w-A\276^\205\324\2758g\224\276.\220\000\276\273\355\">t\265\305\276N\234\004\277\266\272\\=G=\244\276\246\233\204?\'\275G?\007|~?\017\271\021?l[\364\276\334G.\275W[1\274\375\301\340>,\361\000\276d\351\003=\216\314\003?\235\021%=\023IL\277\254\312\026\277\352[\246>\352^\247\275\305\311\035>\370\214\244=\233r\365>G\003\250>|\'&\276\303\273<\276\310{=?\352\317n\277\376}\006?\237v\310>/i\214>\210K.\277\264\037I>J\265/\277\t\304\013>\034|)?\362M\t\274\207\304]\276\350\244w\275\302\372\257>\323\336\000?9\271\007\277;\254\260\275\277\361\205\276\3745Y\276\007_\210\277\2235J>\310\014\224\276!\007\005\276\336T,\277\364\025T\277\\\3464\276#\204\307<\r\032j?%#?\277\'\021a<\275o\254>6\260\035?\211A\220>\010wG?\003_\221=\341E7?6\\d=\335\315\033?\010\311\222\276#\025\306\276\362^\265\276>\005`?\033*\266>\027\361]>\212\315\017?\303\323\273\277\320\362\214\276;\252:\276\036\026j\276(\233\362=;\032\007=`\254o=\035\217\021\277\355\236D\277\226>\\?~WD>\327\206\n\277\252\267f?\315#\377=\374\251A\277\350\301}\276\275\035!>Xs\220\276\007\231D\276\250R\013?\373\256\370\276I.\217>\324\202\017\277\304|9>\227u\177<\234\242#?\220NM\277\352[V?\324+\365\276B>@?\301\214\311\275\002\016\321>J^=>Z\022\030?g~\245>\207\026\201?\031\377\276>\033L\343\276\233\254\221>\306\277\'?\'N\276>\202\213U=R~R>4\242\024>\212\216\014\277.\255\306>FB\333=[\3515\275\320\362\354>o/\031\277\363qM\277y\001\306>\264\216\272>d\257\347>r\277\323\276\326n{>\363q\275\276\375\301\260>\276M\337\276\323\237\235>)\"3?\300\262r>\321\\\247>\000\221\036>\205\'t\275\272,.\277\003}\222\276V\324@\276Ae\034?\261\277\354\275q\254\213>$\271\244\277\355\233{<D\335\007?\030\316\265<\210\021\002\276\345\362\027?\374o}\277\361K=>\022k\341>\256G\001?Ra\214>\311v\206\2773P\251\276\\\003\313\276\341\356\254>\254\344\343<\261\026\217>9\326\255\277\340\325\222\275O\036\026\2778\237:=?:E?\352\354D?\0319\213<\006d/\275\007(\215\274\205^\377<K\260 \277\254\312^>\361)\020\277\025\213\237=}\037\016\275)\"#>\332\254.@W[\031\277g,Z\276\217\215`>k\232\027\276\347\306\224\276\320\017\003\276Y\245t<*:\202?Kx\242=I\325\266=l\t\351>\273\233\267>\004\310\260\275\t\004\025<,}\350<\000tX>\204\363i=\032\335\001?C\034\253>\010\254\274\276\265\301\311=J\357\333>\350j\213\276\034\266\215\275\014\002\233>\031\347\357\275w\020\353\276\321\350\016>\2235\217\273\375j\256\276\260=\243\276\312\340\350\275\364\303\330>d;\237\275\215\177\257\276\371\017\211>aT\322>\262\364\341\275\200\273,=\351\016\242\276\316\252O\274\371\326\247=\351&\301\276\203L\362=\2137\322\276\360\205I<\363\035\374:\250:\004\276\205\266<?x\356\375\275\032\250\014=\336\260\025\277\246\362\366\275j\373\327>\027\016\004?-`\002\276\276\274\200>t\230\277>\002\361z\275\263A&\276\300$\265=\270u\307>\273\326\276=\210c\215>\246\270\312\276\317k\354\2759\271\257>\307K\207\276\261m\021\276}?\225\276\263^\254>D\372\315>0*i>\027\267\361\276l&?\276\\8P>\215E\243\276\260UZ?\301\342\020\276I\3338\275\004\342\245>\n.\266\276\372D\276>\224\373\235\276 \317.=\277\230\215=-\354\t\276\266\206\262\275\203\334\245\275z\337\030\276\022\240\206\276\245\367\215=UL%<-x\001?}\\\233\274@\023\361\277p\316\010\276y\006\r\276w\326n\275\253\004\233>\2510\266>s\200\220\276\331=\031>\362\265\027?\251\336\212\276\256dg>\247\\\261>\003[\225\276\344\240\024?\225\016\226=\310A\251>:\036\363> \322\357\275\325\317\023\277\345\233\355\275\376\232\354=:\222;?=I\032>\307)\352\276\240\373r\275\305\003\n>\344\017F>\351H\016>\177\207\202>>\005\220\276\371f#\277\211^F\277<\210\275\276$(\276>\333\026\265\276\272\332\222?P\302\254\276I\021\031\276E\273\352\276WZ\206\275-{\222\275\370\210\230>\365\333\347>\017\323>\275~\214\211>\025:\377>`v/\276\230Q,\275\326\377\311\276Ra$?\n\277\224=!\310A\276\325\317\313>P\323\035\274\213\246s\276\201\260\223\275v2x\276\232\231\371\276\320\017\003\276\304B\005\277\374\030s\276\371\240\007>>\226\336\276=~o>\330\266\330\276duK>\313\326\312\276\2657\010\277\002IX=\243\314\366>]\212\023\277v\210\377\274\333\304\t\276\271\031\006?b\370\230>\005\211\215=\030C\371>>\226>=\3475\266\276\352\317\236\276R\270^>2\000\224\275:\036s\276\310\315\020>\020\006\336>\234\371\205\276\020\222%\276\326\220\030?\177\205\014=#2\354\275\017\264r\277\202\250;>\323j\250>\\\271M\273\rQ\205<\355\330\230>>\226\016\2774\364\237>-\372\371\273AGk\275{\253\307\271\331\316\367\275\312\305\230\275\277+\202\274\240\246V=\300\313L\275\315\037\023=!\005\317<=ai>\216u\031?\247\226M\276\246~\336\276\375j\006\277\241\326\224\276\261\027\212<$\311=;V\177\244\275\301:\256=q\311q>\213\211\255>\320\325V>k\202H\276p|m>\210K\016=R\270\206\277\377\317a>\335\230^\276\033L#\276\031\033\272\275~:\236\276e6\350>\241\204\331\275;\374%\277\215*C<\032Q:\276\\8\220>\'\024\222\276\032\213\226>\211\357\324>\0054\021\276\351\232\331\276\3066)\2745A\264\276*p2\275Q\240\317>{k >\230L5\276Y\027\207\276\327\372\202\276\243;\010\276o\330\306\2767Ou\276#\363(?\356\355V=\033\365\300>6\310,?5)\245>hy\236=6\2605?\t\371\240\275\230\335S\277\300x&>\272k\t\276TR\037?@\301e>\251j\202\276\335\014w\276t\352J?\355\177\200\275\230\206\001>\226>\224\276(`;\275\240\030\231\275hy\006?\363\253\331>x\227\023\277oG\020\277\211\014K\276\374\030\013?,\202\377>\330\273\277=\206\033\360=\321\003\237\275%\006\321>\035=\376=\217S\234\277\336\216P\276e\031\">\3127[>?\035\017\2777\032\200\276\346\254\257=/4\207\276L\0323?\331\316\207>c\177\231>{\240u>\347o\"\276\023G^=\353\255\221>\223W\347\275!m\010\273h=|\275\035\311e> \322#@\227\256\340<\202;\260=l&\337>\310B4\275\026\336e>pA\266\274\254\031Y=\022\302k?\221\n#\275_)+\276A\274\016>\234\242\263\276\246aX>\324\363\256=\023I4>\216\001Y>\336\252\253=\361\327\224\276C\347\205\276:@\020>\004\347\254\275\014Xr=\272\275\344>\\\346t>B\n\036=\032\250\014>A\016j>\270\001?\276\315\006\331=:\222\033\277\225\202\356=\3274\257>aO\033\276F%U\276\237\310S\276A,\233=\200e\345\275\300\004\356=;S\310>\'\023\227\275\326\374\270\275\243\360\017<\223\306h=\252C.>\207\247W\276^.\"\276c\177y>\005\026\300\2740\017Y\275\351`\315\276\364O0=l[\324=A}K\275b\326\023?V\237\313={\024\256<\005\3008>\200\234\220\275\222\263P>\210\235\311>\260\254\324>\231Kj\275y\314\240\276V\272\273<\376De=\226\225\006\276\033\235\263\275\311\253\323\276{\210\006=\037\235\212>5^\032>iRj>\371,o\276E:r;.\345\234=\346\350\261\276\214-\364\276\000\000\200\276\346\311\225\275\276\274@>\2549\000\276\310\352\246>\001\372\275\275s\235\206\276\020z\026\276B\3557\275\370\210\350>\034\231\207\275\336Y\313>1\224\023>\244\031+>\341\227\272\276\306\301\245=\240R\205\275\263\315\255\276M\204\035\277`v\317=.s\372\275y\036\\\276\346?$\276\021\345\213=\306\334\225\275\263z\307=^L\263<\021\036\355\275\270\344\030\276lvd\275q\003\316>YQ\223\276\231\360\213>[|*>\262c#\276/4\327=\302Q\362<\260\003\347=\203\243\304=\216x\262\274\261\304#\276)\"C\274\340%\002<w\363\324\275\265\207=<\016\370\034>\354\3009>\314z\021>?\000\t\276\320D\310>\315\351\022?d]\214>\200\202k\276\360\247\306\277\250\035>\276\366\321\351=}\004>=\310@\276=\203\366j<\030\262\002\277\370\026\326<e\374;\276\010\253\261\275\325&\356\276\207\214\207=\200DS\275E\201^>\301nX<\204\273\023\276\312\375N\276\230\246\310=\334/\277\275h\352\265\275\376\325c\274\256\266\242\276OZ\270\274q\217\345\2764K\202\276?5\256\276\010\346(>9\227\">\330\323\316>\004\004s>\252\202\341>\240lJ\276;\031|\276\350j\253\276\3642\332\276\3333\013\276-\226\242<O\346\237\275\017\264\242\276e\373\020\275\302L{>\276\332Q\275\023\017(\276\260\376\337\276Y\025\241=!<\032\275p\353N\276`\345\360>\303\365\270\276.\255\206\276_@/\275\306\245\312=\230Lu\276X\342\221>l&\377>a\246->\350\237\340\275nL/\276\277\267\351\275v\306\267\275\003\322>=\325j~;\323\301\372<\354\243\323=]\277 ?0\236\001\276\303\302\377;\230\243G\276\224\274\372\275*W\310>.s:\276\203$\";1\226\311\275\341b%\277A\324\355\276\250\035\336>\251\204\247<\250\306\013\276\001\030\017\276x\357\250<\307F\000\276?R\304\276\3127\333=\311\345?>\215\013g\276MgG\276\312j\232=\310\322\227>\347\217)\275cE\r>\232_\275>o\330\026>\227\220\317=\274Wm\276\202s\306\276YL\274\276%#\227\276m;\215\275\353\000\210\275\002\017L=\364\300\207=\036\026*\276C\341s=1_\316>8-\370=\016\241\332\276,\360U=-x1>\332W\236\275\016h\251\275:\366\242:\003\225\221\276\207\277\006\276(\267m\275r\247\364=gD\351<\'\210\212>?5\336=-y<\275\376C\372=\245\275\001?\336\217\333<\023F3\275\377\262;>\201\262\211>2\346\216\276n\243\201>+h\332<{\332!>\367X\372\275\332\254\002?E\236\344\275\3122d\276\264\253\220\276\377\317a\276\017\362:=\301s\237\276.\312,>\257|\006?j\023G>\227\255\205>\230\206\321>\r\032Z\276\013\357\022\276z6\253\273\320\362\034\276\t\026G\276^\024\275\275\250\343\021\276\361F\346=\367\006\337\275\024\355J>X\255\014\276\024\\,\276\026\373+>\017\326_\276\tpz\275\255\370F\275?\331\336\272\350\366\202>\203\337F\275+\302M\275ms\243\276RD\246>\246^7<s\272T\277\374\250\006\275\236\322!\277\257\354\202\275\"\375\236?\010={>\323\3368?\214\241\314\276\362\365\020<I\242\327\275\370\215\237>\223\214|>e\031\262\277\"\253\013?;\337\317\275\351}\203\2764.4\277\357U\353=y\001\206>\237\260\204=*\270\016<_A\332\275\221\363\236\275t$\227>\372\000\356;\301sO\276\2034c\276\237\253u?\027\274(>T\251\231>]o\233\2741\010\334>\3372\327\276\034\225\233\274rP\262\276\226\355\203\275\247yG\276\3539\331\276\322\030\275\276\314\177\010\276,\330F=\270\344\210\276z\245l\275\300\347\327>\031\214\221\274\342\351U\276\345D;\276\343k\017\276\375\237\343>\033\201x\276\312\211v>\0265\030>[\010R\276\241\020\341>\031s\267>6\315\373=Po\306\274 b\203;->\r\277E\273\n\276\211)\301\276N\177\206>\3333K\276-x\261>^.B>\\\254\350\276Z\201\t\277\366y\214\274\263\230\330=o\361p=_\007.>Y\370\272=\036P\326>\323\237=\276Z\r!\277\216\222\027\276x\321\327>\342V\001\275\037\200\324=Bx4<\326W\267=\3024\254\275\305\312\350\274\3400\021=\000\376)=D\250r\276\026\373\373>5{`\276\032\027n\276\206\346:\276w\020\273\2751\261\231\276\372%\302=\331\231\302>\033Gl\276\035U\235>F\266s>GZ\252<\253&\000\2770\273\017\2775^\242\277\211\357\004\276G\036\310=\013F%?&S\245\275\320\325\206>j\336\221>G8M\276Z\236\'>ni5>\236)t>\n\021\030?\021SB\276*\035\334>\366#E\275\326\346\377\273r\334\271\276p\231S>\024\313\235\276JF\256>o\360\005>-\373\277:p_\267\276\367\307\233\275i;\306=V\235\325\274\035\346\003?\245p\230\273\235\205\315>,\232N>\016\3336\276t\322[\276s.=?_\320B=\244\337^>\254\034R\277\317N\206\276\316\302\036\276+\205\240=\305\311\215>\3251\370\273D\206\305\276\002\324\364\276[|\232>\007\010\006\276zS\321=\366\321\271>9G]=p\353.>\370k\222\276}\004\376<k\324\223\276\273\017\200=\010\346\210\276\'\210\002\2776\223\'\277ZH\300;\037\327\206\276\016\236\311\275%\226\224\275n\3723>]\212\013>\262K\324\275\364\303\000?|\323t\274\232yr\275O\257\224<\230iS?\3127\253\276YQ#>9E\327\276\3642\272\276\357 \226\276\000\000H\277\3372\227>J$\321\276m9\327\275\266\271q>\270\344\310\276\217\252f\276[\224\251>\271\210\257>\256\330W?\2549 \277\312\340\010\277@\207y>0G\237\276\345\'\305\276\233\033\203>\27609\276\265\340\225\276C\306c\275\034`\246\275\246\n\326>\216\036\007\277\304B\375\276G\254\005>;\337/\276h\221\275\276\307\363Y\275k`\253>\311Y8>\331\261q\276\030\315\n=\246\232\231\275S\350\254\276\356Z\202\2769\356\304\276\361.\327=\007\231\304>A\202\242\276\233T\264\275\014\003\226=\211\007D?\202\213U\276@\373\021>\233w\367;ep\324=\\\254\010\276\264w\306\275\304|\271\276\263\014\361>k}q>\227\342\212\276ms\343\276\255j\311\275\335$&>:\257\321\276w\247\226:/\300>\276V}\356\2755*\220=l\225\000?9\271\037\276\205\266\034\276FB\213\276W[\021\276\216#\246\276\004st\276o\rl\276\352>\000>\345\325y\276\014\225\277\275\270\352z=Eb\202\274\302\027>\277\245\367\315=I\205Q>{k\200>\030\317\240\274\324E\312\2758-\020\277\316l\027\275\013\265\006>\221\r\304\275\321?\001>V?\200\273\226\317*\277\221\362+\277 \231\216\274\007\267u\275\036\304&\277\'\302f\276\231G\036\277\236A\303\276\247\313\002\276\030\t\255>y=\230=r\0266>\331_\226\276\266\271\321\276\324e\021>\032M\256\275\252\361\322=\257\010\336\276\004\347,\276\005\300\370=d\314\035\276\205\nN\275\034\355\270\274\360\212\260>T\035\342\276[\0102>\205w\351\276\313\271\204\276\370\212n=\241\333\253=Ym\376<\214\271\033?\273\355\"\276\241\020\201>niu>\267\321\000\276\336\253\246>\021SB>Z\236G\276\307\364\204>\237w\203\275\321\007\013=H\334c>J\265\277\276E\3300\276\2446\001?\346\3501\276\206\311 @\265\3753\277`\000\201=->e>\234\277\251\276\256\201\315>\220\334\232\275\346\224\240=\204\r\267?\301\342 \277\027\202\334=\tP\023>\355\231E>\021\252t>\325\225\377\276\210\235I>\317kl>\237\260\304>Y2G\275?\251v\276\310\010\310=Ve\257\276Szf\275\343q\321\274V\237\013\276\r\303\'>+\367\202\275Wx\327=\326VL\276\236~P\275\3225S\2764\237\263=\266\363\035\276\2029\332\276Xr\025\275.*\230\273\324HK=\373W\326<\257\316Q>@\207\021\277\250:$>\233\033\023>v\376\255\275\341\177\353\275\331`a\274\352xL\274\316\252/>\031V\301\276\204\237x=`YI>\035 x\276*\035L\276<f\200\276\244\302\210>F|\'\276\023\270\265>\201!#\277\274#\303=\270\310\275=\353:\024=C\312o\276\005\250\t\276\255j\311<\243u\324\275\206Y\250=\360\242\017\276\377\t.\276\315\314\234\276\315\357\217\273\026\244y>\010\003\317<\021\036\r\276\177g;\275\226\004h\275Xs\200>\305\311=\276*R\001\276&\344\253\277\333\334\030>\376}\026?\313\363 >\005\341\252\275r\247\024\276\271\2455>7\211A>\237<,>\000S\306\275\314z\221>\364\211\034>5c\021>\tT\177=o\237\225=\022\210\307\276pwV\276\260\254\364\276\3544\202>\376C\322\277O\314z>\302\300s\276\"\216\305\276w\204\223>\352x,\276<f\340\275\256G\001\276qZP\276\346\351\334<\005\250)\276R\'@>\362^\225\276AHv>t{\231>\271\337\201>\236C\231\274\347\032\306=\307K\367>\030\t\335>\036\335\310\275S\")\276h\350\277\276W\tv\276h\"\214\276\'1(>*R\201>\213\211\315=-@[=\243#9>\245\367m\276#\276S\275\330\361\237\275Sy\313\276R\362\352\275\343\031\324\276nj\240=\020x\340\274\025\310\314=\0177\226;\020#\204<\342#\222>\003\263\302=j.\227\275\340\275#;#!\000\274\025\035\t=@\030\250>1%\202>H\0260\276!\310!>\004V\316\275\010w\307\276\035r\223\276\362\014\352\276\220\367\212\276\2657X>\205%\236\276\346#\211\275\345\325Y> \354\024\275A,\233\275\017\201#=#\241\215>?\000I\2760\360\034\276A}K\276\3335\201=\243@\037\276\221_\277\275)\005\335=xbV>Ve\177>\315\314\354>\034_[>\254V\346=\314\3239\274\363\345e>\360\302\026=$`\224=\315\222\276\271Z\273m\276lC%>\311\223\004\276vl\004>\360\337\274=T\214\363\275?\306\274\275.\342{\276\224M9\276\304\005 =Rc\002=\034\360\031\276\037\364\354<]\376\203>\360f\262;,\361\000\276\030z\304\274\372\263_>\360\334\273\276\363\216\223\276\264\260\'\276*\215\030\274|B\266\275r\304Z\276!!\252=J\357;\276zQ\233=\t\304K\276%\351Z>l\314k=\362|\206\274`<\203\276\224\275\305\275;\375\240\275>\"\346>\227\377\000\277\331\231\342\276\324\267l>g~\265\276\272f\362=\332\033\374=]\341\335\276\272\332\252>\243#Y\276\347\035\037\277G\255p=\376\245\373;JDx=V\233\177<T\000\014>J\177o\275\362\320\227=-\317\343>y\223_=Gs\204=D\213l\276\367\307;>\352B\214\2754\200\267\276\3441\303=\224j\377\276\373W\373\2725B\277<\324\016\377\274\370\2525\276\315\257\246\276\374\251\021\277\031e\354\273\002\267n<\317\024:\276\2072T=9\227b>G!I\273J]\262=2\254B>F(6<\263\227\215=\307):>\376&\224>a7\024\277 \357U\276M\177\033\273!\002\026?\303GD>\370\252\325\276\331_\026\276\226C\253\276\302\206G\277\370\302$>\347\306\024>=\233\265>{\367\007=\027\331.>=\270\023?Dn&\276\327Q\325\275\342\351\025=NEJ\276\003}\002>\261m\261\276\207j\312\275\'\372\274\275b\2416\276\030\262:=\317\240\261\276\260\217\016>\240\3346\274\263{\202\276\030!\234\276\241\333K\276#-\325\276y\257\332\275t\357!\276i\035U>\257_0\276V\267:>\237\223\216\276^e\255\275WC\202>\315\257F\276\364O\320>.s\032>\2068\026>\006\201\001@h\350\277\276\214\204\266>$(\236\276\352\354d\276\220\240\030\276f\203\014\276\020\270\t<\353\342\266?\222\226\212\276y\006\r>\r\253\270\276>\350\331\275*\221\204\276\212Y\257\274@/\274\275m\220I>\210\236\224\275\227\377\320\275\246\362v>\242\234\350=\034|\241\2753\247\253\276w\276\337=\224\244\253>\254s\214>+\373\236\276\234\304\340\275\\\033\352\276>\263\264>%\222\310>Y\2068>\200\232\n?\350\366\222\276\210\021\202\276~\212#\275&6\337=\255/\022\275H\334\303>t%\202\274\361+\326\274O\351 \276%>7\275X<u<\225<\350\273\n\206\263=N\203\375;a2\025\276!\344|\275\366b\350\276\226\262\234>\362`\213\274\221\n\203\275k\202\230\276\301\342P>\023\'\247>\001\244v\276\343p\306\2761B\330>i\343\210\276\344N\231\276cbs>.9.>\031=7=\314z\241\276~5g>\350\242a\275\203n\277>\277Cq\276\357\346I>\253x\263>5\322\322\276\222\350\365>%\317\225\275\233\257\262\275\234\026\034>|\'\346\275\300[\320\276l\317l>\375\274\331>\000W\n?W\004?\276\314\264\375\275\215\227N>\223\251\">\2451z\276\321y\r>b\020X\275/\027\301\2760\236\201>?W\033\276\'\237\036\275f\275\330=\031\034e\276\270u\267\276\226!\016?\244\337\316\276\301\305J>\372\263\277>\363<\310>{\024N\276\006\236[>_\357^\276\027\232K>6<\375\275\004\347l>\256\274d=:\036\023\2764\200\347>Ts\271=\014\345d>\367\257,>\212\216\004>d\2577\276\262\333\302;\367\257\234>\003\223\033\275 \322o\276\000W\022\276r\334)>b\204\020>L\211\344={N\372\275\033\201X\276jj\031\277\316\245\370\275\357\254=>\005\206\254=`\037\215>\201\241\\:\316\031\241\276\233\217C\277\310\'\304\275\014Y]>!\002\276\276\342#\302\276>>a\275\300\351\235\275\320\271\333\274\321\\G>\325\264\213=\035=\376\275P\344\t\276w\363T\276\262\364\031\277\243\245)8T\307*\275\217\302\225>\003\t*>\024\"`>rP\002\277!Y\200>\360\242\217=\271p`\276Y4]\276\231\330<\276S\350\334\2761\231J>9q\003<C\004\274>\261\242\006\276t\227\304<k\361\t>b\370\210>]\300\313<+j\360\275\232\316\016>R_\026\275]\371L\276\216\036\037>w-\241>\n\277\024\276C\004\024\277\332\217\344\276\316\342\305=\327\205_\275r\341@\276\240\334\226=\205y\017=\357\003\320\2756t\263\275e\302\257\276/\300\236=y#3\276\306n\277\275K\253\341=\335$\246>\025>6\273\206:,\275#\205\262<}\004\236=\004\320\003;m\250\230\274\"4\202\2751\352\272=\214\333\230>vT\025>\336\256W\275\022\210\327>\240\025\330=\211\265\330>\025\035\t\276\342Zm\275\301\255\026<\306\205\223\276\340\326]>y\314\010?\302\027\306\276T\214\243\276\035\346K\276\237:V=\241\204\331\275\313\271\324=\270\314\211\276\314@e\276\216\257\375\275Fyf\275\036\3028=.\220 >\255\022\321:y\314@>\020u\037\276\032P\217=\014\316\300=\252\236L\274\214.\217\275\025\221\201\2768\363+><f\000\276Z\r\t\276\203/\014>\326V,>\215\010\306<r\304\212\2766\037\027>\301\377\326>\355\202A\274\204\2733\276s\331(=s\272\254\275\315#\037\276z\302\022\276Y4]>X\312\322\276\235\203\207\275>y\330=\200\324\226>\277\267\231>\372B\310<\211A\200\276\013\317\313=\276f\271\275\002\361\272>\216\222\027\276\\w\303>\351\r7\275\013{\312\276\225\322\263=\200\232Z>6\260\005?\334\235\205\276\261\341\271>4.\034\276\'\302\266\276%\353\220=\363\023\030<\316\022\t\274/\027\301>\253[\375=Z\326\235\275\220\240\270>*\305\256=t)\216>\303J\205\275\025\304\240\275l{;<\005\027\213\276mV=>\201\225\223\276+Q6\275\367\314\322\275M\204M\276\242\356\323\276Y\300\224>JF\216\276\275\306\016\276^\242\372\275\330\016\246\275g\270\001\276\360\212\340\276\020z\306>!\351S\275\216\0060>\004\004S>\330\r\003?;\302\331\276\357\311\303>\256\236\203\276\330\273\217>\212\312\246\275\316\302^?\321AW\275\325\th=\365\2761\275\227\377\260>\346\350\361=J\010\026\275\370\031\027\2774\364\027\277\"Oj?\010\224\235\276\tm\351\276\216X\213\276\347:\355\276t\230\317>T\341O<\346\\\n\276\224\301\221>\331w%>(,Q\276\340\363#\276c%&=\026k8\275M-\333=\327i\364>\301V)\276N\227\245>.\220\260>3\033$>\344\024\235\275z\307\271\276\233\033\203\276\211\230\342>\006,\271<\212\260!>q\346\227>\263\322\304\276\333\026\325\276\000\215\322<e\001s>r\031\267\275\2407%?B\317\266>\207\214\307\274N\264k>\322m\211=\315uZ\276b\025O>\242]e\276\254\251,\275\336T\224>\254\213\000\274o~C<\204\271\275\275\030>\n\277\361\327\244\276\207\242\300>3\341\207>\200,\004=\242\177\"\276\021SB>\273\355:?{i\312=\224\335L\275\027\274\350\275n\314\241\273\020\006~\276 ^\327\275g~\345\276\343\337\307\276G=\004=[%\330\275(\362\204>)\"\003\275\003\t\372>\324\3618\276\002+G\276\376+\353=;\2154>\322\375\234\275\227\213\230>\305\346\203\275\003\262W<P6\025\277\t\033~>\342\344\376\275i\343P?\231\022)\276@\301%\277\334\360;=\357\033\'?\363\223\n\2771\\\235=aT\222>\237\310\003?\364\251\243=\305\217\t\300\311w\311\275*\035\214>+5\233\275\275\215M=4\235\215>M\025\274>\215\320\017\275\305\033\031\276O#\215\276\020\257\353\275\377\225\325\275\204\201\267><\336d\275c\356Z\276\032Q\252\276I\364\222\276\262\021\370\276G=\224>\330\016F=\3536\250=ff\326\276_{\006\276\252Cn\275\2343\242>\025o\264>\301n\330=\307\327\336=\200\013\262<\335\322\022\277\260\033\026\276\363\253\331\276\341\013;\277\270\344x\276\313h\204\275\253\317\345\276\327Qu>\r\215\247\274\215\264\304>(\233\362=\275\030*\276\0049\210\276/\027A\277d@\366=\355\201\026>NE\252=\322\000\256\276\002e\223\275\324\2326\277\247\005O>\216uQ>n\213\322\276\345a\001\276`\315A>\241\276\265\2767\340\263=\303*\356\276}\3502?O\351\000\277\225\361/\276\365\201\204=\013c\313=<\024\r?h\313\311\2763\247\333>\343kO\276.\220`>\021\036\215>\346\\j>^\021\004\2779E\027\2773\371&>\017\'p\275W\354\277\276O\221\303\275N\356\027\276\347\3064>7O\r?1\231\312>\212v\225>\362$)\276\274\263\266=I\235@\276\274\"\030\276*\031\240=\231d\204>\275\303\255\275,H\303>PQ\265=\017n!\274:\314\327=\232\261\270>\272\203X\276\244\302\030>\324\232&=\304\356\233\275\3058\217\276\2510\246\276\241.R=M\241\263\276!\310A>2rv\276$\234&\277N\227\025?\023D=>\271p\220>\336<5\276\002\331\353>+\244\274>R\355\023\277p#%\275hB\223=2w\235\276U\332\202\275\255\243*\276z\031\345>\373ys\276\346\254O\275\374\035\n>h\226D>F\261t\277|a\242>\377!\315\276\270\217\234\275\360\205\t=\344\203\376> \357\325\275\357\344S=\016\025\203\276\216\001\211\276\322:j>K<\200\276\364l\306>\362\007C\276\273\320\334=$\227\027?\243\352W\275\\\346\364=>y\010?\304\224\310\276rQ\215\275\207\247\327>\245\203\025\276\001\366Q?\236^)>\"\212\251\275\321\\g=\016\241\352\276\237\253m\276\002\331\353=\000\002V=\200+\251\276P\252\235\276\226\347\221>\3171\260>G8M\2765\265l\276\376\324\370\275\247\353\t\275\362\322-\2768\2410>\026\373k>\331wE>\307\316\200;\233U\007?\333\334 \277\320+\236<I\205\261\2761\266\000?-x\241\276\007\316\251>O\036\266\276\204\323\302\276\372\263\177>\236\265\213>\234\341\226>\207\247\027\275\2446\361\275\205w\231>x\356\375>N\013~\276\264\000\255=c\013\341>\006\365\315>\375\244\332\274\001\301\234\276\030`\017?\201#\001=,\274\213>\332\2542?\023\n\321=\007\3230>\252`\244\276\0009\301\275\365gz\333>\227\032\241<,J\t=1\265\205\275\337OM>\335{X>B[\316\274\256*{=\024\226x>\225\324-@:\257\221>?:\365\275\024\263^><\024\305>\203\335\200>\263^\254\276\202W\213\275[\266\026\276\247y\307>\346\221?>\204\022\006?\321\\\247=\355\235\261\275\362\356H;p\264c<F\261\234>KML\272\316\245 ?\274\350\213\276\337\303\265>\350\202\n?\2446)?xE\360>1|\224>\034%\017\276\366E\322>\271\307\262\276\200\016\363\2769\264\010>1\317\312<\352\261\215={f\021?3\376\375=\347\343Z>\342X\027>$\321K\276\254\255\010?]3\311\276\304Z\214>9\234\371\275l\230\241<\326\036\226=-^\314\275\344\332P>\213q\036\276Di7\277[\230\205</\027\201>~\214)?\333i\213\275\333\247\263\276\037\364\014>\234\333\004\275`Y\271\276\321\350\236\276\325!W\276\330\200\210\274\334\331\027=W\nA=\371I\305\276\262\237E\275\214\241\\\276T:\250\276\305\256\355\274PU\301\275kb\001=,\324z\276\265\375\213>\3336L=^\017\246\275(e\322\274\027e6>F^\026\275,GH<\320\'\202\276\177\331\r\277\314\177\320\2778\020\302\276\032\206\377\276\237\257\271\275D\213\234\276\365-3\276$(\376=\305 \240>XV\212>\227:\310\275\267b\037>Z\201\001\276\317\275g\276\341\013s\276C=\375<\214g\020\276vl\204\276O@s>>y\010\277\010\003O\276\372\270\026>lCe>\306\212\212>\267\234+>\270\344\030\276\222\226\"?\263Af=/\300\276\275Y\372\320\276\3125\305\275S\226A>\227\254\252=Ic\264\276\230Q,>\265\246y==\356\333\274\021p(>\321tF?-\354\211>\030\354&?\021\215n>\324\324\242\276\223RP\276\001mk\275\342#\222\276\233\346%?\030\262\032\276\3171`>r\0266\275\255L\370\275\317g\000=\311<\342>m\034\201>\203\372\326\275\351eT>T\343e\276E\236\224>P\2157>D\335\207>\260\346\200\275\232\356u=\332UH\276\3745)\277w\0252>\000\306\363\276#\333y\276\350cc;\272I\214>\216\001\031\276;S\210>\033*\226\276+\241\273\274;8\330\274\013]\251=\346\005\330\275d;\237\2760\274\262\275\221\325\215\276\216;\005\276Bx\364\275\205{%=Z\022 >q \224>x\370!<C;\307=\311q\007>\373:0>\317N\006\276\200\363\202=\327\023\035\275\235J\246=\245I\001?\010r\220\276Q\210\320\276\"\246d?\356%\215>\n\021\320>\037\277\227\276\304\262Y=\324H+>\001\352\274\272\014\260\237\276dx\314=-!\337=\343p\226\276\240\032/>\200}\224\276\222;\314\275\324\016\257>\212U\203\2746v\351>\263\007z>\321\313\350\275\352\353y=aTR\276\307\023\001=h\007\\=\202\250\373\275\377x\007?\225\361\357>\301\345q\275M-\353\276\026\207\263\274bJD\276\354\206M\276\000\214\'?o\363\006\275jM\303>\201\317/>\330\360t>\013\265\326>`>\331\274vO\236>\366{\342\274\246\233,\277\311\002\006>\262\016\007=\024yR>\006\203\213=\366]\261\276\271\210\017\276\303[\214\273\372\325\\>\202\034\204>\\W\314<\346ty\276\250\306+\276\032\300\333\276(\235H\275\374p\220\275\2716$\277*\000\246>\213\305\257=$\264\005>\032\300\253\276\227\377P>.\312l>\250\374\213=DO\312\274\315\222\300>\'\024\022?7\306N=\365-3>\031\305\362\275\276\023\343>t).>\322n4\275\212\223\033>v\246P\276\326\255F\277\210.\350\276\031\255\303>\270=A=\0324\364>\306\242\351>P\2157\276x\324\030\275\202\213]?lxb\277V}f\277~o\203\276 \357\005\277\272\276\217=\201\004\305>\305q\200=e\341\313=\005\335\036\276\327\335<>\320\n,\276U\301h\276\352!Z\276\236\352\020\276H\031q=\261\245G\275GU\023\276\357\216\214<0\330\255>\n\277\244\276\223Rp\276\257\316Q\276\253>\247>__+\275\371\203\221>\241-\267>\027H\260=\365\326\000\276\304\231\337=\212U\203<+\246\222\275\332\003\r\276\303\360Q>l\225\300>)\350\326\276\313e\303\275!<Z<\201>Q\275\\=\007\276\275\306\316>\"lX>\315#\377=\267\361\247\274\026\210\236<\217\215\000=\260r\030@\025t\373\275*t\236>\305p5\275shq\276X\250\225\275\253=l\274\177M\326\275\033\r\230?\003%\205\274Q\275U\276\t\314\371\272t$W\2768\370\262\276\207\277&>Nb\200\276g\236\334\274\350\2447\276%;\026\276\035 \310\276\214e\232=\310\352\026>\351\361\233>\232\261\350\276\005\372$>\341\177\013\276\376H\221>\0010^\277\305\036\332\274\323\366\007?\231d\344\275\2138\275=\207\371\022?\245k\246\276\030[H>\201\317\317\275T\343\265>\316\031\221\275\225\267\203=(\017\333\276al!\275\227\253_=\200\267 \276\340\241(\276\307*%\274{\240u>=a\t>E\364\213\275H\341\212\276\376C\032\276d]\\\276O\311\231=\276\333\274<\262c\343\275=\271\206=l\314\253=\023)M=\007\261\023>\233\311W>\010\2176>GU\363>`\345P\276F\231\335>3\334\240>\214\241|>\027\267\261>]\304\327\276\034(\260\275\314\264\355>z6+\276\206r\242\274\002\361\332>\352\262X>i\234\027\273l\354R\276\365\241\313>\032\300{\276^\272I\276\232\261\350\275\256\231!<\n\205\250\276Y\335*\276K\310\'>\\\037V\274cz\002\276\341\360\002=u\315D\276\241\276\345=-C\234\276\230\206A\276\327L\216\276\306\205\203>\334h\260>$\264\225\276\352\tK>\304\224\010\276\242E\226\276\201\227\231\275\366\177\336>4K\322>\210\362\205\274wg\255\276e\302\017\277Z\236\267>(~\214>\361\272\036\277\233ZV>\\Y\242<]\304\327>\217\344\342>\376\267\342>\264;d\275\311q\227>$\tB\274jj!\277\231\1774=b\020\270=l\313\200\275\310\007\335>\375\370\013=!\345\'>3\335k\273\262\235\017>\022k1\276g~\305>U0\352=\212[\245\275)\350\366\276\"\246D>\221\356\307\275+\301\342=Uj&\277\364\025\244\275B\354\314=\244\337\216\276al\261\276\205\320\301\274\313\0161\275\013\230\000\276R\'\200>d;\337\274a\305)=\212\223\273\276\025o\004\276\314\356\331\276\377[i>\326\3423\276\371\367\331\275\221\017\312>J\357;>k\016\260\275\202\2552>\320\355\305\275\200(\030=\177\204!=S\320-\276\207\371\222>\217\031\250\274\024\256g>K\310g>N\013^\276DQ`>\035w*\276\026\244Y>O\257\264\275\0265\210\276\210\200#>U\244\222\276\272\275$>\271\031N>\274\256\337\275\253x\223\276\036\334\235\274\332\346\226>=\nw\276\312\246\314>\005\243\262\276Nb0\276\372}\377\273\000\214\247>TR\207>\336Z&\275\210.\210>\277+\002>\235\235L>k\2327>\226\262l>]\3402\275Q\367\241>\004\253\212\275\257w\037>\313\271\024\276\367\036\276\276\030UP\273\256d\327>\352\347E?\027\232\353=P\215\367>;R\235=\004\342\205>*:R\276\211~m\275\336\216\200\276OXb\274?6I<\034|A>\020[z=\004s\224>7l\013?\333P\221\276%G\025\2731\353e\276q8S\276\277`\027\276\336\'\375;*R\001\276z\307\t\276=,T\274q=\332>\236)\024>\330\r\003?\313\206u=2\003\025\2769\271\257>\034\357\016=Xr\265\275\260\377\272<yt#\275(a\346\275\324}\200>\010\314\003\275Ll\376=BC\317>H\376`\275\212\006)\275\254\214\246=\343\305\302\275\310^\237\276*\343\337\275(~\214\274\0358\227>J)\230>\201#\001=%;\026>\027\020Z=\007\266\032?0L\036?@\366\232>\305\032.=\311\315\313\272?t\241=V\324@\276t\014\210>\243\002\'=\274v\211\275scz=\217\245\237\276\205\266<\276\257_\000?\004\036\230\275\202\377\375\276y;\002>\213\340\377\275\330\364\200\275\256)\220=3\376\375=p\010u\2767q\262>d@V>\003[e\276\215\361\201=\340\241\230\276&\337l\276\275o\\\276\355\231\225\276\226!\276>\005Q7\276\240\246\266>\\\217\002\276wf\002\275\374\214+\276\301\305j\276\272f\362=\302Q\202>5\357\370=#g\201\276H\026\260<\271\2455\276\252\014\203=\003\262\007\277x\234B>g\270\301\275>\263\004>\243\314F\276\327i\364>m\306)=[\316%>UM\320=9\227*?\216@\234\275\374\251\005@\354g\261=\020#\004>\254\213\213>\365g\357>\275\373\003\276\320\320?>\317\332\235\2761\231\322?Ad\261\275\303\rx>CV\307>\'1\350\276\236{\257>F?\032=O\351\360>\260\344\252\274\300[\010?\370\252u>\370pI\276\274\256\257>?\214\340\276\002e#?\322:\002?\037B\246;s\205\207>x\234\342=\034\261\206>^\272\251\276\377\004\207>\333\334\030\276\311\260\n\2765\230\306\276\304Z\\\276@\336\003?\220\241#\2750\330M>\256.\247<\326\2512=c(\347\275Z\317\265\273\335\013\254\275z\252\363>$G\272\275\002\361\002?\355(\016\275\262h\032\276\275\000\373=\023\362\221>z\215-?\302\372\377\275\222\"\022\276\373\005\273>\017\177\r=0\360\024\277\207\337\315<k\330o\275\340\234\221>\207P\245=\331\353]\275\352[\266\276\263{R\276\215E3\276BC?>0\330\275\276z\245\354\275r\376F\276\220N\255\276\314\356\251\276\364l\206\276\275\306\336>H\212h\276\272\367\340\276Y\323\006<\026\366\244\276\244p\335>?\377\275\274\210c\225\277\022\240\006\2765\r\252\275\304\353\372=\023I\024\276\225\267c>>\\\322\276\270)\324;\222\256\231>\027\331\356>\234\304\340=\005PL=\255/\322=\350\331\334\276\036\304\316=\352#p=\3372\'>g,\332=\303\365\010\276#\333%\300\327\022\227;~t\352<\'\203\323\276\344\203\356>E\201^>\000R\273>\017\264\032\277\366\356\357\276T\376\225\275\254s,>\335\224\222=\317kl<\026\241\030=s\205w\276\263\232\256\273\2613%\276\334K\332\276\33727?\002\274\205\274\377\004\227>\362{;\276\0054\021\276\252\361\022>\331%*\277\312\025\316>yX\250=\335\266o=\264\223\321\276m\347;\276\t\026\347>\307.\321\275:\314\347>!\037\224>;q\231=\317fU=\271SZ\276\366]q\276\276\331F>+\030U>#\241\355\275\027\232K>\237q\201>\"\375v\276\010\217\266\274\301V\211>\030\225\024\276\031V\301>{\210\006>ke\"\276X\255L>r\334i\276\330d\275\276Dn\266\276>\355\020>\320\n\214>[\2666>\nh\342\275\001L\231=E\274\365<\"\246D>\302\206\347>U\336\016>\360\375M=\317,\271>\2549@\276\350\336C\274\352\312\327>\300!,\277\036\304n>\312\251\035\275aw\025<\222\263\200>\2235\212>\232w\214\276\350\2071\276\003^\246=W\317!?\035\224\300>GwP\276\021\337\211\276\005n\335\275\346t\251\276\216\036_>\007\261\263>\2402\376\275\311\253\203\276\362$\271\276\020\314\221\276\352\004\264>\023\361\326<\240\303\374\275\230\335s>\2073?\276\343k\037?\264<\237\276=\233\325<\020\006\276\276\205_\n>\334\235\305\276\363\215\310\275B\225\232\276\334\200\317\275\237\223~>\277\232\003>\246\177\251\275\360\304L>K\001i\275\216\222\027\276l&\217>\365I\356<c|\030\275\222\226\332>\371f\373\276\010rp\276\023f\332\275\253\3175>\343\032\237<\030`\237\276\241\333\273>Wx\207\276\302\303\264\275\376C\272\276\320\017\003?\250W\232\276\323j\270\276=,4>b-~\276z6\213\275*Wx\276\022\332\022\276\232w\314\276\254\3407\275b\370\250\275\303\r\210>\366]\221<\270\222\255\276\231\323\225>\220\240\370\275R~R\276\230QL\276\361.\267=;o\203\2751\010\354\275@k\276\275\\U\366=ms\363>\361\240Y\274\033\r\000\276\256\r\025\277m\347[\276\022\366\355<\266\363\235>\305\311-?H\246C\275\217\031\230\276\254\220\362=\005\206l\276\253x\243>\332r\026\277\243\001\334\276Bx\224\2752=A\276\216#v?\211^&\276\241-\247\276\201\317/>\272N\243\276q\003\336\276\2073\177\276\246D2\276\335$&>.\220@>\207\376)>\374\343\025?\315#\337\276\336\223\007\276|DL\276vO\216\276\333\371~\276\344\024=\276Z\330\323\276y\036|\276\'\240I\276E\325\217=X\255\014\2765c\021>\n\205\010\275\315\036H\276\204\330\231>LT\377>\316S\335>\270\222\035\276)!\030=\024\263\036=:@\010?fk\335>\366b\350>|)\274=p\224\034?C9q>x\177\374=\005\207W\275Dn\006\276\345a\271?\364\032;>\201\t\234>oG8>\033\365\240>Q\242\305\275\261\3718<\354i\367>\023\362\r@s\200 \276\302\022o>\024?\206>\020\257\353=\362\263Q\275\026\373\213=\255\3356\276\014\223\351\276\300\004N\276\024\350\033\277\224\023\375\276\034\2616>\264q\304\276_\322\250>\r\253x=\221,\200>|D\214\276Z\022\320>\314\030\325\273\234\313C:JA\267>\315\344\033\276k`\013\276!\310\001\277\263)\327=\300\003C\275\3274\017\276\325\312L\277\201A\262=\365\020=\277\222\226\232\276\363<\030>?W[>\264\002\363\276Y\213\017\276s\205g?\013F%>\236\323\214=?o\252>\270X)?L7\221\277\327Q\005?\272\332j\276\212\002U?ZG\025\275\344\275\212\276\316\215\211\275\216\256R=\305\221\247\275~\214\331\276\203i\230>H\277\275>\0258\271\275/n\263\276\235c\030?\t\371\000>j0%?QN\224>\326\2200?c%f\275\330\201\363=\234\300\224\275\314^6=\276j\265>\025W\325\275\331_\016\277k\361\001?\"O\032?@\366r?\211\265\250>b-\026\277\230i{<x\234\"\276\263\265\236>\231\022i\276\\\346$\277\253xc\276I\202\220=3\247\233>v\340\014\277r\277\203>\355*,?ni\345>i\252\207\275t\014\310\276\371IU\2769\177\223\276\371\275]\277z\344\257\276\346\315!=\374\373\214\276,\267T\276\307\235\222>\274\221\311>\004\220z>q\346\037?\227\312\033>\333\212=\276\331|\\\276&\2527>OX\242\276\276\023S>\t\033\316\276\367\001\330\276\252\235\301=\301\377\226\275\300xf>S\256P\276\037\272\200\275\365\276\321\276\301\305*\277\361\272\276\276\t\247\205\276y#\003?\321\221\\\275p%;\276t\357\021\277k\237\036\277\033L\033?`w\272<G\001\"=f\203\254\276o\022\243\277\355\365.\276\211\013@\275@\030X\276\253&h\276\356B\023>\372\322\333<-`\242\276^\326\004\275E\360\237\275\366(,\277\314\264\025\277n\300\'\276UM\240>\254\255X=\037\331\234\275\n\205\230>\016\333\366>\032n\000=I\327\014\276\257|\246> \357u\276\245\367\275\276\202\312\270>7O%?\035 (\277\212\222\220=\363\037\302\276#\276S=J{\203>\215a\316\274\006\r\375\275b\333\262\276\026j\355\276\375j\016>\033d\022\276\023\325\033\276C\347\035?\001/\263=\244\337\216\277\034\360\311>\272\024w\276/Q\035\276O;\314\276\244S\027>\251\366)\276x\t\256\275\316\215)>\352\004\204>\371\240G\276B\305\002<Z\366\204\275\363\216\243>\334K\232>\217p\272\276\002a\307=>{\256<\330\266\310\276c\2278\277\013b =\374\373\014>#\3630?\264\253\320>\022\274\241<\302\022\357>G8\315\276 ^W>\376H\t\277W\230>\274`\310J\276S\226\201>\357 \366=>\005 \276\250W\352\276\251\373@>\306m\264=\272I\254\276h\005\006?\245K\237=\255L\010?\323M\002\276Y\245\224\275d\036y\274Gv\205\275\311v\276\275\207\247\207\276N{J\275kG\221=\000W\362\275\323M\"\276w\0203?)(\240\273\264\037\251>=\'\235\276\024y\262=\335{\330\276\014\037q>&\251\014=\263^\014>\267\234k\276t\0071?G\217\337\275\241\370\361\276p\231s>\n\275\236=F%\345\276\360\242/>\251\237\017?#J;>\352>\320\276\006/\312\276\320\270\020\276\000\251\r>CW\202=S\263g>\221a\305>\234\026\234=+\373.\276\034\266\355=\236{\217\276nn\014?\330\365\333\276\234\304\300\275j\366@\276J\266\272=\271\374\'\276\002\361\252>\322\343\247\276\023\2705\276\376` \276\274x\277\274\273\362\001?\313g9>+\3311\276\321\256\002?u\345\023?\202\377\355=w\204\323\276\257%\344=\024\350\243\2764.\004?v7\017>\263\357*\276\372\325\334>\373\221\002>\022\331\007\275\2201\267\275t~\212<D\027\024=\0216\014\277\355\330H\276g\233\213\276\303\240\214\275ta\244\274\ng\267\2753m\037>\014\315\035? A\231?\375\300\025=Tt\344=o.\236\275\215\227n>\377\225\225\276\220\275\276>\022j\206\274HP\274\276W\225=>^\235\023?\261\301\302=\313\020?@b\333\002\277\266\276\230>\374\251q\276K\260\000?\370\245\256>\3603N\276W=\200=0dM?\220kc\276\362\357\223>\363v\304>|q\363;\r\211s?\215ES>\201!k=\276\301\247>\206\346\002?\340\272\342\274\265\303\037\276\277\202t\275\013A\016>\2067\313=\234m\016>\023I\364=\306\341\274>\235\022\220<f\367\004\276Z\273\r\276\376,V\275\264qD\276d;?>\'\245\010?\230/\317\276s\021\237\276\251\023\240>\033\365\000\277\010U\372\276\341zd?9E\227\276\307\235B?\017\227\004?3\371\006>0*\t\276\334h\300\276\027\361\215\276\032\300\033\277\277`\027\276\006L0?\351C\307>\206U<>ZcP\275\344K(\274\307\327\376\276h\010\007=\367\344\241>\031\034\225\276\316\374\002?\232w\334\275\351\016\342>\360\242\377\276\005\027K\276\206=M\276\270\344\370>\272f\262\276\311\253\003\277]\304\307\276=\'=<\307\364\224\276\256\r\225>o\022\263><1K\276\201\317\317>6\\\304=\035Z\204>zU\'\275\325\006g=P\337:\277=D\343\275 z\022=c(\247>$(~\276|~\270>\334\326\266=h\263*>\247?\353\276%@\315\276[\323\034>L\303\260\276\311v\036\276\347\374T=\243ti<\252\016\021\277\346\221\237>4\327\211\276\270\257\003\276\235\364v\277\327L~>\232\231y>\002+\037\2772r\226>\333m\327=u\002\312\276:\314\367\276O\257\364\276N\227\345>\353\213\004>\214\240q\275\252\324l=~TC<\250\220+=\245f\357>\301\220\345\276\202\220,\276ga\037?bg\272>\267b\177>\323\237e\277\'\027\343<\316\302\276=\207\371\362=\301\312\201>\207PE>\"O\322\275Gry<\257\202N\273\215E\023\276^\235\013?\004\0043\276\233\230\211;\371\300\216<\223\035\033\277\r\340\235>!\352\316>y\001\326>\257D`=\027\3247\276<\332\250\276\315\314\374\276\251\366\231\276\370\215\037?\203i\230<\333P\221\276\004!\231>\030[(\276K<\200\276\313-->\276\237\372\276nQ\246>.\2200\277\331_6\276Gq\216<\036\033\341>\247y\307\276F\353\270\276\374\251\341>\016\3336>\301\213\256>\221a\025\275\266e\000=\222t\035?\251\336\232>\020v\n=\370k\362\275`v\017\2771|\244\2763\247\353\276\031\004\226>\254\305g\276_y\020=R\'\240>\322\030\215>m\3125\276\337\303\345=I\202\360\274\216;\265\276p\261\342\276?o\212\275\333\304\271>\237\343\243;\233 \352\275\341@H>\244\245r>\021\337\001?Q\245\346=\332\253\257=\207\242\300=~:\336=q=2\277\026M\037?L\375\354>\001\366Q?=DC\276\241\271\016\276\301Vi>\'j\251=\343p\006\276|c\010\275\274\223\317\274\322\373\326>\r\340M>\377\262\253>?\220<\275k\361\351=\213\340\037>\201\004\205\275\253>\327=l\225\220>dwA=\304%\307=(\270\330\276a\211\267\2765\322\202\276\325\225\007\277\372~\n>I\333\270\275ni\365\275\311\223\344>\307b\273=\245\370\230=O\314\352>\216\222W\275\314b\222>1{\031=\246\325\240\276(\2332>\267]h>\244S\007\277\322\214E>\236\321\226=\202\213u\276\253\t\202>B\t3\2766\352\321\276\334\327Y?\365\204e\276D\335\017\277\362y\205=z\3378\275Q\203\t\276\271\215\016?V\324\000\276\262F=\276\304\261n\276\365\020\215>\t\033\236>\030\3520<h\226d\276\212\260\341\276\236$\235\276\371,/\277\362\014\032\276w\333\365>\027Hp?\233\311W>\"\375\266\276\256\236\023\276\235\276\236\275\235FZ\276\204\360(>\255\300\240>x\2507;R\' \2767\032\300\276\325\010=\275\214\204\326\276(~\334\276\010\254<>\'\332\025>\222\\\376>\320\n\234>?\375g=\251\335o\275o\236\n\277(Iw>\204\022F>s.%\277\t8\024\2777\375\251\276T\214\033?K\345\375>\347:\315>}y\201>\212\223{>\236^\251>\2068V>\034]\245\274\226\317r\274\234P\230\2761\224\023\276\201^8<\010\227i\273\351\016\242>\004\220:>\201\262\351\276\243#)?\257w?=9\227\">p\263\270=\375\301 >\032QJ@F_\261>\001M\004>\344.B=\032\374}\275\207\341C>\366\013\366=L\375\334>2\367\332\273\240\251W\274\241\333\013>\020u\037>\374\000\024\277\"5m\274\260\346\300>\241\367\004:\021\001G\276u\312c\275\247B\227\273R\013\205\275P\215\327\275\023\270\325\276d@\326>\023\364\027=\021\215\336\276\251\244.>\272\332j>-\'\241\274yu\236>\243\006S;(D\200=\2551\210=\272\272\303\275e\374\013?YL\354=\271\245\025>\313\363\340>U\331\307>\332\254\002\277r\371\277>\262\272u>\337\211\211\276\327\340X;\346\005\210\276\341\360\202\273\260=\023?r\371O\276\313\020\307\274\023aC\276 {\315>\322r \275Mgg\275q\003\276>\231G\376\275\200\232Z>\3274o\276\357\311\263\276IKe>\002H-\2769\254\272:\317KE\275\202s\226\276\304_\323=%\351\332\275!\345\'>*t>\276\244\252\311>&\344\003>)\226\233>\014\310\036>\022N\013>\205\266\314>\003`\\>\351\267\237>\311\260\272\276\017\324i=k\237n\276\316\221\360\272\016\300\246\275\274\313\205\276\323\364\271=\275p\247\275\260X\003=\031t\202\275\343\215\214>;\374U>\323\205X\275\231\201\312\274\026\370\252=\371\240\347\276\231\r\242\276wJG>\236A#>\232\353,\277p\010\025\276\337\3751\276S\320%\277Z/F>\n\200\361\276\343\031\024>\2343B>\207m+\276Y\024\226\275t\230\357=g\355\326\276\337\303\225\276\350\023\311\276\363\037R>\345\'\245\276\261\341\311>\353n\036>F@\205=\372\325<>d@\026>\316p\223\276CV\267=\270\351/>\001\373\250>\030[(\277\270\257C\275@0\227>u\315$>t\353u=z\374\216\276J\230\021?4\272\243>\002\237\177\276\306\341\214\276|\326\225=nQ\026\277T\215\036=2Up\277\214\271K>\213Pl=\\W\214=a\246\355\276\257\3537>\312\246|\276\231\273V\276l\314+\275\301s\357\274\370\033\255\275\014\310\336=ga_?\033f\310=\342u\355\276\000R\253\276J\266:\275\017\0135\275t\007\201>\210c\005\277`\037}>\243\352\227\275\246~\236\275\237\310\023\277n\300?\277\367\351\310>\271\337\241>kH4\277=\362G\276\365\234t\276$\264\005>$\234&?\310A\211\276\357\341\322\275\033\273$\276\237\345Y\276:z\374\275\263\356\037\275!<\212\276=\362\007\277\374\000\004?q\346\227\275\024\\\334\276\267\264\212\276C\034\213\276\256\234=<2U\320\276m\305\236\276\037K\337\275\t2\242\275\343\374\025?\220I\306>\023\270\325\276*Xc=\023\364\027\275\362\230\221\276!\037L?\264\260\007>\3603&\277\344,\214\276T:\250>\367\036\236\276o\365\334\275\333\371^>n4\000\276p\261\"\275\346\\\272>\352!J\277\210F\027\276\t8\014\277\275\030\n\277\223o\026\277\342u}\274\020u\037=\312\303B>\"\343\021=\020\223\260=\332X\311\275 $\023?\177\207\322\276\352#0=t^#\276\203\243\204>\rlU\276\330\r\013\277m\377\n=\2407\025=@M\255<9\177\223\2768\276\246>]\341}>\265\335\304\275b\021C=\001j\352=\234\247z=\363\314\013\275d\257\247\276\246\003#<i\035U>\253>W\276\252\202\201\277\214\235\260=\275\254I=|\017\027=\315\351\022\276]\206\177\274%\222H\276Xq\252\275\361,\301\274\263\014\201>\230\206!>\331{1\275I\021\251>h\221\r>\231\r\362>\000tX\276\206\003\321>\210c\235>\377\262\373\275f\240\302>VHY>\034\261\306>k`k\276\362\\\277=7\026\224\274S\005\003\276\302\204\021=`YI\277\"lh\277\024\256\327>y\222\024\276\222\350\005>\020\222\005\276?\306\274\276<\210\255\276}?u\276\"\375\366\276|\233\036\276_{\006\276\353n\036\275S\264\362<\001\2446>d\351#\276o\360\005\276aT2>a\340Y>tF\024?\177\243\035\275\260U\262\276\304\353\312\276*\000\266\276=d\312\273\314\321c>\212\260\321>40r=8\366\214\275\354\027\354\2753\026\315\275\236\013#=\016\363\245\276\371\203\301\276\256\201\355>\336\254\301\274\362^\005\277\220\240X?\220\367j\276&8\225=\267\013\215>\363!(\275\027\2671@K<@\276\252\016Y\276\300\317x\276\'MC\275O\221C=[B\376=\342;1>\241g\203?y\224\312<\2721\255>\253b\205\273\333\212]\276\r\246a\276\206\034[=\260\217\316\275\031\n\016\274\251\301\244\276\341\356\354>\365\362\273<Xs \276\001\023\370\276:\314\307>.\347\222>~5/\277\212\345\306>|\017\247>]3\271>r\371o>\214M\006;9\326E\276\362y\245=\305\033\031\276\341\356,>\264\344\361\274=}\304\275xb\016?]\304\227> \317\216\275\351\013\301=\352[\006>\025\343\034\276E\324\304\275\242\356c\276|\n\200\276E\365\266>\310^o\276z\377\277\275\320\325\226\276*\343\217>\336Z\206\275\314\262\247<\217p\272>U\244\002\276d\351c\276\302\335\t?\030\262*\277G=D\276\225\361\377\276\205\353q\276\031\025\202\273/n\203\276\346Z4\274=D\343=;p\276>\210\021B>k\237\316=\234\277\231>\316pc>\025o$>\215\227\356\275\340-\020>\366b\370>\330\r[>\260\313p<V\237+\276X\255L\276\200eU\277\320\355\225>\342\351\325=L\375\214>.9\356\275|\325\252=\325&N>\022\210w>@0\327\276\237<\354>\372\'\210\276A\202\202\276\204\273s\276\206Z\243\276\276.\303\275?\306\214\276bg*\276\037\364\234\276/0\253\274\261\277\314\277\321?\301\274?\251\026\277\"\211\036>\262F\355>\"O\222\276\305v\267\275\2652!>1\261\271\276f\332\036\276cbs\276iW\341\275<\210]\276$\271\374>\250\251e\276\341\361\255\275\340\276\216>\211^&>L\340\306\276\256\360.=A\361\243\275\354QX>\001\023\230\276\321$\261\274\321\005\265>\243\314F\276V\232\344\276\237\037\306<\252`\364>1%\202\276\033G\234\2760\201;\276\266J0<\007%\014\276\014[\263<Y4=\277\002\267\356=J\007+>T\214\263=\217\344*\277o*2>\026\302\212=`\0058\275;\216\237<\371I5>\370S\343\275\336Y\213>;\344\026?\367\351\370\275]\376\243\276\n\362\263=\234iB<\255i\036>{\332\301\276q\346\227\276\364\303\010>\236\352p>\277\016<\276\261mq\276T\000,\277\362^\245>\331Z\377>\230\3005\277\025\254\221=\243\257\000\276\343\031\024>\0319\213\274+2z\275\303\360\321\275\233<e=2v\242=\375\366\265\276\365\326 >\221\323\227=B\262\300>f\210\223>\350\274\326>\306P\016\276\223\035\233\276\020;\203\276e\247_\275d\257\227\276U0J\276)\005\315\276\241\271\356\276\010r\300>\261\370\362\273\330\330e=\273\233\007>N\264k>\317\203;\276->\025?\2652!?\314\2277\276\273\320\254>S\005C>b\370\020\277\022k\021>\010w\227>%u\242\275\262F=>@\373Q>\363\037R\276\356BS\2769(\031\277\325\tX\277/\0271\277\021\001g>\3127\333\275\322\253\241=$\361\262\275\202\347\036>\263^\234\276[_\224>\365\241;\277\236\007\307\276\210\272\337\276\253!Q>n\276\221\2751%\322\276xz\005>\215Es>\"lX\276a\340y\276\216\256\022\275\215]\242>\306\217\014<N\234\\\276\003\317=>R\360\224\274\350\336#\276\026\373\253\2766\315\233\276\353\377\334=\365\201\204=C9\t\2776\310\344\275M\276Y\276N\321Q=\'K-\275l[T>\256\236S\276P6\325>\347\306\364=S\222u\275\201\225\223>nnl\276\351}\343=6\352A>\027\021\305\274>\\\222=\224\274\232>F\316\262>\267\013\315=\254S\305=Y\240\202\273\003>\027?I\3338\275\212\003h<\324\325\035\275\003&\010\277\217p:\276\252`\344\276\376\266\207=R,\227>6t3<\262\234\204\274\314(\206\276\272\332J\277\205|\200\276\314(v\276\336\223\307\276\\\254\310>U\331\267=\307\272\270>o\324\n=\301\377V>\217\374a\276\034\323\323=\"O\322=\335{X>\232B\027?\271\337a\276^\326\244\275\365\234\024\277\005\206\334\276S^+=sc:>\212\260\341\276\277`w\276\375\023\234>\324\265\226\275q=\232\276\372\200\000\275\304w\222>\213\340G\277}?m?\317N&\276\233Z\346\276&\252W>\275\306.\276\200H\317>\376e7?<f\340>-!#@\320aF\277\271\032\231=\265\031\247\274\273\270=?|,5?z\344\257>v\303\306>B>\004@\3266E\274\025\343\374>\210K\016=\303\365 ?\206r\002\276;\337/\276o\273\200\276\225\267c>\361\327\344\276\24461?\315:\243=\n\272]>\017\013%\277#\206\235=4\237\363\274\032\027\006\277\200\267\320>|\270\014?r\334\251>F\261\334=\334\200\317=\253>\027\276-AF\275.\034\370\276\3372\'>\352!z>\356\353@>\242},=fk]>\033g\263=\275mf=]\250\274\275\017\356\256>\375\021\246\275j\244e\276HN\206=\241-\007?t\014\250\276\200\016\203\276\353\377|\276\255Q\317=\205\010\350\276\335\2273\275\0015u=\374\203\355:\335\321\277=;\307 >\362\230q\277\2304f>\206=\025\2775\360#\274w\370\333\276\006\364\002\275\372\320\225>>\313\263\276e\252 >\225`\201\276S\350\254>\327Q\325\276\303\270\233\275\031\220\335>\213\306\032\275\313\276\273>\213\375\345>\272I\234>\'\210\032>\241\363\212\276>\355\300\276\000W\322\276y]\037>\345\355\250\276W\262\343=\267\321\200>\2304\006?\020\2261=\231\324\260=\327Q\325\276\354L\321>\341\356L\276\272Nc=x(\212\276\004\004\223\276\2034\203>6\037W>\326V\014\276=\017.\276\200\036\264;\365J\001\3008\204\n>\306\242)\276`\246\222\273L7\331>\350\335\230\275\251\023P\276\306\304&\275 {\375\276\325\004\241>\344\203\336\276e\303\032\275\021\374\357\276S\005\013?\320\325\226\276Y\213\217\276\251\207 ?\335\353\244=a\032\326>\221~+\277L\211d>\342\346\024\275\272k\231\276\033\234\210\275M2\222>\320\270\200>\253\225\231\276\233U\357>6\352!?EdX\276\3645K=\362\t\331\274R\272\364<\"\303\212\276g\'\003>\267\234\333>j\336\021\276\202\346\223\2758\370b\276BC\017\277&\344c>\345B\305\275|\n@>h\010\247\275}\005!?\334\235\205\276\203\370\300<\325\262\025?\263\315m\276\221\270\037\277\3333\013\276l&\337=y;\302>IK\305\276&\2151\277\356B\323>\367\344\221>\262.\316\276\310A\351\276\333\247C\277]\031\264=\200\202\033?;\302!\277\320\3256\276\212<i\276\322:\232>W\225}>\252+\377\276\227\2138>Ae|<\"\340\320=\3642j>\021\001\'>\321\226\323>\360\242\017\276\327Q\265\275\374\306W?\235\3278\276\347\373\251\276\255\206d\276Kx\202=\307\234\'\275b\203\205\274\370k2\276\331|\014\277\363\216\023?\331\010\264\276\324\271\"\274<N\221>eq\177\274\201\3545\276\320\355\365>\241\326\364>.V\324\275\366\266\231=u\345S\276uY\214\276\314E\374\275o\326 =\273G\226\275\177\331\255>\337Q#=\376G\206\275\360\304\234\276Z\201\261\276u\223@\277>\350A\277f\024\313\275d\036Y\276\310\315\260>\215\356\340\276\212\220\272=\220\021\260\275\323\207\356>\241\271\256\276p%\313\276\210\205Z\276I.\217\276 F\310>\247\221\346\276\305\311\335\276\320D\010?~\000\022\276\311\260\n>n\213R>c\234\257>b\327\366\274\241\363z\276\320\270\320>\340-\220\275\026\017\024\273\210\327\025\276\240lj\276.\356u\273%]\263\275jM\223\276\332\254\032\277\341(\251\276h\256\013?\374o\205>\360\334[\276\026\244\211>\227\034\227>\276\207K>\026\373\253\275\356\315\257=\035\311%\276\227\255\365=\2446\021\276\372z\276\274M\333\217>?\221/?\307)\372\275\336\216\360=\207\247w\276\3333+>G\254\r?\3127\213\276f\203\334>\301\255{>\353\342\346\276<f\300\275\3745y\276S\320\r?\006\365\355=\301\251\217<\214J\352\274\305\217Q>\r\375\323\276\334h@\276\303\365H\276\246\325\360\276\207\247\027\276 \360\240=\222\226\n?\3269\026\277\320\321\312\275wJ\267\276T\214\013?\340\276\216<\222Y}\275%X|>\301\312\301\276$b*>O;\034\276Qk\252\276p_\227>\226!n>\264\345\274\276y\001V\276\0324\304>)\"\323\276\025<\205\274\257ZY>g,\272\275\224\276\260=\377\317\221>\303\016\203=6\0021\276\006\022\024\276\276\216n;\0221\345=gaO\276\017F,=L\246V@2\254\242>a\030\260=\n\327\013?\344I\202\276\241\333\273\276M\326H\276<jL\275\275RV>e\302\317\276\243\317\3039J\227\276=\177\331]\276ka\026\275n\213r>t\t\207=\212<I\2759\271\037\275\010\346\210\276\023dD=\006\022\324\275\335\232\264\275\250\035\036>+\207\326=\353;\177=\372\320\205\276\336Y\033\276\263$\240\275\t\304\013\276rm\270\276\021\031v\276R1g\272\332\342\232=i:\233>\215z\010\276\374o%>\334I\204=\357\346\371\276C\347U\2761%\002?\342\310\203\274\022N\253\276\273\325S\276+\276a=j\030>>ep\324>\342#\242\275\336\345B\276\211A\000\276C\376Y=\340K\341<3j>=k,\341<M\333\377=\221a5?\205\315@\275o\273p>nQ\346>\302\243\315\275UL\245=e6\210>\273~\221>\225`\t?cE->S\320-><\240L>7\246\347\275\237\260\004>\315\312v\2750\330\235\276\356Z\242>(3\024\274M\240H=\254V&\276\330\266\270\276id!<\200H\217\276\226&\345=S\"\021\277\253\261\244=W\316\276=V\2324>\225}w\276p%[\276\250\374\213=\342;\t?\016\333\026\276\323j\030?\232\353\024>\257\013\277\275\3544\022>\306\212\332\276\343\215\254>2\000\324\274\311\037\274\276\357U+\276\244\302`\277\301n\330=v\252|\275\364k+=\023c\031=\237<\254=\203\243\204>\237\223\336\275<1k\276L\377\022\275\007%\234\276*\221D>\226&e>\177\241\247=\257\224\245\276X\255\274>\tm\371= F\350>\001\301\034\276?\377\275\275!Y\300=\207\277\306\275-x\221\276\022\367\210\276]\277\340=\334KZ>AI\241=\272\203\370\276\036\247(>Di7?\001\336\"\276u\037 >\350\023\001?j\030>\276\240\032\357\275\261P\323\277H\337d\275\356|\257>b\333\">b\370\270>\034&\272\275\260U2\277x^\252=\206\257\217\275\315X\024\276\002H\r\276g(\256\275\260\346\240>\222\317+\275R~\002\277u\315\264\276\nh\222\276!\260\242>\r\216\002?I\271;\275\204G[\276\240\211P\276\007B\362=\231\236\020\277\037\205\233\276\2613E\276\007\267\225\275\2716\224\276R\362\232>\211\323\211\275\272\024\307\276\270\036\205<u\260\236\275\037\242\201\276\372\3622\277 A\361\275\313\370\367=\375\244\332=\001\247\367\274\230/\037\277\246~~\2760\273\'\276\346\226\006\277\226&\345=LT\317\276\206=M\276<\332\210\276s\272\234>\347\340\231\274\307.Q>U\331\027>\013$(>\355\201\326\276M-\003?.s\212\276\027\234A=\022N\013>\332\346f\276\235\327\230\276\363\037R\274a\337\256\275k\202\010\276o\365\034\276\335$F\276\225\361\237>\312\340\010>/1\226<\025t{\276b\275\321\274\374\337\221=\352\317\376=h\316z\274x(\312\276\254\345N\275\243\254\277=o\360%\2766\260\305\276\220I\326\276P\211\020\274\035\351\014=\231*8\276^,\214<\261QV=\274\256\277>\372\325\\\276\210\021\202>T\000\014>\311\220c=\302QR\276\332\256P<$a_\274\363\252\256=\233\307\341\274\333\371\036\276\343\031\304>\226[\332\275\217\307\014\275TR\347=9E\247=BZc=\251\366\371\276\363\3074=\205w\031>h\350\007?\250\030g>\014;\254=\366\227\335\275\321?\201\276R\n\372\276\033\234\250=\271\252\354\275\202\347~\276\201\n\007=\016\025c>\231*\270>\273\233\347\2754\363\244\275s\234[\275\255Q\017\276\200H\037>\327\335\274>LTo>\207\277\266\276\301\342\300>\366z\307>\'k\014?O\262U=[\261\037\276\006\r\275\276\250\212\251\274\320a\006?w\363\244>\365\204%\276\007\323\220\276G8\335\276T\340\244=\301\250\224\276T\306?\276\226\004h>$\326b>X\312\202>\237\310\323>/Q\375=\\r\034>\027\361\235:\316S\335=\013{\032>[\010\242>p%\033\276\273\355\">R\362\312\276\314@\205>\332\217\244>d#\260>\233\003\264>Gw\220\276\375l\204=Q1.>\366(\254>\363Y\036\276\325&\236\276\370\245\256\2764\364\317=,\016\227>,}\230\276>\263\224\276yX\010>\257%\344=<\205\034\275\317\367#@Di\357=\265\246\t?\274\0052>\301\312A\276\335\322\n\276%\006a\276\261\242\246\276\301\034=\276\030\354\026?\313\234\016\276\231\236\200\276\247t\200\276\005\305\217>m\255\357=\024]\267=a\303\203\276\002H\335\276\220\203\002\277?\247\300\275\323\331\211\276y]\237\276\004sT\276\377\225\325\2754\020l\2729\013\373=\000\343\001?o\201\204\276#2\274\276\204a\300<\307cf\276H\304\244>t\\\215<\240\374\335\274@\366\252\276\rT\246>f\237\207=\320\267\305=\261\247\255>\2449\262=.s:\275\202\213U\276\n\205h>\300[\340\275)\350\346>\201\320\372<\307\327\336=zSQ>8\2766>\357\342}\274\325\312\004\276\302i\021\277\351\226\302\272\371\017\231>\022\210\247\276CU\314<DQ >\323\207\016\276H\341\232>it\227>\315\001B>(\270\270\275\377\262\033>{\367\227>\222\221\303>/\340\305\2759\013[\276#\204\017?!\007\005\277#\241\255\276\335{x>\316\031\201\276\3166w>\210\327U\276\0363P\276\302\206\247\276\215\013g>\242\321\255>\002\016\201>[\010R>\347\251N>\037\235:>!\037t\276\017\235\036=\213\374\272\275\306\026B>\342\001\225\276\000\343\351>\331Z\257\276\207\371r\276%X\334\275@\366\n\2777l[\276\334\200\017\276Nv\330\273\250R\363\275\027\3615\277Pp\361\275\344\276\225=\377\225\245>\236\007w\276\026jm>\3753\003=?\2516\276\226[\232>-!\037>\351+\230>\217\374\201\276j\336Q>#\024\033=\025oD>\035r\263>\036\340\211=\212v\025>DQ\360>\353s\025\276\375\205\236\275R\n\252\276\313\363`\276\006d\357\275TR\007>\314\014\233\274-\354\351>\030&\323\275\237\315\022\277\301\305\232\276\205B\244\275\300\2622>W\317\351>\n.V>\\\003\253>z\245\254\277k\016\320=\266\313\351\271\003\225\361\275\215]\222\276\234\341\006\276\271\215f\276\023C\262\275K\037:=\204*\265=T\343\005\276a\033\361<\364O\360\275?q\200=\020\351\027\277d\222Q\276\245,\263\276+\023>>\312\025^>\275R\206>\250\035^>\022.d\275\254\033o\274\\=\347\275\360m\002\277|\362\360\275\336v\341\276\010\224\235\276\216Z\201\275\322\373\206>\224\244k\276\325x\t\2768\025\311\275\271p\340=\002\361z\276\346\"\276\276%\257N<\265\214\324<.\034\330\276\353\305\320\276k\361\311\276\356\010\007\276\331] \275h\256S\276\226&\225\276\004\033W<\347\250c=m\214\275\275`\3450>\340g\354>\255\207\257\274\356_\031\275zT\374\274\233\0333\276T\035\242>W%Q=xzE\276\350\245b=\022\332\362\275\204\273\263\276od\336=\200\234\260<[B\036>J\322\365=\226y\253\274l\262\006>q\311Q><\277\210=\352\375\220\273\234\247Z>\t\304\273>\022\244\222=0\330-\276bJD>\324`\"?\226>\014?\212Y\237\276\234\341\306\276\274\350\253\276\037\327&?\005\336\311\275\330\267S\275s\274B\275\004rI\275h\263*\276\262\200)>P\344\t\275\272I\214>\307\021\333>\247\311L=\305P\363\273K\352d\276\037j\333<\262\364\t\277\247?\033>\262K\004\277\263~\263<\360\242\257>\0010\236>\27164>\377\223\177=\372D\256>o*\322\274<\332x\2767\211\001>\250\343Q>\214\271\013\276\266\276\310\276\267z\026\277\213\032\254>RD\226\276\000r\302\275\037\277W\276> \020\275Gr\271>\337\3365=\233\254\021\275\216\315\216\274\317f\245\276]\212\273>^\234\035\274\305 \020\276\025\3066\276od>\276\007%,>\257\231\354>\2201w\276AH\326\275;\213\336<A}\253\276\203n\277>\253\262O\276\204\201G>\017\234s>\027\274\010\276v2\030>\226\262\314>7Ou>\273~\001>D\300\361\276}\\\213\276aq\330>\310?3\275\257Z\271=\211A`>\250W\312\276\036m|\276\274\311\257=\236^\t\276\227\034W>\336\310\234>\311<\262>\345\320\342>\367\314\322=\251\336z>\325\347J>\214J\232>O\314\232>`\223U>\345\362_\276Mg\347\2769b\r>4K\022?\000o\341\276m\377j>\261\026_\276\260U\222>\356|\007\277aq\030>e\245\001?;\031\254>\021\252\004\277\t8D>\004\350\227=\315\222\240\276d\352\256<\360\334\373=\314\1770@{\243V=4\364\317\275\372\320\305\275\210f^\275\037\200\264>\322\035\244\276\364\374i=\207\247W\276\3706\255\276h\262\377\274\256\360\356=Q\275\345>\356_A\277\322\000\336\275\332\033\034>\241\241\257>\314\264]\276\321t\346>ke\262\276Ae\014?9(\301>\022\336^=\034\323\223\276\240T\213>\023~\231>\203\211\277=\362}q\275\rl\325\275J\265\317\276\215\013\307\276\275\000\373\275\367\314\362>i\000\337>\025\000\203\276\217\252\246>A}\313>\306\304\006\277Z/\326\276.\255&\276\336T\224\276!\002\256\276\232R(\273\277\016\234>\203\243\244\276\240\025x\276\323\244\324=\256\330\317>\241I\"=a6\201<\351\016\222\2765\324\250<\025t\033>\335\324\233\272\3436:\276\320a\216>\346\\*>\002HM>\351\016\">`YI>\'M\303\275\213\375}\277)\260\000\275\211\225\321\274\302i\301\276G\004c<q\3467\276>\256\r\277\240\032\257>~\2149>\205\353\221?]\334F?\260\310\257\273\205_\352\276\316\032\274\274\306\212r\277U\366\005?GZ\252>P\001 \277\355\330\270>\315\036h\276\'\022\254=\207\026!?\311t\310\275\363\345%\276\365\326\240>\231\365\242>\312\211\366=S\005\313\277(\013\337<\020\311\220<\033\276\005<\335\266\217\275#\333\211\276\332\033<>\n\327\303>\272NC>\367\351\270>\277\267i>i5\004>>?\274>\221+5=\376C\212\276R\232M=\367;\024>3\026M>\345\270\023=\212\310\020>\317\203\373>\233re>33\003?+0d>\264Y5\276\032i\351\275\377x??7\303\215\276\254\255X\274s\235\306\276\234j\215\275\240\373r\275\374\344(\275P\035\213\275\005\335\026?\233=H\277\375\301\300\276+5{>\313\020\017\277\3544\242\276\201\262\311>\325\t\210\2763P\211\276\373u\'\275\350\336\013\277\302\335\211>\247\256\214\276\"Q\250=\313\234\256\274\362&\277<\336\260-\276;6B>\362A\317=\2755\320>\036\027\325\274UM\240\276U\207\374>\023~i\276\343O\024=\266\363==\305U\205\276\270#|>q\002\263=\267*\251\275\026\366\024\276\212\216\264\276\314\321\223>\221\360\275\274\274\\\204>\004\034\222\276X8\311<]\341\335\275;\215\244>\211{\274>\013{Z>\202s\246>\377\262\313\276\214g\260>Mj\310\275\000\251\315=\267z\336>\264v\353>=(h=M\024\241\275\236A\223\276\377\317A>7\375\t\277\\\033J>\235\327 ?io\300\276\301nx\276\3578%\276\236$=\276&\036\300\276V\361N?\241/\235\275\006d\217>r\341\000>!\2602>\323\301\212>\001j*>\212<\231\276\370Q\215\275\271\211\232=\326s2>d\346\242\275\244\337~\276\352!\212\276n\335\005\277\326\345\024;I\3256\275s.=\277^\272\211>\312\3032\277S\312k\275\263\315\r\276}y\221>\313\326\212\276\337\212\304<\367X\272>{\275\333\276\034\231\207>\233U_>\311\310\271\276\\=\267>\250\214\377\275\343\307\000\277\372\325\024?\002\361\032\276\306\277O>\335^\022>g\362m>Z\360\002\276\263\261\222\275zp\027>\014\002K>]\247Q>\360\242\237\276\212v\325=4.\234>Z\330\003\277ToM>\272,f=\247\\a\274\355\266\023?O]y>\242\323\223=\221D\277\276\342\344.\277\033b\274<\347\3064\277[%\330=(a&\276+\373n\275\346\313K>\372\2338?\373?\227>\352\312g\276\372\325\\>\214\3706\277d\316s=N\227\225\276m\347\013\277z\337`?\304w\002>y\313\025\275\027\267\321>6Y\343=\373\256\010\277<f\220\276Ouh\276\275:\367>\004\220\n?\366@\353=\316\252\277\276\377\347P\276}\263->\024\320\264>\335\352\231>\255/\322\276\0054\241\277=I\352\276\"\373`\275[\231\340\276\200\267 \277\323\336\240\277qr\237>\036\212\242\276\332\254\332>\3647!\276\370\302\364\276\260\217\216>\307)\312\276\354\372\r\277\026\023\333>\263^\234>\223\343.\276\010 5>\353\220k\277\242\321\035>]\027~=\304\261\276>\333\277r\276^\200\235\276l>^?-&\036?\001\030\377\276Gr\231>\3225[?\254\305?\277O\257\024\276\355\273B>\256G\371?I\242\027>\204\326C\2748\276\246\276\266\326\367>\354\245i=\2034\013\277\023~\211>\325\007R\275\255nu<A\232\321\276\223\000\025\276\335\007\340=\277H@?\263\266)\275\237q\201\276-\317\303\276\'\367;\275\243@\037\275\026\036\217:9\1773\276\330\r\333= $\313>\025\255\\\274\226[\002?\232%\201\276\346\006\303\274U\207\004\277W\262;?\031\347o\276\265\032\262>\253[%\277Sy\273>\003?\212\275\332 \323\275TW>\276\300\354\216?AD\312\275F\261\034>l\225\240\276\374R?\276\321\317\224\275\232_-\276\205\316\023?\257\224\005?_\014\365>k}Q\276\253\347\204>\307\021[?TW\036?}\"\377>\010\254\\>\272\024\027>^\364\305>\016\241\232>P\307\223\276A\237\330\276\227\377\230\277\374\336\036\277\361b\201\275b\241\326>\270\351\037?\3706\035?r\245^=\333\212}\277Y\027\367>\330\020\034\275\256\365\005>\276\366\254\276?5N\277\311v\216?\037K?>%\257\026\277\337\375\021\276\252\202\231?\232\261\330\276\332\341\257\276\\\311\356\276S\226a=\263^\314\276\255\025m\275\377x\317>\207\212\241>\320~\324\276\215\177\357>\371N\314\276\030[\010\277*:R\276\304B\305\277\275\000\033\276.\347\022\277\344\275*?\253!\021>\223W\007\276\025W\345>#\2415?\242\263\314<\366\177\256>)\320\227\276\344\207\n=Z\273\r\276\275\343\204>\201!+>\034\231\307=Tt\004\277\353\255\001>\342\036\253\276p\224\274>\303\3601\276Z\270,<u\345\363\275=\'\215>k\267\335>\037h\005\276\233\376l\274\030&#?\357\253\222\275\251M\\><\330b=\023\013|\275<k\027>\330d-\276O#\005?\227\037\230\275f\275X>ke\262>C\305\270\276\370\302D>\030!\234\276\272\024W\276!Y \277\340\234\221?\321\005\345\276\001l@\275\\:\306=\220I\366>i5\344>\260\217N\276\311\345\037\276\332\252\244=\177\023\212\276\244\302\230>+\243\261=N(\004\276\'\367\373=NEj\276\310E5\274\364kk<b\206\246\2750\360\314>\330\267S=\350M\005\276\361\364\n>\263\265~={\367\267\276\016\204D\276\\w\223>\233\000\303\274\207\212\301\276\337\340\213<\343\374\375\276\204\r/\276\372\320\365>\353n~\276\224j\177\276\275R\026\276j\301\013=\007\353_>r\026\266>\256\330\037?\325[\223>\347oB\276\014\001\300=e\252\030?\322\211\244=\242]%>\270@\222>\201\3177\277{\240\025\2774\277z\276\250\251\345\2758\020b\277\363\253y=,e\331>$\177\200\276\3333\213>x\271H\277N\264\003?\005l\307\275\227\250\276\276\000\306\203\276\001\030\237\276\305r\253\276\3539I\276\215\227\206\277\322Ry>p\231\243\276\246\',\276\325\264\253\275q\217\265\276\016J(?\324\017j<n\213\222>\200\177\212=5)\345\276\214H\264\275c(\367>\232\261\350\275\210\200\343\276\200H\337>\255\335\306\276=,\344>*\035L?<\024\r?\177\331\035\277\221\322l=\013\357\362\275\256+\246\275\001\301\354>\213q~>\260\376\017>0\236!\276\265\340e>\202\312x?\266\271\021>\024\263\256>\257%\004>f1\021\276\036\026\352=;\252\n\277\232\\\214\275\277\014F<\333\212\215\276\025\221\001\276\300\004\316>\371f\213\276\341\227\372=\301\034\235\276\204\202\262\2758H\250=\267\177\305\276\002(\006\275\234\212\204\276\204\r\007?\266\020d>R\200\250=i5|\277_\265\002\277\027\267\001\277\345\014\245\275A+\020?\326\250G>\365\333\327\275\220\334\232=\001\301\234\276\340hG<\3168\215<n\243A>\030&\343>\023\361V\274\323\245\177\275\324\361\310>\205\261\345\276\265\247\344\274\353V\007\277\356=\374\276\335\014\007?\004\347\314>\261\334\202\276\007\353\177<\250\214\217>%X\354\276\377x\357\275\3441\003\277\233\376\014\276\304\2248?\316\302\006\277f\2402\275\010w\007>8\333\274>`\310\352=\3166\027\277\366\227=?P\374\230>\366@\013>\006\236[\276\350\366\002?\201{\236\274\316U3=\266-R?\023D\215\276\351\014\254=\301\312%@\212\253\n>L7\201\277\021\001\327>\2201\327>7\216\350>\212\000g=)\"c\276\331\353e?\341@\250\276W\262\243\276\301\220\005\277\345\233\355\275)\226\033\276+M*>\036\304N=h\263\232\276\020;#\277N\013\036\276a3\000\275\364\032\033>I\235\340\276J\357;\276d@\326>/n\223\276w\204\203\276\313\326\212>\323M\222>\342#\342=\230\027\340=\204\r\257\276\366\232^\275M\025,>\306m\204\276n\212\307\274?W\353\276Ic\264\276\303\r\210>\037\242\201\276m\215H\275mV\275\276<1k>\013\013.\275\2443p=*RA\277\375\331\377\276\245f\027\277\010w\027\277L\340\026?\377[\251\276\027\232\313>5\007(?\235c\020?2 \023\277r\2108<\rT\006>\252D\231\275\315\036(>YLL\276\336T$=\373 \313\274c(O?a\342\257=\3477\314=\255/\022\276\245,S\277\025:\217>\256\365E\276\307\200\014>e4\222=\247\256\274=\\\217\242\276\271O\216=8\020\222\276\251\331\343\276u\253g\276N(D\275f\332~\277\351H\356=\324\357\302\274X\256\267\275\246\017\005\277~\2517?\031\305\242>a7\254>\034_[>\244\3445> c.\276\261\367\342\274A\013I=\356\316Z>+\242\306\275\237\315\n>+\303\270\274\277\232\263\276`Y\351\275\372\n\202\276\266\276(>cE\315\275\007B\022>\210c\375\276\005\374\032\275_\3228\2764h\350\275iR:?\357\344\023\275M\025\374\276%X|\276M\363\356>+0\344\275\1770\200\276\307cF\276\202\220\354=\237Y\222<\352!Z\276\253\347\244\276\313J\363\276\366\013\016?b\326+>\326n\033>\243<3=\364S\\\275\226x\300><k\227\276+l\006\275R\233\210\276\312\211\246\276S\320\r>a3\300\274\310\007m?\372\233\300\276\3436B\277\216\316\271=\247\256\\\276u\006\206\275\035=^>\343\307x>D\243\003?@\331\344\276W>;\277\257\316\361\275\270\036\265\276\205|\260>\036\247\010>p\261\"\276\343\252\022\276\372D\036\277l\317\274>\205\\\251<\014#\275\274\\\310#\275O\036v\276@\023\021\277n\2132?L\303\020\277G\254\245>\r\350\340\273\000tX>c\013\301=zP\220\275<\367\336=gd\220\274]\341\005?\346\\*>\344\017\016?\343\337\037\277\207\212q>\030\225\324\275\335\353$=\317,i\276\034\360\021?o~\303\275\310\315\200\276K\310\207> \354\224\274\213\211\r>\224\331 \276\007\221\261\273\035 \020?\243\314f\276\245\275\321\276\345~\367>`\037=>\335$\226\276\207\300Q=\\Y\242=\014<\027\276ZG\365\276\311\260j\276\214-\004>\340\241H\276\247\263\023>1~\032\275$b\n\276]N\t\275\'\275\217>\320\355E\276\314\013p>R,\207>o\236*>Q\024\030\277A\324\275\276T5!\276\3063\250\2761B\370>\215b9\277]\371L>X\310\334\274\340\234\321\275\217p\332\276\026/\226<\254\305\347=3R\217=\355,\232\275\223\306\250>\220\203\262>%\006\201\274\230i+?IKE>S\313\306\276\316\215Y?\004V\016>\307\272\230\276\230i[>\000o\201\276\r\3073=J)h\276\225\267C\277i:\373=\303\323\253\276c\264\016>~R\r?CV\227>\331\271\0029\374\035\272\276\363Y\336>j\301\333\276\213\246\013\277\261\370\255\275\331_\326\276@0G\276k\202H>\006\236\033>\334\325k=\223o\246\276,\267\024>?\000\311\276\217\307\014=\230L\205\276\345\355\210\276\343\374\315\275zS\021> ^\207>N&.=\373\221B\276%@\315\275\007\360\266\275\217\337{\276\363\310\337\275\3333\033?\013\321\301\275\213\211m\276{\277\021\275\245\367\355>)\264\214\275\270\351\357>\372\' ?\343\374-\276N\337!<x\'_\275FB;>\036\033!>\247\221\026>~\343k\276\201[7>\220\275~\276&W\261\274\016\241\232>\365\271\212>\331=\251>.9\356>o\273P>6\001\206=N\177\026\2771\316\037=F\261\024\277\353s\005\277\230\302\003=\315\257\016\277\251M\254\276\250U\224\275\361\327\344\276\024yr>\254\342M>|\n\220\276\211\007\264\276\377\345\177;]\376\243>\3171\020\277\2100\276=\\\217\016@\370pQ\277\316\030f=5A\224\276Z\3628=\216Za=\366\356\317\2764.\254>^K\200?/n\343\275\030}-?\315\222\200>q\254\013>\264\224\314=\250\000\000?\221~\353>\225\361/\276fNW>\366\264C=\247\263\243\276N\354a\275\331\353]>+\373\216\275\342\257)\276HRR=\016\243\240=W\351.=e\253\313\273)?\351\275_\322\330>\233\221\301=C\362\004<y@\031>\257\356X=%zy>\n,\200=\212Yo\276\255\335V>\202\034\034\277o\365,?+\301\002>\016\237\364<\311\253\303\2769g\037<\031C\024;\250\030G>\254\342M\276\265\211\023?L8t\274\177j\374\275\350\207\321=\025\2510?\232%\321\276\305\252\241\275\322%\322;<\203\206<N+\205:\200+Y>\361\364\212>\347\302\210=\277\233\256=<k\027\276\245\371\203\275\254\220\242\276t$w\276\250:\004>,\0167?\016\241\232>\2235*\276l\004z?\212v\325\276\353V\257>\327i\034?\003\tj>\204\r\357\276\376+\353\275\362\352\034\276\323MB>-`R?\325\312T?\007\232\017=sc\212>\201!\253>;\2154=\262c\243\276I\235\240\276!\223l\277\024yr>j\331\002?\020\3141>+\374\031\275\360\026\010\277\340\204\222>\334\021\316\275\372\270\026\276\030x^\277#\333\311\277\226!\316\275^h\376\276_~\307=\031\255#\276S\256p>\232[\241\274\240l\272\276\014\314J\275\r\211\373\275\334\272\033>h\352\225\275\034\010\231\276*\214\025?\357\377\243\275\317NN\277K\037\032\276M\370\205\276g\233S\277\243\222\372\275\213\210b=?\214\320\275zp\247\276\3166G?=a\t\276\273\355\342>:#\n>\245\332\007>\3475\246>\337\032\230\276\321\256\022?\333\207\234=g*\004=E\rf\276\210.8?@\336\273\276>\261\016\275\322\373\346>=\'\255>\302Q\022\277\251\023\020>\327\337\222\274\301\253\245\275\224\277\233\275\207\212\201\276\307c&?HP\034>\265\340\325>\020u\257\276c\n\326\274*\306\271\276g\355\016?O\006\007>\257Zy\276\251\331#\276\025\306\326=\263\227-\275\345\325Y\276\314\321\003\277\274\005\222\276\312l\030\277\304\353\332>LqU>\0263\202=\010\313X<\205\266\334=\202\2552>\326\250\'>\351\016\362>\033/\275\276\002e\023\276\321\027\014<\246\'\214>a\336\343<C\3475=`\260\213>\267(\003\277\372\323\306\275\202\034t\276\260r\350\275\233 \n>|\355\251>l\265\247\2757\216\330\275\250W\272\276d\257\007\277q\254k>\261\302\215=8\367\267=\302\372?>\276\027\337\274\021\337\211\276%\037\273=\366\227=>f\022\365\274d\257w>{k@>E\365\306>e\306\033=\005\335\236\276\252D\331\274\212v5>\354Q\030\276#J\213>w\020\033\277\242b\334\275~\220e\275.\342\313\276H\334c\276t{\t\276jj\251\276\274\226\030?*R\301>\206 \027\277=I\032>B!\342>\327\027\231\276\342=G=.\257\267\273\245\203\025\276C\347\025\276\263\225\267=\"S~\275\363\223:\277oG\350\276\270u\227>\251\331\363\276\372~\312\276\300w[=\264\216j\275\322:J\276\377\225\035?e\307&>\273D\025>Zd\333\276,\361@\276\303\357\206=!\002n?L\303p>\317NF=\031XG\2747\2168>\346W\303\276\203\025\307\275\237\224\311=,e\001?\275\035\341>\373\350t>]m\305\276A+p>\315\222\020?\0015\205>\321\"\033>\353n\336=\241\364\205<.s\032\277n\300\307>\250\337\205\275\365\276\201\276\276\237\232=3\371\366>lx\232\276\201\353\n\275k\016\220\276\000rB<\334\021\316==\']>\357\341\322\27533\263\276F_a\276;\307`\276\256Ga\276B>\200?v\246\000\277\205\231V\276*6\306=;\307\360>EG\022\276\354\206-=\226[\312\276\223\251\002>\014<\007?\016g~\276\333\334 \277\360m\232=cz*\277F|\'>\221\270g>\267\321H?\263\007:\2762\257\243<\233\310L\274\006L\240\275v\032I\276&\344+\277\206\342N=W\t\366\276\360R\252=\203L\202\276\240\032\357\275\020\314\261>\246\270*;\343p\346=-\225\367=s\272\014>\362^\305>\207\304\235\276\303\330\002?\246\233\364>~\343K>\357\217\227>\226\337\263\273\t\212\317?\0358\267>\322\000\236\276\326s\222\276nQ\306>\325<\307\275\271\337a\275\'\342F:S\350\254>\220\023&=\207\333\201\275t\265\325>\212u\252=\237\002\000\276\316\302&\277\014\3155\276\302\335\311\276b\273;\275\257\3537\276)\320\267>\234\304\360>\006\3261=\331\316W\276w\220\215;\202\215\213\275P\344\t>\2652\t?iR\n\277\334.\204>\\\217\322>\320\234\365\274\241\024-\274XVZ>\022C\274\273\'\302\006\276\224\274\232\276\313J\203>\255\300\320\276\231\323\245>\221,\260\276$\233+=\014\352\333=>%\307=\341\264\200>\200\324\246>\237<\254\276\034%o\276\246\320)?&6??%@\275>r\376\266>\376\232,=\347\310\312\275Y\335\352\275\267\013\315\275L\246\252>?\037\205\2751\224\343>\300x\306>\226y+\274J\265o\276\304|\271=\252C\006?\237\260\304\276b\020\270>\031\377\276>-!\337\275\377>\223\276\244\213M\275D\213\014\276\006\235P=\312\376\371\274\360\370v<\277+B\276\213\340\317\276\331\316\027>\377x\337>\017\3210?\245\275!>\324\361\330\2753\304\t\277\223\343.>t\366\004\274Q\275\025\276\031\220\215\2761B\330>\"O\022?.s\252>_\007\022\300\036\371\263>Ed\330\275\240\025\210\276>\256m\276D\335\227\276\272IL\276\365\363\346=O\036V\276$\266\273\2740\236A\276\346\260\233\275\342\351\225>\006/Z\276ms\023?\000W\222>\026\030\022\277\313\020\227\276\227\250\036\276\211\322\256>Srs\273\267(\223>\361\327\004>m\253\271\275z\3022\276\277\3615\276y\0016?\020\037X\274\356\316\332\275\304\231\007\277\211\007\224\276o\360e\276JA\027\276X\3053?\346\"&?8\363\013?\333\304\271\276\212\223;\276\254\250\221\276j0m\276\005n\375\276\367Q\262;\243=\276=C\306#\275\\=g\275\352x\314>7\032`>\0319\373\276\224\366\206>\017d\275=;6b\276 \267\337\274l\262f>\333\277\222>G\311\013\276\315#\027\277rm\230>V\016\275\276\322\306!\277\221D\337\276s\364x\276~\251\257>.\312\354\276\031\312\211\274\202\377m\275\024?\326>\3019\223>\216@<>\373\221*\277\333P\201\276A+\360\275\234SI=cEm>o\324\n<\261\026\337=\3372\227>-x9\277J\322\365=mu\271\274<\310\241:\367\314\002?V\274\021>\037\272\000>\226\347\221>\225\361\317>R\233\270>\324c\333<\021\303\216\275[_T?\036\232\303\273\214\0255\276\310\322\247\276\t\251[<\316\245\020\277\307\272\000?(IW\274\235\205\375\276\257{\213\275?\306|>\245\236\005=uvR\276\270;3\277<f\260\276\300\227\242\275m\306\311\275c\'\274<0\325L<o*\242\276q\033\315\276u\0040\275\266\326\027\277i\306\032\277\233u\206=\303\365\370\276\323j\350\276\325\312\244>]\341\315>\361\364\212>G\003\370>\246\320\231>\013$\230>3\247#?M\326\350\275od\336\276z6\023?\335\357\260\276\221\232v=\364\370\375>6\2605\276r\336\237=g\325\247>\345\263\034\276\232%\221\276\302\211\350\274\315u:\276\314(6>\026K\221\274\341\227\232\275\t8D>G\311\273>G\311\333\276V\267\022?j\215\034<\216\315N\275\177\023\252>\224.}\274\303\2335\275;S\230\2766\001\306=\002H\215\276\3274\227\277\260U\302>1\266\360\276\024\005\312>\374\251\021\276\343\307\370>\002H\235\276\326\251\362\274\r7@>\"\375\006\277\271\245U\276\256\362\304=\324H\033\277?W\323?+\210\201=\271\031.\2762\005\213\275N\013>>\204d\241\276\031W\\=4MX\274z\302R>\262*\002\275n\027\272>\314\353\010\2750*\271>\340\204B\276\010w\247>\361\200\362\275\341\264\010?\276\237Z\277\342\347?\2753\304\021>\273DU>W\262\323\276R,\367\276O#\215>\352\354\304\276y\222\024?>\005 \276\256\236\263\275\276\366l>\347\030\260\276\036\304.>/\250\237>\362\231\254=Q\210 \276\014\352\333\274\266g\306\276`Y\271\276\342\036\253>\361\200\362\275a\244\267\275\2510\366=\nh\342?\020\006>\276N\270W\275\265l\355=\344\367\366=(-\334<V\361\006\276qZ\020>\253>\307?\261\247\315>#-U=Y\335*\276\024\256\207>\334)\035>L\210\271\274\240\303\334\276V\270%=\352\354\344\275\'k4\276\r\340\335\276wg-\276\262K\324\276~t2\277\224\301\321>T\306\007\277T\000,\276\221\017\352\276\316S\255>\377\tn>\256\266\202\276YLL\276\263\355\264\275M\326(>\235c\220>\220\367j\275\205\224\237\276\204\r\217=\r\013\244;\216\006p>\311v\216\276\242(\320\274DL\t\276L\246\212>a\375\217\276\322\343\247>\036P6\276Q\367\001>\300[\200>\221a\265>\024\226\210>\274\221\031\276\214\025\245\276r\341\000>\210c\335\276S\256\340\276\335{\270>\225\202.?\362\315\366\275nQF>\305\311\235>\375\244\n\277f\367\264>\020@\352=+\331\261>\375\207\224\276\220\203\262>\'\245\240\276\013\014y>;\305\252\274\202\306\254\2752\311\350>bK\257=T\310\225= \014\\\276<\2752\276\316\034\262=`\260\333\275t\014(\277\346\350\021\276J&\247<\240\355\007<G ~>U\023\004\276\216\3473\2758\204\352>\244\344\305>7\375\331\2759\234\371=A\274.>L\211\244>\333\277\262>\323\237]>-?p=\222\004\241\275.:\331<\211D\301\2759E\357\277\200}\024>\305\002\337\274Q\210\320\276s\205w\276\027\232\313\276\036\376\332\275\315v\245\275N\177\326\276\323\301\372\275\202\377\r\277B\223D\275\001\336b>%\351*\277\0054\361>\020\257\253>\262\364\021\277\207\304]>v\032\t\276\213R\302<\227\307\032=A\016\272>#L\221\275\220kc>\363\223*=\231\022)\276p\010\345>\177\336\224\275cR\r\274aR\274\275\252(\236\275\025\214*>\304\230\264=\"\372\265=\343\252B?\321\"\203?)^\245=n4 >\342u\375=28*>0\201\353\276}\313\234\276B\t3\276\252\2650\275\010\224-\276u\216\341\276a2U>\361\021\301\276\377x/>\213\335\276=\256\2363\276m\034\221\276w\241\271\274\0265\250>5D\225=\004\377;\276\314\321c>\263)\327\275\034\360\311\276~\0301\277\025X\200\274o.~=io\320\276\350\024\344<TW\376\275WC\202>\365\241\233>\334\016\215\274\222\350\225\276h\320P>\204\327\256\274\317K\305<\230\027\300>\024\263\216>\324\357B<\343S\000>\002\331\213\276\350Me\276~\001\275<h\\\210\276\372&M\275\007\231\224\276+\366\207>&RZ=\345c7\275\3704\307=G\035\235\275To\215\276{\332\001>\036\212B\276\267\177%\275\351\013\241\274MJ\221>:\006$\277E*\334>\0358\'>w\025\202\276a\301\375;\267\321\220>\017\227\354>\311\3109\276C\255\371\276~5g>\255Q/>\345_\313\274\376\267\022>\036m\034\276\235\272\322\276/4\207\276\267z\316=\265\027\221=\202\312\210\276\'\026\370\274\314\013\010\277U\023\004=z\031\305=\242E\006?\026\373\013\276\223T\306=_\227\201\275\002F\227\275\357\341\362>B\354,>>{\256=\271\337a>:\257\201\276\271\245U><f >\212\370\030\274\327\367a<\234\341\006>\310\014t>H\277=\276\350\366R>\244\374\344\275\331\314\241\274H\304\024=\021\001\227>K\260\030>\036\244\307\2756\352\201\276\300\tM?\271\337\301\275\205\353\021\276\323\237\375=:X\177\2768-X\2767qR\276z\374\036>\271\031\356\275\3544R\277\017\234\023>R\360\224=\247\2633\2769\013;\276g~\365>\272N#\275HnM\275\324\016\037>\265T\236\276\236A\363\276\211)\321=\361.\367\276S\005\213?\002\364Z\272\227\255\005?\336q*\276v\340\334\275al\201\276\265\375\353\275\362{[\275\376\016%>t\230\357=\r\246\321>\261\026\037>E\201\276>\303\325\201<i\000\317>T\374_=&\2151>Z\360J\277\370\302\264\276mqM\275d#\320=\213\246\263\276n\206\333\275g,\252>\024\314\230=ni\035?\307.\221>G\311k\276I.\037>\017\n\252\275\340\363#>\362\260\030?\266\271\321\276D\206\r?\232\266\377\275\270\314\t\276\203\206>\277R\325\204\276\243\001\254>\376C\032\276\005n=\276!\260\312?\264\310\026>\256\236\323=\372\266 \275\334cI>\345\200]=\306\277o\276aT\202>\344\024\345?\242E\016\277:\313,=,\232\216\276%;\366=\361)\300>\014\223\271\2764\2424>C\255\211>Z\330\223>\247t\240\276?W{\276\260\217\316\276\337Om\276a\303\263\275*\000F>\377\317\001\277\377\347P\276\2505\235\276?\251\326>\201y\210\275\032\320\301\273\301s\277\276G8\255>\264\310\306\276\245\370\370<\265\032\262>\274\\\324\276\223\214\334\275\215]\302\276-x\241>\343\374\215\275\320\'\302>XVZ>\372\271a=\244\344\325=\340-P\276\246\'\354=\204G\253>\r\302\034\275\025t\373\275VF\243=\014\3124=\335\007\000\276\216#\326=A\267\227\276\2505m>\020\263\267=>\313\203>Ou(\276\276j\005\276\034\231\247>\n\334\212\276\311q\347=\277\202\024>35\251\275\206Z\023\276\357\033\217\276\020#D\276\232%\201>\316S\035=n4\300=\021\031\326<\2027\204=\251\331\203>\002\331\013?JFN\276\230L5\276aT\322\275#\020\377\276\225\016\026?\2201w\276\264\343\306=#J\233>YL\354>\022\203\200\276\201\004\265>\374\031\276=RI\355\276\314zY?\2721\375=\202\256==#\025&>\014\007\202\276T\306\257\276\026\373\353\276?]\223\273\240\025X>\212\037\363\277\317,!?\001\301\234\274\210i\337<\363Y\256\276\331\353\335=\216\001y>=I\232>\370\337\272\276tE\251\274\003x+\276\004V\216>\030$\375<:\007\317\274\320\233\212>\232\266\337>\372\'\350>Tt\204>\305\311\255>\212u\252\275\313J\003\277\345D\033>\350\372~=J\226\023\275#-\025\276\225\266\270\274\377\004\327\275\177\301\256\276\232\266\377=\246\230C=\226B\200\275\204*\025>\255\206\204\276\323\301\272\276\\\313d\275\204\201\347\275&\374\202>\366\227\275=\017\r\313\275~\252\212<\002\267\276\276\020\006\036\276\227\342\352>\246\'\274>fI@>,\2027\277!\310\301\274aT\242>\373\"a>-\225w\276n\213\222=v7\317\275:\"\237=v\375\002?1\010\214\277\226\225\346=Z\r\t>Vc\211\274GrI\277o\323_\276\316p\003\276\222y\344>\274\313\365\276\3157\2238B\225\032\276\024\005\032>\006\273\301>\375\335{\275U\332b<\246~\036\276+j\220\276\2304\266>y!\235=\037\235\032>;\304\277\274/n\003\277\342;1\276/\250G\277\200\267 >o\323?\276<N\341\276\036P6>\245k\306>\302\372\337\2767\340s\276\235\272\"?E\236D\276\212\224f=&\252\347>\2719\225<\024\263\336> }\263=U\233$;\335\352q\277\354\022\225>T\306/?\277\r\261\275\371\275-\276\242F!=\0358\007>u<&\276\214\326\361\276\'\203C>W\354\237\276\362\352\214>\'1\210\276\365g\017\277\016\025\003\276\250\030\307\276\271\215\366\276\245\020H\275r\026\026>\0363\020\276\352\0044>\335\264\271\275*\033\026=\314\010\217=\366z\227\276]\277\200>\200\361\014>L\022\360\273\036\033\201>q8s\275\367u\320>\016\363e?\326\3423\276\315\222\000\276E\273*\276#e\213<\343k\357>\334\364\347=y\036\214>\017\013U>\233\217\353=P\031_\276F\266S\276\310\007\315\276\244\3028\276^\242z>I\3642>z\245\014> \227\230\275\344\364\265=\225\267\223\276l>.>\376+\213>\001\023\370\275%\353p=\261\304\203=I\337\177;9b-\275\"lX>X\377\347=RD&\276\362{\273\275\223\0005>\212<\211\276B\354\254>\332\215!\271\336\223\227>\205_*\276\'\332U=(I\327=\243X\256>f\023\340\274 c.?\373\315\204=Lq\225\276\226Ck\276\\w\223\276\341@(\276`\253d>i5\244<E\324\244\2758J\016?\014\002\213\276\375\202\235>wjn\275a7L>m\250x\276u\223\370\276)\313\220\276\356_\311\276\366\356/>j\366@\276\335A\314\276\010\257\235\275\013&~\274d\006\232>\215\356\240>\217p\252\276\037\327\226\276p|-\276\3019\343=7\303\035?\255\247\266=\027\016\204>X\220\206>\336\216\360\274\362\230\361>H\304\324\275\365\020\315\275\352[\246=\210\327U>z\245$@\314\264-\277\235\363\023=\213\375\005>\210W\243:\014<\027>r\334\211>b-\276>\024\320\254?\334\364\347\275~\343k\276b\020\210\276\305\0339\276\014Y\275=\246\n&\276w\241\031>r\341\260\276g\017\224=\221,\320>\037/$<\314\332\001\274U0\352\275\\T\213<\n\205\230\276t^C>q\003\276>l!\210\276\311\002&>\234\024\206=\376\267\242\276\020#\004\275]\337\247=Nb\260>q\3111\276\260\003\267\276\303-_=x\177\314>\033G\014>\302\303\264\274\301\312\341=\214\204\326\276\223\251\002>\367V\304\275\037\2777\276\307\2352\276G\311\213>\265OG\276\324\361\210>\013\230\220\2760\273\'>~\343\353\275\t4X<jj\331\275\321\313\270\276\027\234\301<\021\337\t>\211_\261<\246\270\212\276V~\231\274\356%\315=\373\256\270>bi\300\275\326\342\363>k\324\003>f\216\233:;\001\r>J\265\017\276\223:A\276\271\374\'\276|,\035\276\334\235\245>Ic4\276\252`\264>\025\304\300\274\216\314C\276g\177`\275\253\321\313\275\000\343\231\276L\216\273>\216@\\\276\315\315\227=\271\210O\276\270\257\003>\332 \303\276\241\277\320\274g\355\346>8\205\265=h\313\271>m\255o\276Z-\260\275\326\213\001\277WA\014=\017E\341>\366\007\252\275\010 \365\275\017\326/?6\253\256\276\356_Y>\353\377\314>\301\377\206>b-\276\276\016\363%>\230i\333\276r\027\241=j\274\224\276\007|^>\324\267\214\276\317\275\267>\210\205\212>\334\364\347\275$\013\030\276\331\377\245\273\323i\235\275\014\004\241=\2073\177\276R,\327>\323\275\216\275f\240\222=\366\324\352;i\251\214><f \276\213\246\203>\315to\275\243;\230\276\034\\\272\2750L\006?\237v\030>\210\327U\2765)\005\276y\006M\276\271\215\346>\261m\261\276\345\'\205\276\363v\264>\262\364\261\276\3330\n=\002\331K>k\202\250\276mq\255\275v7\'?\247\221V>hZ\242=\255i\336=\224r-;\'\203\003\276\253\225i\276\266\362R=\275o\214\276\375\207\024>$\271<\276\323M\262\276\360\242\357\275\013A\256>2V\233=\027\274\250=\177\244\310\276\250\307\266\274\231\232\244\275\226>\024>\262\021\230>\324\202\327\275\257>\276=d:\364<\203\335\360\275r\376&>\201|\311=YL\354>T\343%\276\221~{\276\342\314O>;S\350\275\246*m={\367G\276l>N\276\322:j\276\341\007g\274\260\003\207>\232_\315\275\346\220T\275\275\035A> \3575\276\271\252\354\275\331\316\367=\307.1>m\034\361=>\261\016=\334\327\221>~\343\233\276M\364y=\017b\207\276\033*\246\275\314^6\275\366D\027\275t\322\033\276B`\225>h\005\346>\n\327\223\276\273\362\251>A}K\274.\220@\276f\024K\276\275\030J\2761\261\211>ms\343=\037\200,\277vq\033\276:#*\276\351\232)\276wx\031<\334F#\276-[\253\276K\253a>\366@+\276\033/\035\276t)\036\277\320\2700\276\342\037\266=\321\003\237<\336Y;>\202\312\250>V9#\273p\224\274\275\201\225\003?*6\213;\331\315\254\275)\3506\277\247\313b\276\246\nF\275\274>3=\266g\226\276\t8d\276\213T8>\005\334\223=+\023\356>\344Hg=\014\037\321>w\025r\276\327\205\037\275_\353\262=(D`\276]m\245\276\367\257L\276R\'\240\276;\217\212\275\017bg\276i7\272=\223:\221>\337\025\241>\231\360\353>D\276\313\274\"\216\025\276\253\354\233>\371I5>\306Q9\274y@\211>\323\365\004\275?o*\276\034\316\034\276\211)Q\276d\314\235\2766\315{\276\024\321\257=\370\374\360\275\201#\201\275\222\2569\276\316\302>\276\302/5\276\350\244\227>\341@\270>\217\275\003;\303\266\305>\'\367\273>\037\275a\275=\325\261\2764\330\224\275(bQ\275R\325\224\276\224\211[=\353t\240<*\035,>!\223\214\276\311\005\307\275bf_\275\253\347D>Uj\366\276\270\351O\276\rTF>\261\242\246\276\311\253\023>V\016-\276d\257\207>\232\010\333\275\251\274\255\276y\262\233=4\276\257\275bJ\304\276I\nQ\273\270Y\234=\210K\316\2765\320<=\353\342\346?\335\230>>\342\351\245>\tm\331>\r\032z>\"T\351=\001j\252\276^hN>F%\265?\240\340\262\276\263z\207\275\374\3067\276\215\321z>\333\371\376\275(\235H=\230l|=^\333\273=\036\334\235\275Y;\243\271\257\354\202;>v\267=\260\311z>\270v\202\275k`+>\331[J=r\371\377\276\320\232\037\275\347\035\227\276\013c\233\276\374\253\247=\356!\241=6!-\275\306\242\t?\244\027\265=7\337H=b\241\266\276:#\002?77\346\275\244\337>>\303*\256>\367\222\006\276j\274\344\276\354\335\317\276O]9>KM\314\272g\n\035\276\352^\'\275H\334\203>\244\215C\276%\351\272\276\275\343\024>\201\262\351=;6\">{\275{\276\336\223\207>\227\034\207\276\203mD\274\250\254&=\2510\026>\244\031\013\276\303\201\260>Ihk>2\217\374=H\033\307>[_\344=\265\375+>\300\317\310\276\007\360\226\276\333\303\336<\3540f=K\002\224\275\r\246\201\276}\005\t>N\264\353\275\nK\214\276\030\225T\276$\017\004\275\214\363\347\276j\244\345>\0363\340>\200\236F=Crr\275\224M\371\275\324+\305=\010=\273>\210h\304>\016\025S\277J)\230>U\207\274>\334\327\241>\247\350\010\276U\023\324\276H\341:>\275\033K=\231\022\231\276\3058\177=a7<\277\316p\003\276\307)\372\275\373\313\016>E\327\245=\202\312\210\276\214\271\013>\260UB>I\235\000>\273\233\347\275\261\246\262\274\264<\217\275\341]N>e\001\323\275\355\365\356>e\245)>\2343\302\275\010\224\035?\213u\005\274\031\312!\277\337\032\330=\364\375t>\022\210\207\276}\226\247>\230L5\276\330dM>\021\036\355=\2508\216=\300!\224>\213\032\254>\237Y\362>\226\t\017?\216\001\331\275M\326\210>@Q\231\275\363T\207\276\341@\010>:#\212>,\016\007\277\211l\326;I\250\317\272\241-\007\276\315=\304\275\202\220\354\275Ic4\276\214\022\364\273O\036\226=&\001*\276\010w\007\276,b\330<\225H\002\276\314\357\264\274\232>\273<\024\351>\275\034\025\356\273\300\350\222\275\n\272\235>\207\371\322\276\302\243\025\277E\022-\277\200\237q\276p%\033\276b\370\310>@M\025?\000\256\304\276\266\276H>\005\300\250>+\331\241>\323\366\217>\246~\316\276\337\376\274\275\234\242\243>\005i&>9\326\225>\002+\247\2762\254\302\276\361) \276\336T\344\275=\202\233\274\005\300\370\275\377!\215\276C9\201\276\216#\326=\317\327\254\275\274\350+>\341]\276\276-[\313>\224\207\005\276\026\023\033>\207m\013\276\204f\267\275\205&\251\275h\226\004\276\264\216\212>\266\022\272\274k}\221>\360\371\t\277\031\034\205>\000\213|=F|\207>\037K\037>tA\235>xF\033\275X\312\362\275\000Wr>\326\342\203>\311\037\024?5A\324>\247\"u\276\005\3008>\325\t\370>\371\203!\276\361\267\275\275\300<\204\275\253\317U>\257\353\207\276-zg\275{h\277\275\251j\322>\306\371\213>\342\314/\276,\237E>\330\323\236\276\222\\\236\276\343k\377>\217\337\213\276\361\000\005\274D\250r>\273\017 \276H\026\020>\034\010\311>l\354r>F\323\311>^\017\306=\311Y\350>/\372\252\276\342Xw>\227\213\330\2761\224\323=e\344\034?iW\361>u\037\260\276\017~\302\275?:\025\276~W\204\276H\212H\275\347\030p>b\333\262\276_\2652\276\007\261\203>8\020\262>z\031%>\032\304\007<\320\'\362\275\t\376w>.\004\021?)\222q\272\255\027\013\277\236$\035\276\227\220\317\276*\346`=>\\\202>\2137\022>M\326\000?{I\263\276\345\355\230>\346W3\276\205\264\306=d;_\276\232\231\031>B>h>dXe>qZ\200>\203\335\260\276\304\231\037\2761%\242>\372\263\357>o\365\\>`\260\033\276\204\273s\276\004s4\276\340\204\"\276\026j\255=\305\217\241>\226\264\"\275$\013\010\277Lq\225>\205\245\313:T\0352>>\352o\275y/\255\273\007%\234\276\2721\235\276\236{o>\320\n\214\276<\244X\275\336\310\034\276\255\243j\276\347\032&\275\226\354X>\337Om>\216W\240<\247?[\276\320\320\377=u\002\022@:#*>\307h\035>fk\235> a\230\275+/\231=[\353\253\276\257|\266>\223\030\264?\030}\025\277\257%\204\276\010\346h\276\360\242\257>\211\007\264\276\340/f=\034\360\231>\340\272b\275]l\332<\235h7\276\214\370N>\021\344\340=\366]\321>\320\320?>m\250\330=\027\202\334=\313\204_=\244\374\264\276\023,N\276\356Z\002\276h\263\352=tA]>U\211r\275C9Q>\250\033\250\275\203\300J<\214\204&\277\246\355\337>\243x\265\275R\n\032>)\005}>\222\2213<\030&\323\275\323jH\276\030[(>-x\221>\232_\r\276\207\027D\275\030\225\204\276`\370\322;\325[\263\276ep4>p_\007?\352\225\342>r\341\260\276\231\273\266>W\3153\275\373t<\276\253>\027>\245\276\314=_$4<?\221\007>8\370\202>\005n]=H\371I>p\353\016>\036\030\300<\301\250\224\276\201^x=C\346\252=\301s\217>\3603.\276\337\2119\276`\310j\274@\244\337=X\034\256\276@L\202\275X\034n\276Z\022`\277;\252:?[\006\234\275\274\263\026\276\323\022+\275\267\263o=&pk>OX\262>\r\253\330>\253\t\262\276}\313\234>\357\341\022<\210\177\230=J)\370\276o\360\365\276\360\334\373=\271p\340\2753\334`\276e\361,\273\242E\206\277\334)\275\276\272\371F\275\265\211\243>\315\314\214=g\355\026\276\220\022{=\334\021\236>=ai>\020\006>\276c\271\005>\302/u<\010w\027?V\273\246=\2760\311>\353\034\003>\251M\234>Tt\364>\263{R\276\362\260P\276g\232\220\275\276j\245>\005\250\331>Ve_>\246~\336\275\327\0222>\331Bp\276\343\245\333=\230\0234=\345\n\277>7\303\275>\016\370\254>a\252Y\275i:\333>\036\247\210>\"\340\260\275\356\224N\2768g\034?F%\005\2770\235\266\275\316oX\275\220\240\370=K\310\207\276J\007k>\332W\036\275\345\263|\276n\027:>\335\316\276\275m\033\306\274\2343\342\275\276\207k>\334\331\267=\242\321=>@k~\275b\300\222\275\215\264\224\276\242\265\302=\247\256\254\276\203L\322\276\240T{\276\257\nT\274\266-*>&p+>t{\371>\245N@\276\371I\025\276\0055\274=\321\005\365=\235\327\000?\371\203\261\276aq\370\275\005\305\217\276\347\343\232>\207\212\321>\307.\261\276t^\203\276\233\346\335==\233\025\276C\376\231\274\222\2630=\226\354\210\276\324\324\202>\254V\246>p\316\010>g\016I=|DL=\022i[=\325\312\204>\2201\367\275\316\245\230\27680\271<1\353\205\276^\240$<\2240S\2745A4>\223\214\\>K\223\032\277Qk\312>G8\355=H\3711?\002\330\000=$\321\213>\017\321\010>v\375\222\276\376\232l>\266L\006=P\374\210>x\177<>\341(9\276n\241\253\274\271p\240>\376+\013\276\230\333}\275c(\347=\031Vq>xE\360\275W\262\223>\213\340\177\276\245\275\221>v\246P\274\257\316\261<\344\203\336=\332\346\006>\335\266o\275\343\337\327>\220N\235\276T\214\223\276<0\200=\020\314\261\276\020u?>w\334\260\275\010rP>)\226;>/\213\t>\336qJ>\037\024\024=H\031q=\037\242\201\276\363\311\212<\305\346\363>\213\211\375>3m?\276\204G[>\003\225\221\2761\010\274\276\335\352y=\225\202\256>{IC\276\310\355W\275\r\216\322=R\'\020?f\020\237=\270X\021>\270u\367=\344\017&>\253[\215>\3230\034>\264Y\245\276\334)]>~\033\242\275\371\017\351\275\200\0163\276\271\337A\276A\016B?>\263\364\276\207\247\227\276^\235\323\276.\312\014>\302\027f\276}\"O=\264\345\\>\204\323\302\275\216;\025?\253N\275\272|\362\260\276\002H\355=\256\201\355>)]z=\233\215\025\275o+==\010\005%<\351\326+\275\254\305\017\277\377x\257>\277\016|\276\351`\005\277\034\010i>\236\230U\276\313\327\345\274\354\335\337\276R\272t\274\2757\306\275>\350\331\276\253\354\313>\307\016j\275\262\2050\277\303*>?\234\341F>\2451Z=\253!\261\276\255/2\276\322s\213\274p\261\322>\202\377\215\275\312T\021@V\231\211\275\271S\272\274\244\214\270;\304w\362>\361\021\361=V-\211\275\313\276K>+\030\375?\003\225\t\277\351c\276<\016g\376\275\251l\270=\304B\355=\010\254\034\277\370\245~\275-$\200\275H\212\310=\227V\243>\370\337j\276\305U\005>\205\224\037\276\"O\022=\307h]\276u\253\227\276\3539\351=q\251\212=\3750\222\276\216@\374\275\334\272\003?GUs\276\374\214\253>\2304\206\276F\010/>.\035\363<b\331\014=~\220e\275\274;2\275\355\323\321>\213\246\243>\350\336\343>B\006r=\327\325\211:Kv\234>\325\004Q\276\377\t\006?\310\231&\275s\200\000>\007\266\312\276)\256J\2764\327\331\276\033,\274\275\230i\233>]\300\313\275\"\032\215>k\237\316\275\327\022\202\276\366\013\346>\035\311E\276\014[\263=?W\353\276)\226{>z\374\036>iR*>\357\000\017=Y\374\306=v\032I\276o\365\334=D\027\344>\201!K>\020\257\213>\223\035\213>\342\314/>j\337\274=\306\212\032\276\002\267\216>\002\202Y\276\n\334\372\275\355\201\326=\372\242s;u\3453>(\270\310>\377\312*>zS\321=\250\035\376\275pw\346\276\376+\253\2760/\000>9\321\016>\306\334\265\276\334HY\274\311\2533\276\301\250\344>\027\267a\277d\257\027>|D\014\276@\023\035\300\324e\301>Hmb\2750\360<\276fNw>(\017+\276\206\033P>n\243A>\266IE\275\216\223\000\272`\260\013\277\345\'\325>\311\260\212\276\304_;?\235\203\207\275\010r\200>E\360\037?Yir>\201x\255\276\373\350\004\277w\025\302\276\017}\267\275\351\362f\274ni\005\277\007\316Y>\034\353b>\261\277\354\275)\230\261\275m\305\256>\362\260\340>\001\373\250\276\0318\300\275$\356\201\276#J3\277\361\235X>iW)?\200}\324>M\020\245>\241\367\246=y\002\201\275+\023\036>fKV=\034B\265>*\345u=\325\004Q>\320\'\022\277\260\311\232>G8E?u\311\270<\362\322-\276\"\340\200\276z\337x>\266J\020?\216\257\035>u\037p\277\023\325\333=*R\261>\303G\024\277\367\006\037\277^\242J\277\330\365\233>c(\267>\034\360y\276\276\207K\276\275\000\273\275t\352\212>\337l\023?r\247\364\2754\364\277>*\306y\276{\241\200\275\333m\247>\205\224\177\276\023\362\021?\231\323\005\276\204\360(\276C9\261>\210K&\277I\200\032>\237\037\006\276J\357\033>\205&I\275\020\351W>o/\t\276?\253L<\314\264\025?\210K\256\276\003C\326=O\257\024>\233\003D>\204\201\207\276\307\200\014?\222D\n\273\023D5\277\032\245\313=tF,?\025R~\276\327Q5\276\222\225_\275]4\204\275Z\235\234\274\340\203W=W\223\'<\307K\267\276\013c\233\276Zd\373\275\342\222\033\277N\264+<\227\216\231\275\211\352\r>\327\243\020\276t)N\276U\366=\276Q\332\003?N\271\302>\327\027\t\275C\311d<vl\344\276\231\rR\276\276\207\213\276l\230a\275G=D>\\\033\232\276\355G\272>\260rh>\264\223A=}\346\254\275\320\3503\273%>\267\275\221\362\363>~\214\031>\344\371\014=\023\270\025>\\v\310=\232\264i\275\226\262\234\276=Cx\275H2\213\275\273\355b>\323\237\005?\230\206\001\276h\256S\274?\306\\=\236E\357\274\277C\301\276\241h\276\275]\341\035\276\026\244\271>\351\363\321<\254\377s\276;\031T?\2660\313=\277\232\303\275\300\262\302>u\223\230>\340\326=>\322\341a\275\332U\250\276\262F\315>\221\'I>M_\031<\030}\205>\261\301\302\274P\337\202>\324\232F\276\266\241Z?\302iA=\353t\200\275<1k\276y\007\370\274\022\240\246\276\246~\036\276\304\267\013<\345~G\276\231\323\025?o\022\203=\301\220u>\237\252B\275\270#|>\355Hu<\344\203>>\326V\004?z\245\234\276\010=[>\255\372|>\245N\260\2768\203?\275\210\235\371>2UP>\333\247\003\276a\213]<\003&\340\276\\\217\002\276<\240L>\320)\010=\273\233\267\276_\014\305>\227\213@?U\301\310\276=a\371>\377>C\276\025\2510>\347\0300\276W\317i\276\353s!@\303\r\370\276\236$\315\276\305\346\003\276\'\027\203\275\220\333\257=\331\010d\276YL\314>\236^\261?\204\236\255\276\332\254:>\212\216\004>\341\321\306>-\317\203\276\215\013\'\276W\t\026>o\022C>\247\256\374=\366E\362>9\013\003\277\023\233\017\276\365-\363=\307I\241\275a7\274\276vO\036=\207\212\301>2=\241>\230\206!\276C\034\213>f\2433\275\304_\243>\315\257\206>\312\032\025\276\327\245\306\274\370\031\247\276{k\260\276\346\"\236=\244\376\372<\341z\324\275[\353\213\274|\362p\2763\026\255>\204\020P\275A\202\342\275\006\362,\275F\010o\276X\305\273\276\352\317>>\214\333\350\274\270\037\260=\"T\021\277\272h\010=\272\367\010\277\2404T=\247\350\010?\262\327\003?B>h\274\027\232+>\333\371\236\276\3501\252\275(\017\013\276\306\205\263\276\005\300\020\277\361\017[=R\270\256>\0221\365\276D\300\341>3\247\233>\220\240\210>\227\305$>\027\232\353\2752Z\327>D4z=G\307U\275\376+\233\276\332\311@\276\014\345\244\276\\\217\232\277\032Q:?\256\200\242=8gd>\321\350\276\276\333\205\246\2764.|\276\"\303J>kI\307<\230L\245\276q<\037\274k\202\010\276\203\371\213=\257|\026>\364R1\274\207\302\247\275\024yR\275{\240\265>x\242Z\273\345a\331\277\335{\230\275\'k\304\276|(\221=*R\001>\205\356\022\273\341\226\257=\013\230@>\347\343Z\276\246\325\220\275Nz_>\362\352\274>8g\204\276J\007\033?\316\301\223\275\372\233\000\277K\253\241>\245h\205=\371\024\260\276\233\346=\276\302\022\357>YNB\275\363\310\337\275\017\200x\275\300x&\276\\\310\303=#\370\337\274QN\364>\273a\233>y\005\202=\220\024\201\276\344\203\356\276B\317&\276\003\225\221>\260\217N\276du\253\275\034_\003\277n4@?\034\010\331\276s\275m\275\267b\027\277\366EB\276^\200\375=\343\374m>\241.\262=\316\210\202>1\\\235</\335D>\3333+\276d\257\247>\311v>>\251\237\327>\010V\325\274)Y\216=\t\376\207>\032\207z\274\314\320\270\275@M\235\276o\014\301\275\363vD\277\216\222\327\275\334K\232>\036m\334\276\213\211M\276\247?\233\276\316\210r>\010\224\315\275(,\221\276g,\212\276\357u\322\274jM\023\276\347\343:\276\242b\334=\013\322L>\257w\357>\327i\204>\3750\242>Mg\347=\256G\341\276\270\344\230\276\301n8\276\345\no=\331\010D\276hX\254\275\233Z\366=~o\343>\367\351\210\2767O\345>\243#\231>\314]+\276\303*\316\276\311<\032?~\343\313>\372\362\"\276\214\370n>\277\014\006=\237\345\371\275\257_\020>x\317\201=py,\275\310\316[\274\013^\304>(\'Z>\254\220\362\275i\251\314\276t\3579\277\255n\205\276&\3742\276\215\025k\273\223\343&?\360O\251=z6+>=\362\267\276;\001-\277\027\274\250\276\033\0227\277\224\373\375>p|\275>W\004\177>\001\373h>[\323<\275\274\313\245\276t\0071>\0162\351\276\013A\216>\376\267\022\276\223Qe\275\244n\'\275\257\224\005\276:\036\363\275\373\255]=`\223\325\276Z\330\203\276\304\354\345\274\005\250)\276\r\344Y\274\256*#\277s\3640?8\370b>\376C\272\276\371N\014>\000\3439\276\025:\357\275fL\301\275\216\001\031>M\020\225>f1Q>\325<\007\275k\324\343\276\253\313i\275\035=\006\277\340\363\203>\304wB>\257|\246\276\366]\301>w\326\016?nn,?\343k\357\276Y\213O>\272\240>\276#\333I\277\234\247\332>\354\027\374\276\022\203\210?ta\304=\323j\030\277ET\027\273\357r\321>\036\303c\275Y\243\236>y=X=\276\275+=\213l\367>\345\n\017>\211\357$>\377x\017\277\341a\032=\020A\025=\261\277\004?1\261\251>xz\325\276\236\265\333=~\035\250\276B\262\200>\342u\375=v\303n\277\274\037w\275\rq\254=s\023\265\274\234\212\244\276K\352\204\276\313\241e\276`\261\006=S\263\207=\033\r\320>\212\253*\276_\322x>\331|\314\276\212\345V>I\021\031>\347:\375>\340\241H\276E\201~\276?:\365\275r\212\022@\030[@\277\267\227\324>\367\221\233\275\353\305\300\276H\337\304\275\334h\240\276v\341\247\2752w\375?\240O\364\276\016g\006\277u\345\323>=\n\027\276\201!+\276\326\220X\276\337O\235>\232%\221>\354\335\217>\\w\023\276\335\0317;\017\227\\\276f\243\223=\303\273\234\276\206\346\332>\341(\031>K<\200\276#\2763>\003[\225\276u\037\000>\205\266\234\274\250R3\275\323\336\200\276\237\221\210\274\312\303b\276:ZU\275\304\224\210\276\275\306.>\3647\001>\002J\003=nQ\366>|\025\317;o\323\337\276\007B\222\276\306\026\222>m9w>Z\360b\276\330\234\003=\0010~\276J\014\"\276%\314\244\276\231c\271=\210\205\272=F%\365>\0216\374\275\273~\021?c\234\237>\236$\255>\302/\265\276\037\242!?4\327I>\274\"\370=\266-J>\021\036\r\276n\243\201?*R\301\276{\240\265>\320\362<=T\340d\275\274\313\345\276\023ac>\371\020\264\275\243Xn>\031\342\030>\225\202\276\276<\333c\275\217\337\233>c\356z\276!Y \277\n\334\032>\313\234\376>\350\207q>\321y\375\276\003\225q=\341z\264\276\035r\363\276\010Z\241>\027\232+\276_A\372\276\017\321H\276\341\227:>:\351\235\276\037K?\276\017\177\235\276C;\247=sK\233>\336q\312=u\037P\277 \234O\275{\365\221=\025o\004\276\030C\031>\004s\024>\241d\222=R\233\310>\326\250g>\211\007\324>\007_\330=r\277\363\276U\030{>wM\010=\003>?>\351e\224\276shq>\034\316\374=l>N>\223o6>\31260\275\376H\221>\372\nR\276\264\223\261>\352B\254\275\243\311E=\271\374\247\276(~\234\276\004s\364\276\305\214\360<\n\024\221\275{\203\017\276T\216\211=\326\377\311>_{\226\276\201[\327>\273*\020=>\223\375<&\2476\275\343\337\007\276\243\351\254\276\027\274(>\246~\036>\235\022P\275\t\341\301>\223\030\004\276Jy\255;\251\301\264\274\220\210i\276\347\251\356\276\264\345\354>&\0360>5|\013=\330\177\275\275\2616F\274\031\377\236>\211\265\230\275\037\242\321=\220\332d\276\253^~=\317\275\'>\000\000 ><\367\036>t\010\034\275\224P\272\275\346?\244\276p\\\006\275\342\351\345>\032\250,>\261m1\276\332\003\255>\025\002y=\031\255\303=\223\251\"\276~\251G?\311\310\211>\255P\304=\236\230u>\341\357\227<~\247\311=q=J>0d\225\276\240\025\270\275\235.\233\276\354Q\370==b\224\275\333\277R\276\307\274\216=\036\376\032?\016\363\005\277\317\275\227>\313\276+>\370\215o=\r\211\273>\351+\000?\324\202\027>33\363\276CT\341<\357\254\215>1\225>\2757\303\275>W`\020?/4\307>\303\365\210\2767\303\355>\276\207+\276\033\022w\276DQ@\276\232w\034=~5\327\276Rb\327<\002JC\275\036\027\265=\300\262B\277\354\207\030\275zS\321=.V\204>Nz\337=\036\376\212>sc\372\275\035-\275\273JF\016>|\325*>L\246\n>\203\372v\276|\n@\276E/#\276\005n\335=RD\206\276\244\374d>4\205n>%ub\2769\321.\276_\316\254\275\274\"\030>\330\2013>\2451Z\276QO\237\274\203\206\006\2771_\256>j\207\177\276\025\304\300\274#\333y>\232\353\024>\036\341\024\276\252`\344>\275\343\244\276\324\202\327\275\235\021\005\276SX\311=\202V\220>\245\034\202\273\373y\023\277\201$l<\222\313\237=Qk\232\274\341E\037\276!>p=\270\204\r\274\302\303\264<\256\323\250\276\207\247\327\2755c\221>@\023\201?0\360\354\276\361\021\321\276\0363\200>S\3136>\304\010\001\277\222\263\260>Yi\262>\223\030\224>M\204\315=\266\333\256\276\3603\236\276\210H\r\275W\262\023?\304\231\'?~W$\276\007E\363<\2513\367\274Q\207\225<\350\274F\2762w\r?mV\375\276\t\212/\277Z/&>\307.1\276\233\254\321=\320\n\004?\310\322\367\276\207\212\321\276)\005\215\2765\322\242>\033/]?*\221d\276\n\021 ?\341@\350>\021\215>\277\363 \235\275\nK\374\275\333\212}>\363Y^>t$\027>\257\224\355?h\350\277\276)\263\001=\260\035\214\273#-=?\371,\337>Hm\262>\310\014\324\275.\220\300?B\225\032>\223\000U>\014\002\003?\307F\030?\322\251\253>\325!G\277\"T\311>\201\222\002\275c\234\037>-\262=?\3372\327\276\035 \030>\316\031\221>\374\307\242=\305\346\003\276\221\264\273=\270\314\351>\365\276\201\276Z\365\251>\373\350\024\276\202\347~>2\003\225<\342#b>\342\351\225>\021\252\324=\264v\253>3\026M\276^HG=\347\251n\276\307fG\275w\326n\276\370\336\237=+\244D?\010\217\206>9\321\016\277\r\216\262>\035\2240>\227V\003\276\227\213\230>\240\025\250\276\331\224\313>O\036\026\276x\264\201\276A\232\221\276\276M\037?\375\301@\276\331\2312?\316\307\305\276\353\255\301>\364\303\230\276a2\205>\203\027\355\276o\r\354\275\310{\005\277)?\271\276w0\342\274u\002\332\276\311q\007\276DMt=\026\244Y>\025\000#>\332\217\224>\304B\r?\370\376\306=\212\351\242=\373\256\350>\232\010\213\276s\242\315\276\266\204\264\277\271\245\305>\205\344\t<\263\230\330>\266g\266=\237v\230>\020X\371=\307c\266>M\2769\276\201>Q\275\361,A\275d#\320\275\311\254\036=N\227\005>\365\333\027\276R\'\000\277t\322\033\276\3539\t>\004\3425\276\232\010\353\277\317\366\250={f)>\322o\337=7Ou>`\260;>M\326\350\275\356\016\204\273\224\3019\277\300[\000\276i\306\">t\354\200=\3269\226\276<\364\235=) m=\215\016\010=K\002\224=\315\217\277:\000t\210>\035 \030>\375\301\220>Z\365\251>4\205N>$\227\177\274V\233\177<\357\033\037\276\303\3601\276Ih\273>X\305\353\276\255/\362\276%\351\352\276L\303p\276\t2\202=\254\000\277\275\362{\033=\360\212\340=\247?\273\276\340\363\013?U\244\262\276+\030\325=N\356\267\276\2301\205\274\t\212G?\277\324\317=\007\231\244>j\207\217>\001\244\206\276\nKD?+\366\227\276\204\022\206>\216#\206\276\\=\367\276\360\304\354\276c\234?>\204d\221\276\037K\257\276\237w\243=F|G\276\326\305m\276\325yT=\312T\241\276;\307\320><f\010\277\317N\346\2768J\336\275\310\265\301\276\240\032\357=\265pY=\320b\251\275h\350\037>\327/\330=\217\3741?\322\375\274=\363\223j>\247\313\362\276\004\000\307\273\346W\203>\373:X?\352\347\315\275\201\222\002=w\021&<\326\341\350<\327\302,\275iS\365\274\365I\256=\030xN>y\257:\276Ujv>\321\005\365=\013~\033\275\267(\223>\025\035\331>\347\306T>HP\234>\372\n2?\\\312\231=\274\313\205\276\307F`>&6?>F%\225\276\304\006\313=\005Q\247\276\212\002\005?I.\037>#\204\227\276%u\222\277\214\363\207\276\327Q\325\275\313gy\276\025\306\326>\303\236\026><\333#=\271\374g\276\273\325\263\276\257\010\236\276R\355\303\276fLA\274M\204\215<4\277\n?\225H\302>,e\021\277\340J6?\263\265\256\276i\000o>\231\r\222\276\257w\257\276S$\237\275\303\360\301\276\3539\271\2764\333\265\275\301\255\373=\301\312\261\276~R\215=\rl\325\275;\307\200>kH\034\276\300\004\276\276\250\000\230\276\233U\277>Z\236\207>\021T\r\275\232\357\340\274~RM\276\305\254\367\276\007\354\252=j\026(\275`\361m\272\033/\335\276t\007\221\276\3711\306\276\033\022?\277X\250U>~\217\372<\005if\276\361\235X\276>\\\322>\014\3155\276EG\362\276L\032\343=\250\340p\274!\037\344\276\204\020\020=!\002\256\276\351HN?\230n\242>\353\034\343\276\324\361\330=;S\010>\352xL\276g\271\354<\014\223\251\276S\005\303>\273\017`\276\037\277W>\210h\244>-\262\035\277\315\036\010\276C\347\265=\007\266\352>\261K\371\273*WP\277 c\356>[\226/<\024\005\032\2764\327\251\276I\242\327\276:#*>\200`N=\276\274\200\275\360\242o\276\020\255\025=\372\2706=:@\030?\032\206\317\276?\3064?\203n/>l|\246\274\342\036\353>\256\273\371\275\213\245H=\216\222w>\365J9\276\214\204v\276\024\004O\275\265\032\"?(D\320>\313\343\037<\234\277\231>\026\300\024\275\360P4\276\373\\\255\275NE\252=\314\177D@@j\323\276\232\261\310>S?\357<\373\313\006?bg\272>\330\323\016\275&\036\320\275%\311s\275\235\022\220=\010\217v>s\326\247\275\251\336:>\363\345e\276\274\\\204\276\217p\032?\371\240g\275\0054\321\276:\351%\277}\005\271>\264Y\365\275\254\3438\275S\005\303\276k\020\206=T\034\247\275\242z\353=\014>\215=s\203!==\']>\342\257\231\276\251\274=\276\365\276\261\276\262\205`>*\221\204\275\003\005\036=\n-k\275\251\026Q\275D\331\000<\3647a>3\371f>\255\335\266>\020;\223>\251\023\020>\374\373\014>J)\020?PP\252=\235\200\206\276*\035\014>q\216\272=\312OJ\276-\264s=\264q\244=\277e\016\276j\244\205\275\206\310\211=S\010\304\275\260r(\2762\003\225\276\353\250J\276b\370\210>\370\031W\2761\224S>Qk\002?\"qo>\222yd>\323\336\300=X\377\307\276)vt=\204\201G\276\344\024\245\2773m\177?F_\201>q \304\276\255i>\276\016Ln\275\223\251B\276\371N\374>9\200>\275\225\202\006\277/\250\037?\362$\351<\236{O=\210KN>\000\221\376\275XV\272\276\257@t<\006d\257\276y\257\212\276\346\256\005\300~\375\020\274\001\366Q\2744\235\275>\031\004\026>a\211\267\276`\352\'>\010VU\274T\250\356\2745\007\250\275\177\207\242\276\2338\311>\300\354\276>\277h\352\271\267\227\\?\342X\027>\345\233\035\277\300\317\370>\274W-\276\370p)\276a\211G\276\007\316\331=.r\317\274\"\375\026>\365\204\005\277\030i\030<u\261)\275\237t\"\275DN\237=\326\250\307=~N\346;\'\367\213>\367X\002\277\215E\243\276\006\363\227\275\214\204\266>\026\336\345\275\336\223\207>\201\324\201;(\270x\276E\360\277\276#@\027\274Q\275u=.\220\000>`Y\311\276\320D@\277\277\356t=r\024\200=\024\320\004?g\355\226>\224\301\001?\262F\235\276\270@\222\276\267\356\366>\2722\210=1\262\304\275:#*>\222!G<Q\3006\275\031\312\251\276\245\367->\373t\314>\223\000\025\276S\313\206>qZP\276\256Ga>\300\004\356\275\354\300\251\276H\277\235=\007\261\023>\021\344 \276\204\323\262\2762=\341=3P\331=(\017k\276H\334\343\275\326\250\207\275\307\001*\273\"S\276\275\371J\200\275\340\333t>\214M\253\2755\322\322>{\371\035=\345D\273\276\236\357\007\277\362\265\007\277m\310\277<\231\273\036?_{f\276\013|\205\275]\334\266\276\201\262)=\314\013\360\276;\302\211>\304!\233<Z\201\t\277^\021|>\255\243\252>&SE?\273\233\347=\264Y\245\2767\3403>\254\305\367\276\376&t\276\340\326m\277bJ\244\276|~\250\276\355,\372\274`Y\251>H\335\216=/\300\016\277y]\037\276b\370H\276\010ZA\275\303\273\254\276\367;\244\276\223\212\306\274\317\024:>S\005C\276\037h\205\276\375\244\312>\024\226\370\276f\332\236=\263{2>\021SB\276\372\320\225\276:!\224\275\036\033!>\203Q\271>\277\265\223<\340\271\207>\261\334\222\276L\375\334>\374\216\201=?\344m=\2505M=1\356\206\274\362\3573\275m\034\021\276\225\237t>5\025\030\274k\013\217\275\240\032\017>.\004\211>P\344)>Qf\203\276\216\006\260\276J^\335\275V\324`>:\222\203\277\323\331i\2766\253~>\260\3112\277\205\353\321=\t\026g>\024y\022\276\020#\264>\214\370\016\276\037\277\227>r\212f\2770\236\301\276\013)\377\275]m%?\316Us<\301\306\225=\257\224\325\276f/[\274\204G{\276\257|\306\276&\001J>\274\256\007?\376\232l\2768i\032\275\0162\211\276\006\201\245>\217\307\274>\310\265\241>\377\347\200>\255/\362\276\026\301\357\276\267\267\333<\266\2711\276zp\267\275\210c\355\2761\323\006\277\265T>>\204*\365\275ga\317=\233 \252\275\273\233\327\276\334.\224>-`\242\276o\365\034>\377x\317>_)\233>du+>0*\351\275K\220\221=\313%\372;\275\343\264>\370k\262\276\233\251\220\275\354\022\205\276.\377q?FB\333=\374oe=\254\342->\032\300\033\276\030\353\033\274nQ\346\2753PY>\305\376\342?\224\274\372\276C9\321=\020\316\247=\217p\312>\243\037\r<\036\026J>6.R;\2176\316\275~\306e>\262\235O>\300\3178>_\254\271;\002\361\372\275u\222\215\275\240\375H?\024\263\336\275\361)`\276!\310\361\276d\314]>\327/\330\275\346\2266>DL\351\2762\311(\276v\340\334\275\254\213\233\276\201\262\351>BC\177\276\236^!?\027\361=\276L]h\273\302\300\323\276<\244\230=%\037{\275\025W\205\276\256d\267\276\336<u\276t\352\n\276oG\230>\204\022f=\373\256\210>[]N=\377\225\025>\242\234\250>\201\354\324\270z\307\271\276\313\241\005\277\202\377\215>\331Z?\276W&<>l&\217>\275\373\243>\035\224\020\277\021\270?\273\320\233\252\275rR\030=.V\264\275\252e\353=\224M9\276A}\013?PV\254=7\245\274<M\370E>0\273G>\367\222\206\275(a\266>{\244A=!\260\202>\347\251n\276sh\261\277\020u\027?J\010\326\274\027\324\367=E\301g;o\240\300\275A\232\301\276%u*?\\\001E=\243#\211>\210\200\243>Ae\034\276\244\302\330\275\206\313\212=\027\361\035\275\"O\202\276\032\244\300=\375\301\220\276\021\337\t>U0\032\300B\006\262=\306\301\205\275 \354\024=\005\300X>a\216^\276\240\025\330\275\324\267\014>\364O\240\276\245,c\276\307\336\346\272\t\376\027>~t\032?:!t=\350\366\032?\303\3601>vq;\276:u\245>>\313\363>u\037\240>{\210\006>=\017n<D\243\313>\034\323S>$\271\254\276\274\221\231\276\350\364\234\275\366\321\351\275\320\263\331\276\203n\237\276\346t\031>\354i\367>\353\034c\276\323N\r=\313\234N>;\344\016?\313\276\353\276.\377\001\276n\206;>\200`\236\276\316\307u\276\207\376\271>\341\227\212>C\342\316\276\244\374d\276\344N)\276\331w%>\330*\241>\320\263\211>\215]\242>Xs\360>6YC\276\207\212Q\276\246\355\237>^h\356=&S\345\276\302\335\271>\247?;\276\207\304\275\275\246ax<\264\253\320=\232\351\276\275Zd\253>\334\200\277>\251\244.\276\304!\273=\350\331l\276`x%={\237\212=\001\207\260>\242\321\335\275\305\003\332\276\275\214\222>n\206\003?\362\230\361\276Y32=\215\376a\273Lq\025>\020 \003=\271T%\274xE\200>RaL>\344M\236=\2343B\276\220\210\311\276\216\222\027>\200\237\301\276\273\233\'>]\304w>\345a!\275\374\336\206=V\267Z\276\203\335\200>\277+\222\276\265\340\205>\217\344\202>\021\337)\277H4\201=j\3312?\006\022T>\263\315\255\276a7\004\277t\007q>\315\036\010>6Y#\276\0319\273\2767T$\277<\203f\2761\010\254=1\352\272\275_\2266=#\241M\276\316\337d>o\022\203\276\336<\025=\334K\032\276\240l\n\276\263\t\260\274f1\021>\\8\260\276\227\2138\276O@\263>\331\224+\276dX\245>\3126\220\275\206r\302\276\223\0005>\337l\023\277Xq*\275\372a\264>\340\020*>\250:d\276\'i\236=\220\0241> zR=\214\3261\276\312\372\215\275\232\270\260\273\331@\272\275\275\030J\276}ya>\313\020\207>\307\327\256\276\234\026\234>\213E|:\274\005\302>\327\300\026>\0363\200\276\216\222\327=\016\241\212>D\027|\277\277\022#<\313H\275=@\337\266\275\373\350\324\275K\277\216;mo\267<\243\006\323>\322\030->c\354\004\275\300&K\277\306\026\202\276V\237K\276\345D+?\216\006\260\275\203\027%\277al\341\275\2068v\276\\\346\024\277\360\304\214\2765\007(\276H\376\220>z6\253\276\237;A\275\300\222\253=\374\310\255;\362$\351>l\004\342\273\010>F=r\024\300\275\265\032\322\276F\266\223>\n\272]\276a\210\034\275\014\007\342\276\276j\205\276L\340\026\275n\3723\276\203/L>\013A\336\276\274t\323\275\236$=>\025\345\262=;\001\335\276\316\307%?nL\317\274[\010\242>\2338)?Z/\246>\366\227\215?\357 \306\276\363TG>:\257\301>b\204\240\276\255\372,@\177Mf\277\330d\315\275\255/R>G=\264\276\006\330\327>r\277\323\276\025\343\374\275\022\245m?%\037{=\tP\223>\315v\205<\217ST>\036\026j\276{\024n>\271\307\302>\026\023\333\276o\360\005\276\244\310\265\273\034\360\331>;\215\364>J{\303>s\205\267>\266\241\322>\0216<\276O;\034\276u<\246\276\347\030P>\017\2274\277n\027\232>\037\235:>u\223\030=(\017\013\276\207mk>XVZ\275b\333B\276*\305\216\275Q\177\2638pw6>A\361\363\276M\276\031\276\255\244\025\275n\206\033\276A\361\003\276:uE\276{\025\231\275\274\"\370\275\204\365?>\264v\033\276\031\347\337>\241\271\216\276\301\305*\276\352\354\204>\213\032\234>W\354\037\277F\323Y\276\362\265g>\232_M=J\230\271>#1\301<\'K\215=\206\0330>-&6\276\252\324l>\273\n\231>\317\240\341\276\357\346\351=s\205\247\276EH]\274\364\303\250>\362$\001?\344\275\232>\346]u\275\020\257\013>\205|\010?\307h\035\277\334\200\277\276\347\214\320\277Uj\306>\013$\250>\372\n\242>=\325\341\275\235h\347\276\263\007\332\275\0265P\277u\223X>W`\370\2769\227\302\276\345\323\303=\204G\033\276\376\2672>g~\225\276\227\256\273\273\266\333.\276\000o\241\276\271p\240\276\314\177\320\277\341&#\275\005\027\013>\305 \360=?\376R<\363\255\217=\027\361\035>\314z\361\275\007\266\n\2760d\365\275\277\361\365=\2137*?\345\362_>wJ\247>\030>\002\2762 \313\276\361\327\344>\214\332}<\205%\216\276\317Io<}\226\247>\247\221\266>&\215\261>\363\037r\276:u\345=\347\214\350>\032Po\2752\310\275\275\223\252m<\260sS=EJ\263\275\024\355\332\276\335\315s\276scZ> {}\2763\334\320\276\014Y\005\277\231\365\322>\310\014T\276\317\203[>U\244\242\276|\270d>\023\nq\276\0049\010\277\270\006v>P\215\367>.9\356>\213y\014\274\021\036\235\276\340\326]>\317kL\276\244\377\205\275\322\251\013?\004\312\226\276\337l\003?\221\320\326>\213l\347=\302\207\022\275\263)\267\276\013)\177>Ae\004\277\314@\205>\333\247\323\276G\313A\275\353\250\212>\376\'\277\275\017\326_>\302Q\022\276\246\'\014\276\n\021p>eS.\276\226#\344\274\212\315\247>\003$\232=x\356\005?z\252C=\331Z\337= F\210>|\n\360\276\nU \2740\237\314\275\220k\036\274>?L>t$\247>\254\034\032>j\023\247\276-x\341\276G8\r?,\274\253=\362\007\023\277\273G\266<\222t\215>\031\305\202\276_\014-?\"q\017=\233\2541?\337\3751\276&\344\223>\2235\032?\3603N?\020\256\200<\000T\361<\267z\256>\255Lx\276\263\315\315=R,\027>\355\266+>\036m\374>\357\310\030\275L\216;>l\004\242>\2343B\276\030\t\235\276V\364\007=XV\212>\245\332\'\277\316\374\352\275I\203\033=it\'\276TW>>\024\355j>7l{>\311\3109\276\007\010\306>\025o\364>\243#y>\032\300\213>\005n\375\276\374\214\013\277\266\023\245<\364O\020\276y\257\"\277 cn\274\3171`>h\256\223>I\242\207>\277\361U>\210d\250=\2137r>C\220c>\314\321#>\300\225,>M\276\331=\n.v\276xE\260\275\234\211i\274\036P6>FB\213\276\032M.\275\210\017,\275\230\207L\275\006e\272=\307\235\322=A\202\342=\363\223j>\217\034i=\024\352\351\274\357\250\221=-[\273>\030\t\235\276\021\0365\277\372\010|\275r7\210=\274\005\342>!\002\276\276\365\326\030\277\336Z\206=qr\357>\263)\247>\333\026%?\010 \345>\341{\237=@/\234=z\252\303>\211\007\364>\025\343\314\276\242\013j\276y;\n?\372D\256>=D\343=\227X\231=\216@\034\276@/\234=\320\270\360=\345\325\371=\300\261g\275\242\234\350=\341z\224>\345\325Y>\230i\233>\203\027\035\276\'\203\323>\310\230\213\276\014W\247\275\235\205\r?;\374\r?\022\203 \276\226\347\001\275\001\207\300>\033\365\000?rm(>x\013\364\276k\324#>\342\001e>\274t#@Ujv\276\020#\204>(\017\233>\263\317\243=\237\005!\275\261\242&>\0015\225\276\355\r\256?\271\2455\276\247\314\215=B\223\304\274\010\001y<\355GJ\276\204\022f>\025\375\241<\211)1\276o\365<>N\264\273>?W\233=}\\\213\276w\241\251\276\356_Y>\302\243M\276=\270[>C9\261>e\215\022\2773R\217=\221\233!>P\344)\276\022N\233\276\266\333\236>;\344\346>\217\341\221\275\222\350\205\276\005\370\356<\275:g>\004q\036\275U\336.\276\212\310P\276\266\332C=\236\230u\2762\221R\274p_g\276\264\020\021\272W\355\232=\177\022_\275~5\227>4\364\017\276\311\036!=W\006\025=\261\026_>\225+\\>~\343+>p>u=\305?h\272Pp\221>\332t\244\275y\233\355;\250:\304>\2343B><\275\322=>\006k\275\353V\377>g*\004\275\210.\230\276\206=\355\275(\'\032\275\243\260\253\275\003\265\270\275\377>#>\213\201\277;\277\361\365=\026\366$\277\326\305\255\276\252\014c\275\367<\377<\2240\243\276e\252@>\\\310#\275\367\314\342>\344\024\215\276Z\330\023>u\260\376=\352[&\276{\365q<\310^o>\254\371\026\273\357U\253\274\252\322\026\275\330\236\251\276\236\265{>\366\356/\276\374\000D\276Y\300\364\276)\350\366=\343\307\210\277\007\3606>!\223L>\213\340\217>\325\225o><2\326\274\321W\260\276\317L0\275\257ZY\276\217\245\017>\372\'\370=$\013\030>\235\327\250>\247\226\355\275\236\265\313>\202\375\267\275\022\3678\276)\224\205\275K\254\314=\202\305A>UM\200>k\262\353;\371f[>\331\355\263\275F\033\021\274(a\366\276\034A\212=y\036<>\262F\235>N($>\374Vk\275\304\315\251=\307h\035\276oG\250\276B!\302\275f\367\274\277U0\232\276\201&\002=\331=\211\276~Q\002=\363qm\276\255i\336\2754/\247=\361\200\262>{I#\276\0223\373<\325\350\225=\203n\357=Y\301o=E\020g\275\366\013\226\276\237\216\007\2762=\261>]\371,\276aO\213>\367\006\037\276\255\245\200\274a\340Y>m\347\213>\2451\232\276\243\222\232\276: I\275\325?\210=\236)\224>\220\207\236\275\235hW>D\200\035<=\017.\275H\026\020\276\251\207(>\326\345\024\275U\366=\276sG\177=\351\265Y\274\302\335\231\276\247\225\302=\232\353\364\275\344\3320>a7\354\276\3016\207\271q\254\213=\335AL\276\236\353{=\376e\367\275sc\212\276\212YO>\022\205\226=4\327i>\233\376L>\321\313\010\276\032\243\245>\232w\234\276\3578\225>\267\013\215\276\3121\271=\000\345\357\274\306\031\243\2750Fd\275\303\365\210>\242\177\302>\035\2240>Pp\201>+j\360=^H\007\275\025W5\276\004s\204\276\343\031\024\277\247\263\023\276\311\002f\276\312j:<\373\221\"\276\365\201d\274-Z\240=\311v\036\276X\255\314\275\251\023P\275\344f\370=\030x.\276\025\326\327:\243u\224\276\213Pl\275cc\036\275\253\262\277>\342#\342=\227\342j>\r\216\222\276i\000\017\276-\006\217\274\320\233\272>\256\2739\276\340\204\262\276\246ax\274\3436\032>Q\024\010\276\266\020\344\275\207\304]>\330\365\013\276Lk\323<CL\323;\031\034\325>DQ\320\276~os\276\031\004\206\276L8t\274%Zr\274z\252\003\276Ih\353\276\217\337;>\306\370p=\350M\r?\rl5>\246~\236>\342\351U>\034|!\275\360\025\035\275v7\017\276\321\226\343>y\222\364=\226&\205\276\303\201H?\274\220\216\274\241J\255\276\354\022\225\276\263\225\227\275\030\t\255\276\362{\333>\344\0232\275\210\326\212<\327L\006\277\343\2105\276]m\005\276^%\304;D4\032>\014\261z\274\'\207\017\275it\267>&o\240=N\177\266\276\217\337\333\275\312n\246\275\320\n\014\276F\231m>G=\204\276\354\3313=\232|\323\276\212<)\276|\017\327=o\323\357>\004\253j\275a\246E\277\362\007C>o\273\020\276\207m+>\"7C\276\010r\320=}\313\\\2760d\265=\356\262_=d\006*>\3745\231\276i\033\377\274>yx>\342\036\333\276\323\023\026=\rq4@\351e\244\276\2029\252\276\211\0143?\362\322\235\276sh\241\276\352[\346\275\273\362Y>\0216\224?)?\371\276\031\347\277>\020\314Q\274\243\225\373\274\216#\326<\034\323\033\277B!\002?\347\373\251\276\3544\362>>\355\340>\0049\350\275\t\304K\2768\241\260\2768\2410>~oS\276\3603\336\276\327\243\020\276v\032\251>$\177p>\336T$\276a\216\336\275\023\325\033=U\3317>\234mN\276\252+\277\276E\360\217>\232\353\364\276\021\0017?M\243\311\275:\037^\275\201\tD\277U\207|\276R\' \276\033\361d\275\n\205H\276\017\356.\2760\201\213\276\272I\254>o*2\276 FH\276\301V\231>\037\3301=g\266\253\274\237<,\276%;v\276\204\022f>\235h\247>3\026\375\276Q.\215<\023\'\227\276y@9\276\235\021e>?\306\034>\273\232|\275\200\232\372>\3745Y>\037\242\021?\261\334R>\236\323,\275\007%\354\276S\004\230=\232\353\364=:\006\344\275\362\315\026\276\336\216\240\276\313\331\273<\343\337\007\277<\275r>}y\241\276\265\303\257\276\214\025E?n\213\202>\302\206\'\276x\271\350\276\273\355\002\276\374\376M\275~\030\361>\021\252\344\276}\"/>\2073\177>\325!\207>\377\312J\276\003za;Ic\264\276\357U\353=\233r\265\276\246~\336=\313\020\307\277\321\\\017\277N\235\307=\354/\373\276\335$\006\276\341]n\276p\n\313=B&\331=q\254\233\276\037i\220=\331B\000\277=\232\352;\006\365m\276\3750\002>C\347\365\276o\022c>\214M\253=\303\323K\276U\301H\276\330d\r?\251j\362>\252+_=v\032\331>z\366\001\274\036\247\350\276\001\301\334= \014\274\276\014\310>\276\260\255\237=\013)\277>6<\005?X\255\014\276&S\265>F\265\250=y#\303>\260\006\003\274\254\377\263\276\264\345$?^\205\324>\325 L=\330d\255>\346\350\341\276L\246\232>\262\327\273\276\006\200*=\254:+<\254\033\357;\235\272\242>N\264+<,\274\013\276\244\246\335\274y;\242=\311\3109>\3441\003\276F\003\035\274\372~\312\276\241\020\201>\305\346C\276\203\335\360\276\301\377\006\277\276\244Q>g\r\336<\234SI\274O\351\240>Gw\320\275Z/\346\276b\241\246>O\036\346>\302\022\217>\227\217\304=\274[\231=\335\014\227>\320\'\002?%#\037?G<\031=\006*\243\276\264\260\007>\352\351\243\275\373\005\273\274\334\021\016>\326\255>\276\257B\312=\r\253X\276\345\n/\276?\251v>\3578\005=\224\301\261\276.\312l\276\244\337\376\275\022\330\034\275\327O\377<2=a\275\334\267\032=\336\037O>\206\346\"?wg\215>%;6\276]\341\375\276N\227%>7Ou\276i\251\374=\244\252i\276Q\275\305>\314E\024\277\3328\342>gDi=f\372\205\275p|\255>\323\371p\275\350\207\321\275%\006\221\276M\326\310\276\010\346\210>\322o\377\276E\273j\276\233\033\203\276F\266\363\276\267%\362\274\277\364v\274y\001\366=N+\205\275\304\010\301>\352\317\316\276\036\376\272>}y!\276\344\367\246\276]\244\020==\017\276>0\365S>\rl\345>LOX>\270\257c\276\231\022\211\276\034_\333>\264<\317\275/iL>\2660\013<\231*\030>\201!+>5\357\030\276-\n\273<K\352$\276e\213\244=\266\331\330<d\006\372\276\311\037,>X8I\275\312\303\302<\343\031\364=\347\343\332=j\030\036\276\t\207^\275\265\372j\274\311\306\243=\'\366P\274\236\265\233\276\030\"\307=\301\305\252\276\222t\r>\200H\037>\n\242\336\276\032\250\254\276\006\177\277<\226C\263?\271\303\306\275%\004\253\274\361cl>\021\3049=q\254\233\276TR\347==a\271>\331Z\217>\344I\202>\275R\266\276\016\204\264>\3229\277\275\232_->hx3\275@\244_\276,\324\332\275\033e}<a\027\305<\3372g>\350\366R\276\363\2163\276\372\n\"\277\244lQ\275\303\201P\276\202\034\264\276c{\255\275\235KQ\276wM\250=H\334c\276<3\301=\345Be=V\243\262:\032\213\266>\323Pc\275A\016*\276\320\313M;\036\246}\275<\210}\276\035wj\276lx\272\275\3274+@!<\032\276\006H\224=\226\376\312;zG\327\273\232B\207\276\315\036H\276n\027\032\276\310\230\233?\262\205\000\276\276\274\000\276\320\362\274<G\220\312<n\213\022>\277\324\317=Ed\330\275\002\016\241=\037\021\323\275\312\032\365\275*\035,=(~\274\276\\t\262\275`\223\305>\255\"\222;\337\370:\276\265\025\373\275\021\031\326\275G=$>d]\214>\357\307-=^\275J\275\202\033)=\271S\372=4\235\335=\3540f\275\316\302^>\215\356\340=,\016\307\276\345\362\337\275\365\241\273\276\272k\t>I\362\234\275YQ\303>\300\225L\276\343S\300=\355*\264>\374\000\344\275v3\303=#\204\227\276\267\227\224>\203QI\2761\224\323\275\223:a\276\301\376+\275+M*>@\207y<]m\225\276\024\"`\275X\220&\275\233\313\255=\303\324\026\274\366(|>\010\255\247=\006d\257>N\264+\276R\231\242\275\275:\007>?\306\\>\003[\345\275\030\262\312\276\362^\245>A\201\267=\357S\325\274\301\220u\276\014;L=cDb=\022k\001\277]\212k>-\317\013\277\005\372\024?d\221\306=-\353~\274\233\004\217=\210f\036\274\007%L>\027\237B>\272\203\250>\356\314\204\275\276je\276\301\216\377\274\307):>6>\223\275\314\266\223\275\341@\250\275t^\203=\346\256\345=\025\035\211\277it\227>J\355\245=j\207\177\276\342\255\263\275\t2\202<\264\223!\276Tnb=\021\310\245\275\241-\347\275V\013\314=\363\0372\276lx\372=x\232\314\275(\nT\276\033Jm\274\315\006\331\275\021\223K\273Pp1=\2240S\276\364\375\204>\300\t\005\276lC\245\276\253!1>6Y#\276\356wH\276\344Ni\276\355\272\267<\226\225F>(\ru\275\362\261;\274r\212.>\303g+\275&\344\003\276\370\251\212\275M\204\365\277N\356\227>\301\034\215>m\220\231>\365-3>\276\244\201\276r\212N\276\344N\t>b\370H\275O\006\007>\270\001\337\275@\373q>\253>7>\272\371\306<\014\026\030<\323\244\224\276u\310\215\276\264\216j\276\315\257\006\276!<\332=\316p\203\276\231d\004>\266\370\324=\"\212\311\275\310\322\327\276\225e\010\276\365\271\272=\001\027$=\317fU>\025\3066\276F`l\275\372\n\322\275\264;\304\275^h\336\276\267\262\204\275\205B\004>\214\370\256=\222\313\277\276A\362\216\275\037/\244<C\255)=dY\260\274[\317\260\275c\257\034\274\023\236\320<\316\337$\276\223r\267\275\333\334X\276\305p\265=\317\364\262=</U=\255\300P\276\240\246\226\276\\\311\316=\267\355\233={\240\325=\257BJ\276\301s\257\276\034\227q=\230L\205>?\221\'\276\030\354\006=\362{\233\276\275R\226=?\217\221=\245f/>\326\342\023\276MH+\275\216#V>\270!\006=n\027\332\275Zd\253\276\315\255\020<`\002\247\276z\337X>\240\375\230>\212\260a\274\\\000\272\275\023D\255\276\0358\347\275\326\220\370=\314}r=\335{\370\275sG\277\275U\366\035>\365\272\005\275$\264\345\275\311\253\223>.\305\025\275\306\245*\275V\202e\276)Zy=\225\232]>;\252\232>>\263$>\221&\336\274\322\214\205>\312\373\270\275=,\324\275\334\272\233\274LT\257>t\360\314<\337\245\324<\275\000[>\014\310\336>3\212-\277\322V\200\273\375\274\231\276\352\222q\2759\321.>\004s\024>\324+E\276sK\013>\250:$\276d\220\233\275C\255i>\000\306S>\036\251>\274\3579\260=\227\215\016\275R\355s>\276\336]>\211\007\324=\374QT\274\3745\271>\322\343\367\275\267*\t\275\351\361\373\274\214\370\336>\201&B>Zd\353>\"O\262\276X\377\'\276h\313\371\275\253\256\203\275rmH>\310\t\223<\235\205\375\275\351\010\005\274\004\347\314>\340\276.>\273a\333\275\003\n\265=\220\367\352\275\021\303\216\275\342\344\276\275\365-\203>\300\262\022\275\'\203#>K\315\276\276O\036v\276\007\360\266\275B&\331=\223\030$\276u\346^\275\242\321\235\276\027e\206\276>\"\346\275AF\240=\003[e>\236\352\220>h\005\206>DO\212=\246~\236\276\"7C>fM\314\275\202\213\025\275gF?\2759{\247\275U\301 @\252\232\240\276\223R\020\277\342\346T\275(I\247\276\361\327\244>\350\301\335\275\333M0=9\326\325?\"\215\212=@\030\020\277\257@\224=<\2752>\031\220}>\240lj\276&\307\255>&4\311<\033\330\232\276\321\353\017=Ic4\276\350M\325>z\373s=\031\216\'=\355G\312\276]1#=Mg\'\276\325&\316\275\336\032\371\271Ouh>\020Xy>\341A\263<H\033\207=\205|\320\275\2174\270=\356\350\237=\\\033\352>c\321T\276N\3567\276D\372-\276\355\266\253\276~\030a>C8\346\274\001\207\240>H\212\370\276N\234<>\354Q\210>+5\033>7\340\323\276\006C\0009\236)t>%]3\276\227\213X>&\035e\275\373\"!\276\215E\023>\201[\307\276\355\021\312\275\373t<\276\263)\267\276\245\240\333=U\301\310\276\344\240\204>\021\031V>\010\224\235>R\'\200>\312\211\266\276\204\r\317\275,}\350\275p\353\276>\373\005{\276@\336\333>\242\264\207>\037K_>P\001\360\275\320a\216>\222\2630=\'\302\306\276H3f\277\203\373\201<\000\341C=\243\006\323=:\351\355\276\321\350\026?&VF\275o\022C\276\334\327\321>\014\002\033?\026\207S\276\002\3244\276\222\2213\275Tt\004\276\356`\304=\362\322m\276\224\301\201\276\222?8>3\026-\276u\223\270\277\026\336\205>\035U\235>\362^\365\275\300>\332\276\366\013\206\276`\352G>\237<\214\276\3328\002\276\004\004s\276\206 \'?\006\326q=\035\224\220>\211\317\235:\352\314}=\302\332\230=\023\270\205>\316\215\351=\247\263\243>>\320\032\277 A\361=0\360<\276\273~\201\276\036\210\214\275)\3130\27628\272\276)\005\215\276\232%\241>\376\265<<\243@\277\275\'\245\340\275pw\326\274\231\236p\2754\016u\275f.\360<\307\235z\277\310{5>i:;>V}\356=\022g\352;\n\367\n\275\224\365\033=\351\324\025>\262\235\237>\210\022\255<}\221\260\276B>h>\350M\325>\355\231e>\237\002\000\276\013\230\000>\203\300\332\276\213l\'\276\25137\275\031\312)\276\252\363(\275v\375\302=\223p\301\275]\303\214\275E\273\022\277\354\335\337\275\361\235\030>ep\324\275\375\301\340>\006\201U\276\221*\212\274\221\321A\275+\301\"\276\342\001\325\276\024y\262\276\303\r\210\2765\323}\275\006JJ=Z\365\251\276\016\276\300>a2\025>\273\200\027\275\242\231\'\275\036\376Z\276\225\361\357\275{0\311\275\025p\217=\240\340B\276%@\315\275\233ZV\276I\364\222>\277+\242\276\245\203\005\277q\003\236=\225\362\332<\272\3335=\354\300y>\376\270\275\275X\250u\276y]\177>9\013\373\2759\264\010>\270\006\206\276\254\312\276=\226\354\000?\000\2528<{\275\233\276\327\023]\275\233\002Y\275\225\324i\276\2510>\277\014\310\336=c\3214>\220\332\204\276\010 u>\343p\326>\347\035\347=\267\234\023\277I\272\246>\347\343Z<\002\270\231\275\006\007\3059\327/\330\276L\303\020\276x\266G=\352\354\204\276\320\270\220\276c\356\032?\022\2107>X;\312\275\320\017\343\275n\213\362=\227\342*\276U\030\033>\0265\030>\266-j\276\'\203\303\276W\316\036=\024_m\274\314@\005\276\215\356\340=\327\372\202>X\220\346\275\037\242\221>]P?>\340g\374\276=\017\356=\205\316k\276\245\217\257\273&\342-<\242\234\350\275G ^=\2755P>\375\364\037\275\347\306\264\276\327Q\345>k`\013>\364\340\356>\272g\035\275k\016\020\276\226\347!>\360\370\366<n\335\215\275\264<\237>\203\242\231=H\277m\277u\037`\276\035\003\022\276|\355I? y\247\275\253&\020?\t\212\177\276!\310\341\276\323l^\275\2137\362=`\345\020>/\2438\276\277\235\204=GZ\312>V\202e>\004\255\000>\261P\313>\347\306T>\n\277\264=s\272\014\276\253w\230=1\231j=5cQ>\023\362\301>t\230o\276q \304\276\277\2024\276/j\267\275\362^\245\276\373\226\331\276\2549\260\276\301\000\302\275I.\237=+\244<\275#g\241>T\037\210=%\035\n\274h\263\022\277+\301\302\276Y\213O>\320a\256>\3578\245=J\267\205\275\316\245\310\276\224\366\"@Y\276n=\010[\354<:u\265>\316\034R\275\261\026\037>)\006\250=\037\205k>\205\261\035?-[K\276\367\344\341\276L\375\374=\371\321\025\274\263\2308\277\203L\262>\2238\253<\314\264\375\275 &\201=3\305\\\275\001\336b\276$b*>3\026\335>\033\201\210>\323\2444>\352#\360<9\266\236\274\245\203u>\365\022\343<\027H\320>6\254\251\275\376\355\222=\257!\270\275\020\351\267=h\313Y>2\003u\276JA\207>\357\033?\276\255\025m\275\035Z\324\276\272\366\205\275\261\334\022>S\320\r\276P\001P>s\235F>\342\257\311>/\335\224>:\010:=\031\255\343=m\034\021\276W\257b=\303\177:\275\033\236\216>X\220\346\275\365\201$=\325[K?\266\235v\275\224\301\321\275&i#<|\3234=\207oa\275P6\205\276*U\242=\014\007\002=.<\217\275\t3\r\276?\000\351\276\217\344r\276Y\213\017\276;\033\362\274 \265\t>\211\230\222\276$\177\260=G\350\'\275RD\006\277;\014\034<\014\006W\274s\235F\277\34362\277\271\302\373=\340\234\021\277\211\322~\276\377\260%\274A+\260<1\2243\276\347\035\267>8\363\023?R\'\260\276\336\216\020>\265\246\371\275F$\312\275\260X\203\275\324eq\276\314@\005>A\237H\274\312\341S=\273\270->\277+B\277\321\221\\\276\n\275~=\022\332\022>\235\272R>\'k4\276\346\256\225>\317kl\276$\227\377\275\223\031\257\275\024B\007\275\032\243\325\276\200e\265>.\004\001\277\006\324[\275\022\240F\276\236\352\020\276$c\225\275\326\305\r\277\333\334\030=I\235\000>\257\261\313>\024\226\210\276\367q\331\273\000\000\220>\346u\304\275\010\217\366\275\225\363E=\343\245;>\224hI\274\237\216\207\276Y\300$>\262\235\237\276\213\340\277>\002\232H>c\264>\277\210K\316\275\373\\\255>\361\272\036\276\r\375s>\"l\270\276\325\t\370>W\t\326\275\255\300\320>n\206{\276\302ia\276\335\357p>J\241\007\274\214-$\276\022\275\274\276\214\025u\276\332\003\r\2764\022\301\275M-\253\276\326n;\276\341\233f=\241\276\225\276\274x?=\216\001\211\276\307\200\214>\000\251\335\276\341]N\276\336\005\252\275\013c\213>\246d9\275w\370+>]\247Q>i:;\276\225\202\356\275\245k\006\277\350\203\305=\354\243\323\275k\232W\276\253!q\276\212\223;\276\256\022,>\342u\215>,\232\016\276^\200\215\276O#\215\276\371\332\023\276\010\217\226\276\2755\020?J{#>\037\022\276\275\320a\036\276\216\222W\276v\032\251\276+Mj>\311\256\264<\233\376\354\275(\2708\276\"\211^>J\357\033\276.\004\031?w\326\236\276\324\232F\276a25>LS\244=\361\327\344=\031\222S\275\376\360\223=\231\201\212\276V}\316\276\034]\305=x\264\261\276|\233\256>\016g^\276\227\312\333\275.\3472\276Y\300\204\276\340\202\314=\016\276\240>~\035x\276\227s\001\277\332\033\034>I\272\366>\320\3256>\024\010\233=KQ\323\273Vv\013<q8\203>-[\003?\305X\306\275\022\210\027?\343\250\274=[_D\276>{.=\224\274z\276\323G\205\273A}\233\276\251\0230>\324eq\275\355d\020\276\342\222\203>\303\323\353\275\347:->@\244\257>TZZ;\212\223\213>\325!\207>\201\004%\276o\r,\276\326t\030\274\342\222\003\277:\257\221>\232x\007=\356\316\212>9\227\002>\331=\371=\366\264C\2754\022\241\274?\221\207>\331\353\025?\277`\367=2w\375>2U\220>~Rm\276DL\001?\343S\300\276a\302\210=\236D\304=\013F\005\276\206\311\014?I\206\274\275\013F\005?\212?\252=\320\017\003\277K\345-\276xz\225>Z\201!\276\017\227\274\276\005Qw>\234\247\032>4\277:>w\025\322>\247\\\361>\370\031\367>\3166\247\276K\002T==\177\332<f\210\343=X\342\221\276\274\\\004?\021\033\214=!<\332\275\"\211\036>!\037\304\276\347\030\260=v\343\275\275vT\225>\374\030s>[|J\276\013\264;=iWA\276\235K\001\277\244\212b\275\271\215\006?\n-k;E\022}>X\347\250\276\221b\000=\215E\013\277{\275\033?\374R\337>TWN?s\2361=\363\345E\276\037\235Z\276\372\270&\277\256\362\204<\261\304\013\277R\270\276?\265\374\240\275\336\223\'>\024\260\035\275b\205[=\270uw>\n\200\301\276\201\t\334=@\301\345\276\032Q:\277_)K\276!\352\376=;\307\010?\213O\341\276\272\024\007\277\327Q5\276!\345w?0*)=L\340\026?\250W\232\276\343\245\273>F\323\231\2768\022\350\274\245,\263\276\307\327\216>E\201>>\371f\213>\303\365\010\276\264!\237\275\303\273\014\277\224M\251\276\277H\210>VId\275\004\312\226\276\327\372\242\276\250\030\227>\300x\206\2748\370\302\274r\376\016\277X\001>\274U\301\270\276shq>\351\267\237>\272\240^>33s\277+M\"?\271\336\266=\371f\033>m\305>\276=\017\356\276!\260J?\261\247\335\275\237t\242<\2176\336>\010\013\202;\210.@?V\267Z>\016\333\266>\320\'r\274\265\2461?\355d\000?\3230\254>X\312\202?v\027\250<\345\263\374=\261\242\006>1\352Z\275\007\316\331\275z\245\214>7J\003\274\333\212\035?\314\177\230?\324C\324\276$\232\200\275\362\260\320=\340\271\307\2765\014\317>TR\227\276\343\342h\275\273\n9?4\277\332\276/N|\275\355\231E>\005\3008\276\007\231\264\276CV\327>\360\212\220\276=~\257\276\364l\316\277\200\232\252\276j\030\036>\0054\221>\337\375Q\276U\301\000?sc\032\276]\032?\274\256\022\354\276\256\236\223\276p%{\276\350\302\243\273?W\253\276i\001\272\275M\272\215=\206\033\220\276bg\372>\366\013\346>\274\226\200\276\r\253\310>\243~\315\2734\200w>\341(1?\220\210\t?5\357\030?|\'F?\261\247\035>\224\244\353=\221\233\201>\270\036\025\277\014\262\305\275@\206\016\275\257\010>>\366]\021?\000\251\355>\205%V\277\000\000`\276\201\225c>\263\315\275\276\035\311%>\336\260=?@\030\310>&\252\307>0\022:>\265l\215>]\334V?E\365\306\2762\254Z?\242B\265=\037\362\266=\260\216\243=W\320\264\275\010=\333>\347\253d\275\310^\017\277-|}=\024?n?\345\270C?J)\230\276\3166\247\276S\263\007>\202\032\236\275\256\266\002\2761\320u=\216#\306>\037\200\204\276\031\220%?\314z\361\275\365\276\241>X\342\201>RD&>W>K\276f\205\242\274\306m\224\275\256\014\252\275\304\260C\275!\3158\276\255\372\274>\006\022t\276\265\340\035?\216u\261>\322:\002?\204\330\031?\t\025\301\273\206\255\031=#-\345>\326Vl\276\364\340\016\277`\253\204>\201x]\276\324+5\277\245\203\025\276\323\274c\277\367\314R\276\353\034\223>~W\204>g\355\226\276\2343\"?Bx\204\276l[\364>K\352$\276\372\355\353\276D\372\315\2766\0377>8gd>\351&\241\276\322\000\256\276y]\007\277\247\313\n\277\214\366x\275\201\225+\277\315X\344\276\242\227\221\275K<h\277\233\003D\276\303d*>\342;\321\276\311\253S\277\355G\252>\246\325p\2765F\213\276\360\375\215<D1y=\354Q\210>9\321\236\276\375\331\277\276\204\022\026\277z\3022>q\033\235\276E\360\377>\301\255{=\373y\033?fI \277\353\305\320\276\t\026W?\006\236\273>E*\314>\225\202.\276X\250\265\276\010U\332>\362\322\235\276\205_\312\275\204\201\307\276Uj\326\276u\037\260>\024\\\234\2763\026\255\276\010w\207\276m\342\364>\361\200\002?R\362*\275\205\224_\276\254\255\030?\335$6\277\230\027 >y\3140?\257\356\230=\\=G\276\006.\257\275\347\306\324\276r\277\033\277\277\322\371\274N\177V\276|\360\032=B\263\213=\214\020\276\276\001\023\230>\362\357S\276\017\177\315\275\364\211\\>y\006%\277\3750b>&\337\354>K\256\342\274A\324\275\276<\203&\276\361.\207\2767\375\001?yX\010?\353\342\026>\361\252\275;\2137\022>\\\254\210=\032\243\325\276\227\250^=f\332v\277\370k:\277\335\357\300>*\000&>\375\274\351\276G\217\237=TW\336>\033\r@\276|\363\233<\003\354\003>\363\223\352\2757\250\235\275\200a\271\275x(\n\275\315!)<\203\206~>\3647\321\276\033/\035>\325\225o>Gr\371?\352\312G\276\364\340N\276\312T\301>\367\307{\276\322\306Q\276`\350\021=\271\337\201\276\2343\006@\234\371\225\276W\227S\275\277`\227\276\016\025c\276l>\356\276\263^\214\275\231\232\304=\310\230\033\276\216u1\276\360P\304>\277}}>\310\353A=0\022\032=\n\327\243>\tPS\276\270X\031\277\261\304#>\000\343\031\277\207\304\375=\n/\241\275\217\337\253\276\253\225\311\275\262K\344>x\321w>?o\212\275\211\014\253\275\233\347H=\271\252\014>\354Q\250>\350/t\274<1\353=lx\032>{I\263\276\207P\265>\235\327x>\030C\351>\357 6>\260\216\243\275\315\225\241\275U\030\333<\000\214\347\275\1770\300>0/ >c\177\031>$\271\334>P6\265>-x\221>\260\033\206\276\035q\250\2755F+>\365\326\260\276\n\334J?\032\250\374>\2201\367=\njx<[_D>\034\266\235>\237\037\266\276\226[\332=\030\230\225\274e\215\212\276\351\236\265\275\266\370T\276\365e\311\275\245\371\203\275\310$\303>\307\2352\276\027\324\027\276\332T]\275K\315v?\214g\260=\312Ta\276r3\314\276\213\2463=\221a\245>@\023\221\2761\261\371=\247\263\023>7T\374\276Bz\n\274\357\221\r=}Z\305\275\362\265\007\276\016\240_<t\322\373\273\225d\035\275\317\240\201\276RI\325\277\0221\205>\024y\362\276+\301\362>\375\023\274>Qk\032>\216\346\250\275\244\031+\276\007\355\225\275\250\214\037>\347\373\211=h!\201<D\206u> \265\t>\352$\273\275\245I)\276c\357\305\275\242\321\275>\370k\362\275F\261\334\276^.\342\276\272f\222>\036\026\212\276\360\205\311\276&\001\232>\023a\203\275\331\3167>\223\030\004>$\326\302\275|\233\036\276\361\325\016=N{\252\275\340\241\270\276Y\372\320>\002\361:\276\327\022\202\277Di/\276\257\231|=0G\217>\243>\311;\336\223\347\276\nI\346<\216\006\020\276\367u\320>D\213\314=tA]>.\034\370>z\374~>\370\233\232\273 F\020\277-C\334=\222\005\214\276\3544R>\342\006\274\275\334\275\274\275\023aC>\335\352Y>V\232\004\277k\177\247=\243\316\234\275\'\332\305>]\032\277\275\323\207\256>\257\231|>u\310\215\276\247 \177\275\323\332t=\t\247\205\2765F\273>\266\021O=}\313\034\276|\355\351\276\030\354&?uY\004?\216#v>\361\364\n>\306\025W=\300B\206\275/\372*\277?\306\024\277\000o\221\276>y\330=wd,\274\2547\212\275\243u\324\275#\276\223\276\353\247\237\275`\0027>\351e\024>\003\005\336<_\322\270\276\212w\300=\226\347\221>:\222\233\276\257\314\273=U\277\262=I\327\354\276\243\035\227=\006\3312=Ih\313>\376\r\232=\0260\001\275x\266G=\216u1\276\223T\246\274\300\004\216\2768\333\334\274\3372\207\276\252}\232\276\237\345\371>D\304\r=8\333\354\276u<\226\276\322\342\214\275R\n\032\276\225b\307=8e\256=\244\337\236>4\332\252<z\374\336>73\272=\336T\344\275\240\375H\276\316\031\321\275\346\005\250>S\226\031?~o\203\276\020Y\244\275\347\305\t=\235\364\276>k\361\271>f\275\030=\031\347\337\276\037\332\207\275\006\270 =\202\347\336=\027\237\n?p\n\213=\030[h>\214\363\367>\201x\335\275n\2132=\226>\344\276\250W\212\2769\235d=T\251\331\275QN\204\276\223\035;\276\263AF>\255\243\352=7\032\340>>\263\344=\236\014.>\031\034%\276U\246\230\274\030}\265>\275\214\202>\300Y\212\275\245\244\247=\333\374?<\341&\243\274\207\304\035>Z\022\220\276\262h\n\277\353\220;\276nQ\006\276\371\240\307\276K\345\r>\240\032\237\2770L\226\276qZ0>k\020&\275:\222\233>\235,\265\275\226@\n\275\220\367\372>\332 \363>VH\251\276\343\337\007>\267z\316\275.r\317<\3274\377>\373\036\365\274\240\375\210\275\010=[\276\\\003+\277#\370_<Z/\266>\212\216D\276.\004\t\277\225+D?\t\033\336=\234\334\237\276\266\202\206=:\005\231\275\233\311\207>Hk\014\275\016\2425\275\004\274\026<W\006\225=xE\020\276g\325\327>\2505m\276D\213l>\010=\333?e\032M\275\332\254\032\277\306\341L\276\020\257K\276\274\263\206>\026\301?\276\2510V\2764\242\024?\022\370\303\275\274\256?\276K\037\032\276[|\n?M\343\315\272\263)\207>\201\317\317=\306\212\332=_F\021\276\212\310\020\276\354k\235=\234\334\017>\215{3\275\356|\357\276\211{,>\tm\251>\031\377^\276\000\256\304\276&\3031\275 \014<=\342\257\331>;\252Z>\"T)\276\272\330\264\274\335{\310\276\27609\276\307\327\216\276^\327\237>F\010\007\277#\364s=\330\266h\276\277H\230\276J\014B>\204\364\264=g~\305\276\311q\247>,\237E\276[\266\026\277l\262\006\2768\025\271\276\234\247\032>p\231S\276\027\237\262>\372a\204\276\360\247\006\276\220\332\344\276ke\002?\351H\316\276\210\021b>\311\253\223\276Di\357=\231.\304\274\207nv\275\230i;\276S\221\n\276\036\373\031=\025\000C\276vO\376\276\034%O>x}&\275\246^7=\251\207h>\311\037\254\276S\226\361\276\324\324\222\276\253\354\333>\010\2562\275M2\242>\nh\302\277\225`\361=K\345\r>J\265\217>%z\331>\247\\\001?\222\347\372\274L\341\001= \265\021\277\302\243\375>\335\226H\274t\230o\276^K\310>T\036\275=\326\3423\276\'\245\260\276\362@\244=\326\255>\276\352\317\026\277i\343P\277S\257\333\274\303\365\270>\311\223\344=\301\3776\276cE\r\276\364\340\016\276\306\304\266>\020yK\274\336\313==\236\014\016\276:\351\375>O@\343>\3171\000\276zp\267>\2176\316=\301n\310>P\306x\274b\017m=4\327I>\353VO>\341\321f>\231rO;\004\220z\276)?I>\177\366\013\277\321\260\270\275\003\351\302=\037\023\251\275\212C\021<Q\210 \276\017\013\225>8J\236>\267\321 >\220\024\021>\257\231T\277\223\307\323\274\3372\'>e\337\025\277\023~)<,\274k\276\364\375t>C\255)>\034|\201\276y\222\364=\244\302X\275\020u\177>\234\277I>\242]\325>\335\007 \2760\365\023\276\220\275\256\276\220\024\221>\024\005\212>q\217e>\211\007\024\276Y\335J\276S\226!\275\231\330\034\276\302\022\277\276\346\256\265>i\251\314\276p\353\256>$\326:?\177\331]\276s\235F>\243X\276>\233Z\266\275x\264q\276%z\031>\315\344\313\276\306\277o\2769\230\r\275\247\\!>od\256>\304?\214=\267\321`>\227\213x>_{F\276\r\253\350>\366]\021\276sc*?\346\"\036>\300\347\247\2765{ \276\325\0041>V}\316\276C\3475>\333\371\276\2751{\271=\230\027@\276e\031\242=\2613\325>\336<U\274\265l->\345\233\235>\237qa\276y]\017?\270\222\235>\2407\035?\037-N\275@MM\277C91\276\266\370\324\275@\030\210\276\217\031\210\2764.\234\276\311\2533>i5\364>\255\027\303\275\302L\233>RD\006\276\365\204e\276\360P\324\275\252\232\000\276\021\031\246>Y6\223=\264\253\320\275\341k>:\023\'w\276\352\312O\277\256*\233=\253\261\244\2750\201[>\017\2008\274\212\310\360>u;\233\275bb\030<\302L\373\276\262\327\213>\3642*\276\017bG>\030`?>\252C\256>!\037$?x\374\315\273\371I\365=\317\331\202\274ta\244<(\200\242\275d\254\226\275\302L\313>.\377\321>\356\263J\274-\317C>\340\333\324\276k}q\276\014\007\222\276[B\036\276\271\302{>\350\366\302\276\357r\021>\310\352\366>\007\231\364\276l\262\006\276h\350\337>d\006\232>\350\331l>\354\027l= \357\025\276\241-\017\277~\343\273>`\223\365=y@\331>\273a[\276_\357\356>\355G\232>\245M\225\275\017b\347\275R\323\256=\031\312\351\276K\006\240=\310\322\367\276\033\022??u\223\030>\240\246v>\230\206\201>s\327\322>\237 1\275p\010\025>Mg\307\276\234\277i>\022\370\003=\231\273\326=\355\236\374=8\363\013\276%\226\264=\224\373}>\370\374\220\276\205\224\337\276\213\340\237\276\333i\313\275\240\373\262=\357\3768\276\035Z\004>W\262\203>\024\263\036>\004\034\002\276\355\231\005\276\324\232\236?->%>q=\312>E\r\206>\264\260\007>\221\355\334?\237\220\235=\200+\331=\322gM:U\207\334=\316\337\004\276\211\357\224>\032Q\232=c\356\372?\241\205\204\274<\242\302\275\001\370\'\274\372\233\300>\266\370\324\275\304\224\330>\224\274\312>\255\374\215\273\343\304\027=\340\363#\2764.\234\276v\250&<\022\024\027\277\036\212\002>\221\233a\276\232%\221\276]\334&\276\307\364\324>\357 6\276Dn&\276}\\\033>\273\355b>y\001\226\276sh\201>7\245\274\274^\242\002\277~\214\311>\261\341\231\276\264\253\200\276\264\037\t>\3578E\276/\335\204>\316\215\271>\357p\273\275e\245)\276}\007\237=Q\240/\276a\246\r>r\212\016>\244S\227\276\204\r\277\276D4:\276`Y\231>\326\305M>\366z7=\352>\260>\005\340_=J\230i>\353\377\234>\006\330\247>\321\350\276>\340y\2548\332r\316>\210\241U\275aO\273>s.E>\026\210\276=0*)>\204+\240=\035\224p\276\343p\246=k\026\001:+\373\256\2743\247\353\276\000\342\216\275]\025\250\274\3706\035>\001M$>$Ed>`\310J>\024\263\036>\201\262)>\355\266\313\276@\3739?\223\030\204>\007\316\371\276\346\316L=\202\220\234\276\237\315*>\244p]\276.\2556?&S\225\276N\016\237<\235c@>D\213l\276\\\254\350=\223\356\035\27482/\277\261\304c>l\004\">\337\025\301\276\345n\306;\266\204\274\276\2613\265\276\327\300V>yu\016>\223\213q=\200\202\013=\024\256\007=\262c\343\276d\353\231=\300!t>\266\203Q=\215\234\205\275Ot\335<\"\216\205>\204\330\231>3\212\005\276$\264\345>X\001><9d\003=i\306\362\276\366\177N\276J\322\365=\313\020\307\276}\263m>w\276\277>A\202\202>\233\033\323>\002\361\272\275\204\360\350\275\257_p\276T\343\255\277q \204>\276\335\222=NE\032\277\030\t\315>\355\2016>\014\315\225\276\346\"\376\276\000:l>\027\331\376>)\005\335\276\332W^\275/n\343>\367\351\370\275\315\001\002\276\023\n1\276f1\201\276\215\227\356\275d\314\035\276\275\343\244>\322R\031\276\224\373\255>\360\371\301=+Q\226\275\003\317\255>s\364\370\275B\317\346=_F\261\276\020\350\254=\037\272\300>\311\260j>\'.\007=\234\371\r\277v\340,\277\203\333\332\274\356Z\">\355\266\313\276#-\225>{\275\313\276\262\236\032\275\277\361\265\274\272\206\231\275\270\314\t\276\304\261\236\276\356\261T\276\352@\226\275\354L\201\276\315\351\022\276u\002\"\277\323\203\002;\222^T\275rP\222>\311\216->\372\2330>z\307\351=\013^4=\n\200q>\257\010\216\276r\212\316\276D2d<\323\237\315>R\355\013\277\220f,>1\322\213\275\327\2044=\306m\024>\024\"\200>\204\360\310\276\274\221i\277\327P*=qZ\300\276u\314\231\275\212\346\001=\353\305P\276\201=\306=\354\211.=\250\035^>\t\376\'?\016\204\204\276U\207\334=\3127\333\276\377xO\276P\340\035\275\206\033\220>\024\264\t=y\006E\277\306\304&>\371N\014\276!\3158>M\326\010>\335{\370\275\341E_\276\316pc>\371\203\301\276\250\000\350\276\372\320\005\276\355d\340>\'\302&>\006\236\213> c\016>K< >\"P}<\275R\026>t\352*>\3225#\277\206\311\364\276\003\223\233=\254\034Z\276\365\271\232\276\353q_\274&\252\017\277\033I\242=\254V&>.s\232\276\035\001\274=\231*\210>!\352\276\274\215\227.><\371\264=\357\346\351\275~\035\250>:X\337>_FQ>\336TD\276\320a\216>\333\247#\276\367\344\001?\003>\177>Gr\211?\314\230\202\274X\220\006\276T:\370>\026\336\205\276\023\325{\276 \r\'\274<\367>\276\354\300\031>\361\366\300=\004V\236>\270u\017\277\357\376x\276\254V\306>\215\177\337\275\315\344\273>+j\020\276\201!#?\000R{\276K\\G=\255\300p>8\331\246=\"\340\020>|\233\256>\223\030$>K\253!>\374.6;\352\004\024\276\033/=>\235h\327\275\377\347P\276\333M0=\2178\244\275\252H\205\276k\360>\275e5\235\275\327\027A?\371\017i>\215\356`=\357\311\263\276\001\366\321=Y\206\350?\275\214R\277\322o\217>\020\002\262=x\227\313\276|\362\220>?o\252\276\023\362\001\276\014\002\243?\231)-=\327/x\276\235\327\330\275#\025\006>\t3M>\377=\270=N&.=\315X\014?\000W\202\276\256\360\336\276?\000\211>-\230\230\275\273\355\322>\027e\206>M\357\007<G8\215>\265\025\253\276\0010\036>\177\331=>\354\246\264\275\010U\352\276\262K\024>\273\'\357\276\304w\222>\205%\336=\212\223{>\231dD\276F?\032<\r\253x>\027\267)?\304wb>\255n\365\276\2338\371\276bJ\204\276\031;a\275\206Z3>U\207|\276\2045\204;\227\220O\276\244p\235\2768N\212\275:\036\243\276vq;>\034\323S=\0358\327\276b\326\233>\270\222\335>\323\366\217>ep\034\277\030}e>\312\246|\276E/\223>GZB?\3503\240=\343\210E?\267\264\212\276\273\355:?X\251`=\356\010\'\276\375\241\231\275O\222N>_\354\275<\230\335\223\276Z\022`>\244\337\276\276&o\200\275\337lS>b\333\202>\232%A\276D\243{\276\351\232\271>f\332\276\276\202\214\200\275\336\260\r>O\036\026>\030`\357\276\317\024\232>\324\232\206\276\277\2024\276@\023\221\276\334c\211>\206\3700\272\r\375\003\277\234m\336\276\212\002}>+\242&\275O\351\220>b\204\220\276\2411S=\037\200\224\275S\322\036<28j\276\264\315\350\273Yj\275\275-!\037?\374\373\034?\213\375%\276\347o\302>\227\254\312\275\235\235l>\177\331\235\276C\342>\276\211\352m\276\204\r\317=\037\021\323={k \276\316S\235>\315\004\303\273\022\367\030>\215\031\027\274\203\206\336>\244\375\217\274\375jN>\372\267\313\275C\347u\276_^\260\276\201x=>\026\023\333=\321\226\363=\2716T>@\241\036=\251\300I\275&\215Y\277\317\367\303>ms\203=\300\225l>\234o\037;\261\026\217\276\237\002\260>a\246m\275\"7C\274\234\334\017?\025\221\301>\0052;=C\220C\276\334\2355\276\344\0201=\374T\225\274^K\010>TW\006?dv\026=>^\250=t\264\312\275\013$\210\276\033*\226\276\002\232\350\276\035Z,\277\017Eq\277\222]i\275-`\"\276\014\007b>\253\t\222\276\020\004H\273aO\233\275\237s7=\366\264\003\276?:\205\276\177j\274=\307\272\010?P\344\t>~\035\030>,\267\204>\237\216\367>>#\261=5A\264\276\272\2038>\357\376\030\276H\376`\276p\231S\276fN\017\277\274\2211\277\214\271k=5\230\246\276\311\005g\275\256)\020=4\204\203=e\307&>\303\236\026\276\304\224\270\276{\274\260\275\215\2644?\224\331\200>cDb=M\276I\277\331\261\261\275\0324\224>\325{\252=\374R\277>9\326\005>\376`\320>.\305\205\276\304wb\275c\264n\276\320\'2\275\004\035\255<\377x\017\277j\207\237\276UMP=O\036\326\275\365\'\026<]3Y\277;\246\256\275X\305\213\276\312\342~<\2076\240=\250\000\270>x\356\035?3Q\304=\271\031\356\275\340\235|=\244\302\210\276\330\r\333\275I\272\306\276}\257%:\224\244\273>O@\263\276\241\276\035\277\324e\221\276Y\243\036\276\257\006\310=\274\221\211\276\000\220\263=\037K?\276\2756[=\220\210\251>\033*&\276\2073\317>\034\316\374\273.\376\226=\274y*>y@y>\307\200\254\276q\310\206<\301sO\276o/\311\2765\010\223=\211\230*?\255\372|>\007]\242=\350jk=pz\227<J\324\213\274\003\317}>\216\314\323\276\210\177X\274\335\0147>\230\300\355\275\036Pv\2767\032`\276\021nr\275\034B]?2\350D\275\205_\252\276cE\035\277\3225\323>:\036\363\276\013\322\274>\002+\'\276\207\250\202\275\307\200\334>\232\316\016\276J)\350=\243\310\032=\210h\364=\021\215N>\206 \007\276\000\256\204>\351+H\276$\326\342=!\352\316\276\236\014n>^\022\347\274\010\254\034\276q\033M>D\340\210=u\223\210>H\342\305=v\032)\277\325\317;\276\361\327\364\276\316\032<=K\037Z\276\316pC>\261\341\231>@\207\311>\236\265\333\2751\261\311\276\321\313\000?}\\\213\276Z\330\013?i\251\034?\353s\235?\235c`>!\301\036<d@v>o\201\024?\275\000\213\276\217\031h\276p(\374<\022\024\347?\204*5>uv2>EG\222>Bx4\276\276\352q\272\023G\036<A+p>\204\203\235=Z\273\215>-x\261\276/\027\361\275\031sW\276\267\227<\277N(d>\230\206\t?\005\027\013\276l\004B>S\226A>\010\224\215>\035UM\276\273H\301\275nL\357\276\336\310\314\276\336\223\347\276\301\345q\275H\304\324>&\217g=!\310\001\276\357\033\177>\000\305H=qU\271\276\024\320\364>Q\367\001>\324H\033?H\304\324\276\\r\234>b\326\003\277\202\347\336\2752w\235\276\377\312\032?\276\366\314\276u\226\264\273&\215\201\276e\252\240?\271\302;\276\243@G\277\034B\025>\n\200\201>\026\336E\276\227\220\017>\375\3665>w\025\302\276\302\243\r>\256*\373=\017\013\325>\345\362\237\276\317{\255;&\260\224:-\317C>\250\343\201\276\204\022f\276\375jf?\302\206g\276\250\214\357\276\311\260\312>\030>Z\27733\003?e\031\002>\202V\340=\\\254\010\277-xQ\275a7,\276\336\345r\2776\352\241>\215(M\276\304\010A>\232\226\230=b\326\213\276t\265\305\276\262\021\250>\355\236\314>\"4\302=P\252]>\'\332\025\276\271\301\260\275\335{\330>Z\022`?C\034\353\277E\365\026\276\225\232\215>\230\247\223\275\264\002c>\212<\311\275\005\213\003>F\010\237\276\205\261\365\276\277\267\211\276\215\r\035=\3475\326\276\276\274\200\276\rT\206>\2029:>\021\374o>\275\0003\277\254\312^\276\r\340\r>\271\374\367>0\360\274=\021\033\254\275k\267\335<\023\n\261>\277+\342\276sKk>\236\357\327>zSq\276\372\325\254\276[\320\373<\344\332P\276Q\203\021?\214\020\256>\303*\336\275\001\0238>\373yc\277\307h=\276\366\264\203\276\230LU>\365g\257\276 \355\237\275\224\373=\276\033\365\260\2769\263\335\274\216\257=>\207\027\204=\205\224\017\277\025\221\341\275\220\332L?7qR>(\272\256\275\377\317a=\253>\367\276\212\260a\274\277`\027\276\341(y\276\010\300\211\273\307\364d>\260\003g>\234\371\265\276\224\301\221\276B\351\213\275\017\177\335\276\246\321\244\275W\351\216\275\025o$\276\217\372k\274\207\212Q>\256\330\207\277\256\266\022?\331\261q\276\034\3233\276\226\3548>\361FF\276\261\334\322\276<f\220>\3474K=\301\033\262=\213O\001\276+\022S=\335\356\305=\026\366\264=&S\005\276\253\347d>\313\275\200\275\000W\362\276\005Qw>D\372\355\275_\322\270>\214g\300\276Z\365\371=\340/\306\275\336\037O\276_\014\365\276\3225\223>>\256\005\277\276iz\275^\363\312\275/\300\376=\227\2555>$\264\245\276\273\325\363\276\305\0014\275)\\\317=\t\376\207\276\221D\277\276\371\017\231>S%J=\364\375\224\276gD\331>I\364\022\276:\351\315\276\321\226c?\306\341D\277\317\020\256\275\233\346\315\276AHV>\275\251(\276\265\340\325\276\320a\036>[\225\304\274[\231\260>\341\227\272>y\222t>L\3030>\257_P\276j\025\375\274\326\215\227\275Q\273_\275A\016\332\276J\361\221=\306PN>\352\262\250>\213\301C=U\331\267=;\302\021?^\242z=j\301\013\275IJ\232=\226C\013\276g\2333\277g\355\266>\241\276\245\275 \322/\2762\003\025>\237\216\227\276\275R\326=H\247\356=g\362\r>\345\355\310\276\212\253\372\276\232|\023\276\313\263\334;/\206\222>\026\030r\276\007BR>\034\316\374\275\202\3051\277\241\326\324>\354\n\307;\241\362\257=\247\312w\275\232B\307>\212\216\314?s\364\270\2762U\320\276\005\213\303>=\362G\276\230\3353\276\224\331 \276-C\034>\336\306\306=\205\266\034\276\273^\273\271h\226\264\276\202\312\350>\357r\t\277\247t\260>b\241\326<L\340v\276?tA\276\227\032\301\275h\226\204\276p\231\303\276\250:\364\276\246D\242\276\306P\316=\023~!\277g\017\034?\356\223\243;%@m\276p|\355=\274\\D>M\242\276\275\263\007\332\275\334)\335\276\346\226\006?\356w\030?\372\362\302\276k\237.>\343kO\276\347o\202\276o/\251>\'f\215>\240\211\030@\325\225O>\221\n\343=\027H\240\276\217S\204>\356\010\247>$\234\326=\327/\230\276\014s\302=\232\354\237=q=\n?,\016\227>\211\352M>^\364\225>\033/\035\276\225+<?\013\233A=\252+_\276\336\223\007>J^\275\276\260\003\037?\033\022\347>*:R>\340\271W>\363\2163>O]\371\276\224\211\233=\2176n\276\335A\254\276b\204\300\276\315;n\276A\324\235\275l\352\234\275\375\331/?\036\247H>f\275\310>\261\334R\274f\024\333\2767\2467?\024?\306\276\366b\270>X\347\270>i\251\374=\247?\233=Wx\017\277d\257\367=\234\334/>\021\306\257\275\315\314\234>\315\036\210\276\374\253\307=\314bb>\2760\t?%\257\016\276\241\271v\277T\306\337>\333\247#?e\252@>\177K\200\274W>K\276\220N\335=\325\t(\276\372D\316>\314\321#\276C\004\334\275\366~c\275\307h\005?\261\341\021?\013\317\253=&6\037=\307f\307=~\035\000\277D\027\264\2753\3041>Y\2137\277\270\257\223>\374\336\246>\237v\370\276\330d\r=\370\374\220>\370\252\005\277W\260\255\275\340\271\267>v\246p>\333\334(?\212v\205\276\224\331\000\276f\240\262\276\373?\247\276\244\252!\277D\340\310\274y\223\237=+\336\370\276\226\354\010\277\036\033!>|\325\n\276c\356\312\277\250\343\301>\341\013\003?\366\317\023=\361.w>\016\275\205=\002\233s=\016\363\265>\177\244\270\276\034\323\323=\271q\013\275\211)\001?m\2500\277\256*;\276\377!\375>\307\272\330>\277+\242\275\025\305k\275\323\336\020?\230\336~=\037\2746=\020;\303\276$\326\342\275\0054\241\277\372\263_\276\024\226\370\275\332\255\345<I\205Q\276Tt\204\275\237v@\277\225\202\016\277(Iw\276P\307\343=u\253g\276l>\356\275>\313\363\276\370\245\236=\264Y\215?\334)\235\2750\330}\277\225H\002\276~\343\313>N(\\?\202\220L>\327L\236\275\n\277T\276)\313\200>\177\274\327><\210]>\323\207n>\261\277<?\005>\365;\025\035\t\276\3333\353\276\204\271\275=aR\274\275\312\033 =\3578E\276*V\215<q\254+\276\nhb>\211{\314>&\376\250\274p\231\023\276\227\377\020\277\245\202\212=l\317\354=\023f\032=w\326\016>p\224\024?LO\250>\304\317\377<\247\006\232\275:\314\027>k+\026\2760\365#?\314(>\277\357u\022=G:\203\274\217p\352\276>\320\022?\021\001\207\274\252c\025\275\372~*\276\024\263~\276`\345\020>\363qM\276LP\203=\333ll\275\273\n)?\275\306\016\276\321\221\254>E\223\325\273)y\305>3\334 ?\340\326\005?\201x\355\2769\227b\276\373\005;>\200\016\363\276TW\256>\230\026u<\n\021\020?\020z\306\276\377!\r\277\020z\346\276?\214p>\236\357W\277i:{=\306\026\302>N\3567>8\241\000?3m\357\276A\357\255\275\335{\230>i\177\261\272=\270\373\275i5\224\276\351H\356=\320\'\002\2775\3222>\217\215 >\327\022\022\276\0009\201\275>[\007\275\376}\366\276\000\343\271=\346t\371\276\331\010\204\276^\205\024\276\354\300Y\276\346\224@=B\t\203>n4\200>\234\304\320>\214\332=\275\240\025\330=\360\247\006>\335^2\276\274\226P>\337\340\013\277n\335\235\276+5\253\276\354\210\203=\357 6\276\240\032\007?\367;\004?t#l\275\267B\030\275o\273\360\276\371Nl>\324\202W\276\374\336f\276\231G\036\276>\313#\277\2029Z\276\007\231d\276\025o\324\276~\030\361>s\242\255\276Di\257>\372\320\005?\215\177\007?\373\\\r?\203\206\376=\235\021e=\313\271T>\n\326\270<Y\243>>\211`\234<r3\004\277\354\210\003\275\304\010\361\276\205\2316>\017E!>M\241#\277\265\304\312<\373\256\000?!<:\276\201\226n\275\024\313\255>\201yH=1B\370\275\332\003m\276\330G\267\276\036\033A\277\235\272\302>?\221g\276\253\346^;\rq\214>\343\031\204>TW\026?9\271O?i\251T?\355\273\002\276\241\276E\276\3479b=\311q\367>\300\317h\277\t\341\261>\206ZS\276g\'c\276\307G\313=\377\317!>\"TQ?\245N8?\204\360\210\276\315\006\031\276\327\206\212\276\325\262\205\276>\\R>\371f\033\277M\025\344?6Y\343\276\377\262{>\334c\371>\243\006S\274\n\021\020>e\001\223>a\375\177>\033\361\304\275\254\213\233\276Mg\267\276\035Z$\276\360\301\253\275$\264e\274\205\010\010\277Z\362\370\274(~\214>\200}\344>\256\r\345>8-\030\277b\363\301>\352>@\276XV\332>\224\274\372\275#g9?\237\253\005\277_\2621\275\257\261+\276\313\363\340=\225E\201=29\265\274\337\025!\276\300\004\376>\272\203\330\274\311\260\212>\014\007*\277\225\324\211=0\021o=\177\244\350\276\365\204%\276\254\213[\276\230L\325\275t\352*>y#3\276\335\352\371\275\034\353\002>\006*\343>]\277\000?\207\371\262>\363\216\323>\037\205\013>gD\021\277H3\346>\215zH>T\343\265\276\332\217\204>{\367\347\276\361\021Q?4\277\n?\215\177\237>\255/2>\250\306\333>\242\321\005?#J\213\276\300\317p\2777\211\301>=\017.\277\252\361r\276*\221\304\276\246\320\231=\374\030\263?\365g\177\275\212 N\274\356\352\025\275\027+\"?C\255\351\276Y\0246\275\305\003\n>\375\366\345\276=~W?\321y\215\276S??\277\347:\375> F\030\277\377\317\341\276^\240\244\274,\327\033\275\256\232g=\371\017\331\277,*\302=\275\251H\276{\367G>[\224\251>\321\005\365>0\365\013\277T\306\377=\244\302\210\276\371I\025>*\3437\277M\274\303=xA\204=\372\233\240\276h=|=\261\375$\2758\025\311>\3711\226>3\033\004\277c\321\004\277E\360o\277\241g\023>\021\3379?/\372\002?,\361@>@0g\276\246D\022\276\237\347\017=\177M\206\276q\033m>\357\346\231>\3062\375\273\214\333H>\210\327\205>\361\200*?#J\233\277\223:1\277\322\251\013?\250o\351\276]\247\001?V\324\260\276\327\372\302\276\365\363&\276\325\347\n?\017\r\213=[\'\256\275\215(m\276:\222\273>\246D\002?\306\212\332=\373\352*=\026\303\225\275P\337\242\2768\020\n?~Rm>\270\351/>=\3632\275\245\275\241\276\017\326_>\210\205\252\276\204\275\t=\270;k\275\366\321i\276l\t\031\276\226x\360>\3273\244=X\312\222>\317\240\201\2766<=\276[\243T\273\205\316k>\032\335!\276A\324\035>\034}\314=\020\257#?i\343\250>\177\336\244>\320B\002=\371\332\033\277_\014E>\274W\335>\261\334r>p\010\005?z\2523\277\214\333\230>X\217;\275_\233\215\275\2505\275\276\324\234\274\274\214\363w\276@\231\020\273\366\227]\275`\312\200=V}^\277\336\314\250=$\271<>\326\215w=\323\244\244>k\016\020\277\341E\027\277~\306\005\276^\242:=\227\034\367=\027\177\233\275\tP\323=HP\374=\217\215\240\276\254\033o<\357\346I>\3165\014\275\000\343\031\277\373\341\014\273\017\234\343><\367.\277\230\300\355\275e\001\223>\"Ti?Q\024H\276\370\337*>\256\236s>\223\251\242=R\323n\275\005\372\324>\264X\212<\222\004\241=\337\375\361>e\214\217=!Y\000\275w-!>\344N\t\276\"O\222\276\013\227U\275\004\342\225>`YY\277\243u\204>P6\345=\\\346\024>\233U\357>8\241\320\275O\005\\\274\333\242\024\277\223R0\277v\032\211\276\354\300\031\277-[C?\314\227\307>\\\033\212>\2549 >a\032\266>J\357\273\276\364\375t>\003x\003\277\017\013\245>\326\316\213\273\363\216\023?\017\227\334>_\230\314>Q\367I\2777O\025\276\202s6\277O;|>\034\353\342\275\323\207n>\n\205`?C\305\030>B\263+\275\022\367\020\277\243\036\342=\231\330\354\276\317k,\276\363\223\232>DM\264\275y@\331>\036\376z>v7\257\276\353\220;>\227\2555\276>x\255\275+\023\276=\266\271\361\275\331%\212\276\362\357\223\276h\256\023\276\236)\344\276\027\3247\276\231\022!\277\207\247\267\276\231G6?\013^<?\037,\203=\347\000A>\273D}?U\030\373\276\207Pe\276G\217\277>\240\246\026\276\332\217T>E\022]\276\237\002@\276\200\324F\276\035\256U=h\005\006>\351&q\275C\036\201\275\021\307\036@{\205\005\274&\337\254>\271\302\213>+Q\226\275k\361i\276[\266\246\276\020\215\023<j\207W?\335&\\\274i\032\024\275\377[\211=\201\t\254\276-&\226\275\364\025\004>`?D=\213\303\211>\274y\n\276\013A\276\276\006\365\315\276\374\343\035\277\232]w\273f\367\004>\237\216G\276\272\330t=AG\253\274\2176\256\276^\327\357\275\225+<\275 \362\361\272\236\006\014\275\327O\377\273\322R\331>\033LC>4\327\351\275\352\233\017<YRn\273{\367\007\276\030#R\275\225\324I>\031\255C>\246\'\314\275j3\016=\222\350e\276\356\"\254\275\231d\344=\363\223J\276\370U9=0d\365\275#\025&>\207NO=o\022C\276\010 \365=\333P1\276\003\317M?]P\277=\243@?>\000t8>\013{\252>\370\363\267;A\202\342\275o\022c>\020\"\031=\263\322$>\377\262\373=\r\216\322=\331\231\"\276\262F\375=\340+\272=\321\\G\276\376\361>>\001\337\255\275Ve_>A\267\307\276r\334\351\275U\023D\276\303\201\300\276\340\021\025\274&\215\321\275s\200`=\322\214\305<\354\372\005>>>\241\275d\222\361\276\374\306W>g\361\242=\233r%>\214\020\236>\253>\207\276$D\231\275\267\353%\274\021\344\000>\346\256\205>\376` \276\032QZ\275)A?=33+\277\320b\311\275\225\361o\275\036\334\215>\251jB\276\216\222\247\276\325\317;\276u\315D\276F|\027\277\341\363\001\272w\370\353\275\3224h=$\264e>X\347x>i\035\305>\217\031(>\001\206e<O]\031>\364\212\307=\266-j>\316\031\321=\030`\337=W\t\326\275\017\264\002><P\'<\207l =\000\251\r>K\223\322\275s\021_\275\257?\t=n\213\362=\220\275\036>\021\252\324\275\237\224\251\275\207\334\014\276\000o\311\277UM\000?\273\355\322>\336\312R=\315u\332=;S\250\276\2613\025\277\224\301\261\276\341\321f>\245\367M\276\360h\210;\350\301\335\275\350\202\372\275f\332\256\276y\036\334\275w\326\356\275\270;\373\276\235\2418\274\r\303\247>G\311\013>s\364\370=\375\237\243=\004\215\271=\226\004\270\276#\020\237\276\314b\322\276\371\024\000>o/\351\275\274\"8>7\2168>Lp\352\274\311\345\377\275g(.\275\033/\035>sh!\277G\000\267\275=~O>\n\205\310=\236\2305\276\025od\276\242\234\350\275v\302\213=\356x\223\274\006\r\275\276G\254e\276U\207|\276\3227\211\275\301\305\n>\373\311X=\250\000\370>.\377\241\274\"\340p>\214\333\350=\275\303-\2758J^>F\010O>!<\312>\"\216u>\023@\326\272\244\215\303>\272I\214<\312l\220>C\377$>\350\361\003:\017\013=?\006\365\355=\2305\221=xEp\274\263\262}\275\030\354\206>[\010r>Mg\247>\310\265\341=\334\327\321\276[%X>\315\257>?\252\273\262\275\005\210\302\2751\353\265\276\331=\031\2763\376\335\276\3122\004>#\242\230\275\343\374\315>\\\310c=\035\003\202>F\266\203\276\344\327\257=UM\020\276\373\\\255>\036m\334\275\037hE\276\013{\332\275$\3226=\007$\201=\207\341\223\276<\024E=\256\355\022\274\034\261V\276!|\203;A\013\211\275\367\307;>\033\365\240\276\217Vu=^\205\304>\355*\244\275\013\263\260\275n\027\352\276\316\210\322\275f\2402>\234\334\017>u\253G>\231\r\022\276\267yc\274\026\023{>l\262f>\315#\237>\211^\226>Y*\271:V}n>\212\253\232>\251\207H>\001\023x\276\373WV>\034\010\t\276u\002Z>,\361\200<\233\343\\\2746\037W>\032\027.>\377\t\316>\241\023\202=0g\266\274b\330\241\275\233\033\223\276\204g\242=?\251V>Pr\207\273\343\252\002?\014\257d\275\200\267\300=!\345\307>\026\023\233<\007\231\344\275\2240\023\276\355}j=LPC\274\324`\212>\267\356\346\2751B\030\276\366z\307\276v2\330>7qR>`~/>\321\"\033?pw6>\371\017\331\276\325\317[\276V\361\226>\235K\021\276\250\343\241>\233\217s\277Q1\336>J{\213?\336\310\\\276\177\244h>\254s\014\276\276\301\207?\024\\\254;\002\237\337\276)\"\223>-`\242\276\363\037\022>x\234\202>p_\007\2762\3123\275\265\033}\275\303G\224>\356\010\247\274\237\260\364>)\263I\2777\246\037\277{\2106?TR\207\276\2072\024\275\2073\357>1\323\026\277v2 ?\3436:\276\002\274\005>\'\027\203=\034}\254=T8B=\2613\005\276\273\233\'\277\350\244w>U\366\335\276#\276\343\276\365g\337>\261\247\335>O\006\'>\213Oa>\261\212\327>\244\245r\276\022P\341\274\t7Y\275H\246\303<\177M\026\275\221\')\276=~/>it\207<\201x\r\277\277\324\017\275\225\232\375\275\217\0310?!\345g>G\346\201>,\267\204>\367u\220\276\177\207\242>Ll\236>\257_\220\275;\307\000?\211{\354>\272\3322\277\361)\220>t\265\365>`\310\002?\362\230\261>\207P\325>\3171\240\276\001j\n\277\214-\364>G\371\023\273\242|\241\275\222\313\007?p_\007=\001\023\270\274\333\243\267\274\377\354g\276\245f/\276Z*\217=\335\355z\275\220f\014>\002H\035?\021\036M>H\033G>\321@\314\275\331\224\333\276&\215\321\2751\231\352>\204\274\036= )\262>.\312\004?\276\300\314\275\246\n\022\300H\304\304>\264\037\t\276\367\035\303\275\326;\274\275l\317\014>d;\277>\033\022W\276\237\253m>\2132\213\276\302\237\206:\367\223\261\275+O \275\310\2615\275Ll\276>x\321w>\233\033\323=\033\r0\277WA\214\275R\017\321\275\313\271\344>\002+\267>\002\267\026?\243\006S=\260rh=w-\001\276\313\203\224=b\326+\276\201[\207\276\340\326=>\210c\205\277\373\037\200=w\333M?\243\351\254\276\035\003\362=\321tV>\2073\'\277*\214M>\n.\246\276-\262}\276\022\245\215\276\376H\261>\305U-\277\351`]>\276\301\267\276\306\207\271\275(\233\222>\304\231\027?e\001\263\275p\316(\276\213\211\r\275\356B\263\276s\205\367\275\274\313\r?\317k\354=_\007\316\275\r\253\230\276\354\243\243\276\010U\002\277\306M\215<\207\303\322\274\325\004\301\276\2029z\276\370\303\317\274\266HZ\2745A\324\275o\360E\276\226\225\326\2766\253\036\276To\355>|~\030>\350\023\031\276\257|\026?B\2620\277\366\013V>\336q*\276\255\372\034\277\370\210\210>N\264K\276\020\314q>\370\337\272>\016J\230\276\230\336<\2722\346\016>m\312\025>S\005c\276.\033\275\275\263\322D\276\345\362??;S(=\372\320\r\277\256\323\330> F(\276Y\372\360\276M\201L\274\3121~;\247\005\017>o*\262>`\037\275\2759\326e\276\346?\014\277\341\013\023\276k\232\347\276o/\311>\307K\367=\351\326\313\275\214\271\213\277\357\214\266<4.\334=3\300\205<eSN>#J[\276\256\201\215\276\335\007\200\276\274\221\271\276SF]7\035\003\262>\255Mc=\\\346l?\253#\307<\343\245\033\276\262K<?z\252\013?\266g\326\275\243@?>\311\310\331\274\315w0=\274yj=\017\326?\276\361\327\344>\3225s\276Z\r\371\276\t\026G\277\013\322\334\276\213T\270\275\2304\206>\221a\205>h\226\204>\032Q\032\275\350\274\006?\357\341z\277\363q\r>z\374\336=\316\307\205>K\257\215\275\341EW?\207\243\253\275\032\206\'\2779\227\322>\350\207\201>K\315V\277[\316\345\276)\226\253\276\032\372\347=\212\3100\276J\265\017\276p\261\342=~\307p\274\275:\267>m\255_\277\"q/\276\336\345\302\276`\310J\276x\321\037?\276\244Q>:]\326\275\034\010\351\276\352\004t>d#\300\276|\017\267\276J)(\276\030[\210\275\"O\302>\032\335A\276\250\030w\277\177M\206\276\234\024f\275 \357\325\274`\310\312>8i\232<F{\274\274,\202?\276\272\367\260\276\207\277\366\276*W\030\2770\201\353\276\356\355\226\275\241\363\252>\275oD?\203\335X\277\020\257+>EF\247\275\237\315\"?\336\260\005\277\241\204\311\276\255L8\276j\211\025\275\265on=\265\377\201=\016\024\270\2751\316\337=\335\357\220\276\332r\276>\010r\340>f\210;@\310\014T>l>n>\303g+=\370\374\360=O\037\241\275k\237\316\275n\300\307\276\354\2433?\275\035\341=\221, >,H\263\276\032\372\207\276\356\353\220>y\001V\276\241H\367<%\255x=2\003\025\276Z/&\276X\271\006<\001N\217=\272\272\243=\3711F>E\236\204\276\217\245\237\276\261\336\250\274\'\210\252>M\276\031\276\200\267\200\276\370\252\025\276\1770\020\276z\215\035>\024\256\247>\237\343\243\275\205w\211>\r\303\207>R\325$>\307\2728>\251\366\211>*\343\177>\027\331\316=\027\331\006\277\031\255c>\274\263V>\326\034\000\277\033\330*\276\200+\231\276\256\331\n\275\305 \260\276\001\336\202\276#j\242\274E\365\026\276L\031\270\274/\206\202\276\2510\366>\206\377t=@\244\037=T:\030\275\263^\234\276\330\361\337\274Ih\013>\320\320_>\216\0060>\221\017\212>\326sR\276&\036\220>\003[%\276\272\275D\276\333\371\376=+5\373={N\272>U\205F\275|\325*\276M\371\260\275\032\250\314\276\272\203\030>4\364\317\275\004s$\277D\372\r\276\202\250{=\361\330O\274\306\304\346=\226\262\314\275Yi\222>\370k\342>\310a\220=\360\212\240\276{I#>u\315D>\277\016\314\276+\336\270>\256G!>\231*\030=7l\033>\016\204\204>\267(\203>\252`\374\277\354iG=\247\005/\277,\274+\276\214\241\004?\206\037\274=V\237\353\2751_F\277Kvl\276e\031\242\276\n\334\272>Zd{\276\335\230\336\275vO\236\276Qf\203\276Ra,>\002~\215<\243Q\313:\305\376\262\276K\201;\273#\241\r\276\n\242\256>\256I\267\275\314\2740;a\341$=s\375\026\274\033\r`>J%\274=\247\\\361\276\025\251\220\275\205\316\213=\206Zs>\016\2760\276\310\007=>\2029z>\243;\370\276#\276\203\276\333\002\035<\250\035\216>\272k)>~t\352=\375\244\372\276\213\371\271\275\013\230\000\275\273c1=\377\005\202=\006*c\276Z/&\276\306P\316\275\2202b\273\362\352\\>\262h\212\276J\264d<\357\033\257\276\322mI=\346t\211\276\362\353G\275]\277\000\276\035\254\177\276I\205\031\277\"\375v>\252G\272=O\226\032=N(\304\274\303\323+\2767\3403>\3539)>\034@\277\274\334\233_\274\261P\013\276z\031%\276\016N\244\275\272\273\316<w\3634>^\235#>E\236\304=R\276\3329\352\354\224\276\344,\274\276\231\323\345\275jMs<e\245\351>\035\224\220\276\361c\214>y\222T>\026\336\225>S\226\201\276\322\306\321\275p\316(>9\356\344>\241\333\273\276\036\033\341\276k\202H>\356w\230\276\250:\224\2767\216\270=\273~A>\246\201\277=]\341\375\276\036\376\212>\237\002\220>\301\377\306\276\036\334\275\276\246~>\276\\8\320=@\366Z>\242(\340>\353V\257\276\226\007\211=\265\025+?{\240\225\275\243\036\262\276\313\200\263\274\216:\272\275\021V\343\274\023~\351\275P\302L\276P5z\275\221~;\276H\277\375\2752\346\236>\237vx\276\357 \226\276\n\021\220\275\252\232\220\276\334\001\215\273\253\\(\273\245I)\276\271\033\304\274R\270>>)\010\236\274\323\366\257>_$\264\276\267\013m>\277C\261\275%\314T\276\006\2015>\356\261\204>\256\236\023>\346\226V\276\305\254\247\276\334\272{>\302/\305\276\251M\234\276m\250\030>\343\210\265>Qf\323>l>\356>\225\352\';Q\203I\276\316\252O?1\316\037\276\345\355H>U\301h>\007?1=\200\325\021\275Q\316e\272w\241Y\276O#\355>H6W=\300\225\374\276niu>\345\n\037\277\224\336\007?\247\"\325>\223\306\350\275\250e\265\273e\374\253\276|\n@\276@\210\204=\033\276\205\274\231G\256\276\200\016\303>7P =\211\007\264\276\312O*\276T5\201>E\022\215\276\010\217\306>\020\222E>+\246\262=\244\215\343\275\253Y\'=\226\347!>{f)>\355d\340\276:\314\207\276\332\220?\275~R\255\276\263K/\2730G\317>\314\356\t\276\325[\003\277U2\000\275Yn)\276\344Ir\276t\322\033>\013\014\351\276\320\357;=\323\276\271=\371N\314\275I\023\257=\312\026\251=\366DW=S\226\031@W\t\326\276\260\033\266<u<\006>\340-p>\211\3244\274d\222\201\276\233\003\244\276KY\246?\326s\262\276u\006\246=\251j\202>\371\367\031\274\334)\275==\325\201\276\nJ\021\275\345\355\230>8\333\034=sc\022\277G\003\250>\252H=\277\177/\005\275\016O\257=F\3239\276g,\232\273\225H\302>\376&\264\276\326\255\036>\027\331\016>9(\241=\325\315\245=p\266\211\276\254\032\304=y\254\276;\010w\207\276x\356\375\275\325\004\321\275,\233\231=\005Q\367=Pp1\276\244\245\362=\202\034\324\275\333\206Q=\347\373\351=\t\033^\276C\342\256>1[2\274u\3504=g\2320=N\356\367=C\002F=\367X\372=\354O\"=\233\376\214\276\273\'\027?\230\243\367>L\246\n=\022^L;\017\013\345>\"O\302>\031\220\035\276\246a\310>]\304\367\2752\346N>\356\353@\276\277C\021>\373\005\033>\206\217(>\260\033\246\276\002J\203=\237H\346;\215\321\212\276\212\rL;$(^\276-[\213=\313\326\352\276z\374\336\275\203i\270\275\220\305\021;\016\276\320>:z<\2769\321n\276\333\372i=\030\225\204\276\000;\227=\0221\345\275\3058\357>aO{=\251M\254\276\227\036\315\274\204\r\017>;\213^\274\017Fl=\024uf\2751%R\2761\323\246>\"l\210\2773\371\246>\335z\215\2757\246\'>O\222n>\345\227\301\272\243\351L\276sH\352\274Q1\216\276\340\204\">\021\374O\276\214\363w=\214\333\210\275$\177p\276j\244e>*W\230=o\365\274\276\302\245\203\275H\212\010>\345\'U>\205|\320=6\310\004>\302\321\237;\000\214\007>ML\227=\367t5\275Y\243\336=OX\342\275\304xM=f\370\217\275O@\023>\021\374/>%\351\252\276\252\3612\276-\tP\276\272I\364\277C\034\333>\272\240\036>\035!\003=\306i\210\274K\002\344\276+j\260\275\324\361\030\275\226\3548>\264\260\347\275\360\205\231>\310\014\324=\266\275]\274A\377\363\273\364\303H\276@j\023\276g\n\035\275\237vx\276\364\336\270\275~\250\264=\006L\340\275\307\364D>\232\353\024\276\023\356\225\275\343\2105>\274\350\253\276/n\203>\267\013m\276\007\360\266>[|\212>\347r\203<|b\235\274\004s\244>K<\000\276wJ\007\275\206\345O<C\004\334=V\267\272\275\331\006\256=N\356\247>\331A%=\037\277w>!\000\335;\310\315p\276\347\374\224<\221\355\234=\342\346\024\275+\366\027\276L\341\241\2750*\211>\237\254\230<\243\351\214>\257\260\340<\372~j\276:\036\243>\335\265D>\302\000\035\274\021\337I>(\017\213>\023\362\321>\221{z\275%?b<\2657x>\222\226\252\276\005\243\202>\335a\223\274\310]\304\275e\252\240=\232|\363=/\027\241>A\326\323<\350M%\276\364\032;\274h\221\235\276\217\344\022\276X\347\330>\006\234\205=iVv\275$\356\261\276\010u\261\275\006\272v\275\330-\202\275\024\"\000\276${\004;`\256\245=T\306\217>B\354\214\276\361\235\030>s.\305\276l[\264\275\3019C\276k\232\027\2761A\215<%X\034>\26547=\244\031\013\276\027\2671>\327i$\276\245k&\276\323jH>0\273G>c\177\331;\020@J\276I\204\006=\336\260\r?\367\307\233\276\000:\234\276\373\256\270\276b\370H\276d]\254>\237\253m=\273\200\267=`v\357\276\253\225\251=\315\344[\275\014\260\007?:u\005>\324\327s=\256\022\354=4\366\245\274w+K\2750d\225>=\017\276>j\244\245<\212\315\207>XVZ\276\216\2227\276Z\202\254=\302\022\377>\300\004\256>Ou\230>\273\267b\275\227\305\244>A}\213\275\207\341\003\276.\217\225=\330ex=3\305\\=S\313\206>h#\027=\355\3231=h\005\206>K\352\304\275\226?\337\274\377\317A\276\n\023\206\275\3274o>\275\342\211=\276\366l>\324\2027\276\032\027\276\276\240\025\350>\rl\325\275\034\353\002\276\177\025`\274\223\214\034\274\022NK\276\325\347\n\276N\227e>\206\254\316>\013\230\320>3\026\005?\320\270\200\276\324`\312\2769(\341>\013\322\374\276\334\275\\<\220k\363\276\024\005\212\276\350\023Y?^\331E\275MJA>O;\354\2769\177\263\276\010U\252>Q\275\245\276[\266\226>Y\027\013@^\205\224=\256\022,?\345\362\277>\270\036\005=\264\310v>\344\363\212<\024\226x\275\333\301\210=\337\025\201\276\"q\'\277\344\363\212=\007\231\344\275V\361\266>7\211!\276i\035\025\276\364\3038?\261\016\354\273\375\274\251>\006 \177;gF\237=\016\370\274>\222\0067\275\210\327\205>\350\023\211>l&\317>x(\n\276\365\326\000\275\365\234\034\277\343\215\354\276\027\274\230\276\023\235\205=\014\260\357>\031\220\035>\245,C>!\037\024>.\307\213=\263\322\024\277+0$\277\366\317S=\257w\027\277q\346\327\275\342\222#\277/\375\213=k\237\316\276\361)\340>\n\242N?\274\"\210\276\217r0=\273\307\343\273\362\265\307=\020\257\353\276yX\310=RD\246\276+\026\177={\240\225\27433\363=a\303S>Q\240/>\355\350I;\252e\013\276\303b\224\275\221\017\212\276\306\247\260>W&\214\276t)\276\276\324\2027\276\314\356I\276\300\317`\277\033L\223\276\335$\276?\266\271\261>(\017\213>\300!\324\276\002\361\032>\300&\213\276N\321\021\276M,p=\243\2570\277\273\325;?\311q\017\277>\263\244>\260\003/?\3228\264\275f\365\216\274\363T\227>c\264\016?b\367\235=V\237\223\277;\374U>\261\277,\276\030|\232\275\314D\221\275\355G\212\276\026\023;\276\353\377\034>+2\272<\244S\267\2751\355\033\275\3711\326>*\003\247=\007\231<?k\322\215=\335{x\276\006L >+\244D?c\271\205\276\031V1>d\006j>P\341\250=\236|\232\275 )\342=U\301\370>\207\031\272=\233=\320=\217\252F\276\350Me\276\276\244\221\276\343\307\250\276\t\374\241\275\024\320\304=N\227%>\247\225B\275\0054q\276\216;\205\276n\213\362>\031\0345\277\3230|\276\220I\006\276\221\320\206\276\334.4\276\354\243\223>!\315\350\276\017\013u\276\274Y\203<T\2519\276\350\237\340\276\242z+>\351\363\261=.\347\n\277i\251\\>\007\261\243>n\213\262>\267\177\365\276\023\'\027?\260\217n\276\277\202T\276\3603\256\274\036\333\327\273\355E\264<\\\030\216;zn\201=\306\277o\276\375\276\377\274p%\033\276\222\221+\277\311\253s>OX:\277\262\235\007\277\314\177\310=`\260\373>4\022a\275|Dl?{\210V?\373\226\371=\234\247\252>\2608L\277u\002z\276\\Z\235\276\277C\261>/il>\355\360\027\276O@\343>\257|\006\277\333\371\356\276\233 \252>\365\241\213<\321WP\276\014\002K\276\235\235\024?\021\215\036?$\1770>x\177\214>\220\021\020\275g\362M>f1\221\276\035/n;\216?\021\275\365\326\300>I\327,>\001\333A;\023\n1>\322\030\335>Gw\340\276Z\rI\276\2201\207\276\202\213\205\276E\022M?J&\207\275\303bT\274l\006\270=\001M\214\277\207\304\375\276\361c\334\276WC\002>\301\3121?\023`\330\274b\370\230>\315\006\231\274r\212\316\275\237\223^\276\365\276\021\277\034%\357=\315\314\274>\371N\214\276\360\026\250\276\224\331\020\277x\013\364\276S\350\234\276\301\250D\276\352\225\342>\007_\000\277\250\343\201>\326\344\251=\2338\271=\307.\261>\r\030\204=\014\345d\276\025\251\340>\227\034\227>sc\312\2765)\005\277\351\361\033>\336\350\203\275\263\352\223>3\026\005?\217P\263<\013{z>O#\r\276\001\023\210>G\346\021?(\363\217\274mV}>\221\017\032?w\276\007?d\"e\275\212\315G>\212\310\360\275=\017\216>\326\342\323=\330\201S>\315u2?\2608\\\276Q\367\321>u\004\260=\211A\000>\000:\024?\204d\001>\316\374\352=\004\264\010<9\264\010?\2029\332>\020X\031\277\275\030R\277%]3\276\035\254\017?\331%\002?\213lG\276\227\312\213>\313\234\036\277\306\026B>\261\267\336;\024y\022\276\376Ha\277>y8\276\343\215l\276.V\344>\027\324\007\2778J\026\277\220\271\327;\350\275\261=\036\212\">\'\302\036?\302\206\'>A+\220>w\363\024>\317\203\013\277\307\327~>n\027\"\277\022\240\266>w\363t\276\335\357\240\276\274\226\200?%\314\024\276^\023\222\275p$\260\275\244\307\217\276mr\370\274PS\353\276\336Y\253>\206\311\000@\016\241\312\275\0162\371>\000\251\335>\270\315T=\271\337!?\315\257&=\361\200\362\275\247\3127\275\035\217y\276\300\347\347\276_\355(=\340\331\236\275vT\265\274\345D\373\275}\\\353\2762\217\274>\2554I>\317\324\020<e\344\354\275\360\334[>\250\217\200=\201\010q=qZ\260\276\215]\002>:uE>o*\242\276\313\234\016\276\004\220:\276o\363F<k\237\256\2758I\363\274$\177\260>\232%\001\276\273\361\356<\365\263};$\013\330\275S\"\021\277\213\303!\277_$\024\276\034B\325\276\330\r\273\276O@\013\277]m\005\276\006\273\301\276\366$0<\363\037:?\377Ad=O\036\326>\017\232\235=C\266\342;\234\247Z\276\250\342F<Q\240\317\275\227\213\270=\272\240\036>c_\222=\270\036\325>Uj\366=k\324\223>\264\311\301=\211A\300>\226x\240\276\314]\273>1|\004\276Sy\333\276_$\364\275\231\330\\\276j\366 \277`\310\352\276\335$\316?.Vt>\255\243\022?@\331\224\276\016g\216\276yv\231\275A\274\016>\311\223D>\357U\273\276\272\367 ?\2240;\277\3231g\275\301s\217>\264qd\276\025\037_=\360\026\230>\224M\t?$E\344\2750*\341\277\273\360\203<\332\254\002\277\r4_=\266\204\004?\206V\207\275\352\004\304\276\2338\031>\"q\017\277|\0177\276\202\342\007>(a\266>\007\230y<\310\265Y?\202\001D=\022\245=<\301\3776>\022k\t?\247?\353\276\355\201\206>\273c1=\"l\250>S\\5\276\313\204\177>\376+\313>\314\013p=D4\032>\231\273\326=V\361\306\275E\022\315\276?W\013\277\021\337\251\276!v\206\276\312\375\376>\265\303\237\275\372~\212\276\346\313\013\276\343\031\324>\0260I\277nm\201\275\310\007\275\276m\310\177\275\311X\355\274\002\202\031>F\357\024=h\313\231\276V\203M\272j\022|\275\231\365\202\276\337\303\345>o\022C\276\205?\203\275\343\302\261>oe\311=\275\214\202>\253x\323\276\037K\237>\361\235\330\276\200\360\241\275\320\235 \275>\353\232\275\327\244\273=4\021\266\274l\264\274\275\311\216\335\276\304B\r>-\024\237;f\024\013\277\237\223\236>3\341\347\276\364\211,\277\025\003$\275\340\234\241>2\254\322>iW)?\347R\354>\230j&=8-X>\000\251\235\276K\312\335\274\"\0325\277=\362g>M\025L>.9.\276e\302O?8\365\001=U\207|\276\027\331.?]\336\234<\316S\215\276\016-\342\276!\037\344>\233\376\024?\345a\301=3\376\215>7\303m>b\370(>T\345;\275\347\213\275\275_$\024>.\3766\275F\353\270>\326\340}=V\232\264>#\241\235>\312\246\254\276\317\240a\276w\241\331\276tA\235\276\212\216D?\363\0372\276\"\032}\276\237\253m>\247y\237\277F_A\277\325\th\276<\203\006>X9D?\260\254\364\275Y4\r?n\372\203>{f\371\276U\331\227\276\'\203\363\276\267\321@\276>>a\275\201\317\257\276Yl\023=\265\025\333\276\350\237 \276\200\324\006\276\033*\246\276\203/,>^\242\272\276\266\204\274>G\217\037\276\3167\202\275b\241\226>\270@\002>\341\321\266\276\211$\272>\013\264{\275\310AI\276!\037\364\276\221\362\303>k\017;\275\205\261\245>\312\2451=\024\350S>\"\303\252\275f3\207\275\335{\370=\031\3776?\312\364p;\236\007\037?}\005I?\325\317\233>\366\013\366\276[\261\007?\263^\314\276:\\\213\275\216#\366>\311\221\256\275\235h\037?\207\245\201=}\\[>\306mt>Y\027\'?X9\324>\213\246\303>-x\261\276\333n\002\275L\340\036?\"\032\035>\376\322\242\273\244\344]\2775^\032\276\245N\360>{N2?\321\010\266\2747\373\243=X\342A\276\354L\341\275y\261\260\274\356_\231\276&S\235\2771\316\237\276\335\321\277\275\270u\307>\013\014)\277\031s\307\276)\\\317=x)5=\314\321\223>\201CH?N\265\266=\000\256<?\270\257\023?\032\372g\276\365\234\364=x\356}\276o\323?>\030\354&>\307.\341\276z\307\301?\2402^\276\025\306\026\276\245\275A\274`\315!>\321W\260>\257_\300\276\007\323@?\211\322\036@/il\276\221,P?\241-\347>\2451\312>\374r\206=\241\204\271=\262-C=E/\263\276\240\025\330\275\032n\200\276C\255\231\276X\255,\276\223\306\010\276\372a\004>T\306\377\275\213l\007\276\355G\n>\305\221\007=\360\247f>\216\036\037>ep\244>\\\3464\276\002e3>\364V\2709\375j\276>u\223x\276\2235\332\276\210\021b\276\210c\235>L\211\004\277\013\322\314>/i\374>\327\335\024?\rq\354=\205\231\366=HN\206=)\320g\276\037K?\276\300\262R>\211A\200\276\271\031\216>\333\334\020\2775\230\006>\014\037\261\276\272fr<\240\375(?\357\003\020?\311\260j\2767\343\264\275\236A\303=\004s\244\276\371\274\242\275\253 \206\275\276\244\001\277\026\373\233\276\020\317\222=H\334\343\275\362{\353>\340H`=l\000[;\304|)?Y\243\336\276\374\306\207>p\231\323\275\370\252\345>\335\315\323\276n\335\315\276\375\202\r\277\261\334\"\277<N\251?\251\331\323\276?\221\267>Q\332\003\277\306\242\351=1\316\337\276\242b\334\2758g$>%v\255=b\333R?2\254\002\277\245\363a=\023D\335=a\375?\276B>H\276\025\035I\276g\362=?\307h\335=P\215\367\277#2\354=\256\365\345\276*\250\250\274\203\372\026>]\277\220\276\347\000!>=\270\233\276\343\337G\276\3706}>d\314=>\205_\252>\245\243\234\275h\"\334>\356=<>\312\025>\276A\202\322>\256\365e>\244\305\031\274\367\350\215=\225\237\034\277W\262#=%\004\253\274q=\272>\243u\324\275\033dr>\3063\230\276t\267k\275j\244\345\275@\023\221\276\334h\020\277E\022}\276)\005}>d\316\263<\314z\361=\343p\246>F_\001\277M2\342>9\326%\277\'\302\246\276M\333\177\276\320\320\277\276\223\251\"\2767\032p?\365\204\205\276Uk\341\274\033gS\275\201>\321=\375\366\365\2757\375\231>1|$>\303\365H\276\237\223\256>\363v\224>\003}\"\276\212t\177=\026\276>=b\326\013\276n\300\007\276\303\273\034\276o\014\241=\364\370\275<\264Y\345\276\273a\033\276-\320n\274\223\343\016=_{\246=\307K\207\277.9\256>\2201w\276\247\313\n\277\r\2538\276N\227e>.s\352>\361)`>\212<\001?r\247t>\245\332\'>\352\225\002\277.\377!\276\343p&\276.9\376>\203Q\t>}X\257\2757l\213>dX\245>\333\334\210\276r3\254>~\254\340\273\331\225\026\275\035\0032>\343\374-?Ou\370>0\330\235\276\310\315\360\275\253\004\313>\243X\356<m\034Q>WC\002>\201x\255>\304\261\236\276\344\332p\276N\227\205\275\236\014.>\236\320\353<b\276\334\276\205\010\330\276\177\336\024\276%[\335\274\371\203A?\n\334\032\276Y\335\352<i\343(>ff&\276\273D=\277O\006\027\277nn\274>\212\037#>\230\372\311>\037\227\202\273\n\205(>;\337\317\2751_\256>R\362J\276H\033G\276\223W\207=\300\262\242\276\356Z*\277\335A\214\276\364\375\264\2763\341\027\274\340\364\256\274\235.\013>\016-\242\276/\245.=\234P\310\275\302\022\'\277*R\201>\265\303\257>\035\346\213\276\312\246\234>\302\205<\275_\355h=#\241\235\276+\244\254>=\325!>\240\211\360>\310\007\315>b\241\026\276W\262C>9\326\345\276\303d*>KY\326>[%\010\277\346?\004?j\331\352>\257w\017?\277en\276D\250\342>\232\010\003\277\321W0\276Y\375\221<\272N\203\276\036\247H?\315\351\342\276\316\374*=\320a\376\275\033*\206>\007B2\276\353su\2760*\331>q\220\260=aq\350>\222\2213>\374\211\312<\270\006\326\276@0G\275\030\'\236=\326\342\343>\217\026\014\274\\UV\276\200\233\305\275~R\r\276\213\375\365\276\362\352\004\277$bJ\277\021:h\275\025\035\331>\033d\302>>\350I\277\224\301\t\277E\365\346\276\007\266\312>\247\221\326\276?\343\"?^\016\273=\212\314\334\274\307K\307\276@\336\233\276\024\005\212>\267\013M>\2341\314<;p\256=\333\247#=\237<8@*\020\007\273\335\315S\276\301\342\360=Z\365Y\276G\254\205\276\343\374\315\275N\227E\276\231*\200?^hN\276\304]=\275\013\265\206\276\002+\007\276\3750\002\276\336\223g\276W!\345\275\212\345\326\275\210\236\224\274\342\311.=\201&b>\270#\034>\367\307{>\307\327^>\274\350+\276\377>\303\276\212\315g>\345\234\270=U\030\033>\242|\241=\032\211P\275\257_p>8\025i\276\024y\022\276^\204i\275\'\022L\275=\017n=j\336\221>5\210E;\210h\364=KY\226>\n\334:\275m\377*\277\027\237B>\211xk\274#\370\337\275|\n`\276\001\366\261\275FB\033\276\250\034\023=oH\243\274\215\227\256=\361K\235>\025:o\276\272I\234\276\224j\257>\360\205\311\274\227\2555>\225`\241>\227\2555>\036\304\016>)y\365=e\307\306>\243\222\372\275\315#\237>\201\0101=\333\242\314>q\313\307=\261PK>\n\273\250<\340\337\373\273c\323\312=\202V@>\\\001\245\275\'\245\340\276/\213\211\276\341\321&\2766Y\223\276\272\367p\277h\345\003\274gdP\275\214\0255\276\274\\\204\276\263)\027\276\262\272\325\2753\376]>\341\227\252>\3225\203>n\335\r>\3374}=J\230\251\276\275:\247\276\223\306\310\276\002+\247=(\025\350;\265l\215\275\325xI>o\360\255\277\\\034\225\275V\231\311\275\201&\002\276\317k\354=x\271H>\240l\212\276,\233\271<&6\177\276V\016\r\276\271\252l\276\217\245\257\276\034%\257>\232BG\276xc\001=+\244\\>R\232\255\275\212\255 \2759\234y\276\345\263\234>\216x2\275\027\274(>R\363\325\274U\207\274>\204*U>\331|7;i\201\207\273\273\325\363=_{\246\276;\252\032\276$\360\247=\177\365\270<\220N\035\276\221D\357=\255M\303=\235\021\255\277\313\276\013>\377x\317>\317\275\247>@\301\005\275\347\000\301\275\270X1\276\375M(\276\tP\203\276\376``>\3642J=\267\013\275>M\206\243=\210\034\021\274\331Z\277\276\326\2208\276\351\357%=\230\372\231>\222\005\214\275?\343\322\276S\226\001\276\"\356\240;\2608\334\275\2134\361<\367\006\217>\'\302\206<\253\220\027;P\031\177<\304!\033<\216u1\276\253&h\276&\215\241>\223\243\245\273\341zT>\201&\262\276\304\231\037>\001\2070\276y\351&>\004\220\312>\356|\037>\024?\226>q\346\027>\235I\273\275\002\326\212=\304\010\241\276\327\300\366\276\212\311\273=\360\205\371\276\312\246\234>wJ\247>/\206\222>\315\220\312\275[_\004>\261<#:<\203&\276\260\215\270\275\025t\033\276q\254K>\023f\232\275\342\351\265=\371\024 \276\323\301\372\276\177\366\343\275\024&\014=\310\321\034=|q\363;;\252:>\317k\214\276\\U\366\275B\231\006=\271\374\007=\300&+>\231\330\\\276\254\312\316\276\213\305\257\275j\274\224\276]\243\305=\365I\216\275\346\2266\276\355\330\230\276\032M\256<\025\035I>\220\367J>czb>D\027\324=\363Y\336>\320+\276\275A\177a\275$b*\276\3019\003>\312\375\316\275\325\317\333\275LT\357=;p\316=N\321q>\0363\200\276]\212\253>I\276\222\275_A\212\276pw6>;\341\245\275\006GI>{NZ\276\205|\340>\223:\361>\037\021\263=+\2756\275YP\230\274K\037z\276z\374\256>\346\313k>\305\253,<_F\361\275\215{\363\2740\330->W>\233>\212\036\370\274\234\341\226>\316\031\201>A\361\263>\362\2600>?\2516>\357\217\247\276\344N\331>4K\262\276\346\350\361\275\003&\220>!\001c\275ke\022?\022N\233>0\273\207\276h?\022\276pB\241=Gr)\277\027~\360\274\277C\021>#\300)=\222?\210>\312\303\"\276\320~\224>\2446\021\276\336<U>\352\004\364\275p|\r>\273\325\243>+k\233\274B[\356>\236\2305\276h\351\312={/\276=\243#i\277\264YU\276\036\376\332\275v\374W=a\340\231\275l!\310<\031\3052>\303\201P\276\270\351\237>\003\355\216\274\266\276H\276\377[\t?\2304\306=\0223\273=ni\r?Uj\266\276\023*8=ty\263=1|$>v\340\030@6\352a\277\225\236\351\274`\037\215>x\264\221\276X<u=\351\267\357\275n\211\034\275\314]\323?c\233\324<\357 v>\317\370\276\274\342#\262>\354\023\300=LT/\276\013A\316=\376\016\205>\2211\322\273\315\351\222>>\350\001\277\362\351\261<m\250\230<A\274\276\276\323KL=.\377\221\276\377\004\227>\365\327\313=\253[\235>\3127\333=#-U>\263\032\036\272>\355P\276.\312\214\276[\231\220>\342P\t\274B{\225\275\030\2254>=\233\025\276Wx\027\277\t\304\213\276\002G\302=\334\200/>\254\312^\276)\005\275\276\"\032\315>T:(?\217\031\330\276\357\254\215\276\276\237\n\277\211\233S\275@\030\230\276\037\327\006\276\334K*\277\211\007\024\276\321y%?_{F>\001\244\346\276\324\202\027>\350M%\276\236\010\342\274a\214\210\275\217\337[\276O\257\024=\334)=>`\002\367=\374\214\003\277\225\016\206\2767\246\347=t\352\n\276\037\242\321\275\006\273\341>s\235\006>\214g\240>@\301\005>/\244\303\274\335$\206<t^\323>\212\002-\277\336\002\001?\225}w>\256\236\023>\311!\342<K\345\355\275\330\323\316\275\001\023\210\276\265lm>_\014\205\276\352\354\244>XV\232>\"\032]\274)y5>\327/\330\274\321v\014\275\322\035\004\276\307\200\354=\304\355P\275\200H\317\277\343\215\314=M\363\376\276\270\001\177>r\277\303>-\tp>\030[\350\2761\266\240>\367\314\242\276\332\217\024\276Yi2>rP\222\276\222\350\025\277\033G<?\332\003-\275\276M\037\276\361\235\030?\350\207\321\275@j\323=\006G\231\276. 4<E\r&>\204\360\010\276Z\273\r\276\360\304L\276H\371\251>^\364\245\276\022\275\004?2\311\010\2756\315\033\277\221\320\246\276)\350v\276\254\305\247\275 {]\276\353s5\276\362{\313\276f\024\033\277F\323\371>M\326x\277\021\304\371\274\260 \275\276\200\202\213>\263\007\232>\334F\003?\217p:\276\320\'\262>\025W\225>\n\205\310>\265\303\337\276m\347\373=\275\000;\276\342\004\206\275\363\253\211>\243\001\\\276\222?\310\276\226&\245\274\204\365\017?\226[:\276\215E\003\277K\260X\276\017\177-\276\331Z\027?q\217\205\276\375\237\303>\002eS\276*o\307>\036\247\010>\347\214\200\277\302/5\276Z\273M\276C\004<\276V\274\221\276\214g\020\276\346\256\345=\273a\253>\260 \315>\n.\226\276e\035N=#\241\r\277\227\220\317\276pw\306\276\035\217\211>Z\360\302\276P\372\347\273\342[X\275w\204\203>\216\351\001\277\317\332\255>\240\246\226>G\254\305\275\362\357\303\276iWa>G\003\310>\323\336 \276\021\036\255>y\001\026\276\364nl=\007|\216>\342\036\313\276\215\356`\276\nhb>\356\010\247\274d\351#\276L\251\253=\007\323\360=)\256\n\277A\237X\277+\207\326\275\033/]\276#\276S>H\376\260\276\251\335\257\273\236}\305=\202\220\034\277\265T~\276D\300\201\276\031V\241>\014<\027>\313\333\241\276\331\320\255=\353\034\013\2779\013\233\276w\363\204>\373WV\276\354\372E\276\373WV>E\201^>\354\027L>\236\323\214=+\244\034\276o\330v\276\271\210\017\276%;\366\276\340\020\352\275\335^R\276\021\036\235\276o\201\224\276\"O\322\275\272NC><\240,\276\027\016d\276\033\365\030?\315{w\273\374R?\276\020\257+>\253?\002=m\305\036\276\314\177h>\204\022\346\275\374\373\214\276r\030L\274\314b\322>\266\235v\275o.\236\275?\035\277\276U\023\244>\335\320\224\273\216;\205\276\361.\347>t{)>\254\312\276\276y\036\034\276\337\032X\276=\233\005?L\250\340\274Mg\017\277\347\214(>\036m|>\2279\335\275\244\337\276=6\310d\276\317\020\016\275\217\031\230>\341\321\206>4\2007>\270\344\270\276\200\361\014\276\r\2162\276=\362\007>\323\023\326=\'\245`>%ub>Y\335\212\276\257@t\275e\215\032>\010=\213\277\n\327\363>\177.\232=duk\276\324+\245\276\373\221\"\277l\t\231\276\366\227\375\276\325&\336>Y4=>dX\005\277\014\260W?\245I\t\276\215b\371\276\022l\\\275\025\251\220>]\371L>6\223\357\276Zd\003?tF\020@T\000|\277\366\013\366\275\245iP\275\273\270\355\276W\317)?\352\262\210\276{\330K\275\000\000\330?O\224\204\275\202\347\316>(\325\276>\315\351\n?\312\375\006\277\3265Z\275\346?d>\242E\206\276\357\035\225\275\257\231\014?P\031\237\276\242AJ\275\331\353\255>\240T\373\276\237\260\264>\333L\305=\323f\234=\3436z\276_\354\275<\365/\311\275\030\261\317\274\264\037\211\276:\314\367\276@\024\254\275u\037\000\277\371\332#\277\333\353\023\273:\351]>\346\"\236\276\367\314\202>R\355\013?\007\353_>8\370\242>Q2\271\274~oS>\214-\004\276\211\0074>6\253\316\276\213\374z=\371\332\023>u\216a>\251\244N\276\363\344\232\275\204\275I\275*\306\311>\006g\360<\346\226n?\275\034\366<\257|\246>\241\370\361\276\330dM\276@\372\306\275\263\007\272\276LT\277\276f\024\213>\340d\033\275\332UP\277\010\217v\276H\251\244=n\213R\276\307\327\036>\346yP>\265\032\202>\354\3009\276: \211=\2714\376<\262c\003\276b\363\021?6<\245\277\351C\'?\374\251\261>e\245\271\276vlD?$\264\325\276\257|\306\276\210\202\231=Bx\024>4\235=>>\"\026\277=,\324\276\304\t\314\274`\352\267\276\267(\003\277\236)\204\276.9.\276\003CV=\216;E>\302\206\217\277y\036\214>ji\356<\035\346\253>\304\231\037>$Dy\274\245\240\033\277:\007O=\037h\205\276\324\202\327=|\270,\277\274y\022?LQ\216\275\006\236\373=\222\350\005?YQ\003>d\006\232>\335\265\324\276\311qg>\322\252V\275\221a\325\275\260\346\260>\250\030\007>\341%\270\274`\3450>\314\321\003\276\005\206\354\276\323\274\343=l\004\342\275\250\000\230\276\"l\210\2762\346N\277\\\254\010\277\335Al\276\303\323\353=\322\030\375\276\302\022\217\276\007%\234>\335BW\275}\350\002\277\007\353\277\276T\310U=?5~\276\210\205\332=\020z\366\275\372\320\345>\211\230\002\277\271\245u>\334\273F\275UKz=\014\315\205>rmH\276\275RV\276\210\021b\276\001\366\001?\016\276p\276*\000\226\276{\203\277>\371f3\277\267\356\006\276\2072\264\275D\372m\276\242^\260=\340\271\267>\332\376\025\2760\236\001>\2754\245\275@1\262\274\2505m\276\270\001\037>tad\275\304\031\r<u\345\223>\0162)>\310\007\005?\323M\032?|\270D\276\273\nI?\001\023P\277\221\355\014\277qU!?\032\372\'=\3230<>\367X\232>\325A\036=\030`\357>\362\260\260\276V\267*?\333\334\030?\033FA=\r\303G>\240\3750?\036\312+\273\363\216\203?\306\242\211>\242\234\210>\010Z)\277\352\317\036\276\341b\205\276\317f\205\2771\261y>\277}\335=\310$#\276\301\376\353<\201\3545\276.9\026\277Mg\347\276\265\032\222>\017\013\345>{f)\276\344\332\320\275.\001\230\275FB[\276\231dd\277\243\257 \275\007\316\001\2775D\225\275J{\003\276L\246*>\373\311\030\275\262\364\001>\330\273\337\276\211{\274\276`\352\327\276\342\001%\276+\244\314\276\361c\334\276m9\227\276\313\241\345\276N\321\301\276\257y\225=uY,\276.9.\275S\003\215=\312\246<>w\370\213>\314z!\277M\326\350>\237\260d>\367X\312\276\331=\271\276\267\234\313>\366\264\223\276u\310\335>\355\236\314>\002c\375<aT\262\276ni\245\276&\031\231\2764h\230>B!*\277\376`\020\277:\257Q\276\244\245\322\276\350\336\303\276&SU?\016\300\006=\244S\027\276\017\271\031>B>8?\370p)\277u\345\203>H\033\207\276\363\037j?z\3378>\244\307o\277\342\347?\275\205\354\274\275\214\020\006\277\350\023Y>\254\342\375\276O ,=\240OL\277\233\003\264>\236\357G>U\030\033\277xE\220>w\020\023?\271\031\216>\373y\023\276\333\205\246\276\303\360\221>\355\273\302\276\324\016?>\277\360\252=\260r\030\277\327\335|>_)\013>.\004\371>\023,\016>\020\006^\2766\002\021\276Sz\206\275\367X:>H\376 >\246\355\217\276/\250o>\204\330\331>\243V\030=HP\254\276__+=\353\0013=3\026\215\276\256\202\270=&\344\017@\254\250\201\276\302L\023\277\245\332\347\275\016g\336\276)?\371\276\223\214\\>\225\361\357\275\336\002\251?\023I\344\276\275mf\275I\205\221\276\321\350\336>=\270{\276;\307\200=@\023q?\013$(>\005\305\017\277Zd\373>\014\037&\267\254\037\233\274\274y\n\276\376\232\354=BC\007?\333\375j\275j\331\332=\2549\000\276G\215\t=\334\274\261\275\304\320j\274bJ\224\276\235\205\005?\315\314\314>\336T<\277\304Z<>}\\\333\276\371/\020=]\371\254\276\331_\206>=D\303\276\356Z\342\276b\363Q\276\260\003\267\276\355GJ\276\035\311\005>)\355\315\275P\374\250\276\224\367\361\274\206\033\200>\004X\344<\335\322*\275\353\250\272\276\240\0250?\022\332r>\374\306w>c\356\272>\001\030o\276R\3553>l\004\242\276*V\255\275\320\233\212\276\362\262\246\274\3500\337\276F\007$\275c\234_\276\253\262o\276\233\003\004>\371\274\342<e\374\233>!\037\364=\017\227\274>\221&^\274\373t<\276@\373\341\276\266\020\244\276l\004\202\276\221\nc>\214\333\240\277\320\362|\275\337\375!?\264\037i>\270\001?>\331w\r\277B\262\300=\"\246\344>\226>\204>!\002\316\276\216@,\277\336\216\200>\\\254\210>\335\322j\276\272\242\224\273\006L\000\276\362y\305\275\251M\254\276{I\263>g\325\267\277+\336\210\276\2132\033\276\024?\206>\305\033\001?D\213\354\276\232\266_\2760\236A>K\345-\276E\200\023\275+\372\303\275\371j\247=M\204->\367\257l>\234\371\245>\036\212\242\276F%U>\030\020\265\272\315W\t\275\276\237\032\276\274t\303\276\313\031\345\272\031s\027=:]V=@\331\024>U0\n>,+M\276\204\275\251=\233\376\014>\314E\274\276B\354L\276\006\2363\277\002\267\356\2766vI>E\360\257\2768g\214\277\263\014\021\276\036\341t>z\3378\275\272\244\312= F\350\276\326\3779>\344\332\000\277\021\2156\277\217\302\365\275 \230C?\025\020\244\272\010\346\310>Qh\231\275{1\024\276\327\027\t>\324\201\314=\320~\224>0h!=K\035$=\232w\\\276\242\n\277\275}\350\222>2\254:?\345\320Z\277@\023a\276\241\367\246\275&\001*>\304\316\034\277&\031\311\276\305\033\031\276\\r\004\277@\276\004\275\222\"\002?\035w\352>\325\317\333=\376\361\036>\024?f\276\341FJ<\273\017@\276\025\000\243=\331#\324\2742\311(>kHD\277W$\306=\344f\310>\331B0>\037\3644?1|D>{\203\237\276PSK>\243\314\206\276\253\262/?\253\354\003?\303\r\370\275\317\024\372\275\035=^>\264\345<>aO\273>\237\256\356:\035\346+?T\000\254\276^\200\275>\323\274;\277\220\240\030?YIP:8\204J>(\020v=\217\302\225\276\267\264\272\276\256\022\254\276\212\310\260\276\037h\005>\244\302\270>D\243\253>h\350\037\276B\t\203\276[B\006\277\253\317E\277\343R\265\275xEP\276@\331\204\276\211\007\324\276jjY>\226\225\226\276\225\237\304>\315 ~\275p|-\276\366\233\t=\360\277\225>\311q\367\276\210\200#\276\352\312G>q\001\210=\217\306\201\275r\371O\2767\305\343\274\207\242@>\347:->\317\240a>q \324>\266\020$\276_\322\230><\024\225\276\375\242D\275\332\033\034>|\3559>\355\273\">5\007\000\277\030&\023\276\341\n\310==\017\356=\225\237\224\276\203\372V\277*\343\337\275\214\025\035\277\330*!\276\350\023Y\276\326\305\255\276\3750r\277\002\361B?/4\027>\245\203\005\277\264\223!\276\006\367\243=\255M\303\275q\346W>\335\315\243\276UM@?o\236\252>D\300!\277\346\313k>\344f8>\3436z\276\024\"8?U\030{\276\313\363@>\227\220\317\276F\010\027\277\315W\t\275\202\213\325\276&\252\307>\256*[\276u!\226=\033/\215\276\375M\310=\3440\270\275Qf\003\275D\335\307>&\3742>\262\200)\277\270u\207\276s\2057>\360\242\017\276\237\223\336>\227\213\370\275\223\000\345\276>y\330\275\2721]\276nj\200=\205|\030?\322\366\371\273\353\342\026\276\375\301\240\275\246\017]>aT\342>W\354O\276Q.\r=&\036\320\2752U\014@\211$\312>\2554i\276\257\316Q>\021\215\016\276A+\220>2\313\276\275\253[\255>\255n]?\321t\266\276\321 \245=1|\244>\036\212\n\277\350O[=\314\321\003>W!\325>\275\000\333>\305\217Q>^\272\311\276\273\355\022\277\245f\337>\270\220\007=\330\360\014\277\356B\003\277pa\335\274u\253\347=s\0217?\243\257\360>{\332\261>\374\2125\275\336\002I>\320\270p\276\327\210\340\274\262\r\234\275\340\276\036?\244T\302<\213\340\217>\204\325\030\275\260\003G\276\242\234\350=\224u\356;VDM\275\020\314\341\276\006\330G>\0054q>\217T\337\274\317\024:>\346\256\365\276\200\016+?\265\304J\275/\335\014?\315t\257\2748\2766?\210\235\331\276\\\217\262\276\246\017\355\276\277+\262>Sz\246=\000\000\300>J^\035>\264-9;\343\374\275>j\366@>j\366\240\275\227\305d>\213\340\177>\030!\374=\241\271\216>O\314\252>\200\361\234\276\363q\335\276;\374\365\275\264\216:?!\223\034\277\025\343\034\277A\234\247=\351\267/\277J{C\276\217pZ\275\354Q\230>jj9\276\306\371S\277?o\272>i5\304\276\256\236\023>[B>\276\300uE\274v\375\"\276\250\252\260=\305\0339\276\375\237#\277V\324\260>Hm\222\276\246\017=>|Ca\275\024\226\010?\t\033\336\276\221a\025>\363\216\303>\320\355%?\3232R=\355\360W>\351\361{>I\364r\276P\214\254\275$\013\310\276\323\245?=\371\025\253\2754\364\027?B\354\314=\005\250)\275\331w\005>E\022\375\2751\224\303\276L\211T?\251\2446?\220\332d\276\227s\351=t\265\245\276\213\377{\275PTv=\304\224\010>\217R\t\275\203\335\200>\235\200F>\236\007\027>9\013\273\276\223n\313\275w\204#?\305\376\262\276\033\330\"?B>\004\300\305\311}>\273\325\243>{N\352>\216\036\007\277\274\256\337\275\227\312\273\276\317kL>\313\276\353=W\317\001\277\331\231b\276\213\375\265>\377\"h\275\234\304\260>Z\330\203\276\003x\313\276I+~=\320*\263=\311<\242>\337\0259\277\325\317\333\276A\274.>+5\033?F\316\">5{\200\276\304\261\256\275\334.\204>)\\\317=\271\302+?<h\266\2750\270\346\274\027\274\010>\335$\246>H\033\007?\'\245\340>eS\236>ms\303=\254\220\002\277\"\372\265\275\221a\245\276\307K\247\276\204G\273\276>\226\236>\363\223\352>v2\030?\304\224(\276\335\357\240\276)?\311=\241\204\331\275\216\037*=\204d\201>\243u\204>\222\362\356\273x\371\014;\375\202=\276\004\221\305\274\335\357\340>\344\203\026\277\215\177\177\276\304BM\276y\314\000\276J\264\204\275^\200\375>\263$`\276\001\373\010>\231\330\374\275\275\214\242>\235F\332=\340\234\221\276\340\271\207\276\001\207\320\275i\033\277\275\005\3008\276]\026S\276\342\344\376=\320\362\\\276\300\3170?Mg\007>=\n\307>Nz\237\276\'\365\345<\255\335\326>\341z\224\275V\237\353>\315;&\277\222\350\345=\376+\213>\t\212\337=\314(\266\275\025\251\220\276WC\362\276*U\"=\034Bu\276J\014\032?\332\033\374<Vf\312=\371\275\315\275\204\273\203>\230Q\254\276ga\357\276\337\214Z\275\006\2015>\375\274\331\276\016\366\306\275@\206N=\'\244\265=]\277\240\276f11\276\3269F>\312l\320>\275\030\022?\031\312\t\277X9$\277\226\004H>!<\232\276\326\002\233=\322\030\315\276\316\210\302\276_\007\016>Y\300\264>\210h\244\276\266I\305\275W!E\276\374\373\014>\262\364\021\277\275\373\343=\010*\031<\3435/\274\270\257#\276\326s\302>\024\" \277\330\232-\274\226>t\276\005\213\003\276\320D\330\275\273\325\203>Ou\250\275\206 \'\276EG\022\2771B\370\275(D\000>\230is\2778\370\002\277\005\305o\276\314E\024?\231\273\326=\020\257+?`\037\215\276)?I\276\203\372v\276\371,?\277\216\001\211>\021\0316\276\340-\240>\006G\351>\347\343z\276\336v\301\275A\202\"=\210\200\223\276.s\032>\032\372\207>\345\320b>\3269\226>c\271%>\n\235w\276\305\311-?u\310\235>\237<L\276\250\035^>\005\243\312?\300[x?^\203\276<\321y\375>,e9\276j\025\235\275\010r\200\276\322RY><\275\"@}\226g\276\241\240T=\214\271\353\2741\323\026\276\220kC\276\034&\032\275\261\026\337>`v\217\275F\010\017>\276\207\213\2767\032\010\277\353\377D?al!\276\352\312\'\276cd\311<\251\300\311<\032Q:>I\200\372>}y\001>\220\024\321=\357\376\030\276^\327\257\276O\036\206>\246\2004<|\355y\276(\233\342>\251\366\271\276,\324\212\276`\223u\276\261\026\337\275\216#\326\276\002\016\301>\305\311\375\2755@\251\275\216;\325>\345\no>\000\344D=8\020\322\275{1\364\276\252}\032>t\322\333\276\251\366\t>.9\016\276\372\355S?-\262\335\275\017\321\310\276.\305\325=\260\200\370;LqU>1|\324>\252\267&\276\352\354D\276\342\351\005?\307\200\254=\273a\033=}\005\211\276\371\3323>\n0\254=\025o\324>3\337\001=\001\207\360\276\310\232Q=l\262v\277\211\007\264>_AZ\276\255\243\022\277\335AL\276\241gC\277\241\276\205>\236\230-\277V\361\346>t)\236\276\310{5\277\256\360\376>B\262H\277\313\3707>\\U\366\275\227VC\277\030?M=\026\023\233>\236\357\207>\235d\253\275\241g\263\274X\3429\277oG\270=\306\026\242>m\220\251>\250W\202\277k\361\t>\325\347\372>\020z\206?\226\317\022\276,\202?>\360\212\000?`YI\276\210h4\276\275\343T\276keB\276}\320\263\276\376C\372>g\n\355>\004s\364=\357\003p>\251M<\276\345\270s\276\267\177\025?|a\222>\021\031V=@\331T\276c_\262\275\305s\266=\240\340\002\2778-\250>\236\230\345>\361c\214\275\341\177#?u\216\001>V\237\223\277Y\372\340>\303\330\342>v6\344<\350\023\271>\000\000\210\277/i\274>\322:\n>\277\267\231>\2027\244=\272\332\352>n2*\275\010 \265=\376\232\354\275\\\346\024\276\241\326\034\277;6\222>\014\346\257<\201\t\234>\335\014\007\277!Y0\277\300\004n>V+\303>tA=>\247\350\220\277\372\233\240\276\366@\373>J\265/?\336<\325\275\246D\262\276o,\250\275\260U\022?\255QO>\022NK>n\302}\275v\032\211\275b\333\242>\010uQ=\200+\351>\212\315\307>\260\376\337>0/\000>`Y\251\276v\303v\276x\2641>P\302\314<Q\367\341\276\263\230\230>5\357\270>|\325\332>\252\016\351>\3476\241=\247\313\362>\022\240\006\277\217\344\022>\352\t3\277t\352J>\363\223\n\276JA\227=\226\317r\2762r\346\276\322R\311>>\226&\2775\322\262\276d]|\276\032R\305=\243:\275\275\025Wu>\221\325\215\276\210c\335=\3169\370<\314~]=\351\201\217<*o\367\276\206 \227\276\356\010\207\276\003\317\035>x\2641\277\323\331\271\276\233\003\244>+\366G\277\323\300\257\275\320\'R>*:\322=\267\177\325\276ZG\265>J\265\027?E\332\246=\227\377\220>QN\264\276\000r\202\275A\361K?\014\037\021\276]3Y>\252\202\321=V\361\266\276\311Y\270\276r\376\226>|\362 ?9\227\002\277\271\246\200=\306m\304>\033dR>\274\313\325\276\3745\251\276s\327\262>P\337\262>\204\365\027\277\313\3331\276|b\035\275|\355\331\276Y\206\270=\361F\266\276\353\220[\276\330\270~\275\276\244\321>O\222\016\276\005\372\364\276\350\301\315>i\306B\276\325B\311\273\327\300\346\276\211\265x\276Bv\336\274\344\207\312=\235\364&?\255\3000\276,\202\177\276C\254~=~\306\005\277r\211c=@\207y\276\224\301\201>W\t\326>\177j\\\2768\333\334\275\320\375\013\274\272N\003\276:\257\201\276\244\210,>\262\200\t>T\216\311\274\242b<>\337\375\201\276\223\214\234\276\272\275d>C\004\254\276\241\370\031?\226\262\314\276\240\177L\273\253[=\276-\005\204=\353\250\372\276\243v?\274\236\230\025\277\211A\210\277\277H(>1(\023\275\320D\330=\027\361\035\276\302\243\215\276\340\241\010\276M-;\276et+\276\251\336\332\276i\214N?_\322\230\276\327\335\234>b\326k\276\310\357\r\276\210c\275\276\311\260\312>M\3337\277\241\204a?Ed\250\2766\253\336>\010\311\362>\344N\351=% \246\275\225\273\217\275\343\376\303\275$E\004\276O#]\277\306\242i>\312l\020\277\255\206D\276\315X\344>)\313p>\373\221\002>\344N\311>nQ\006\276\274\"\270\276F\224\366\275\224\366f\276:\351%\277&\374\022?\013\357\362\275YL\354=8\370B>[\266\226\276\037\327\226>=\177\232=\255\300\000?Qfc\276\327\027I>\300\303~\273\001\244\366>\205B\004\276\376\361\036\276\234\247\n\277Mg/\277P\215\327=\264XJ=<1\213\276\373:\360=\204\365\177>\300>\352>cB\314\275\324}X\277\0319+\276\346\005\210>\030\354\226\276\025\343\234>\003`\034>o\rl>-&\246>h\3200\276\034x5\275\\\217\202\275mV\215\276\353V/?0\236\241\276h\\\230>\034\323\323>u\002:>r\376\306>:\257\341\276pB\341\275\346\256E\276\346W\003?\330\330\345=j\331Z>T\000\214>\213\303\031\276o\360e\276\322\034\331<\244Sw\276W>\313>P4\257=\014@\243\275\231dD\276!\315\210\276@\3731\276!\223\374\276\240Od=\323\023\326\275J\007K>\213\340\277=\021\337\371>\01629?\350N\260\274\340\271/\277S\313\306\276p\261\202\276X\377\007>\217\215\300>P\001\000?\t\371`>~\035\020\300\352\006\212\275N\227\005\276\256\r5>\307\235\022\276\332\311 \276{I\343>\201\354\365\275X\312\362\275\254\377\033\277H\334[\277\260\376/\276Mg\007\276\001sc;\347\035\327>-&6?\346\\j>\2338\371=\344LS=\014Y\035>Y\300<?\213\211\315>R\'@?\354\027\014\276\241\326T>\275\343\344>>!\273<\373\\M>\226!\236>\355\360\247\276F\224^\277U\023\244>jj!?uY\234>\017\264\262>\002\274M?u\315$\276m\250\210>\367\344\001\277\256\236\023\276\357\254\035\275\376}\306>\026\3664\277\374\306\207\276\300\007\217\275\276\210v=/\300~\275\233\346E?\352\tK>\272N\343\275\313\016q\275\344!\235\273/4\227\276\200\016\013?\262\031\226\273\370p\t\276\236$\335=\355\3300?:\006$\276\366(\274>\353\250\352\274\223\214\334=\233\376\214\276e\344,>J\nl\275\226Y\244=\016g\256>\214\203\013\275\021\305\304=#\276\323=~t\212>\311v\236\276\367\006\357>fkE\277\013c+\276\305\346#?(\017\233\276{\203\257>\324}\010\277\023\362\201>m\220\t>\376Cz>|\202\037<\010v|<[\224\251\276@1\262=\033G\014>){\313\274\206\033\300>[\323\214\276Y4\355\276\212\253\n>H\334\323\2763\026\315\275\010\003o>\021ph\276ni\325>\270\3448?\'\367\253\276\364\025\004\276o\236\332\276>?\014\276\036\212\002\277|\355\031>\037K\377>q_=\273\255n\365\276\362\007\263\276G\217\277\276\263\322$\277|\266\216\275&\307}\276\247\222\201<\024\355J\276a\3033>\237v\310>W\225\375\275M\370\245\276\024\350\303>o\365\274\276\370S\003\2762r\246>|\r\301=v\335\233\275\017b\347=1{Y\274r\212\236\276Bx\224\276\221\362\323\2762\3072=\310\352\226>\371f\003?\360\334\233\276#-\305\276\346\353\262=\241\204\351>]\026S\276T\343\345>\022\302c>#\335O\275\361\364\n\277\214\363\207\276\357\311\003\276~\030\321>|D\034?\227V\243>\231H\311\275\332\003\335\276\245,\203>U\336\356>D\250b\277\004\255 >\214\333\210>\017*\361\274\205\006\"=D\372M\276\344f8\276o\323?\277\207\341\323>\236A\033\277\004\312f\276\224\373}>\034_\233\275\256\360\016>\364\032{\276-\354\001\277,}h\276>\347n\275\000R\333=v\246\320\275\351e4\276\336v!>\215\264$?IK\305\276G\254U\27777\346>\333\205\366\276\315\006\231\276@0\367>ioP>\252\233\253\275*\340^=x\234\242\274\243X&\277\222\313\257\276\227\312\353\2766\345\312>\220\367\032?\374\373\004?B\317\346\276\007\354\312\275\004\215\031=Q.\r\275\\ \301\276C\305x\276\027\236\227=\263\007\372>\016-\262?\336\216\200>\301\312\221>\351\324\245>1%2\276\333\247\033\277s\327:?\'N\356\276j\331Z?\234\247*\277\336\253\036?\330\360\364\275D\372M\276\231\3304\277To\235>`\345\014@\343\210U\276\256d\347\276x\227\213>\360\247F>F\010O\276\342X\227\276\345\235\003\275\350K\257=MHk=\313\333q\276io0\277N\227\265>g,\352\276\345\320\222\276s\242]>\374\373\014\277\034\267\230\274\303G\304>\n\327#\276\033\271\356<\375\331G?\206!r=\237\037&\276,\202\017\277\311\346\312=d@V\2760\201\353\2765\266W<\024\313\335\276\332\341/\277\022\302\323\276\361)\300>\332\341O>\r\340\255<cz\322\276\260r\310>\353\255A>\214\020\036\277\010\346\000?\277\2024>u\002\332\275\274\226\200>\271\213\260=F\266\203?\360\276\252<5\353L\275\371.\305\275\351\361[>\253&(\276\323j\030?\267b_\276\252\232`\276;p\026?\003\262\247\276\320\325v\276\307.9\277_\014\305\276\330\273\377\276\331%\352>=\'\235\276\000o\301>\361\241\304=)\350\206>\277`7\276\247\316\243<\305=\326\276\271\215V?/\030\034\275\036\033\301>i\2146>~W\024\277\333\372)=\300!\024=\231\273v>N\264\013\277\025:/>\235\237b\274\363<X\277\200`\216>{\205\245\275\223\306\350\275O\224\244=it\247\276To\275\276\305\003j>%\257.?\314\321\263>\331\316\013\300\303\2670\274a\3409\276\206\346\252>\222yd>\274\221\251>\311\216\215>\365\234t>k`\333>~R\215\276\\Z\025\277\351\361\003\277\362\315\266\274\346\226\326>\037K7?\256\236\023?\311q\027\277j\301+>\"\303\232>\314\263\222\275\221\325=?[|\332>\331\353\275>]\371\314>>?\234\276\327\325\t<\244\307\337>b\333b\275\215\321Z\276l\320\227=}\320\233\277\1770`?\014\223)?\2068\326=\n\272%?o\r\024?{Ic\276\360\334\253\276v2\270\276\353\342\026\276:@\360=\254s\214\276O\036\246\276\247\313\002\276N\234\234\275N\234\034\277XV\232\276\342\260\264<c(G?8\276\366\275\346W3\276\364\303\230\276i\214v\276<\210\275\275\363<\270\276\343\307\270\276(\362$>]P\257>\240\301\206\275\332\343\005\274)\320\347\275!\260r>\237q\001\276B\317&>z\245L\276w\3634\276?ta>u \313=L7\331\276\374Q\224=h\263\352=\200\267\200>\271\245u>\332 c\277\352\350\230\275*\221D?o*\362\276)\226;>\nK\334\276\307\020\000\275\320\355\305>\331\010\024?0Gg?9g\037\274\352\314\235=?\343\202\276\362\352\\>\013^\244\276\375\207\004?!\315\210\276\276\237\332\275\302\300\203>\275\214\022\277<f\320\276NE\n>\313-M\276\316\307\325>U\366E?\236\014\016=\370kR>\177\274\327=&\337\014\276q\312\334\274\365\270o=\307F\340=\005n\035\277/\372\002\277*\000&\277O>\275\275?\217\261=\030\225\244>\305r\373\276\021\337\311>\261<#;p\261\242>\262\021\010>\035Z\204>\005\243J?\363<8\274\365\204\205>\010rp\276\355dX?m\305\256>\252`\264>\005i&>X\034\016>i\000\357\275\333P1>\\ !>q=\212\277\204\022\226\276oG\010?w\204\303\276\252+\357\276\203n\217\276\237\260D>\205\261%>!\2602>B[\256>\246\362\026\276\027\267\001\277_\230\274>\014\223\231>WC\002?|\355\211>w\326\356=\016O\357=\315\217?\274\352\317\376<\357\216L\275\2201\347\276\203\335P\276\336\311\207\275qZ\260>\233;\232\275\200+\331=H\033\007\276\343\337\'\276aQ\261\275?5>\276\033K\270=\2073\317>D\335\207\276\025\035q?\225\361\357\276c\177\031>S\221*\276ND\237\275\351GC=9_\354<\343\210\205>\001\023\370\275&\337\024?\036P6>\331\010L\277<kw>\0214f\275\262\326\020\275\334K\"?\036\215C=\026\337\260\275\363\216\223\2766<\255\276n\206[\2769(\341\276\3269>\277\345\355(>Ae\034\276P\374\270>=\233\225\276\030C!\277\237Z==\034%\217\276h\005.\277Lnh?R>\230L\265=p\353\356\275\221\355\\\276\334\021\336>jM\343\276C\004|?\232\316\006\277\373td?\273a{>\214J\n\276\207\2121\276\310$\223>\343\215T? )\342\276\256*\213\276&\344\203>\r\340m>\3435\257\273\017(\213\276H\033g\276\257[D\275\322\030M>\267\356&\276\3122,\277\023,\216>\017\271\251\2768g$\277v\336\006\275\207\026\231\276\220\240\270>}\"\027?2\344\230\275\267|d=vq\033?\202\312\020?\227\377\260\276\3539\211\276\3058\217>\014\352\233>G\004c<\024?\006\276\220fL\276n4\210\277\\\252R<\2446i?~\311\006=9\326\265>\036\334\035\276\002H\005?{\210&>\177\207b\277\010w\347\275\021\307z>\224\335L\274^c\227>\\\221X\275\025W%?\361h#>\364\214\275=\033\201\210>\rl\005?3\334@\275\267\013\025?X9$\277\247\\A\276\023\017\310>\302/\325\276C\306c=\321y\025\277\030w\303\275\036P\206\276\321\226\303>\236\357\207=7O5?\223\214\334=\205\231\226\2761}\217\275\341\nh\275hy~\276\020\222\205><\3328\276\271\342\"\275\300>:\275\362\357\263\276\252\324L\276\233\033\023\276\'1@?\t\026_\277\311\002\206>\t3\235> F\250>\320\362$?\242\013\272\276\277\234\031=\246\356\312\275\255\372\374\276\222\313\037>\002\324\204>\357Uk?\373\221\002?p\316\004\300\343\337\'>7\375!\277\345\325\231>\320\355\225>\013)?=\203n\357=\203/\274>\242\227\221\276\303\201p\276o\323_\277\220I\226\276\\w\363\275\376H\031?\237Y\002?\347\306,?l\353\'<\220k\203>gD\351\2751\372\300;9\0133?B>\330>\276\301\017?u\345\323>\353s\025\276~o\033?\270@b>\277H\230>\242\353\202=\327\300\246\276\324\232\226\277*\035\014?z\307A?\253x#>A\202\202?\357U\023?%\\\310\274k~|\274\n.&\277\227s\271\276\2721\275=2\255\215=\275\000\273\276\026\244y\276\032\027.\276!Y\000>\340\204\342\276\206U\334>\313-5?\312\210\213\275x\016e\275S\313\266\276\206Z\323\275\315\314L>0\r\263\276\320\233\232\276T\343\305>R\0171>\375\366\025>2\311(>\254\346y\275\304\224\310>\226\225\006\276\216\314\343>?Vp\275\226\354\030>C9\321>\nK\\\276\342^\364\272\231\203`=\020@\332\276\245\332\'\276C{\253;\245N0\277\316p\203\276\002H\375>\226\317\222\276\210.\230>\3706\255\276\263|\035=bg\022?\303\2665?\n\277\324>\324\322\234\275d\257\007?\375\207\324>L\342\214=\026\212\364\274=~o>\222\\^\276:u\305\276\004\034\202>\231*\350\276zp\207\276\325[#>\030}\225\276q\217E\276\336\223W?\037\327\266\276\005\213\323>g\017\244\276\227s\371\276_\007\236\276\351\016\002\276^\202\263=;\302!\277\035 0\277\2338)\277\216\222\267\276\357\217\307\276\361\rE=_{\246\276h\350\337=\206\003\261\276\266\271\201>|\n\000>u\345\023>\270u\017?\023\016==B{5\275r\0266\276p\353n>\205\316+=\265\2113\276\000\343\271>J\232\277<\252\202q\276\236\360\222\2758\025\251>\201C\000\277U\244\">\311\002\006?!<\332=\311\260\212\276\343\337\207\276\335\230\276>\271O\216=L\372{=\326S\253=\351\324\225\276\212\260\001\277\361c,\276\360\246\233=\320D\350><\210}>LO8>#g\201>\373\256\030\277\221D/>\336\223g>\220N]\277\331\010\224\276\243\351\234>M\363\316=\"\377L=j\301\213>\271\302\373\275c\234\237\276\227\250\276>\010 \305\276\255\220(\273\303\364\275<\373WV\276\3269\326>X\377\347\276=\362\227\276\363\310\317\276\324+e\276EK^\275\366\013\026\276\376C\372\275Q\370\354<\312T1?\306\247\000>M-\003\277\375\237;?\211A\300\276\263$\200=\205_\332>\276\366\214>)\314\233\275#\366I\275\377>\033\277\014\310.\277e\374\233\276\334F\213\277\177\337\177\275x(\n> $\273>Z\r\021\277UMP\2763\033\344>\257w\377\276\004\342\265\276C\032\025\275\360m\032\276\013\357\262>\372F\264\275\344\240D\276v\246\240\276\371\240\207\276\007\360\326\276\255/\022\276Q\210\010?u\002.@\036P6\276\222\263\200>\005\206\214>EG\022\276r\026\026>\224\371\007=X\250\365=\rT~?\340\331^\275\204\323\242\276,G\010=\315u\372>\364m\301\274\252\201\206=\357\033\277>\\r\274\276\020z\306\276_\324\256=\235\021%>\033\201\210>\372\233\320=\331\010\024\2779+\202=\236\230\025\276b\025\357=9EG>#\204\347\276J\233\212=[B\036>\336\216\010?-\356\177\275?R\304>P6U?\001\336\222\276\1770\320\276\246\265)\275\241\020a\276\034_{>cz\"\277\263{\262>\234m\216\276|\362\020\276\025R\216\276\022k\301\276\n\272\005?\370\215\257\276J]\222\275\362{\013?^\021|\276\020\006\236>\020@*>\200\324\026\2771\231\242\277l\354\n?>?L\276\004\342\305\276\300\t%\276\302QR\276l\227\226\275\201\t\\=vq\273>U\373\024>\276\237\n?\310\007\035\276:@\300\276\365\362;\275\311Y\330>\220\024\361>\263)\037?N\177\036?\220\024\241>\031\305\362>Gw\240>~\000\322\275\211\3244\275\212\253\252\276\237\037\036\277:\222\333\276\026\030r>_A\312\276\256\365%>\002e3>\367;4\276\260\376\317\274\342\222\263\276\021\215.>\217\302\365\276\362\322\215\276x\271\210<-x\301>c\177\271\276\265\025\003??\214(\277\337O\235><\240\004\277j\373W\277\027)T\275\203Q\331>\337\025!>\234\304`\275\270\222=>\243\003\222;\224\274\032\276\017\227<>\250\035\276=fk\235>W!\345=a\216\336>\302/M?gDI>\374R\337>!\007\035?Y\243~\276\275R\246\277\302\335i\277\034z\213\275\322:j>\242zK\276\025:O>E\022}>\202T\n\2747q\322>\022\203\200?\220\263\372:u\346\236\275\251\207\350\275a4\213=\232\227\303<xz\265\276\036\033!?\302\206\347\276\336Y\253>p|M>\2407\r?\373\005\033>\361\330O\274\363TG\276S\010\304=\034\261\026\276i\306\002\277\267b/?\363\310\337\275\240\245\313=\263\007\332=e\246\264\274l\262&\276T\253o\275\354L\321>\302\206\'\275\003\354\343\275\251j\202>\227\213\270\276m\312m\277\340JV\276O\222F\277$\013`?9\177\263>g\233\333=\000\256\004?\316\212\210=\202\250\373=\203i\010?h\320\220\276\236^I>\342\3515\276XV\032\276\037\331\034\275\002H\355\2752\217\034\276\017\264\302\276\307\327>>\360\205!?\035 x\276\033L\243\276>\005\340\276\221~\353>|\362\360\276q\347\302<\243\222\232>\237\216g>\304\316,?\320\232\237=\244\2534=\306\304F\276\n\235\327\274#g)\277\177\336\324\276\312l\200\276\242]\245\276\304%o\277\215b\251>\316S]\277\250\306\033?3\212\265>&\252\367>\247y\247>\237\002\360>\3167\302\275\241\276\345\276-\225\307>\206\003\341=<\240\354\276p`r\275\236)T\276\037\3276?X\342\221>2U\020\276{\210\366\276Ve\007?\324\267\314>\377\317!\277T\251\031?+\331\341\276\021\337\251\276\365\204\365\276:\036\023\27777f>\006d\357=\334\330\354\272\356=\254\276D4\022?\216\351\251\276\330\362\n=\232B\037\277\020\\e<%\314\344\276\365\326\300>\311q\227>fk\235>\257\224\225\276\001\207\340\276e\2528\277\343l\272=\t\0267?\307F`>t\230\217\276\260\254T>Ae\\>S\005\343\276}\313|>\177\205L\275\325\t\020?\r\253\020?\1770\360>\376` >\006*\033?Z\022\340=\217\343\207\274\231\330\234\276\367\311\261\275\202V\220\276\"\340\020?\373t\314\276\036\371c>\2721\r?u\345k\277\312\025\036\2760G\357\276\325\t\250>5c\201\276>\355\360>j0E\277\266\333\356=3\337\301\274)y\025\2771\224\013\277\364\032;\276\034\316|\276y\002\201=\217\307\004\277\230i\033\277\237\315\332>\247?;\276\216;\345>\316T\210=\323\366\217\275\320D0\277\260\000\206\275\2132;\277XVj?\315u\022\277_\264\207=k\232\267>d\351#\276\256\273\031\276T\2519\276\313\326\332\276,+\005\2779\227\242\276\363!h=4\205\216>\272ki\2769\362\233\273\210\327\245>\020\006\036?@\331\344\276\320\355\245>w\326\216\2762Z\367>\014>M\275xz\205\276I\272\366\276v\3005=\373t|\276\256aF\275k\360\276\274\335\0070\277\271\374\367?Ll^\276\006\330\'\2764\237\223\275\"\306\213=\261\334\322\275\226x`>BC\177\276O#\005?\300\317\270\276\206=\355=\355\r\256>\304\224\350>?\000\271\276\333kA\275V\202\325\276C\342\016?\300\004\356=\222\221\203\276\221a\025?\373\005\033\276)\320G\276K\352\004>!<Z\276\313Js>\305\003\212\276\231\323\345=g\272\267\2752Z\347>\377\225\265\276\225\0166>\301\3420=\017\013u\276\264\002\243\276\222\313?\275\374\035J>Ow\036=*\214\375\27677\226\276\335\357\000?\267b?>#2\014>\367\006\377>P\374\310\276ff\006\276r\026F?\302/\r?\336\345b>\225\324\271\276\303\201P\276\370\245\376=\362\306\023\274\303\330b>0G\317>,\202\257>\307\200,>\022\026\225\275\003\321S\275\374\343}\276\254\214\306\274\307K7=\211\225\261\275v7O>\200\232\332\275Z\330\203>G=$>x~\021\275\024\256\017\277\325\t(>\301\255{>+\030\225?P\310N\274\000\216=\275\340\326\r?\022\024\007?\266Jp\276\322\373\306\276\221\270\247\276+5\233\275\234\026\354>\350\202:>\241\204\031\276G\217?>\017\270.\275\234\242\343\275\360\304\354\275D\243#\277\213\375\365\276\322\251\373\276Gw\320\275&\036P\276i\251\374>&\0319\276\237\002\260\276\236E/=i5\204\276X\307\221\275\2657\030?j\030\376\275\023\n\221\276\325\354!\276\303G\004=\360P\244>p\010\245>\234\026\274\276\334\241\301=n3U=:w\273\274Pp1\276E,\"\275\033/]\274u\260\276=&pK>\223\304\262\275\023~1\277\377xo>\'f]>\003}B>:X\317\276~\035\350>Z\201A\276\260X\303\275E\330\020\276\314\356!\300o\365\214\276sh)?\362\0073\277>\003\352<\225IM\275\316\374\312\275b\326+>E\360\177>\371\024\200\276W\225\375>\370\302$>\022\275\314>\236{\257>\323\023\226\276y\351\306\276*\306Y\276K\352\304>\037K\177\276\312\303\"\276\341\356\354\275?R4?\330\360t=\246\233\004\277\210\235\311\276\205%\236>\343p\346\275\206=\355\275*R\261>(\233R\276\355\323\201\276\372\n\322>\356%\315\275C\215\302\274%\347\004=\241\276\345\275\371\333\036<O#\255>\322\251+>\004\347\274>\363<8>\177\332\250\274$\013\030\275\3127[\277\222\003\226\275]\247\t\277Q\024\350=\341z4>\316\374\n>M\276\001?T\214\013\277\335\315\323>RI\275\276T;\303=7O\365\276\301\220\225\276\212\002\r\277.\255\306\276G=$>\027e\366=\320\325\206\276\333\212=\276\0015\265=\311\002\246\2765F\253=uY\014\275x{\260\275\202\034T=1{\031\275\261\277\274>^+!=\364m\301\274\306\242\351\275y\313\325<\343\302\001>7\303\355>\342\314\357\276\212\315\007>6\002\t\277\233r\205=\035rS\276\002\324t\276\366#\005\276\232\t\206\275\310\352\326\275_Fq>\351&1>\202\255R=\342\"7=#\020\357\275X \372<$\014\243\275\316p\263\276L\340V\276]\370A=\331\261\261>\214\363\347>\212\002\275>\330\360\024\276\233=0?sc:\276\250\253{=\363\216\023\276c\'\274\275\000r\202\275N\013>\276?U\205=\340\366\204<\377\004\307\276\214\271\333\276\n\200Q>\r\253\210\2761\266\320\276X\311G=\376+K>%\312^\275x\233\267=\213T\350>\224\331\300\276\344\017\226\2764K\262>\024v\221=K\260\230\276x(\352\276\361F\326\276\002\361\212>\262\022\363;\340\363\223>\345D\033\277w\240\216\275n\372\303\276\343\337\347=\252HE>\207\277&\276\334h`\276h\256\003?2r\226\276aqx>\276\2441\276@\366\332\276r\304\002?\340\365\031\275Nz\217>vq;>\370\245\336>|D\314>\2472\326;_$T>Q\024\210\276\265\245\216\275\2716\004\277\221\233a>\211{\334>\026\023\353\276EGr\276\345)+\275:\006,?\016O\317\276\r\340\235\276Qk\312>\200ee\276\355\236<\276\275\030J>KO\"<\304\261\016\276T:x>;\342\220\2749\263\035=\346\221?>H\277E\277O\257L?\037,c=\3603.>Q\240\317=\262F=\276\251\023\200\276T\035R\276\270\006\026?\200\202+\276Q\275\025\276\034~\267<Bx\204\276\341\321\246\275\250oy\276l\004\"\277B\354\014>{\332\201>\034\010I\276cb\363\275\343\337\207>\010\224\215\276H36\276\263\315M>@\331\004?\0013\237\275 \230\343\276\333\212\375>\300x\266>\002\016A>\267b\277>\003>\237\275\242]\005\276\335\265\344>\366b\230>\006\273a>o\273p\276\261\212\267<Y4=\277\321\256\242>\323\336\340=#\333\031\276\327i\344\275\035\311\345\276\226\347a>\302/U\276\240\337\267=\315\222 ?\007\355\025\275\221\233\031?\251\300\251\275\363\223\n>\371\332\303>\376\325c<\3372\207\276\343p\206>-\tp>\3019\243\276`<#\276!\223\254\276\257%\204\276Ih\333>\261\242&\276\006*#\276E\365\366>\311\002&\276\376\2672\277\031\255C>A\016\232\276\006\rM?L\250\200=\307\250!<\233Z6\276\331]\200\275epT\276,G\310\274\236)l\277\036\033\201\275\3230\214>\014Y\355\276\217\252\206\276<0\000\275W\317)?*R\341\276.\312\234>h\256\323==\3246<\212\002\375>\005\025\265\275;\344\306\276[C)\274\331w\005>\301s\357\276\211\265\210\276G\310\240\275\253\004\213>\213l\033\300\307\2352>\235F\032\2767\340\363=l&\237>+\371\230\275T:0?\260\346@>\312\025\336=\027\232\213>\247y\207\276\344N\351\276\020\222%\276\310\006\022\275\212\037;?\214g\340>\024\256\367\276~\000\322>E\236\224>!\315\350>n4\320\276\311\253\243>.\343\246=\306n\277=\261\334\222>>Y1=\'\203\343\275?\345X=\004!\351>\030\t\315\276\266\020\014\277\340\333\364=G\037\223=ST\242;tF\024\275/\337z<\352\003\211=\322\000\026\277O#\275\276\260\306\271\275\251\205\262\275\360\304\234>\326\2208\276\001j\252>Q\333\306\275\313G\322<\271\302{\276\003C6>\177\336\324\275\316\307u\276\032\300{>\003>\217\276\374\000d\276n4 >\332\376\325\276\220N\375>\261\213\"\275\023a\023?\007\231\324>\336Y;\276I\242\207>\307c\036?}\226g>\231\236\220>0\236a>~W\004\277M,0\275\332\003\255\276\362\322m>\270\310}\275\260\254T\276PpQ\276\024\\\014>I\021\271\276\027H\020>C\3058\276\377x\237\276<\332\350>\023\'/\277\206U\214\276\306\304\226\276IKM?\016g\256>\251\301\364\275NG\000=\247V\004<\307\2352>\322\343\227\276\361\364\232>\337\211\251>\207\371\242>\216\001\331\276\342\314\357=f\024k>\206U\034\276\344jd\275r3\214\276\027+j>,+\355>\\\311N>{\275\213\276\000R\023\277\207\376\t\276>\3133\276\013{J?\340\271\247\276\326\305\225\277\003\t\312\276\246\362\366\276\255KM=^cw>\221\355\214>S[\312=\331\224\373>\357\033?\276 \r\002\274\226\263\267=}?5>\242F\241=\307\200L\276\327\300\266\275\353\3050>\311q\347=@\2079>\313\241\205>\t\212\317>\276\366,>\310\322G\276Ll\376\275Xs@>\230\300\005?\353Vo>\'\332\325\275\340\'\263;\313\241\005>J\357\333\275\357\254]\276/\245n\275S\\\365>,\361\200\275\254\213\033>\231*\230\276\205%\336=yX\230>\\\037\226=]\376\263\276\001\202\336:]\341\335=o\360\005>T5\221>\340\276v\277\376CZ>\257\231\374>/4\307\2760L\366\276o\201\264\276\030[(\276\274\221y>\177\244\270\276M\241\203\276\331|\374>R,\267>\207m\313\276\321?\301\276\032\027\356>8J\036\276\300\2622>b\333\342\275\205\010\270>\226&\305>\0324\024?\t\376W\276\216\257\235>\000\214\017\277\302\300\243\276\276\023\203>[\323\034>\365f\264=\227\213x\275\267\177\345\275\237vX>M\363\356\276Ra\274\276\341]f\277\031s\017\2773\026\215\276\000\343\t\277,+-?\255\243J\276\373:\340\276\271Sz>\377\306\2059\243;\210\276B\t3\276WCB>\305\3762>\\Z\275>ni\365=XY\233=\204\022\006\276<N\241\276.\342\313>\036\247\210>\230mg=\275R\226?\251\276s\274ep\324\275r\244\223=y]\237\276\233=0>\371,\177?\362\007;\277@\023\025@\330\236\031>\n\242\276>\215\227\316>\352\347\255\276\023\233\017\276\263\230\330=\353s\025\276\000:,?\342\261\037=\304wB\276\020@\032?\377\347\360>\201&\n\277\342\221\370<-C\374>\302\372?\276\035U\375>\347o\262\276W\354\377>\360\212\300\276A\324=\276K<`\2768\366\254\275A?\035<\321?\301>Nz\337=\2652\261\276{fi\276o\360\005\277\027\237\n\277\321yM>\003&p\275x\013\204\276tA==\333\304!\277\340\240\275<\353\250\332\276\332\003\215\276\314^\266\2758HH\275\022N\013>c\356\272>\361F\346\276\344\241\257\275t\357\221>\332\003->\004\3507\275C9\341\2760\273\207\276\207\304\035>\327\244\233\275&\001\252\275\311\223\304\276\'1\210<\272\367\200\276\374\214+?\331%\312\276\250\215*\275\321\350\256\275vl\004\276\232w<>\244\2521?\223R\240\276(a\346\275\211)Q>\302\206\327>\\\2172?\016\273o\274\032\206\317=~\035\270>\336\310<\276\\\000\232<\271\245\345\276\271\3379?\020;\263\276\374\373\254\276]\376\003>\357\033\257\276\314\361\n\275\004V\036?\254R\372\274<\240\014>g\233\273>\025:/> \360\200=\2068\026>$\235\201=\317\367\213\277q\254\333\276\275o\374=\270\314\311\276\316\374\332\276\210K.\276\345\320\002\277\352[\206\276\310{\035\277/\243\020?\310\352v\276wg\255>\245\240\253>\314\321#=.;D\275g\233\373\276\207m\253\276\205%\316\276\354Qx>\307.\221\276\375\331\017>\253&h\276-x1\276\320a>=\307K\247\276\213l\347=\327\300\246>\n\334\025\2749iP;\302\207\262=\274?\036>=\362G\276\340\200\026=}\263\375>G\314\314=%XD\277\324C\004\277j\023\007>\263$\020\277\214\276\002>\257%T\277\354LA\276Y\030\202=\224j\337\275\203i\010?(\n\324\276\274?\256>\336q\232\276?\035O\276l\354\222>1\353E=\327\372\222>y;\362>\00541\276\301V\t>\203\335\010\277U\336\376>pB\261\276\334\327)\277\3745\331\275\341E\027\277\225\361\377>\316\000\227\274U\301\220?\016\275E\275=\017\016\276\026\207\203>\317\243\302=\335\357\020\276\321W\020>|a\002?\306\205#>\333\242\254>T\214\023>\360\332%\274G=\004\276\n\334\022?\352!:\276\251\3661\277\255L\030\276{\367\347>ZG\325\276\355\236,?VId\275\306\026B>a\303\363\276W\354\007\277~\000r\276_\357~>c~\256\2753\376\r\2775^Z\276\013\014\331=\002\274E\276&\252\247>%\314\324\276\221~\233\276\307K\267\274K\315\036\276\237\216\'\277\337\246\257>Z\360B\276k\267\005?al\201\276\341z4>+\030\225\2770\332#=K\345m\276+\207\226\276\372a\204>\t\026\327>\246\320\351\276*\221d>\2451\332\275\205\231\266\275\272\275D>?t\261\276\314\013P>@\036\260\273U\331\027>Q\210\200\274\333\206\221\275\2755p>\310^7?R\270&?\357\311\003\277\216u\001\277\322\343\027\276\353\305(\277\234\247\272>\240\375\210>$\325\227=:#\232>\006\330\'\276\313\240\272=&\0012\277\327Q\325=\353\250\"?\305U%>\244\374d>{\024\256\275\251\207h>/\206\262\276\320\325\036\277g\233{>\345\2703\276\357\000\217=\243\001\274=&\254\r=`Y\t\276B`\025\277z\344O>\210\364[=\264\253\320=5\265\234\276#\276\323>\345\320\222>!vF>\312m\233=\341b\325\2761\224\023\276,\324\212>\336\0021?T\000\234>\262\235/?\247\"U\275=D\203\276\341b\225>\231\201\252\276\222#\275\275\220\332\224\276\004\347\254>7\033\253\274\344\241o=\020\222\245>&\307]>\035=\016?\336\310\034?:;9\276\023f\372>\244T\302\275\005\027K\276\302\212S\275\333\205\006\276\021\031\026\276\300>\032\276\275p\347<\005\335^?\246a\020?@l\311=\177MF\277\372\270\266\276\250:\004>\022\275L\276\314\t\232=\272\275\324>-\354\371>\243\001\274>:\314\227\276\'\302\006\276w\2419>3\212\365>\007B\n\277Qf\203>\010\346\010\276Z*O>V}\016\277\037j[=\006\273\301>r\305\305\275\217S\244\2760/\240\276o\201\374?S\\U\276\273~\001=\375\301\200>\2613e>\244U\255<\270u\327>\010Uj>\215]\032\277\365\020-\277\346\\\n\277\377\312J>F\316\302>\312T!>\232\261\010>\363Y\036>\302\372\237\276\231\022\371\276|\'\306>\243#\031\276d#\300>J$\221\276R\325\224>\200}\014\277\253&8?\243\222Z\2761\006\226\275?t\t\277\"\253\003?\347\373)\276\230\372y\276\004\220\032\277\323\274#\276\232_-\276\242*\206=\370\303O\2758\272\312<>A\"=\275\251\330\276\325\347\312\276A\274\316\276\225+\014?`\002\247>\277\324o\276D4Z>_\322\270>\263@\273<f1Q> yg\275\216W`=9\2349>y-\327;_]\265\275JF.?\266J\030?\026\204r=\333\304\371\276@\336;\277\352\317\256>x^\312=\326\255\276\276y\257z\276\331_>?S\233\023\274l\004:\277d;\037\275d\222\021>V\232\264>\001Md>z\307\021?\363v\004>\334)-?\034EV<\365\326(\277Q\245\036?K;\225\275z\031=\277(\017\313>W\225}\276\302/U>\367\035C=\230\275\254\275\364\032S?\010=[\277\001\244\246>\026\373\223?,E2\275<\240T\277\267\321\300\277\023\362i\277\223\306\010?\366\321\t?\366#e>4\327\t\276Z*O\276I\327D?\203/\014\276\200\016\263=#\333y\276\010Z\221>PS\233>\0010\276>\301\305\232>+\373\356=?RL\277\353\226\323:\241\236\236=\203\370\000=\217ST>o/\331>I\200:>\255i\376>\254\305\207>\'\245`=\220\367\002?\243\222\332\276q=\212>YO-\274LT\357<\006\r}>5cQ>\273\017\300\276\321W\030?\227\305L\277\236$\035\276\220\275^>\237\260\324\276\261\374y\275\305U5?\200\325Q\275\224\023%\277\247\256\314\2767\246\347\275\031\255\003>R\n\212\276_\230l\276M-\233>\264q\264>\031s7\276lx\272>\243\223\205\275\233\003\034?\366L\345\273}\256\366=\332\033\214>\030\t5?\211\014\313\276g\n]\276\325>\235\276\341EW?\233=\030?pB\201\276\\\254(\276V+\023\276PSK\276\331\231B>\351`\335\276\223\306\010\276\341\262\n\275\356\010\007>\240lJ\276Q\367q\277Ae\014?\035\224p\276\343S\030\277M\025L\275\366@k\276\333\026\305>\316\215I\276\275\000+?3\376\315\276\026M\207>\255/\"\277\254\312\236>\273\233\267\276\334\364\'\277\216\006\220?\206Zk\277\3063\310\276r3$\277\3436B\277h\\\330\276\226&e=0d\345>\242\226f\275wg5\277\320\235\240\275/\0271>\257_\260>\001\366\221\276\214\370N\276\224\207%\276Q/\370\274\222t\005\277\n\205H\277\255\372\274>\23389>\233Z\026>\202\3476\277\356%\005\277x\356\215>\013^4\277\321ym>\025od\276\346\221/\277L\032\343=&\344\223>r\212\356\276\267\177\025\277\213\246;?S\221\232\276k\361\001?\233\346]>Ll\376\275\265\246y\276c\227\370>\327\022\"?-#\265\275\030}\245>l\354\002?#\3630\277\244\302\030>\344\203\006?\"O\022>\261\247\255>q\346\207>\247\256\034\276\226\004\250>a\032&\277!\002\356>l\004*\277\373W6>\342\257\351\276:]\346>f\024k>\313-m\276\303\360\t?\200\016\363=\006\r\215\276,}h\276n\243\001\277\360O\311=\220\335\005=\241g\303>\212Y\257>\306\341\214>j\314\332\272C\255\371\276\"7\323\276\325\227e=\252HE\276)\313\210?\230N+\275\t\303@=S\005;?I\200Z\275\330d\315>V\274\321=\235hW>\246\'L\277z\252\003>{1\364>\264\002\003\277\312\025\236\276\330\266\010>\362A\217\275\210\364\373>0\022Z>\301\342\300\276z\340\243=\363\345\245>oG\250>V\324\300>\326\034H\277\274\350\213>\331\231B\276e\377\274\274\366\227]?\362\317\214\275\206Z#?8\363\233>T\306\'\277\005\027K>4hH\276\235\200f=;\253\305\275~5\207\276\371f\253>\300_\214=\313J3>\001j\212>\030C9=\255\372(@p\"\232=\313\020G\275o\235\277=\007\231\004\276@\333\252\275\320\320?\276Uj\266\276\211\322\226?\263\037\316\272*\306\231\276#\025\246\276\310\322\007\276\221\234\214\275\350\336\013\277\255\300\320\275+2\272\274\'O\031\275f\202\241=\240\215\\\275xzE>\372\323\306=\226\347A>\033\205\244\275\355\016)\275\326XB\275S\226\341=\000qW\275\263)W\275w\370\013\276\315\344\333=\372\233\320\275f\210#>\207\371\222=\374\373\014>4\235\235>a\3744\275\r\246A\276\230i[>LT\017>\366(\214\276\253!\031\277\371f\333=\020\222E=\260=3\276\037h\305=j\373\227\275R\362\352=\'k\204\276;\215\024>\242\361\004=(D\240>\350\2447\276\346\313\253\276\247\313\"?6\037w>\002,\362<\214\365\215=\321X\233\275\250\247\217<\262*\302<K\253\341=\200\232\032\276\021\337i>\254:\253\274uX\301=\2554i>\356%\r\276\357\346\251;X\034\316\275\373:\000?9\264H>E\233\343\272\033d\242\276\325\256\211\274\347\253d\275\001\030\377\276\007_\210\277@\027\215=\224\301\321\274yu\316\276\270u\027\276qu\200=pC\254\275\372~\002?\256\323\230>8-8\276\035rS>RD\006\276\330\0171\274\242\264\367\275 \263\263<\376\n\231<\235\023\233\275\345\263<=\020\257+>O@\253\277J\230\351\275e6\230\276\001\275p\275iV\266\274j\030~>\241\3264\276\013\010m\2751\261\031\276l!\020\277\n\240\270=w\241\251\276G\217_>z\245\374\276\005i\006\276\0162\211=\\t\222=~R\r\276\342\351\345\276\253\222\010\275\322R\031>\207M\304=\366]1\276m\377\312=\006L`\274Dn&>\341\227\212\276\247\350\210\275\347\373i\276\245\207\241\275\300\227\302<j\326\276;\245\203\025\276\202\305A>\3538>\275R\'\240\277\221\362\023>\326s\362>\313\276\213>\336\260\355=y@y\276\023\272\013\275\247?\373\275\311\216\235>\343\210\225>\314b\"=\375\237c>\263\322D>\030{/\275.\252\305\274Nz\337<\020\006\036\276\tm9>\037h\225\276\354\372\365\276\224\301\201\276L\234\344\271\211\317\035\275vT\025\276\223RP>\377[\311\276\216!\200=\203\243$\2754,\246=\265O\207\276R\325D>z9\214=\375\300\265=\232\'\327<$b\272\276\\r\\\274\2240\323\275e\374\033\276\230\025\212\273\364\340\356>\347:m>\216uq>\346\221?\276\266\330m\274\361K\215\276t\352\212\276?\214\220=\312\303\002\277\'Nn>\350\023Y>2\255\215\275\224h\311\274\215\321\032>\275R\226>\360\335\306\275\353n\236\276\3063H\276\204*u>\267{\231\275\234\373k\275Q3$\2739\013{\276\\:\346<~:\036=\t\251\233=\370\247\024=\273`p=\312O\252\276-\317\223\276\331\316\027>fg\321\274\025\000#>\232\316\236\276\020\2225\277\225`\361\275\034C\240=\270;\213>%Zr<\211^\206\276\246\n\366\276\212\216D>\273a[=\262c\243\274\310$\003>\277\357_\275D\207\200\275\020\257\233\276\256\236s>\316\031\221\276\362\322\r>\024\t&=\315\004\303\273\020#D>\353\255a>=,\244\276\273\355\262\276\361\235\030>\223\343\216\276\3328b\276\020\314\021>\250\306K=\014<\207>\014\312\264\274\2760\251>g\017\304>\004\307\245=\007\353\037\276\327Qu\276f\210\343\275\003_\321\273\260:\362<m\0341>4G\226=\275\035\341\274%X\334\275\206ZS>u\223x>?o\232>?5\256>\345\325\271>#\203\234=p\261B>\265m\030=\232%\001\275\264</\276rP\242\276p|\r>b1\212\275\244\374\264>e\307F>x\227+\276}?5\276E\365V\276it/\277s\363\r=1$\207=\253\262/>\025\000\243>aq\030>\354i\227>\240\375\250>U0\232>\316\251\244\275\277Hh>\303\330B>\253\317\325<KX\273=\306\304\346\276p\261\202>\241\333K>\267(\003\277\213\340\177\2767\216\230\276lv\304\275\327\372\242>N\234\214>\313g9>\344N\001\277S\221\212>\315\036\350\275\201\t\314\276\274\221\311\276\t8\324\276\007B\022\2767U\267=\212\343\000\275\201\225#>\224\371\207=V\361\006?;\001\335?C\342\336=\323\206\303\273\243\314\246>\336\306f=\344Ir\276M\327\223<\202\034\324=TR\033@FB\213\2766[y\2756\345\032\277\334\324\200=a\303\203\276\017\356\016\276.\376\266<H\026\220=#h\014=\233 j\275\354\243+?LQ\256=\263A\006>\340\020j>\004\034\202>x\227+>\225\0166>\"\375\266\276\237\037F>qr\037\276_\317\327\274f\203\014\276]\371\014>\304\224(>\302\300\363\275\334K\212>u\260\316\276\036\341\024>\366@\353=\261\371\000?Y\213\217\276\350\210\234\275\215a\316\274DU\247;\347\035g\276G\005\256\275\314\013\020\277\273a\003?\326\255~\276\234\030R=\200b$\275\255\204\356\274\031s\027?\323\023\006?\020u\277\275\'kt>\316\307\365>\352\354$>A\232\221>\017H\035\274,H\203>\024\256\347>\366\227\025?T\035\362\2740\236\201>\270u\267>\027\360r\275\032\212\273\275h\256\243>\'f}\276\261\027\n\275\327h\231\275\316\213\023\275\005Q\247\276\202\305A\276,\016g\276m\305\216\276\272I\014>\310\322\247\276\240lB?\233\254\241>\350M\265\276s\272\214\276RC\273=4\362\271\275^h\256<\0358\227>c\013A>\334\021\316\275\204\226\032\274\341(\211\276X\034\216\276.\220\240\276\312\032U>\315\260\021=\024\313m\276\262\272\325=\205|\340\277\230\017\014\272\325\263`\275\306\371{>\366b\250>\254s\234>*\376/\275X\220&?\2451z>3\212\345\275\330D\306\275\020Y\204=k`k?\313\363`\276\330\323\376>\312lp\276\020\263\027\275\350j\213>\t\025\\=\211\\\260=\002\267\006\277\260\256\n=j\204\276=F\261\334\275C9\261>\335\316\276<\211\265\350>@M\r>\235Fz\276C\312O=]\341\035>]\334&>\020\314\021> Aq<\322R\311>\323\301\312\276Yni\276>!;=\351}c>\242E\366\275\006dO>\202V >{I\003\277\377\312*\276\217\374\001\276e\251\225=\022\203\240>\t8\224\276\210\364\313>\032\206\317\275\332\002\202\275\311\255I\275\033\201\010?\024\226\270>\007\316\251\276gD\371\276J]\262\275\316\245\230=F|\207\276]3\231\276\223\033\245=D4\332\276g\355\266>K\345\355\275\371\334\211=\221\270\'\276\272Nc>\213\375E\276\301\213\026?q\003\036>\377\312J>Y3\262\275\212\034\202\275K\315~>\236\007\367=\377\262\373>7O\205>\253!\t\277o\323\257>\374r&=\270\006\266>\2135\234=\374\271\262\273y\0364\277\352\004\224>Cs=>\211\007\324\275\252`\344>\\w\343>\006\016\250=\356|\037>\026\373\023\277\335\3153>\007\353\357\276\277\324\317=\253[\255\276\0319[\2772\000\324\274\000\000\220>\265\340\005>s\021?\276\001\0238<\032\300\253>\003`\004\277\226\"\231\275\321y\r\275B\t\263\275)\006\010\275%\037\233\275c\227\010\277h?\022\277\375\331\017\276\005\300\230\276\261\026\257\276`s\216\275\263\007\212\276R\355s>\275\000\373\275\334\203\220\274l[\324=\016\222\364;\004\342\305>+\244\034\276\033\234\310\275j\301\013>\220\026\347\274_^\200\276vO^>\002\016\261>\236^\211\276d\351\263\276n\243\001>\323\301\252>.8\003=\256\r\325=\035\255j=\206U\\>&\374\202>.\3472>{\210\036?j\023\007\276qr\377=\307c\306>XU\257<Id_=\207\334\314\275:\257\221\276\202\377\235\276\005\243R>\251\300I\274\005Q\027\276\330e\270\275\177\331\035>\303g\313=\023}\276\275\246DR\275\213\300X\275\266\271\241\276\005\250\351\275\255\206\224\276U\030;>\225\267C>\352x\214>it\177?\207\371\222\276\2068\306\276\032\206\237\276\203\300\232>b\241\246\276h\226\204\276 \2278=\221\'\t>\200+9\276\200\267\260\276\360\277\325=\307*%=\215\356\360>eS\356\2760Lf\276\203\300*>l\257\005=$\234\006?S\221*\276\327\206*>z<\210:\327\206j\276\341\013\023\276y\006m\276Ll^>:z\314\276\007|~\2762\034\217\275\310\265\261\276\250\343\341>\n\334\032>\254\342m>\217q\305\274\246\362V\277\037\235\332\276>\005P?bJ\204>\027\274\350=,\267\344\276\331%\"\277\222\\\016@\222t\335\276K\352\244>qUY<\223\035\233\275/\243\330>>\256\255=V\r\002=\222t\025?\252\202\321<\356=\\\276\346WS\276\233=p>\276\237\332\276IK\345=\242\264W>xze\276e\213\204\275\346\221\177\276\306Q9<\350M\305>aO+?\330\330e>\035rS>GZ\272>\355\236\274\275\371I\225>\273|\313=\346y\220=:X?\276\367\314\022=)\257\225<\262\364A>\241\326\364=\314bb\276\211)\321=*\343o\277Tt\344=\200\020\311\275\027\324\267>\364\370\375=~\306\225\276\204\022\016?Y\375\021=\031\217\222=K#\206=#\025F\276\315XT\2767T\234\276c\3214\276=\']\276\253!1>\263A&=\032\300;>\352\004\024?T:X>\\\217\322>\361)\340\276\272kI=\207P\005>)\"c>\317\203;\276e\217P\275X\250\245>>\332\356:\330\365k\276\344\240\224>\333\375j=5)\005\276\334\364\'>\361\364j\276u?\247\274\340\241\250\274\033\236\236\276\264qD>\226x\300>CV\347\276\357\003\260>\237\345\t\277\254sL>\254s\014\275\364\211\014\277\343\343\263=\300!\324\275mV\235\275\265\303W?\255\027\223\276N\016\037=X\255\214\276\023\nq>\252\016\231=?\306\334\276\220k\303\276B\262\300>\244\210\314\275\220\2408>\247\\!=:#J\276,\203E\273q\003\036\276k\266r\274 A\001\277\212\256\013\275\346\002W=\221\325\355>81\244\274#g!=\201\007\246=\377\2255>\263\315M\276$\326\202>\220\203\222\276\032\243\025\276\025\221!>1\2619>T\254\232<\242(\320=\023\270\025?\240\032/\277\\\034\225;\n\200\021>cDb\275.\312\214>Xi\034<\240\303\034>\327\333&\275\002\016\341\276:\351\375\275\035\346\013>\373\256\310>\270xx\275u\002\272\277\376\324\230>\260\311\032\276\317\201\345\274\351d)<\003w\240;5F3?\324\267l>\235\365i=\327\372\302\275W\tV=\256\201\235>\345\r0=}\2566\276\330\016\206=8,M=\261P\253\276\"\303\232\276\252\361\262\275\301\033\322<\215\200\212<\332\255\305\275\352>\260>0\273\347\275\367\001\250\276\330\323\016\277\242|\301\275n\300\'>\035 \350>\256\365\005\276c\271e\276\037\205\233>\264<o\276]\247q\276Hox\275\264Yu\274n\024\331\274 \263\263\275\034\231\307\276\010;\305<@\301\305>\275:\207\276%x\003\275\351+\020\277/\335\204\276X\220\266>W>\313\276\207m\233>\035r\003\277t\322\313\276\367\001\350\2760\327\202=\341b\305\276A\274\256>\232_=?-\317\243>\220\210\271>\006L\000\276f\240\n?\306\3414?\364\032\233\276\307h\315\276J^\335\2754\242\264>\327\244\333<k+\026>\002\237\337>F|\347\275\020\314\321\275\334ci>\324\2027\277\332 3>P\252}=\017c\222=?:\025\276\007_8\276\360\277U>]\247\201\276\326VL\277h\\\230\276\324\361\330\275\215\356\240>\002\324\244>\215\177\177>\2276\234=\273\232\274\275F\231\315>-\262\375> \2633=Gv\205\275\334\r\242\274&S\345\276\215\227\256\276+Mj\276\242\234\350\275\373t\274\276\266\370\344\276,}\330>\301\255;\276@\367e\274\216@\254\276\216\001\311>\201\262\311>(\017k\276\321\350\236>\300x6\277\314]\313<\310\315p\276sI\325<\266\333.\276\005\213\363>\250\332\270\273\350\237\000\2766\002Q>\002\270\271=\2505\315>\337\265\025<\300\262\202>\317\370\276=E/#>\276j\205>\324\361\330=\200`\016>o\323\257>`YI\276\207\333a\2752=\341\275\277\016|>\335\014_?\215E\243\276\315\222\200>I.\377=\371\240\347\275\242\325I\274\324C\304>\n\272\215\276\r\343\256=a\032&>*:\222>\260=\343\276\002\323\251\275.V\014?\370k:?\374oE\276n\206[\276\265\025;\275sh\021>\247\263\263>\373t\234>0\360\234\276A\357\r\275*W8>\257_0\276\370\302\324>S\353\375<\204\201\227\276\275\214\302\276g~\365\275h V=\252`\024>k\236c\275\300\004N\276\353s\025>\321?a>\347\214\350=;\250\004=\352\t+\276>\355\240\276.\312L\276\333\304\371>Y8\244;_{\266>\003&P>V\267\032\276o\360%\277\377x\357\275\263$(\277\033\236\022@\330\360\224>\002\237?\276U\030\333\275\222t\335>\216u\341>:z<\276\235.\353>`\223\025\276\240O4?[B\236\275p\353\236>\365\271Z\276\350\336\203>\324H\213\276=~\357>\023\325\333=S@\272\275\026j\225\277\035\217\211>\033\022\247\276\021r\336;\033\273\004>\032\027\276\276\301\250\364\276dC\022<\216\036\037?!#\240<\242z+\276\261m1\276\\\311.>\347:m\276\221\325m\276{\367G\276\t\371 >\004;~=\004s4\275b\333J\277=,\324>\034_;>s\272\314\276\253&H>\224\336G\277l\262\266>\335{\330>f1\361\275\375\2074>!\310\221>\2760\311>&\001\372\276\311\253\033?\263\265^\276\007\323\020\276\336\223\227>\341(\371=a7\014\276\204\275\t\275\214\204\366=\370pI\277\220jX<Z\022\340\275U\334\270\274N\234\314>\321\"\253\276\265\013\027\274D\375.\275\337\211\271>\221\n\303>*t~\276\312T\t\277\036\376:?\231\022\211>;p\016\275\014\006W<\025\375!=\211\322~\276\235c\000>\n\327\243>P\031\237\276\233\033\343>{\210f>\304\316D?\211$\312>\354\335\017\277\345\320\202\277\273\362\331\276w/7\275f\242\210\275\"\216\235\277q\346\327=\365J\221?\363\310\357> \r\247=\330\201K\277\343\245\273>\231\022\251>\013\357r\276\352!\252>7p\207\274\273a\253>j\274\244\276\346\256}\277\363\223*>j\244E\276h\221\355\275\377\t\216>\007\231d>P\252\215\276~:\026\277\031VQ>g\325\347\275\340\204\"?]\230\026\273\204\273S>\025\221\t\277\006Ku=\244\2452=\277+\202>\250\251\305\276\205\'t\275\273\032\017\273\253\353\020\275\305\033\031\277\316\031\341\276B\350\240\274\0049\350=`Y\211\276\365\204\265>\256G\001>\257\265w\274*\221d>\007\360\226\276\"\303\232>\242&\232\275t\3579\277\375\332\272\275Uj\306>\222\261\232\275{\274\020=>\350\021\2770*Q?g\n\r?a\032\006=\272I\024?\343\307\030\277\315;N>\270\257\033\277\020Y$\274\367\257,\275\261\334\322\275s.\345>X\3470?\261\3718>\300\2622\276\275\251\020?\235F\252\276~t\212>\367u\240?b->>7l\373>$\356\221\275K\037\312\276\325\312\364>F\316\262\276e\374\333\276\230\243\007\276\305\376\222>\001\0238\276\221a\225\276\337\370\352>\222?\270\276$\234\016\277\017\227\274\276\303\273|>\017\234\003\277\225\016\206>\003w`\275\345\325Y\276\305rK>v\211\252>\265\375\213\275y\254\271\275\347R,??\221\267\276 {\375\275\353\002\036\275\003}\022??o*\276\n.\206>?tA>\177j\374=)\263!\276\351&\201\276\275\345*\275C\034s\2770\360\354\276\305=\206\276\340-\320\275\224\373\215>]P\217\2763\341\327=\330\273\177\276\214gP>b\020\220?\204\330\231>\303\323\013>+\366\227>\201\261>\275p\010\225>\351\232\251\275U\336&\277_|\221\275\342\222C>0/h\277)\355-\276\005\374\232\275\373\313\216\276\361F\266>\273\320|>\232w\034?\336\005\212\275\353\342\206?~\303D=N\227\245\275\035\311\225\276H\371\251>c\t\253\275\215\267\225\274n\301\222=5\322\202\276\270\035\032=D\250\342\276\376D\305=1?\267<k+\206\276\3750\262>\2451\032>\354/;\276\251\373\320>/\025[\275\210,R<\222tm\276Tt$\276\275\030\n?t\265\265\276\316\215\t?I.\377\276\027F\372\274\317I7\277\235\272\022\276\375MH\276d]d?\031\000*\274\031\377&\277,e\331=\035\217Y>@\331\024>\177\023\372\276/\206R\276\265\246\031>\377x\'\277\3436\332>@\023\261\276\\Z\315\275\222=\302=F\231\355>\253>\227\275)\355M\276\005\213S\277\276\243\306=\342;\021>\240T\373=\237<\214\276o\3306\277\036\334}\276a\216\336\276G\254\325\2769Eg>\350\336\343\276\006\236\373\276\355d0>T\214S>\230\243G<\360Q\237\275\217\307\334>\205\320\301<\310\353\301\275\334\272\213>\r\375s\276\226\347\261\276\246\233\264>\032\213\206>\212\037?@M\333/?\230L\325=HmB\276\331\353}\276\241g\263\276\347\032f=_FQ>\'1p?\334cI>\370pI\276P\252]\276\333\370\223\274\210\204o\275\234\207\223=\017}7=\345aA\276\031\000j\275)@\224\275\324\016\217>)\226[\276\347\030P\276P\000\205\275\032i\351\275V}.<\360\371a\276\3127[\276\207\304\255\276\254\320v;}\256\266>\033\330\232>\313\271\024?\n\277T>\325\317\213>\355\330\310\275`\223\365=M\326\230>\325\0041\276\214\370\316=\034|\321>$&(<\037\2728\277\354V\005\274DQ\200=\"\246\224\276\335\321\177\275\016f\223<\017\271\331\275\024\005\032>\211)\361>\3024\254=;S\230>\326\377\371=\221\362\243\276\320\362\374=\217\336\360\274/\206\362\275\275\340\023=\342v\250=\351&Q>U\301h>\331%\352=D\0274\276b\333\202>\230\027\340=(\017+>\223\306\230>Y\243~>\221\326\270=)\313\020\276\217\252\346>C\004\\>\177\336T\275\246\322\317\274Q2y\275\374\336f\275\325\262U\276\303d\332\276K\310g\276\300xF>\345a\001>s\364\250\276T\251\271>\244\251^\275\010X\213\2754\327i\276U\265\356;\212<\t>v\032\251=A\325\310=\220k\223\276o/\211\276\260\346@>R\233\000\277\222y$\276\377\t\356\276\t\212\257\277\354.\020\275\232\231Y\275A\020\200=\314yF<>\256\275>J$q\276\036m\034>\201>\021>yu.\276S\\\035?\271p\000\276\031<\314\274W>k>\031\3428>a\340\371=\211A >}\"/>P65\277\327Q\365\276\307-\306=\356|\217\276\320\270\260\276I\235\000>G\346\021\276\326\034\340\275\334,\036=\262F\335>\273\'\017>4\272\203>z\374\236\276Z\324\247=\277CQ>w\370\353\276\326\220\230>\263\014\221\277{\203\217>v\305L=\370p\001?\331\224\213>]\300\213\2757\340\363\276\247\005\217\276O#\275>\350\274\206>5\r\n=(,\261>\037\242\201>\030\356\234=\335\316>\275\324\202\027\276%z\331=\377\004\207>\003\266C\275\373!\266\274\245f\317=\221G0\275\230\243\007\276\376`@\276T\000\314\276)\005}>\301\035\250\275\206\302\014<\334.T\276\014\\\236\274\313\020G=\266\241\242>\354\302\017<.U\211\275\322\3736\277\033\330\212\276\010s;=T\214\223\276M\333?\276\024\320D\276\345\361\264=\211)\021\276\354\300\271\276%\002U\275@\331\224\2766\002\261\276\036m|>\324b\260\275\221\'\251>\267E\371>\221\270\327>\366\355\244\274\3539\t\276\0358\007?\2720R<\202\255r\276\227\217$=\031W\274=\2073\237\276\302Q\362\276\006L >\223\214\214\276YO\255=\267\227\024\276\306\304f\2768\276\266\275\342\"w\275[\316\265\276U\207\334=\273\233\'\275\r\373\235=7\216X\276\316\245\270\276e\374\273\276\313J\203>b\204\020>\3642J\276~R\215\276}\263\375>\307\270b\273.\255\006\2762 \023?\221\362\243\276\373Wv\276\274y\n\276\210\023\270\2758\370\302=\231\202\265<E\361*\275DQ\000>0\330\315\275\370\337J\276\211\230\262>*RA\276\003>\257>3\334`>5\'\217=N\270\027=U0\n\276=~\217\276\017\264\002\276\315\344;\276\367[\273=_\357\006?\3578\205\276cz\242\276\215\r]=\224j\037\276\271\245\325=\t\371\240>B[\236\276p}\030=\367\006\317>*+\027\274\307\2759=\372\263\377>\342\0376=\250R\323>@j3\276Zb\245\275}\313\374>\310\317\306=\344\331e\274\220\210)>\342\376\310;4\327\331\276\321\007K==~\357\276\334F\223\276e6H\275\314\356\311>\355\330\270\276\345{\246=\256\022,\276(\'z\276q\217e\276I\235@\276\330\323N\276,\324\332>\246\361\313=u\037@>7\211\361>,\237\225\276\\\254(\276\2652a>\351`\215\276U\337y<Z\273\355\275\361\021\221\276\274\"\250>\250\035\276\276\006J\n=\257\010\256>V\363\034=\230Q\334\276\024\\\214\276\260\346`\276\206=M\276\225`\201>I\327L\276\177\301\356= \262\010\275Ql\245\275\217\212\377\274\t\371\010\277\\\252\222=>\355\240\276\365\333\207>\027\274H\276i\000\033@\363q\355\275\251\023P>\2549 >|\270\364>\210\272\217\275o\326`<<\237\201\275\354\300\r@\203n\257\276\020\314\341>L\3030>MM\202\273\361c\234\276\003\354\303\276\257B\212\276\2446\021>5\007\210=\035\217Y\2761]\210<\3019\323\276{14\276\347\365\314\273\374\000\324>\320~$>\263~3\275\277\200^\275\263^L>3\026\215>]\376\223>\000\346\032\275\n\272]\276\347o\002>7\337\010\273/\031G\273\356\010g\276R\201\223<b\273{=Q\210\340>\013\213\033;.\377\001>\222\\~>\243\221O<4\272\223>\237!\274=X\034N<\362\227V\275\250R\263>\257\n\324\274\260\000\206=1\353E\276\364\212\'=\305\0339>I\200\032>\363\377\252\275L\375\214>\227\034\027>v\305\214<f\210\223>\237\315\n>\252\016\371\276w\370k>\206 \207\276\337\032\030>\314z\261\276\241g\243>\250pD=\357\037\013\275\370\031\027\276\346t\331\275h\313\371\275\246G\223=\242E\226\276\363v\024\277\217qE=\350j\333\276,e\331\275\177\244\210\275<\240l>C\220\003?\250\035^>\t\371`\2764\017\340<O#\r\276\323M\202\2754Kb>f\202a\275\235\021\005\276P\337\n\277[&C\274w\235\215<G!\t=6Z\256\275<\204\221=0e\340<\320~\264>n4\020\300\250\251\345=1\006\226\275\032n\220\276\336Y{>\312\245\221=\003\t\212\274t$W>\203\023Q\275\231dd>\024y\262\276;\302\t>,.\216\275\265\211\023\2769\271\337\276r\244\263=\0265\330=\3171 \276\221D\277>\221\270g\276\316S\335=\211\230\262\276x\014\217\273\322\251\353=PS\013>5^z>\223\306(>\264\222\226\275\212\253j>B$\003\275(a\036?9E\227>\304\353\372\275k+6>5\265,>\024=p\275T~\010\274TT\275=\365H\003=\003\t*>\227\355y\272\237<,\276\356B\363\275y\304\215;\025\000\203=\316\374*>F\"Y\273\334\203\260\275\350\366\322=\362x\272\275\275:\007\276\225\361/\276\014\310\016\277&r\301\274\265l\235>r\334\351=~\030\001>\0260\201\276\250T\211\274\3045\010;f\203l\276?\306\334=\307\361\303<\025\217\213=.9n\274j\023\007>y\353\374<\325\004\361>\346\313+\276\354/\033>\322\306\321=>\005`\276t{\t>\251\366\211>\022\366\215=D\372-\276+\244\034\276\207P\005>\241\204y>\212K\237\273\010\310\227\274\326\343>\274u\037\320\276S\263g\276\027*\177<\3019C\276\264\345\254>\034\353\"\276{g4\274\351\321\264\275\264Y\225>\313\234\256\276\3705R\275\337R\016=:z\374>\305g\2729m9W>\343\372\227\275\250s\205\275\256)\220\275\033/\275>\266\205\347<)B*=\235\235\274>:uE>{\210\266>N\227\005=\020\3517\274m\347\373\275e\245i>A\274\216=\301\306\265\275{\332\341=>\263\024\277\255\246k<(\'Z>\240\340\342\275^\354\007\274\022\275L>\373Z\027<\376C\212>o\323\237\276\333\205\346=9(\241\2769(\301\276\342X\207\276\226\004\250=`\006\343\274\305 \220>\314]K>Nz\337=J\357{>\360\334\273\276\226C\013\276\305_n\273\3333\253>\231\365B\276\207\335\227\275?:\025\276\302\206\327>\325x\211\276\027\266f\275\353\002^\275\016\020\014\276\263\322\304=\212\037C\276\032\372\207>\305 \300\276K\002\204\276\357\003p\276\334)\375>\3436\212>5\357\250\276h\350\337=\310{\025>G\034\262\275.\377A>\326\375\243=\275\306\216\275\215ES\276\332\311\340\274\211{,=T\214s>\303*N?\313\204?\276(~L?\226x\260>\356|\377\275{\332!\276\345a\001\276C\305\230>p\225g=HP|>\356]C\275B[\276>\253\355f=C\305x>\"\375\206>AG\253<yXh\276\236{\377\276BC\177\276b/\024\275\3647!>k\232W\276?5\236\276\2446\021>\004\004S\276GZ\232\276\337\213/\275\236$\335\275<J\245=Q\275\325\276<\327\234:\333\205f\276\255L\210>\'/r=F\323\331=\301\310K=-\t\360\276\222\227u={N:\276O\257t>\367\344\341\275\242\264\037@Q\016\013<\325\312\204>Z\273\r>\331\353\275>\306\206\216\275\264tE\275\240l\212>\320\325\346?a\216^\276\033\201\210>\253@m=X9\024\276\335\007@\276\361)\260\276a2\305\276\320a\036>\'\302f>S\263g\276J^\275>\350\366\202\276\336\037O\276\227\220o\276V\361\366>\321\226S\276C\377\204>\203L2>]k\217=\321\226\203>\360\213\253\275\225\202.\276\242\2647\275\326n{=\005\266\224;.\342\373\275\316\302^\276\037\370\230\275\025\213\277\275\202\305!>\362\014\332\275\266\363=>\263\'\001=<1k\275\354i\307>r1\206\274\013\233A\275\305L\354\273\233\376l\275b\326k\276\0370\257=\215\321\272\274\362\007#\276\2720R=A\363y=\004\342\365=F\261<?\177\206\267=4F\020\274ZG\345>\266\276\010>77F\276\246D\202>%\\H<\024\320$>\021\374O\276\016\370|>`\253\224>\230/\357=K\260X\276*\037\002=\301r\004\275\364l\026=\226[\332=\226&\245\276\001\206%=a\211\017\277>\350\331\274u\310M>ob\310=hy\016?\202s\226>4\235\215\276\323\371p\275\224\023\215\276\306\245\312=%;\326>{1\204\276t\007\261>\330d\315\276\370\211\203\274\017\227\034>\226\347\321\276\t\251[\274\032k?=2U\240\276\261P\233>\203Q\241\277\001j\312>\206\217h\276=a)\2769(!=\231\360\013>\027\202\314\276$\356\261>\037\236\205\275q\311\261>\356\230\232\275w\276?>%A8\274\227\253\037<\316\215i\276\327\372b>`\312\200\275B\223\304<Z\360\002>/\370t\275p\260\227\275&p\273\276\212\260!=t{\t>\365\271\032>Y\213\317>\343\245\253>\245\024\204\276\004\347\274>\224\023\275>`\037=>\224\274\212>\330F|==D\303\2754I\254\274\362^%\277\375M\330>}\005\271>N\271\002\276\003\357\344\274\315?z\274%@\r\2771_\276=\t3m=\241H\367\274\3125\245=333>\250\000\030\276D\210\253\275\200+\311\276H3\226\276\242\264\027>\317Io\276j\027\263\275\256\323H>\007|\376=\254\312>>o\r\274\276;\2154\276\235F\212>\363<\370\2755\3222\276p\261\242\276\212\223;>N*\032\275I8\343\2739\231x=d#\200>\352\354\004\276\000V\207\275$\177p>\356=<\276l>\016>A}\213>\232w\274\275\023\362\201\276\277\267\271\276\322:\n\276\321\313\350=\305\253,\274\032\213\226\276@\371\273\275v\032i\276\226!\376\276\205\262p\274\301S\310<\270#\004?\306\302\260=C\034\013>S\026\317;\315;.>\373\350t\276\300\225\354<\372\320E>\001\366\261=\322\361b;o\r\334\276\332\220\177\275H\334\003\276\0221%=\200\361l>\007\233\272\274dXE>\221\320v>>\\2>*\2513>\233\033\343\276\007C\235\275&\252w\275YL\354>\031W\\=\034\266\355\275\272\332J\276\306\334\005\277\010rp\276\275\234#\274\342\257\t\276\303\343\021;\334$\253;\017\320\235\275\331\224\233>\316\031Q>\207\026\211>\030\317@\276\272\275\204\276\373\221\342\275\027d\253\275\227\220\217<\343pF>:]\306>\355*\204=\305\033\031>\374\373,\276\254\305\'>\210\021\002\276!\004\204=\321\005\365\275o*2\276\376\363\224\275\"\303\312>e\215\232\276\305\003\232\276uY\014\275<\334\016\275\030!a;\270\315\264\275G\036H=\373\350\004\277\335\014\367\275\214/\032=XY\333:\300c\323\273\247\256\034\276\363T\227\276\004\347\014>Y\206X\276\334\327a>2\343\255\275\310\263\313\275\017(\333=\371\240\'=\177M\326\275\327M\251=\273Du>w\363\024>\234\3715?KY\026?\033\r\260\276y;\"\276\250\214\357\276:u%\276Y\027w>\007\010&>\024_-\275\2760\001?CV7\276\356|\237=\361F&=`\223\265=@\3731\276\234\277\331\276]\212+\276e\302o\275\346\313\013\276\177m==\257@t;\261\245\007\275\240\302\221=\005\206l\275K\261\243=\343\376#=\253\354\373\275Z\330s\276\250\251e\276?\221\347=\217\302=\277\212\002}>\225\267\303>\304\353\212>pw\016?9\321\256\276\363Tg>\310\322\247\276\365\241\313>\245\240\273\276A\202\252?\326\250\007\276\224\203\271\275\3647A>m\250\350\276`\260\213>*t\236\276\312\025\356>\246Dr>\252\202\201\276\361K-\277\352!Z>\255\300\200>\232\266?\276\022\245\375=z:\262;\014v\363\276\034B\205\276\024?\306<@\030\370>\373\"\201\276`\352O\277?W\253\276\325\225\237>\272I\214>\223:a>e\031B>\314]\033?\252f\326;\301\034\035>D\372\205\277\"\216\365>\355*\244\276\366b\250>\304Z\\>\016\025\203\276\002\237\037\277{N\n\277\203Qi\276\3475V\276\337\032@\277\371I\025\276:;\211\276\374\373L>\220\367\212\276D\335W\277\\\000\032=c\264\376\276\272j\236\275b-\036>\244\307/>.\347\n\277\177\244\030?\353\213\204>\344\024\035\276 F\250\276{\332a\276D4\212>(\270\010\277\336\253\366\276\022\302\223>_\360\311\275\230\374O=\351\020\270=\357\003\020>\275\032\240<t)\006?\014\007\n?\373\350\024?\014\352C? {}\275\274\2260>\367\3142>\004\255\000\276>\\\262\276\342;1>k\2358;\230L\225\276\371\332C?\305\2547\276\004\306:=h\263\212>\231\273\366\276^K\250>\270;\353\275\\r\334=\300\317P?\312\032e\277m\312u>\272\332j>0\330\315=\260\376\007\277\213T\030>\350j\353\275\277\361\225\276\202\342\327\277=\017\356<\216u\301\276m97>\266\326W\276\n.\266\275\335\352\271\276|a\242\276c(\307\276\254V&\276\026\023\333\276\245\364\314\274\366\013\266\276\341\227\232=\002\274\265>Qf\003\275Ou\000?\032\027\006?\346\221?=\370\210\230>xb\226>\t\212\277>\241I\242=\027\267\241>5\007\010>_AZ>\315\3144\277\334\021\336>\241\363Z\276\207\247W\277\t8\264\276\022\241Q\275U\331\027\276\2657H?l\262\326>\\U\036\277\216?Q=g(\256\275\260\376\037\277\202\2135>(\2700?h\320\010?6\260\005?Ed\330\275\212\343\300<b\020x?\364\211\034\277\004V\216?(E\253=<\330\"\275\353\250\272\276\204\236\005\277L\032\033?\317,)>W[1\277\330\330e>~\035\210?\321\005\005\277~\030!\277\365H\243\275\032Q\252>5F\273>\306\371\003\277\376\230\266=\000\000 \276\2555\264=a\211\307>\016g\376\275]\376\003\276\211\357\224>\006\022\324=\000oA=\216v\274\275\346\036\022\275\251\3014\276\361)\000>\244p\375\276{\024\026??\343\302\276V\267\032?h?\002?\270@\n?H\371I?\"\250\032\275\267zn>\007\231\024?\342\036\233\276rP\"\276\3377\316>5cq>\220\210\331\276\201&\222\276\rq\354\276]\371\014>\206=\335>\026\336\225\276zp\227\276\025\000\013?\346\"\316\276\210K\036?3P9>c\227P\277h?R\276r\304\212>\004\347\014?\3333\023\277\300>\372\276\256\236\023\277\255\372\214\2762u\267=s\327\n\277\360\212\360\276\256\201\255>\370\245\316\276->e\276\316\215i\274\031s7\276S\256\360\276T\232\003<\356\010\007>y\351\006\276\357\311c\276<\275\362\276\300>\372=\332u\217\275\n\327\003\277\0049\230\276[\353\013>\272fR\276B\t\303>\350\274\306\276kH<?@\336\373\276\010<\260\274\314\013x?R\'\340=h>\247=N\321Q\276F\323y>\'\240\211>\347o\222\276\204\201g>1\224\323\2767O\325>2\2174?H\247N\276!\037\034\277\357\341\022\2756t\223=\251\366\021?\311\311D<g\n]>\036\247 ?R\362\212\276E\201\016\277\251\244\236?b\370\210>\322\230\377\273a\216^>\033G\214\276\\U\266\276F\226L\275|\'\246\276\274Wm\276\310\010\210\275\300\317\370\276KYF>\263\014\361\275\004\312\326\276\335AL\276\274?\006\277M\326\250\276f\367\364>\244\343\212={\203\257\275\374\306\367\276F%U>\274y\312>Z\201\201\276\241\024m=\344\275\352\275\"l\030\276r\264\231;\035\224\220\276t\354\240<4\242\214\277\010\346\350\275\007\010\016?\256\r\305\276{\024\016\276}\224\021=\030&\263>@\301\365\276.\342\213\276\350\244W\276\233q\232<\216@\274>\t\341\321<mp\302\275\325\315\305\275y\314 >c&Q\275j\301\013>\032\2504?EG\352?\274\005\"\277\315\2220\277\027\331.>\257|\026\276YnI\276\270\036\265>\252\0169\276\330\360\000@3P\331\275\210F\017\277\257w\027?\3225S>C\342~\276\247\313\242>\222\221\363>+\336(\276l\004:\277\004s\324\276\275\033\313\275*\214\255=+5{\276\260\346\000?\326\255\336>]\212\353\275\375\202\315\276\237\304\014\274\333R\207\275\'1(>\270\255m=e\337\265=\356y\236=\253\347$?]\212\353=0\360\314>\032\372\027\277\357\214\226=\2402\376=\265\375+>\246\320\271\276\005n\255\276\030`?>eU\204<c\271\345=\304\231\337\276&\213{<\364Q\006=>\"f\276\307\201W=?\035\257>\245N\260>\345D{>W&$?\260\217\216\276YL\354\2760\201{>\rl\025\276\022\367\030>9%\300\275\306\341$\277\316\214\276\275Nb\000?|\017W>\004!\001?\264\260\227\276\327Lv\277\230nr\2768\363k>\201x=>\343\031\224>\"\216U?Y\243\336\2751\316\277\275G=$\2762wM\276\262\235O>\371\024\340>R\325,\277\320\355\325>TR\007?W[\361\275>\355\220\276c\013)?\310#\270\275\330*\261\276(\362\304>\030\262\372=\364\025\324\276\302\027\346\275t$W\276\242]e>\243\314F\277\243u\204>X9\024\276!\352\236\276pw\026\277Qk\302\277qU\031\276\326s\342\276\3711\346>\2073\317>\321\"\233\276\344,\254>uv\322>N\264\373>\241\240\224\274\342\3515\276(c\274=\27164?\346\256\005\276J^\355>&\033\257\275Ql\205\274\203\206\376\275%\351Z\277d\314\215>\211A\340=K\315&?\234\247\252>xG\006\275\361e\242=A\267\027\2765$\376>\310\'\344<w\017\320\273@\023\001\276k\232\367\275\264\345\314\276}\256\366\276=\']>+\3311\276\342X\247\276w\022\221\275\225\223\032<\3372\007\276\226\354\270\276\356^\216\275M\2058=Q\203)\277\336q\312\276\240\375(>1\3236\276\367\222\206>\360m\272>@\366:\276\245\240\333=g~\365=\306\247\360>P\215\267>\252\361\322=\010\217\326>)\347\213;N\013^\276\315\314\214>\272\240\236\276\230\300\255\276r\376&\276^\242\"?\326\037\201\275\257\230\221=\361F\206>\024\314\030\275\022\332\322\276\026\023[\276?\035\377>v7/>_\322\230>g\327}\275(,\221>\345\320B\276\276\301\007?{\240U>\366@+\275w\241\211\276Yn\t>\337\303e>R~\322>k\232\207\276\032Q:\276\005\372d\276\035  \277\234\214*\275\023\017\250\276[\266V>\r\375[?\352!\n\277B\t\003\277hX\214<\276\301\347\276\216@\\\276}y!>\331\224\213>\206\311t\276\350\366R\276\353\213D\275\327i$>\221&\336\274\253\tB\276\360\212`\276\217\031\020\277Q\024H\277\276\207\033\277\tP\343\276\016\370<\275J\007\253>k\361\211\276\010r\240\276\214gP\276;\337\337\276 \230\033\2775\265L>\2073\377=\365\363\246<\372\355K\276\263^\314>\000o\201\276V\361\306\276\364\246*?\023aC\276+\301\362\276\347\214\200?\235F\232\276\036\341\344\276\275o\254>\355\365\356\275\027H\260>\"\251\245=\007|^>\266\333>\277\251\336\232\276\\Z\315>\376+\373>\311\253\303>\323\207\356>\233\346\355\276g\355\026\276\371\2755\277d\\\221\275vq[\275\002\324\024\276v\375\262\276a8W<xE\240>\037\366\302\274\254\312><\342\257I\276\222\226R\277g\017\244\276b\276\274\276\241\204\211\276J$Q\2770L\366>\010ZA>\342\315\032=\010\005%\2747T\214\276\361cl\2775\357\370=\207\334\014\276\366\227\245?)y\365=\203/\334\276z6\013?\311\223\244=o\331a\275w\025\302\276O\006G\276.s\272\276\317NF\275\022\210\247>`\310j>\243;\000\277\370\033\215\275;\252Z>Ic\204>\026\023;\2765\265l\276\010\001\271=\035\346\313>\356\316\212>\223\377\311\275\270\222\355\276\272\274\271<\375L\275<K\000~=F\317\255\274\034|\201\277\372\325\004?\207\302\'\275\301s\277\276#2\004?\213\032L\275\366\227\335<\346\226\306\276Ic\204\276\362_\240\274\323\245?\275\215E\223>\357\341\202\276\226\317\022\276\230\3353@C{\253\273&\217\'=3\213\260=\373\256\010<\205|\260\276\370\215O\276s\242\035\276\243\222\222?\030&\223\276\001\366\241>>\3550\275\310{U\276KX\233<\037\2777<!\002\016\276\324\362\303=\263\315\275\276P\001p\276\267\013->\317\367\023\276\254\312~\276\345+\201;\353\252\300\274m\032\033\275\220\367J\276\232\225m\275\214,\231\274\3232R\275\024\"\000\276&\375\275\275\235L\234=N\321\261>yXH>\357\003\320=RI\335=\014\352\033=$b\212\275\'\3325\276\004t\337<;\031\334=0/\340\276B\0062\275\330e\270\275\021\374\357\2751|\344>/\243\330=.V\324\275TR\347\276\020u\037\275\336\253\326\275k\233b\275\342\257\231\276\3328\302\275\325!\227>\320\263\331=\252D\031\275\275\251\010\276\304w\302\275\212v5>\257\005=<\213\3039>\215\264t>Ve\037>\362\014Z\276\271\245U>L\2526<\\\222\203\274Uh \275\203\027=>\351C\007?\2073?\274\010\260\310\275\341\177\313\276\215b9\275\236_\264=\307\364\304\276|~\250>\017\271\371\276\336<\365>\307\272\030\276\030!\254\276\271o5\274\225H\202\276E/c>\223\343\216>\245kF\276\345\362\337=\301\034\375\275\256\2739>+\354\263;k\020\206\275w\025\242>\231\365\"\276[\261\377\275\277}}>\342X\217\277 )b\276r\304\332=\371\364\030= $\213>?\251V\2763\303\246\275\230l<\275)\320\247\276#\330\270<>y8\276\376&\204>\303\330\202\276A\237(\276\020X\271\275\324}\000\276A\267\027>\033*F>\345\233\355\275~7]\274L\250`<\363\313\201:\023,.\277\001\337\215\275r\213y\275eS.>\271\301\320\274\255L\210\276{\024.\274Oi\016<1?7=I\235 >d\222\261\276\371\024\300=/\372J\276\264Y\235\277\'\245\200>\224\331\300>\030B\016\275\374\214K>\306\277\317\275\037J4=\333\026%\276\373\\\355<\200(X\275\025t{>\237\223\336=QL\036\275j\030^>\251\333\331\274\265T>\276 \014\214\276\205\224?\276&6\277\275\202\255\222\274\354\302\257\275;\302\311\275>Y\221\275\r\340\355=\270\222\335\275\370\215\017\276\352\222\221=`\037=\276iWA>\377@\271\274,\016\347=F|\347\275:X\217>\200`N\276\025W5>_\007\336>\236Ac>0\3622<\323;l\272\334\332\302\274\317\272\306\274-\356?=\321t\206\276\335{8\276\334\021\276\276Dn\006=\212\002\375\275\351\233\224=*o\207>\013\230\300\274t\231\232\274\271\337\001>\201C\350\276\310Eu=\232\261\350=S\263\307=*\254\224\275\273D\365\275o\236\352>\207\376\331>\261O\000\2755\322\322=\270\350\304\275W\351n\274\250\306k>~\343K>\361c\254\275\203\023Q\275~t\252>\336v!>OZ\230=\206rB>\332U(>v\375\262\276v\246\020>\363\257\205=\n\334:\276R\362*>\223\030\364\276\353\220\333\275\023\357\240=uv\022>\252c\265\275=\201\260\274W\262#>t$\327=\017\326\177\274B\226\205=\241\276\005\276\3748\232\275\332\003-\276\213\207w\274\2240\223>\251\274=>\022\373D\275e\250\312\275\265\025\373=@\023\001\277x\271\210\276\271\000\224=?\2140>\034\321\235=Lp*=6\260\205>:z|;\036\304\316\276rm\350\275_A\332\275\204\273s\276\303\236\206>\3726\263\273\221,\240=\212\037\203\276\202\034T\276\034D\253\275H\334\003>\207\027\304\274\226x\200\276g~\365=0\365\023>\254\034\232>uvr>F\261\034=\256\323\270>|{\027=\226\317\302>\361K}>Bx\244>\025\3066?g\330E9\337\370\232>\365\'\026\274\354\333\251\275M-{\276\247\003\231=\267b\037>\370\001\243;\356_\331=4\202M\275\320\320\217>U\023\244>\222^\024=\"\216\265>\371S\231\273\336\037\237\276\322\214E\275b\3631\276\323\207\356=\306\341\274>6s\210\275\310A\251\276\335\323U<\024\263^\276\036\026\252\276\263\230\210>\244\344U>\215\227\216\276\326n\233\276\276\237\212>\202\3128>\303\2366>*R\221\276\362{\033\275\314\265\250=~RM>\014\310\236>!\002\016=\332\311@>\326\037a\275\331=\r@\020]p>\364\025d\276<\275\202>\267z\316\275Qk\232>\202u\\=\'\210Z>L\246j>\303\330\242>(\233\362\276=a\211\275\016j\277<\230b3\273~R\215\276\300\005\331<2r\326=\240\212\273=?:\205>]\304\207\2761|\224> \230\343>\353s\205>\302\243\315\275W$\206\275\233 \212\276\254\250\001>.\347R>+\025\324<\266\241\"=\222A\356<d\314\335\275\207\026Y\274\017\234\243>\346\256\365>X\255\014>\n\237\255;\260\254T>\362\230a>\200-/=\023\'w\276\304\351d=\311\260j>\304\316t>\347\373\311=\367\351X\276M\237\035\275\227\255\025>aq8\276\022\367\030\276u<\306\275R\201\223=\237\345\371\275\177\334\236=\003}\302>Di\357\276\3638\214\274\034|\261>d\006\232\276i\214V\274\332\311`>\227\220\257>\2100\236=-[k\276\3025\267\275\001\373\250\275\367\312<=%#\207\276G!\t\275\022\244\322<\000\220\263\275\205\224\337=\307\270b\275I\330\267;\316\302~>\031\312\351\276\320\321j=\314E|\277\356=\254>\264q\004\277\253\354\273\276$\235A=\343\342(\275\031\036\233\275\327\027\231>\2034\363>\372\320\265\276\"\253\373>\305 \020\276\363\347\033=\317f\025\276-\262\r\277:#\n>\351\323j=\\\217B\276\n\327\243<^K\220\277\200z\330\273_$\364\275\213\026\300=\'NN\276\277\016\334\275\303,t=\220\217\314;\264\037\351>\243\351\254\276\020\257\013>\0221\305\276\202\213\025>\020=\311\275\337\3720\274\346\313K\276f1\021>j0\r\276\221\355<\275\205\317\266\275\365\333W>Dl0<\201\226.\274V\021n\275@\301%\276\030x\356\275\274\262\013\275\265\211\243>\341@\310=\023a\323\276\225\357\231\274}?\245\276hy\036\276\266gv>\310\014t\276k`S\277\277`W>\374R\177=\356\316\232>\362C\245=\'1\010\276 \265i>\262\237\305\275\201[\207>\222\005\014?\207\212Q>5^:\276m\305^>7q\262\276I\364\362\275\352\320\351\274\334\021\316=\020u_=\253\347\204>\230\335\003\277\213m\322<\266L\306\275!b\275\271rm\310\276\230n\302\276g\013\250\275P\302\214\276\336Y{>\'\306\215\273?R\324\276~t\352<\224\336\307>\211$:>\224\373]><\240\214\276x|\273=\350\207\221>v\302\313\275\n\237-<\023\017\210\276U\336.>&\001\372>A\361\223>\312\340\250>\330-\302\275\2240\243\276\245\024t>\245\363\241\275\031\347\217=y\221\t\274\330+\254\275\177j\034\276>@\227=\256\236\203\276\316\374\352=\234\026\334\276D\250\322<=d\n=\030[\010>\364k+\2757\303m>\317\367\303\276\340\267\306\273\301\213\376\275\247tP\2762=\341=;\337\317\275\223\214\334\275=I\272\276\242\234\350=)\352L\274\030&S>M\241S\276,H\203\2765)\205\276\316\337\304>\335\007`>\035s^\275\201x\375>\'\245\240\276\334c\231>\275\303\355<\243\351\254=(\362,?\200H_?\020zv\276Z\020\n=\273D\245\276\247\256<>\304\231\217>\341{\177=\20307\274\034\262\201\274\212\253j\276\302\243m\276\225\336\355\272\355\201\206\276\020Xy>p#e\275\252He>\267\321 \276G\217_>6\310\324\276\030\262\212>^\200]>\374\343%?#J\273>|,]>\241\020!>\251M\\\276M-;>\341\177\273>\237W<\275\310\014\024=\007C\235\275:\317X\275LQn=\326\250\307>g\362\335>\030\t\235><\275\262>Z\r\t\276\245,\263\276\262F\375>\010\311\032\277\033\236\006\277(\270\270>iop\276\357\033\217>s\272\214>\000\000\200\276[#\202;\272\275\004>\340\020\212\276\037\021\203>MH\353\274\303d\n>\262\177\036\273` \250\275mV\215>\035\004\275=\216;\305>\253\204]\273 d\264\273CT\241\2755A\024\276yu\016\276P\302\214\275\366\232\036=\372c\032\275\022\2030\277d\255a=\017\356\356\276\343\302\221>\354\212\031\275\306\027m<\252+\177>\357\003\240\276\274\352\301=#J\373\275\r\245v=\3058_>\377\t.\275c\271\305\276\270\222\035\276n\335\r=\261\304c>od^>\264g\340;\000\000\034@Ra\214\276/\372\n>\013)\237>&r\201\275\272h\3109\353n>\276M\370E\276\356\353\270?vT\305\276\277+\222\276T\342\232=\214\272\026\275@\336\353\276\216\351\211\274\220\367J>\235\361\275\275\306\026B>g+\253\271\321\350.\276F\353\000?\252\324\354>\256\273\211>\275\000\373\275\246\017}>\310\357\215=\251\301T\276\257%\344\276\344\275\232>w !\274\352\312\247>\351\016\342=\272N\323>OX\"\276\002gi\275\232B\307>m\250X\276\201C\010\276\364\340\316>\374\0303>\240\371\\=\313\363\340=\2721=\276\311=]\275{L$=Nb\320\275\254\250\001>\230\303\216=\257|v\276\"\375V\276\342tR\2755{\220>\213q>>\367u\000\277,+\215>\307h=\276\340g<\276\037\272 >uw\035\275\262\272\005\277\240\375h>K\\G=Ku\241\275\232\t\206=\340g<>]\341\315>A\202\002\276\351\361\373\275\261\026\237>\313\364\313=\005\246\023=\361\327\204\276\261\371\270>\036\212\002>l&?\276\001\373(>^K\310\276\352\354,\277\\=\347=\"\342&=\331?\017=?\221\'\275\343\373\"\275\325\225\317\276\203\373\201\274\331\261\321=\251\370?=w\206\251\2755\354w<\326\220\030\276\327\243\200\276\321?\201>_\265\362\275\361\272\256\276\220L\207<q\254\233>\372~\n\277\366(\234>G\003\310>\270\344\330>\215\234\325\276\0322^\275\0221\205\276\375\331\017\276R\017\021\276\rq\254\274\273*P=@\332\237\275\342\036\353>\03244>I\235\200\274\224\274\272=\\W\014=r\371\377\276\005\024\352<\023\'\367=\264\216J>\317fU\274q\217e\276\335\007\000>\366\013\026>\361cl\276\232%a>\224\372r\275\363\221\264\275n4\000\276\203 \366;N\227e\276\022\024\037?\273\270M>p|\355\274>\226&\277\026T\257;JA\367\275\310\352V>\rq,\276\275Q+=`\221_=\363v\264>\026jM>\270\254\002=qXZ\275zS\341\276KYf>\001\301\234\276\2657\250\276\366B\201\274\030x\016\276~\251\257>R\362\n\2763\033d\276|a\022>*Ra=jj\331\275\037\242q>n\372S\276\323\207\236\276\327\206\n>\207P%\276p\010\225>\253\354\373=\016-r>C\347\205\276(\325\236>\037\021S>V\237K\276\243\257\340=,\243\354\272\023\270\025>\230i\033>\370\302\344\276\346\366\334;l\314\353\274\354\206\r>\306\242)\276\013\014\351\276\365,\210<\2132\333=\212\315\367\276\245\371#=\226CK=\311q\207\276\275R\026\276G\311\013>\314E\034>\371H\212=l\t\001?\347\000A\276\2608\034>\2029\212\276\302\245c=\320\323@=v\3036\276\360\334\253\276,\361\000\275\333\247C>B\262@>fI@>n\206;>5^\272\276\005]\261\273\302i!\276\352\312\'>M\272\255\275 $K\276\336\037\317\276\'\024\322>\242\356\323\276P\342\363<\355\360\327=TR\347\275nk\213\275\333\026e\276\220kC\276\023d\244\275\217S\304\276\272\207\204=\032\250l>\3127[>\370\215\217>\200\237\021>R\355S\2761\n\202<\303\201\020\276\377\007\270=x\177\\\276>\263\244\274\215zh>\272\332\252=\031s\227\276<\300\223<V\237K>\34756>E*\014>&\374\322\275\247\346\362<\212\001R=<k\027\276\216#\326\276Tn\242<Y\027\207\2762\344\230\275\t\303\200\274\305=\366>\017\326\377=\005\250\351\275\034\316\024?\252E\304=\203m\304\275\366@k\275t)\016>]\026\323=\037\241\246=\204\r\357\276\007\316\001?\276\244\261<\024\257\222\275\273\267\202\275\025o\344\275\0010\036?\3063\020\277c\013\301<f\2758>]\376\203\276\206r\002\277)\350\026>hw\010\275\343\304\027\275\027ev>\237q\001>\362\355\335\274\373\313\316>;S\350\274-&\266\274k`\353\275\347\373i\276-[k\275t$\227><f`\276\201C\010\2761%r\276\241\204\331\276\336\260\355=6\267\235;\206\346\312\276qU\211\276\347\214\250>{14\276\342\314\357=\024\355*\276\243\257\300\275\255\275\217\275\340g\034>{f\251\276\230\300\355=I\2051\276\217\344\362\275\371I\205\276r\277\203\276\277+\202\276_)\013@0\330\025\277K\352D>\376``\2761\266\020\276i:\233\276\307\200\214>T\033\\=\243\222\252?]\341\255\276\371\240\007>\325z?\274AH\226>t\357!>\023I\304>\200\202\253>\205\315\300\275\356\227\317<\013{\032=\332w\240\273\334K\272>P\250\'=\202\252Q\275M\020\025\276\023f\032\276\362$\231\276\301n\330=L\375\334\276\265\211s>\220\024\321\276e9\211=\244\302\250\276\364\303(>F\261\034\277\344\203\336=\321\226\003?O\260\277=\262f$=\002\273\232\275\333\207|\275S\313v>\037\021S>E\r\266>#\333\211\276x(\n>\0265\210\276\353\214/\275\353\034\263\276\226\225F\276\004V\016\276}\313|\276\354\243\303>\261\247\035>\200\324\346=\235\327\310>\014\310\276>\007\264\364\274\353t\240\275\363\223\n>\274WM>\010\343\'\275f\203\004?z6+\276\0010\336=\345\264\207\275=\270\253>\257_P\276<\325\306\273\206\033\200\276?o\352\275\324\234\274=*\251\323=p\2669>\0011\251\275\262\270\177<\341\177\013>\236{\277>r\300\256=*\342t\275\021S\002?!\310\341>\361c\014\276\214\204V\276 $K\276\027\331.>^\020\221<OZx\275\314\317\215<\325\t\310\275s\205\027>\210\327\245\276\211\225\221=q\311q>\335$\206\276\340J\366\275\237\002\240\275c{\215\275H6W\275H\032\334<\213\032\254>?5\256\2764KB\276\227\213\330\276\022kq>\235\241\230=\0162\311>\0162\271\276\367\307\373=~Wd\276\265\246\311>GZ\252\275\226\354\270>\227\342\272>?sV=\n\272\035\276\253[\035>\376+\013\276+\030\005\277\037\200\024>U\244B>z6\023\277\224\023\315>\220\240\370\276\202\220,\276\2240s\276\314E\314\276$\321\013\275I\235\300>\203\243\264>b\332w\275\274\315[\275\014\037i\277F|\227\276\231\323\005>\237\350\272\274j\366\000\275\306\212\232\274@l\251=1\353\005\276h]\303=}u\265\275l!\250\276 cn>\320\263Y>\275\214\362\276\37502\277\265\027\321\274\256*\213>\372\355\353>\304_\203\276W\t\026>6\345\212\276z\245\354\275\260\310/\275\004\310\260\275\224\3011>\3644\300\275\201\262I\276\356%->=\325\361>\262F\375=e\215\032>,\234$<\350\022\216<J\322\025>\205\005\367<\004\347\354>D\206\025>\356-\233;\303-_=\312\211\366=p_\207\275N\227\245>\003&P>\206\347\305\275rPB<F\266\023\276\235\235\254>n0T<:\257\361\275d\006J\276\203/\014\276\022\332\362=~\214Y\276$E\244\275\300\225\234\276\361h\033?\271\307\222\275\376&\004?3m\277\276]\247\241>\265\246Y\276\324\r\264\275\277\201\251\275\357 v?\214\204\326>\003`\034\276\270\257\203\276wJ\327\276\273\320\\\276\361\361I=\304\316\024>\217R\211\274m\347\213\276-\225\367\275\035r\363\275\\Z\375>\216X\373\276\222\004\341<\272f\202\276lv\244<zS\021>\265\347\215;\013cK\277z\374>\276H\376\220>j\3369\277\272.\234\275|&\273\275y]\017?\031\342\270>5\355\302\275\362?\371;\206\217\010=Zd\273>3O.\274W>\313\276lx\372<W\260\r=\346W\023>\366F\255<I\327l>o\273\240> FH\276\242]\225\276\022l\274\275\304\2240\277E.x\275q83\276\360\277u\276\216!\200\274\343\2522\276\204\201G\276]\371\254\275\272k\211\276\352\260\302;\235\200f>\302\024\205\275\277\357\337\274\"\3756=@j\263\276C\220\203>+\366\227>@\301e>\200}\364<\032\2435>\222\003\266\275\274\225%=\265\211\323=B\225\332=\277+\"\276Z\272\202<+5[\276\\\311\316=\326q<=\'\334\253<\251\237w\276[\351u\2758\363+>HJ\037\274\265O\037?Wx\027>\016\363%\276\0002\031\274\312\025^\276\216\254\274\275C\004\334=\013)?>\357uR\275\345\233\275\276\270\351\317=\014\345\204\276\325>\255\2761\261\251>K\315\256\276\335z\215\275\013\323\227\275\330\365\313>z\245\014\276\256G!>`\223\035?\216y]=f\210\343=M\020\025\2766\004\307\274\212\037\303>\346W\023\276\255L8\276\336\037\237\276i\220\002\274\334\327)@\010\311\002\276z\252\303<Y\375\221=8\020\022\276\335\007\340=\315u\332\275\211`\034\275\351\267\227?\033HW=\366\356/\276\316\302>\2767p\207\274c\014\254\275\373\350\024>\264q$>U\245\215\275\234O\235\275\265\211S\276\223\030$>\354/[>#\205r=\2613\365>\375\277\252=\022\275L>\235\021\305=\321y\315\2758e.=\213\252\277\275v\032\t\276\311q\247\276\245\275\301<^h\256>N\231\233\275;\337\317\275>\226\376=\0060e\275?t\201\276A\267\227\274\314&@=\376\235\255\275\364\246\"\276\3225s>\t\337\233==\363\222=\207\242\000=L\302\005=\200\324\346=\"\211\216>\231d\264>\312\025\336\275\033\274\217=\307\020@\275\234\304@\276\301s\317>\031\342X>\3225\023\276<\210\235\273\271\031\016>]o\273\275H\376\200>\255L8>\345\320\"\276\033\022\027>\004\004\363=b-\036\276\'\245\340=\302mm=\327i\204\276\270\254\302\274\"7C>P\302\014\275K\037\272=\332\217\224\276\226&\005\276\366\324\352<\365-S\276>\\\222\276\033\330j\276\375\202\035>\231\236P\276\301\312\201\276\254\377S>\305 \260\275\240\336\254\275\020#\004\2766ts=;p\256=7\033+\275xE\260=AF\240=\327\027\211\275\310E\265\274PB\037\274\t\210\311\274\365d\376;\346\256u\2774\0216=\206\343y=\257\010\376\275\026\247\232=\017\177\275>\244S7\276\343\213\226\2751\3236>\014\352\333\275\231dd=+\207\266\276T\035\322>\"\2165\276\034B\325=5`\220=DQ\320\276\331w\205>\361\275\277\274\264\"*\275\315<\271=:\351\255\276\2721\275\276a\216\236\274|a\362=\351}#\276\26547<K\003\277<\300\006\304<K\346\230=\340G\332\273\220f\014>J\227\376<S\350<>\025\305\253\275\362A\327\277fff>\321\2263>\355\273\242>\333mW\275\305\253\254\275\233\217\013\276\315<\231\275\232^\"=\214\271\013\276\"q\017\276n\025\304=\212G\230;sh\261=\361+V=\316\313\274\273pwV\276\301q\231=\351`=\276\200H\377\275o\330v\275\262\273\000=\347sn=\337\032\330\275\357r\221<\3706}\276y\257\032\275\006Z*\271H\026\360=\323\334\312=\307\373\314\273Q\367\221\276\224\3367>\217\307\014\276\201\t\334\276\322\3437=Wx7\276\250W\252\275#\276\223\275\377\347\360\275\331B0>\225\362\332<\376+\013\276D\372M\276\343ko\276H\336\271<\366C\254\275\240\025X\276|\362\360\275H7\302\274\027\016$\276q\216z=\336w\214\275r\277c>\244\215\243>\263\266\211\275\234\247z\276\377BO\275\306M\215\275\330\322\303\275\'\3325\276\372\320%\276$ED\276\004\033W\275\033G\214>\337RN<\205\262p\274F\261\034\276\2179\317<`\002w>\232w\034\276p\317\263=\350\207\301\276\214\370\276\276B>\350\275\272\367\360=\022N+\276\224\275e=:u%\276\344M>\275\005\372D\276LO\330\275gD\t>n4\200>)\320\'>\024\226\230\276g\325G>\006d\237>\314@\205\276\243\220\344\274\202\312\030\276\204bP\273\250\342\306=\264\345\214>\317N\226\276\375\207\224\276vTu>\255\277\245\274F_a\276\366#\265>\226\264b\274\345a\261>\260U\">\221D\337>\337\375q>\353\220\253\276\315\035\275=t\356\366\274#J[\276\021\031\326=\236\357\'>\264\253\320\275A\016\312<\024\337\032<\3027\250;;\337/>\247\350h>S\003\r=\230\027\200=\321\"\333=\322o\217>\335A\314\275\207\341\243\276\231(\302\275z\375\311\275H3\026<\346y\220>S\005C> $\313>\205\316\313\275;\374\025>\331\316\367\275\306P\216\275b\363\341\276Ltq\273\035\217\211>A\0175\2745\265\014>\372D\256>\376C\372=\365\276\201>\331\262<=\377x/\276\234\026\034\276\311\250\327\273f\202a\275\250\030g>\'f\035\276\271\337\001>Q\024\350=Z/f\276\257\264\014\275\325B\251\275\036\026\n\276\312\340\350\275\303b\224\275:\220\225\275\344\275\212\276\362[4=T\001w;\002\361\372\275\224j?>\204EE=e5]\275\214\204\026>\351\324\205\276\250Ut\274\346\256\345\275=\362G>\232\010\037@\275\306\316>6\352\201>\242C\300\275\333\247\203\276\223\247\314=\037\235\272=\233Z\366\275\001M\244?\367\217\245=I\235`\276\244S\267\276\307\364D\276\300\004\356\275\"L\366;\272\203\330;\365\327k=\304\354\305\275\351`\315\276\275\343\324\275\025W\325=\256*[\276\202V\260>\354!\320\273\262\274\253<>y\250\276\340\024\026=\236\322\221\276\235\327\230\276\005\305\017>\300\016\367;\234\212\024>p\353\216>\'Km=I\020n=l\0068\274#\020\217>O>\235=\311\345\377=\221\360\275\274{\203\217=\025\306\226\276\370\252\325\275\301\220\325\275\\\277\252;\363\223\232>\262\200)\276\216w\247\275\010\036\277\275dXe>\220\330\256\275\265\374@\275\207\026Y\276\307\272\370\275`\253\204>b\243\254<\326S+=\323\207\356\275\222\"\022>sH*\275z\336\r\275%\314\364=k\202h=\3750\222>7P\200=^\235\223>\330\273\377=\002\232\010>o-S\275M\275\256=:;\271>\354\242\350<\237\253\r\2765)\305\276\324\233\261\275\036\026\n>@0\327\276z\337\370\275\2132\313\276\004\347\314>\247\313\322\276\365g\377\276Q\332\233>\035\247\215\273tA\035\276\r\030\204\275|\362\240\276\316\374\212=iRj>cA\341<\203i\230<\224\024\330<\217\245\317=u\037 \276%w\330\274~t\352=lx\222\277\2508\256\275\257\231\034\276\342Xw\276l&\037>s\327\322=\367\257\214\276\3441\003\276\025X\200\274\202V\340\275.\220\340=~\030a>\230Q,>\016\026\216\275\2074\312\275\340JV\276\256d\227\276H\247\356=\357\033\037\276\274\313e\276^h\016\276s\2057\276V\361\366\276\230\334\210=\273\270M\276\336Y;>k\237\016>\222wN=N\361\270<5{@>m\034\021\276\2716\204>U\023$\276hu2=\345A:\275\362A\237\277P6e>bJ\264>\241\364\305=5{\000>K#&\275\221\355\234\276\355\236\214\276\322Sd\275\250:\344\275x\322\302\275\010\254\034\276UMp>\0317u\275\331\231\">\234Q3\275-C\334\275\316\211\275\274\004\342\025\276\345\324\256=Ppq\275p[\233\275$+\177\275\234mn\276v\303v\276\320a\216\2766\"\030\275\326\305-\276b\020\030=\374\000D\276\352\221F=\266J\020\2766\222\244=\360\304\354\275\361.\247\276\023\'w>\244\251^=\335\007\220\276\223p\241\275\tn\244\275\273\'\217>\205%\036>\t\376\367\276\200+\331\275\263\322\304\276-\t\020\2760\202\306=\016\020\214\276&\2527>\003}\242>\023\202\265\275\001\207\020\276\270#\024\277C\037,=\331\224\013>\006\360;;E\r&\276\206\346\272=_\014\225>\252\016\031>V\221z\271$\234\326\275\200\232\212\276\205_\212\276y\257:>|\362p>\020X\031>J\3225\276;SH>\317I\017>N\233\261=!v\346\275\34756\2763\304\301\276$\227\217>.\312\014>2r\326\275*\341\311\275\324H\373\276\211\316\222=o\325u\275\366E\202\276\366\227]>\214\242G\275\341zT=\273(z=\317N\206=\267\264\032>@M\355\275\226\004\350=^d\202\275\272\021\226=~\030\301>\23020=`\037\335\275}@`=\372\'X>C\347\205\2763\026\315\275%#\'>\222\260o=\236\322A>\037\235\032\276\241\276\265>\270u\207>\343\302\031\277\225`\301\276\266\237\214\275\337\340k\276o\022\203<\323\244t>\245\247#<hxs\275\306\374\234\275\337\207\243=\261P\373>\260\376\317=\002\267\016\276:A\033=\002\200\343\274 {\375>\251J\273=K\253\341=\233\344G=\014\260\317\275\274\350K>(\233r>\332\376\225=\2343\322>;\374u\276\034%/>\216\004\272\275aT\242\276\376H1\276\341\013\023>\002K\256\274#J\373\275\377\222T=\364\211\034>m\250\210>E\022\235>f\332\256>c\313\227;\315!i\275\237\255\243=\014\002\013\276\253\262\357\275\363\0372\276]\251\247=\235L\\<8\333\314\276\272/\'\275u\310\315\275\000R[\276\372\271\201=\352u\213=y\257\252\276\262\021\270\276\205\266|>\001\275\360\274\007\316\201?\0319+\276\374\336f>\305\311=\276\255/\362>\016\240\237\275\020\003\235\275\236{O\276`<\203>\355\r2@\306:\260\273\361\021q>\374\336f>e\307\006\277\327iD>\000R\333=\035\217\271\276\233U\377>\244\2148\275\001M\204\276\234\304\220\276\344\3676\276\317\2762=\3058\377=\366\321)>\263\357J\275\321\221\234\276qr?\276-&\346\276Y\206\370\275\235\272\362\275\342;\021\276d#\220>\016\025\223>\376`\360\276\300\347\207\276\254\220R\276msC>$\271<\275&\252w\276\200\013\262<\256\201\355\275`\253\004>\tP\263\276j\030\036\276\274\313\325>4h\270\276\304\316\014\277\241H\367\274\261\242\206\274\370n\263=\217n\204=\367\001\010\276\324C\364>~5\247>\202\250\033\277%\006\001>\000o\221\276\241g\303>|,]\2764\206\271=\036\247\010\276\022\275\014>\023\325\333\275Xs\240\276\001\371R\275\271\245U>\2029\002\277\361\272\316>\035\217)?C\220\323>\355\323\021\2763\334\200>\325\221\243\274\346t\231>w\025R=\2657\270>\3171\000\276\002\267n\276\2201\207>\264Yu\276\320\275\342:@0\007\276\235K\341\276\237\223>\276\223r\227\275@\373\301\276\316\302>>\203ix\276@\373\201>\231\365\002\276\264\311!\275\256\rU>\247y\347\276\331w\205>\nh\">z\215=>\354/\373\275<kw\275d\037$=S\\\205\276\230m\207\275W\225\255\276\253\354\253\276\266\363\335\276C \227\274\353\377\314>v\246\020>\227\034\327\276L\0267=L\215\260=\"\3756>c\271\245=n\300g\274\323wH;IJ\372<\n\327\243=\215E\023>\261m\321\275\272\362~\273]\277`>\"\253{>\274\"8>\365h*<E\365\026\276\230n\242\276\035\254\037>\243\222\372\276\251j\"\276\300>\372=\340\250\313:\335\014\227>,\016\207=\327\206*>}\226G>*\341\211<\346W\323>4\021\266\274\210\237\237\275\330\236Y\276\216@d\277~\035\370\275\335$\226\276\306P\216\276\2446\201>\346\225k\275\343\252\362\276\256\017k\274}?\245\276Z-0\274\023I\244\276MI\266=\254\001\312=v7\217>\007\323\360\275y\351&\276\036\026\272\276\r\343\256\275\256G!>@\373\261=\226[:\276\214\271\233\276{k\340=\374\000\244\276K\222g\275b\3662\274\357\346\311\276\375\023\034\276[\265k=1|$\276\216\222\347>\032\213\346=\227\250.\277/\300\236\276\334K\352\276\373{\204\273\212\002\375\275t$\027>\305\311]\276\037h\345\276e\307&>\257\351\301=\231\n\026\274\354\300\271\275\333P\001\277^h\276\276\203n/>Ttd>\303\323+\276\260\311\212\276\016\333\226>\020@J\276I.\037\276V+3>\305\376\022>\347\3064>\367u\000>>\263$>\366\356\337\276Cu3\275\334cI>E\273J>\215\321\372\276\336\002)>&pc?\305X&\275\305\377\275\275\030y\271=J\007\233\276\006Gi\276\354j\262\275\355\r\376\276\231\201\n\2761\013\355\274_^\260>h%\215\275I\366\210<\307c\366\276\365\330\026=\240\340B\276\n\235\327=\236A\003>\256\357\303=\312\340h>\'\3325\276\341E\217\276\210.h>\220\210\t?\n\200\221>\336<\205>\215\227\336>\006\271\013;#\204g>DL\351\276^\272\t\2766<\315\276\203N\250=;\252\032\276&\307\335=P\031\027\277\377>\003>\034\353\222>t#\254<\334\364g>\346Ws>\017\264\322\276:\036\323\276w\204\323=^cW\276(\251\002\274\372\320\r\2774K\222\276{\275;\276\331Z\177\276n\335\275>\223\251\002\276\017\177\315\275\304\353\232>\344\275\n\276&\215\321\275\021\031\206>i\251\354\276\'/r=[B\376\275\355\273\002>\260\003\227>\312\305\230<Qk\272\276\201xU\277\223R\220\276!\002.>=\'\375=\254\345\016\275\364\211\274\274\351}\243=\224L\016=\272\275$\276\365\212\002\274 {}>?:\365\275\323\023v>\373t|=\255\336\301\275\036\341t>\316\337\004\275\202sf\276]\212+>\356\316\252>\032P\357\274\030\t\215\2769D\274=L\303\340>%\351\022?\177\366\243>~\343K\276\254\250!\276\222\350\345=\373\256\270>\364k\313=RI]>\253\347T?\334.\224>\030\223>\275\214\025\365=\205\266\354>\241-g\276\204\330y>\314]\013>\322\000\316>\213\375\021@\363\001\201=K\223\202>\023\233O>\035\344u\274\027\202\334>\\@\303;\373\221\342\275\210\205\222?7l\033\276\252\232\320\276\324+\245\276\223\212\206\275~\343\353=\021\307\372\275\267\177\225>X\2505>\026\301_\276\350\331\354\275\"\211\336\276[\261\377=\314\266\263\275*:\022\276\037\370X\275\000\251m>\3019c\276\2034C\276\010 \265\2760dU>\320\263\231=\310^\027\277\006*\203\276J\270\220<\242`\306\272\357\003\220\276\304\231?\276\270u\007?\233\0333\2764\272\203\276\"oy\275\013\321\201\275\230\300\r?\3711f\274\315X\364=\217\214\325\274\376\326\316\274\312l\240\276\001\301\254>_\\\252=\315\257\346\275\305\346\243\276\027G\305=\261\026\037\276\311\001{\275\316\215\t>e\035\216\275\0358/\277\023\362\241= ^\007\277\206U|>\025\251\020?[\316\005?\023\270\245\276\005\300\030\276\242]E>\332\377\000=s.%>\234\027g=/i\254\275\227\032\241<\301\377\206>\226\341\211;\344f\030>\200e\345\275`\260\033\276U\244\n\277\271\210\357=Q1\256\276\021\374\277>RH\262=F%\225>9\2349\276\246a\250\276\214\020\036>\343S\000\276Y\372\320=\200\0163>\245\203\225>\365\363\226\276\315\001\302>(~\314\276\0261l\275\037\364\274\276\234\242C\276G\254\005\277n\213\242\276\216\351\311\276J\265\277>y\314@\276\001\244\306\276\225\232\035>\303\360\361>\335$\006>\303Gd\276d@\326>\000oa\276\315\344\313>\274\350\213\276\307h\215>GU\323=\177\022\237<\372\n\222\276\324\267L>|\272:\2741_\276=\213\303\351\276b\204\220\276\350\366\322=\246\325\020\276\204d\261\276\336\216P>[{_=Q-b=\301\3451\274\204\361S=e\001\303>\225e\210>\210\200\003>G8\235\276!Z+=\013\014\231\276\244\337\256\277\241\271.\2764\2355\277\331\231\022\277W^\262\275K\253!>\257\231<\276\373\353\225<\261\025\264\275\354/\213>F|\007\277\247\223\314=o\330\026\276\201[\307>3\304\021>\343k\237\276\2755\340\276\323\366\017>I\234\225\275J&\307=\177\332\310\275\232BG\276\t\376\367\275\371\240g\275\243u\324=`\315\001>\247$\313\275$\227_>*\251\023>iW\001\276=,\324>\351&q\276\r7\010\277O]\271\276\273\233g\276\272\3670>v\303\306\276oI\256=\216\222\327>\347\343Z\276\323\274\203\275,e\211\276\223\035[>M\276\031>\021Sb\275\212Y\017\276\333\247\343=\033\273\224>\344\203\276\276l\t\371\275\235\2722\275\037\273\213=\344\203\236>\207N\217=\260XC=\347\373\351=A+P\276\3436\212>2w\r\277\300\t%\276\323\331!?\350\237\320>\241\327\277\275\350\2447\276e\245Q?\356\316\332\275;\373\212\275}yA=\001\301\354\276\2505->\tp\232=\031\034E>\036\371\003?\263{\302\276W\006U\274\205| ?\356\316z>\236)\004\277\213\031\201=k\270H\275jM3>\321ua\2753\341\027\276\372\233\260>\027d\213=\254\377\263\276\314\177\350>\255\243*>Q\275\365=\243\220\344\274\016\204\304>\325xI>oG8>@\336K\276\374\035J\276T\376\265=\331\010$>\255hs\275\300\257Q\275\032\206\337\276\020\351\247>\257\231\374=[\353\233\276\202\255r>\360\334\313>\224\023\r\277\227\255\365\275f\240\002?\2608\\>\321?a\276PSC\277\267\177\305\275o\360e\276\016\241\332\276\223rw=S\256\260>\310A\t\276\302\335Y>]\026\323=-\226b=\3647\021?\251\207H\276\372EI\275_{\006\276r\334\351==\325\201>\277a\242;\313\234\016\276\244\215\203>\256\236S\276/\2062=N\267\354\273\202\305\201\276\233Z\366\275\312\374#=\350\023\311>\317\203\273\274\242\321\215\276\344,\334>\261\242F\276\260U\342>\325\225\317=\324\016\237\276\326\037\301=\366#\205\276\265\211\303\276Z\366d=\250\001\003\274U\030\033>\3603\316\276h\256\243>3\026\375>\2034#>\243\314\206\276\270;\013\276\326\034 >\026\207\203\2763m\007?\377\010\303\274\214\025U>(\363\217\274\010\347\223\275y\036\024?\006d/\276\316U\223=*\213\202=\347\306\344\276\010\311\202>&\036\020\276O\257(@\263\265\036\276\220\210i\276\326\250\327>\245\024T\276\215\016H\275s\021\177\276D\372\r\276\263\014\351?\326\255\006\277|\265\303\275\006\022\204>\027\331\356><\367\036\2777\340\363<7q2=\246~>\276{\332!>0\r#\276OZx\275e\216\345\274_\230L\276\272I\024\277\335\014W>Xs\300\276\001j\212\276\203Q\211>\307)\372=\215\234\005\275M2R>\261\304\243\276cz\"\276\253\347\244\275\'\2033?\023\272K=\346Ws\2762 \033>^\275\212\2746\037\027?\371\237|=-\354\t?L7\211?Q\331\260\274\255n5>A\267/?\346t\331<k\267\035>B&\211\2760*i\276\200H\'?X\311\307=\206U\\>\301\220U=<\024\265\276)\263\301\274\330*\261>Dv\224\273\352!\212>\357r\241>\311w\251\274\257%\204\276]\370\301=\361Ff\2749{\247=\370k\262=G\254%>\2240\323=j\030>\276\377\347\200>\006G\231>g~5\275\227\312\033>\005\300\030\277\311ZC\275\"\211\216\276\t\026\247\276\301\305j>q T\277\313\020\267>\353\220\273\276\215z\350>\330+,\275c\234\037>\2034\303\276\207\277F\276y\222T>\366\177\256\276\201\t<\276\223RP\276\232`8=R\177\275\275\277\321\016\275g+\217=\034\360Y\276\226\004\310>C9\201\276yX\340\277\n\327\033?\364\032;\275\304\264\257\275\213\303Y>\235\235\334\276j\210\252=G\347|\274m9\347>f\372\205\275\257-\227;\355\231\r?Gr\231>6YC\276y\314\240\276\004p3<^\021<>\304|y>\034B\325=\326\305\235\276\201\2253\277]\247\021<\201\264\377<-\354\t>\n\272\235>]\247\321=F|\207>\024\\,\276\375\237\003?|,\375\275B&\211>\331BP\276\003}b\276\0260\241>\206ZC?l&g?\300!$\277\367\3142\276/\372*>\"\253\033\276W\353\204=\310{5\276%@\315\275R\270\316>\335\\\374\274\361h\003\276\022\330\274\275a\303\323\275\302L\213>X9\024\2762UP>\210K\256\2764\271\270=\315\035\235=\205B\004>\342\005\021=\370\303\017\275\371\367y\276\355\330\210\276\216#&\277\222\007\202\275\2073_\276\2613E\276X\3421?\035\346K\274\225eh>\257_\360>f\024\333\276Qk:\277]\304/?\007\231$\275M\370e\276\202\305!>\331%\352>\233=P?\364\211\034>&p\353\275}\256\026\276\244S\247\276\377\317I\277\262\200\371>\001\207P>|\'\006>\003\013`=\232\2319\276\016\023\r=aqx>\273\017\220>?\306\274=\274\\4\277\353\213D\276t\352r?2\314I\275\370\252%\277\020#d>\312\340\210>\213\2463=1\266\010?[%\250>\002\237\177>\241\333\313\276\224\301\321\276k\233b\275\200`\316\275[|*\276\240\375h>\366\013\366\275\220f\014?\016-\262>\020#\004>\275\035\t\277\205B\244\276\240\212[\275V\274\221\275\231\236\260;\366\356\257\275\217\2150?:z\374\275\316\337\304>\013\357\n\277\rq\314=7\2168\276/\372\022?F\261\254\276\007\323\260>;\247\271\275\261\277\234\2762Z\367>\365/I\275\237\002\000\276\371Nl>,\202_>p\266\371\275m\255\237>\254\220\242\276\025\343\214>\334\235\025\276\203\300\032?]\207\352<#\020\357=\365\234\324\276\025R^\276`\002W>\004s\324>\325\th\275\"qO>FB\333=\225\264\007<\016\020\254\276b\207\221\275+\244\274\276J\014\202>Q\203\331>\023f\272\276\322\302\245\275!t\320<\003^f=I.\037\2776\002\321\276\317\332\355\275Mg\247\276\372\325\\>\323\336\340\275<13?W\225\035\277\014\345\364>\005\243r\276\025\251\260>\367\001\250\276S\226\221\276\316\210\242>\033\330\332>KY&\276\017\177\375>\374\306\207\276\356=\274\276&\373g=\365r\216\271\275\251\210>\324} >W`\030\277\214e\372\274\301\305j>|\362p>\247\260\022\275\221\320\226\276[\231\320>\216\345]=\005\213\203>4\272\243\276\207\242\020\277\363\253\271\2769\356\324>\025o\204\276\024\006%\275\030!\234\276\305\003J<\033/\035=\236\266\306=\221\017\372=\013A.\276\253&\250\2763\212\265>\'\245\300>C\255-@\013A\016>\026L!\274\243@\337=\245N\010\277\365g\237\275\257\316q>cz\202=M\276y?\031\255\003\276\214J\352\275-x\321=\243s>=\202\347\036\276\247=%=\034\231g>T\251\271\276\215\177\037\276U\204[\275\216#\206>\r\337\202\275#i\267=\355G\352>|\201\031=(\270\330\275\021\001\207>\367\036N\2763\376\235\276\'\206\344<\207\371R>\266-j>\010w\247>\024\222L=[5x\271Ae\\\276E\032*\272\200eE>\261\304\263\276I\221F;\203\372\026>\2505\315=\237v\030\276\234P\010>\346\226\226\276\203/\214\276W_\275\275\341\227\032>\247tp\276\352\225\022>\206:\214=\364\337\303=\3475\266>\022\024\257>\037\021\203\276\222\\~>\340\271W>\001\0269=\333\334\230\276\205\231\246>\347\213\275\274 ^\327=Y\242\223\275\315\351\202>\034B\345>\003\354\223>\320\326\201=<k\027>n\243\221>\265T\036\276\264t\005\275\031\305\362=\377!\215>\251\336Z>Q\367A\275\313\370\267=@\264\240;U\023\244\275\214\203\313\274\265\311\372\271k}\301>\016\020\214>\034\360\251\2761\231\212\276\020\3517>\305\376\302>\340\326}\276\250\374\253=\034\266\355\275\251N\247=\033L\003>\205\231\226\276\215z(\276\360\205i>?\000\271\276L\032\343\275\023D\335<\242\177J\277\"\000\270=\346\036\262=\216;\205>\300\225L\276Sv:=\247\350(\277C\377\204>B@\276=`\223\025>\027\360r=\0221%\276io\300>\357\3461?\303\360\321=\373\226\271=\315\\`=\232\316N\276Z\273\235\276#\275\310=\335{\370\275\200\272\201<\236\265\333\275\031\255#>\342M\310;n\300G\276\346\037}\275\270@\322\276b\371\223= ^w>~:\336\275\"T\211=\310\230\233>\345\355\010>\220k\263>\027\267\251\277\235\363\263=\206=\355=\303\323\013>\242(\320=\027\274\210\276\317f\205\276\243\006\243\276\321\221\034>&\031\211>\203i\330=*\375\204=+\303x\275U0J\276\004\004\303\276j\336\031\277\273DU>\244\031\333>U0*>\250o\031>5\265\314\276.Vt>\362\230\001\276\005\243R\276\2073\337\276\224\244\213>\244p]>\360mZ\276\301\004I\273\024\\\234>NC\324\274\252CN\276iW\001\276\263\352\363<n\027\352\276^\021\254>W\354/>\326\255\336\275\323\331\211>\274\256\257\2761\261\371=s\021\257\276\357\311\203\276\377!\235\276\230\030\313;\226x\240\276\304\264/\275\237<,\276\231\323\365>\243\352\267=\344\275\232>\256\362\204<\223\214\334=\360\212\340>X\037\017\275d\002~=\211{L>\032\303\234\271\320\233\252\276-\262}\276\254\312\036>g\325\267\276\305\376R\276\223\333\233:\211\352m>-!\337\275\273~!>\036P\026\276\231\201\252\276v\303\026\276x\321w\276\275\214\202\276\314@\345\274\235c\220\276\344\332p>W\354o>\327Q\225\276\326\250\007\276\217p\272=\360\334\233>\304_\223\275q \244>ga\277\276\361K}\276\231\273\306\276\341\264\220\276FB\033\276K\002\324=\022\370C=&6\337>\342\006|\276\255\333`=DQ\220>\031Vq\2762\311h>\252H\205\276u\216A>9\324\217=\r\303\007\276,\016\307\276\332\033\274>p%;>\376EP\275\317\024Z>\"\034\263:\0324\324\276Q\024(\276\265O\307<\252CN\276\275\252s\275\363\0372>3\341\227\276\223\030\304>\\\014\324:\366b\210=\330d\355>\355\365.>\357\306\002\2750\201\233\276\307\325\250\275\241-\367>\335{\250>Z\365\031>\334\326\026\275o\365\214>\207\341\243\276B`E\276\375M\330\276\370\306P=\"T\351\275e\307\246>\332\254Z\276\220\023\246<o\233i\275\354\337\225\275OV\261\273O\036\026>\017\356\216=\370\306\220=K\253\241\274\206X=\275$`4=\000W\222\276\325x\211>u\350\364\274uu\247\275I\327,>\370\244S=\237\220\035\275\341E\177\276\340\333\264\2764h\350\275\313\204\237>\227\377P\276|\017\247\276\356%\r\2769b\355=\33346<2U\020>\231)\255\274\260\222\217<$\'\223<\335[\221=\331\353}>\376\014\217=\362]\312\274\373Z\267\275\243#Y>i\255\210\275Q\332\017@\274\256\337\276\333\370S=\306\205\003>aO\373\275\202\203\346\271\303\rX>N\200\341\274\200\267\230?\220\365\224\275\322\343w\275\355G\272>\247tp\276\372\320\005\276\032\213\206>\014v\243>\345\362\037\276A~6=\344\367\226\275\343\307\230\276P\001\220>}\256\026>\027+j>\303\237\201\275\266\276(>o\022c>\375\366\265=\177\332\210\275W\354o>C\220\223\276\351e\304\276\021\001\227\276\347\000\001?\264Y\245>1B\030>\356|\377=PSk>\213\026\300=M\017J\275\230\241\261=\321t\226>\275\000\233>\246\360`\275\373y\243>V\013\354;\212\224\246\275]\341]\276\263{R>$~\305\274\341E\037>\202\311M\275\2451\032\276M1\207\274\252\361\262\276\314zQ>\211A >\311\037L\276E\237\257\275\023\'\227=Q\203\231\276\024y\322=\322o_>d\222\221<;\305\252\274qZ0>.\310\026\275\313\275@\275\n.V=\002\267\216>\354\027\354=\303,4\274\226\317\202>\005\305\237>1\266(\277\3274/\276.\036^=\371\206B<\265\3753\277}?\025\276\244R\354<\355\266\213>K\261\243\275\244p]\276H\243\242\275U\026\005\275\004\036\230=\r\246!\275\213\340\037>j\215\034\274\320\233\372>\373\2269>\310\265\241>\374\336\346\276\003\t*>\036\207A<\267\262\204=\370\2456\277\314\227\027>\300[\200\276\\\033\252\276\037\274v=#\273\262=\373:0\276\2510\306\276\342\001e\276)\226\033\276\037\332G\274\365\276\021>Sy\373>\014\007\242\276\031V1\276j\274T>\306\212Z\276\021Ux\274\363\345e\276J\230)\276?\214\320>\t\304\213\276\217\031H\276\220f\014>!\260R\276\372G_<\373\313\216\276^hn\276\300&\013\276)\350\226>\020\255\265=\032\213\206\276t\'\230=\366\317S\274&S\325\2767\032\210\277nj\200=\304Bm\276\217p\332=\364O\360=qZ\240\2760\236A\276\304^h\275\252\2021>\365\326\240\276Ae\034\277u\310\275>\023\364\227=\027Ge=\231\200_=\350\301\235=\374\214\253\276\356|\177\276o/\351\276\034_\233>\303}d\275\364\025\204>P6%\276\276i\372\274\260p\222\274C\037,\275\303\273\034>\363T\207>\360\026\330>\010\254\\\276\275\343\304>S\350\254\276\331k\013\273\366\321i>\372\320\225\2764\206y\275\343\337\227\276i\343\330>i\214\026>0*i>\342\313\204\275[\266\266\276\035\037m=DL\331\2761\231\272\276gC>\275)\\\357\276\03244>\254\255X\276\274Wm>S\320\275\276\222\"2>\3124\272\275\333m\027>\317\207\207=\005\037\336\273Z\236\307=\314b\002\276\314^6\275\244\307\277>\243uT\276\250Wj>w\204\323\275\n\277\324=\247A\321<h?\022>\276\237\032>\322\341!\275)\"C=\023\345\034<I\327\314=\016\020\254>}\320\363=\003&\340\276\256\rU=:\257\241>P\341\210\274\316p\203\274\017&E<>yx>O@\323\275\261\212\307\276h\317e\275{I\243=\021S\"=s\333>=jj\001?\235,5\275+\207\326\275\342\035 \275\353V\337\276\347\343\252>\351\355\317;i\374\242=M\020u\276\306\242\001?\206\033\220\275\310\357\355=\276\366L\276Nz_=\265\245\256\275\r\253\370=+\023>>\037\200\024>\237\221\210=>\320J\276\355+O\275l\317\234\276\023\271\340\272\240\374\235\275\000\251m>\354Q\210>\"\032\035>\'\024\002\276\340\246\232;\307\235R>\033\r\000>\277\017\307=\247G\t<\242|\301\274\t\247\265>\215E\323<H3V\276\344\243E\2751BX>\"\303\372\276}X\257=\2402\036\276\204\201\037?\267_>\275\345\362\177>\344\021\234\275\224\207\325\276f\367\034\277\363\216\323\276?5\256>A\233\\\275\375\366\265\276\242\321\315>`\003\302=\222t\315>5\230\206>\226\261!\275\036\304\316<:#J\276X\376\234\275-\350\235=\252Cn\276\023\272K=\255\027\223\276\027\202\214\276\371\242\275\274\315\257\346\275\0324\204\276\371\201\313\275\276\240\245=:X\037\276\ro\226=d\222\241\276+\373\356=\335\265d>X\306\306=\271\302;\274\n\275\276=y\001\346>\372BH=\377\347\220\276\321?\321>\231*\310>\374\251Q@$B\303=\333\334X\276 \230C>\216u\221\276\n\020\205<\3434\304<\246\017=>cE\255>@\301\005\276W\262\303\275\202\250\233>75\260\275\243#\371=U0\352=\'\243\212=\337ls>\253\317\025\276S\320\r\276\215\227\356=\345\355\310>P\001\360=\246\',>\363\223\312\276\3745y\2766u^\275\245\024\324>\024\355j\275\364\032{>\374\376M\274b\204\260>\330\350f;\3118\006\275V\231\251<Q\210\260>\362\315\026\276\342\036K>o\r,\2760\360\\\276\270\303\313\272\3377>\276\217\374a\276\236\357G\276\360M\223\275Ln\224\274\233\254\321\275\241\333K=\"\340\220\275\216@|>:]\326=vT\025>\343\251\247=\026M\347\275\211br\275k\324\363><\245\003\276\371\3272=\242E\366\275\341\014\376\274)?i>\316\302^>\231\2736>\224\207\005\276%ub>=\233\365>y\001\226>\310A\311>\344\203\236>\3058_\276>#\261\275\272\265\026\274*\2513>\223\035{>\030x\216\276\2032\r\274\\UV\276\t\304\013\276\006\365\335\276\257\316\021\276\033*\006>\213\340_>>\2145\273\274\263\321;tA\035>v\032\351=\304\224\010\276\361g\370<\245I\311>h\"\214>y\036\254>6\223\017\276x(J>\236\322!\276\1774\274\275\257\320\247\275\301\305*>n\243Q\277\226!\216\275\257\010\036>+\366\027>\303\365\010\276\354/\373=9b\355\2761\224S>\260 \r\276\'\210\232\275\257\261k>\2343b\276\024\\\354=\317\332\235>\260\004R=2\346\216=V\273&=\300\262\322\2751\2243>\335\357\320>\237\003\213\275E\236\204\276\2279\335=\262\177\036\274#\370\337\274\3436\032>\231)-\274\033\365\320\275\251M\214>\n\367\212=s\205W\276\372\rS=\252He>\034\3558\275v28\275\214J\222\277\336T\344\275@\331\264>LT/>U\212\235=Pp\201\276\236\230\r\277\0324\224=\354\027,\276\361\235X>\226\317\362\275\353\220\333\275\255\2120\275\267\264\332=$ED\276\365-\263\276\362\224\265\275y\001\326>\003\225\261>\210c\215\276zSq\276F\357\224\275\\\254\010\276\243 \370<\255/\302\276C\347U>\244\307\017\276\202T\212=0\236\001>\374oE>\342\037\226\275\263\230\030>\002\267.=\376\234\202\275f1!\277\263{2>\325\th>\353\031B=\002\324\024>\310{\325\275\016I-=\016\240_\275\205D\032=\013FE>\017\326\177<\350\023\371\275\355\273\222\276(\017k\276\324\232f>V\324@>:\351\315>\261\277\254\275\321 \305=\330d\315=&W1<+\207V>\221\'i>\331^\213<\250\214\277\276b->>nO\260\275\361\017[=\023\'\347\276p\357\232<\\\035\200\275\200\357\226=J\357[>\001j\352=\355e\273=\347\273%\273\251N\007=)\256J\276\214\020\236\274$\271\374\275M2\362\275\347\030\320\275\207\304\255>\217\306\241<q\000\275\275$\322v=;6\002>\275\000;>S\"\271\276\0319K>\212\260a\276C\305x\276\314\320x=O\351\000>\027\325\242\275O;\314>#\276S\276\031V\301>\237\260\344>)\263\241>\336TD>W\354\237\276tD~\275\"\211\036=\221, \276\250\214\317\276\247\226\255=\205@\256<\016g^\276\206 7?\\8\020=\310\357\355\275\2445\206<\n\272]>\246D\322=\313\271\244>k\354\267\273\327\206\272\2768Is<\210c\335=\204\233\214=O;\254>\202\254\'<8\025)\275\004\312\006\276\016\333\026=\264\310\306>+\030\245>8h/=$}\272=\256)P\275\344fx\276\242(\240\276.\3055\276B`e>9|R\275(\n4\276\020X\031\276\346t\031\276\270#\234\276W`h>\325P\264;\315uz\276S\"I\276\333\375\312\275.\034H>QN\024\276\225e\210=\260\376\337\276)\313\320=:#\232>\031V1\276Lq\025>}\263\r\277\360\212@>\337\375\221=\3122\344\276\375\274i>\355D\311<\254\034\032>\257\316\361=->e\276N\357\"\275&\252\227>!t\320<JF\256\276\020]\020\276\004sT>`\2570\274\212\037c>\036\306\304=$\326\342\275c\1779>\341\227\232\276\233\003\004=7\032\014@\026\030\242>k\231\214=\200Fi<0Lf>\277}\275\276\335\322\252>\250R3\276\332\033\224?+\023~\277\3305\020<\003\354\243>\033*f>\000\306+\277\321\005\225\276`\345\220\276lx\212>\355\231\035?\375M\250\276S\313\346>\372\014h=\354\243S=\364\025\244\276B\262@>/\335\244>\217\034)=\377 \262=\243\351\254>.\347\222>\326\305\025?\010\217F\277\033*\326\276\306P\276>\246D\262\275<\024\265>\252\361\322\276\205|\320=Lq5>bg\n>d\314\r\277\201\225\033?KY&>\272k\211\274\0221E>k}\021\276pwv\276#\207\310=\314\013\360>\277e.\276\353S\216=\306\026\002\276\263A\306>\247\350h>^-w\275\016\370\274\275\366#\345>\026\301\377<\335|#=\312\303\002>\265\211\013?U\023d\2763\215&=\263^\234>\372D\036\276\231\rJ\277\211)1\276\23389\276\213q\236>\032\375h\275\316\374\n>pBA\276\202\254\'\275j\331\232\276<f\300\276\240\303<\276-&.\277\306\341L\276\215\264$\277\027\202\034>\223R\320\276G\311\013\276\016J\270\276\226\347a>\023|\223=GU\343>;\252\312>\376\232L\276\030}E>{f)>,e\331=\n\200\361=\341z\024\276\001R\366\273Q\367\261>\216\222\267>\207\277&\276\3372_\277\341@h>\345\no\2767\246\347=(a\226\276Y\027\307>}y!\2763\341\307>9b\005?\311\002&\2754K\"\276m\347\213>4.\034>_\007\356\276\001M\204>+5{=E\330p\276\352X\205\275\213lG>\272,&\276\333\304\231\276\225}\327\275\373\350\004?B>(>.\377\261>\243\001D?V\202\365>\023\'G\277\030xn>$\227\277>y\036\354>\372\n\322=.q$\2759\271\027?\266\326/?x\234*\277\264\037\311\276\300\354\236\276\323\274\203\276\350\207\201\276R\n\032\276\340\234\t?\360\247\366\276\273\362y>\333\304\351\276\207\304\235\276\027e\026?\251\365\236\275\352\354\304>\"\216\245>\007\231\224\276k\232\247\276.\312$\277\315u\312\276\340\241 \277\234P\310=$\177\360\275\2201\367\275wJg\276\014\352\273>\253\225i\276\322\373f\276\215\264t\276~\000\022>\316T\210=\001\373h>\315\344\213>f0\306\275u\253\367\276Lq\345\276\203L\222>\310\357\025\277\246`\215\274>\256\315=\315#\337>_\230l\276\000\311\224=\267\234\253>\271\210O?CW\"=!\007\205>V\2324>\206 g>\346\030Z;\022\210\327\275\331Z\037\276\034B\325=g\n\035>\355\201\226\276%z9\276|\232\263=\307\235\n\277?s\326\274\322o\237\276\177j\024?\235c@\276\003\225\021\276g\362\r>\265\302t<\226\262L\276\214g\200\276\353\034+\277\240T\333\2766\352\t?\003}\222>ni\365>\215\321Z>Lqu\276\003`<\276\230\300\335\276\370k\342>\336\220\006\275Qk\352\276/\213\271>\236\014\216>\225\232\025?\rl\265>\037\272\200\276\342\217\202\2751\261\371=\303\201\010?\267F\204<\230\300m>x\321\327\275!@\206\274\373Wv>\262F==\035\003\032?\266g\266>\347\035\027\277,\267\264\275`\260[\276\257\010V\277\177\207B\276T\214\303\276*\000&\276%]3\276k\232\037?\252+_\276GU\203>E\3607\277Q\372\002=\330)\026=\250o\251\276\211\352\215>\246D\322\275z\302\222>\324+\245\276;\337\317\275\261\247\335>r\032\"=6<\335>z\245\274>\035\003\222>\302\206\267>c\234\177>\3171\260>3\247\013?s.\025\277\2721\335\276\305=\326>\267\177\205>6;\322\274\373t$?U\030\333>3\341w>\221D\317\276.\342\033>\263\263\210=\216\257\215>c\227\210>\205\314U\275\231F\223<\275\214\"=\222\\\256>v\301\300\275\263\352S>\007B\242>W\351n<Ou\330\276w\241\251\276\004\257V=s\274\202\274\237\037\006?\3436Z>\037\364\214\276\2176.>\341\013\023\276#\363\010\276\242z\233\276\222\221\243\276\036\033a>\324\232\346\274\222\350\365>#\204\007\276j\373w>S\313\326\275\212Y/\276\206\223t=\315u\272\276\332 \263\276\277\234\331<\203\300\252\2761\231\352>\336\0025@\t\207\336\274k\202\210>*o\207\276\346?$>\242\177:?\371\365C\275\013^\324>\264\310\276?\026L\234\275\340\234\021>iR\372>\3436:\276\t\304\273\276\020\314\321<,+\235\276y\257\312\276w\020\253>\271\374\327>6\315\273\276\377[\271>\321\"\333\276\273\017\300\276\010\256r<)\256j\276\213T\030\2766\352\221>\313\276\333\276\232BG\276\325&\216\276\227V#>od~\276\277\267\371>\013\317\313\274hX\314=\334\022\231=\3706\255\276c\227\330\276\356\316\"?T\343\345>\330\323\036?\\\033*>\035\217\371\276R,\227=\036\341\004\277\307\235R>&\307}\276\370\366\025:e6\330\276t\265\325=M\241\303>*\306\371\276\317,\251\275y\222\324>\2402\376>\255/j\277\343\245;\276\022/\017=Y\372\300>:ue>\365\234\364\276\276\207\023?\373t<\276\001\244v=o\365\214\276\351`\315>xE\020>n\206\033>J{#\276\233U\257\276\304\316\244>w\363<?N\227\245>\t\341\021=$(.?\325!\247\276yu\016>\357\033\277=<f\360\276\3535}\275\013A&?`\352\007>\304\355\220=aT\322>\274\\d>\365K\204\275R\270N\277f\367\244>\245O\253\275|a2>\355\266K>\225\267\023?\243\006\323>\315\314\274>\274\313\r?\021\310\245<\030\225\264\277+j0\277d\004T\275\300\te>\304wB\276\250\035~\2762>\254\275\203\367\265=:\006D>\356%\355\276\326sr\276\335^\262\276C\036\241=\021\031\326\275L\211\224>\204\r\217\276\357\341R>5^\232\276\200\2379?g,\365;\260\344\252<\203i\230\276\245\277\227\2737\340#?\273~\321>2Up?\331\261Q\275Nb\000?\320~\204>\251\371j\275Ttd>\032Q\332\275&p\313>5$\236\276p\357Z=\027\331\256\276\347\000\321\276\003[=?\331\230\267\275\223RP=\215\356\220>\034\266\215\276\204\365_\276\304B\355=\351\325\300=\314\356\001?\315\315\227\275&\307}>\347\000\201\276[%8\277\341\227\372\275\344\332\010?\314\0130>\177\367\216=\367u >\271S\372\275!<\332=W&<>\276\237Z\276tA\355\276\373\2269?\316\215\331>\232\316\256>\215z(>fN\017\277`\260[>\221\325M\276\234\334\'\277\2722(\274*\000F\277\021S\222>Qk\312>U4\226=\322\001\311<\276\275\253\275F\261<>\250\374+\2757T\034\277\225\360\204=,\202\337\276Y\027\367\275\320\325v\277\376\361^\276\270;\273>r3\214\276\307/\274=\351&\241>\271\307\202>\031\034\005>\350\301}>B&\331\275\256\365e\276m\312\305\276\\Z\005\277\260\217n>\200\363b\275\344\275\352\274-xQ=\357\346i\276S\\\325\275\002\331\353\275\305\311\035>C\347U\276\251\331\263>\304|A?/\206\022>\330\201s>|\323t\274:#2\277}\\\033>8g\004>\330\266\370>\010\"\013\272aO\003?\212<\351>\304\353Z?L\032\243\276\344N\331>\024\226\210>\271\033\244\275\035\217Y\276q\3142<\362\260\260>\337\303E>\351C\027>\314z\341>s.\305>\375\204s= \322\017>\3436\032\276\t\212\007\277vT\245\276\024\350S\276g\'\203<:@(\277X\342a\276\207\371r>\354\242\210\275V\202%?\20686\276\333\013\026<l\225\340=A\324}>gH\025=\3544r\276\211\322\316\276]\334\266>io\240>\362\263Q=\032\336\254\275\314]+?\034zK\275\317,\t\277\344I2\276.\342;>\260 M>e\031\262>\251\336Z\276j\0306?\353\220\253\276\365\363\246\276\274\002\261\275\253\3175>\t\212\'?\300\t\265\276\256\201m> A\361\275\324`Z\276\007\014\222<\033d2\276\362\352\334\275\237\002\260\276i\254\375<\230nj?\267\321\340>\345a\201>\311\"\215\275\365\204-\277\003\354\323>*\343\257>\244\210L>\274\350\013\276^\364\035\277`\3450>(\233R>.v{\274\033\273\324>\201\230\204\274C\376\031\275\243\254\037=\366\321i\276\311\260j\277\307)*?\0261l=jM\223\276\244\302\210\276\247\\!>\224\336\367\275\370k\262>\212\260A>9\356\304>\214\271\213=}\313,\277W\225\235>3\3045@\246\320\311\276\256\234\235\275\341z\324={\332!\275A\020`\275r\243H\274\016-\202\276\273\'\267?+j \277\352\354\264>n\300\347=\210\235\t>\331=\371=\235\200\006\276\354\243#?\377[\251>X\312\n?\367;\204>=\n\227\275\315#\377\274\3750\322>\210\203\244=\302\335\351\276+\336\000?\267\356&\276\'f=<\354i\'\276\'\275\257\276\364j\000=\342\3515\276\257Z\031\276\034a\221=(^\n<\324H\003??\031c<yXH>0G\217\275\370@\341;\342uE?\036\371c>\333\026\325\276\213\303\271\276\242\234\230>\027\016\244>4\2424\276\235\205]>/\206R\276Ww\314\275b\204\260>\336\223\'\276#J\033?/\335\344=\347\253$=\343\307\210>\256\022\014>S\347\221=\351\267O>lx\252>\251\331\303\276\254\252\027=H\376\220\276\265l-\276;n\370\274\310^\357\275\237\223\336\275\003`\\>\227\305\224>[\224\311\276\376\3248\276\032i\031?\216u1\276\250:\244>\324\326\010\275\357\251\274\275\371,\017\275\3475\026>=\233\325\276\226\262\314>\210h\324>\234P \277x\234\242\276\204\022\226>\257\005=\274\303\271\206<#\370\007\277\021S\242\274\202\034t>KY\006>\314@\265\276\244p%\277`\260{\276\007\'\202\275\203\206\356>\025t\213\276\311\001\273\274d\314\245\277j\366`\276.\220\300>&\001j\276p]q\275\250\220\253=^\200\215>\2238\313=\016N\304\275`\310\352\276\362\265\267\276\022\367\250>N\321Q\276\277C\241>#\276\263>\353\341K<\263~\263\274\262$\n\274\023~\351>\200H\217>%v-\275\357U\313\276^\272)>\330\326\317<\252\267&\276cC\227\275~o\003\277*\343_>\323\274\003\276]\341=\276\313\271\264=\371\017\351=q\346W\276\013\357r\276\254\377\203>M\326@\277\311Y\330<C\347\345>\275:G>\254\034:\276l\317,\276M\017\312\275\256G!\276z6\003\2779(!>\377\t\336>xE\220\276\342#\">\205C/\275\226!\316\275\306\334\325>\244S\227\275\002(\006=\3127\333\275\253!Q\276\031s\207>\027\331\256>\004\255\320>\260U\"\276\214\370\356\276\360R\252\275\035\003\262>\211\352\r>v\343\335<q\344\201\274\3750\002\276\360\026\010\276\006\330\017?\235\327\350>U\245\255=\033G\354>D\213,\276\374\343\275<\360\334\373\275\301\220\025>I\272\326>\033\330\n\276c\264\316=:\351\035\276|\362p>\203\372V>\374\030\263\276w\363T>j\366\340\276\203\337\206<GZ\332\276rP\222>\325\004\321=\007\360\326=y\036\034\276\314z\021>\002eS\276\367\036N\276\306\212\"?\\\311V?\225H\202>&\036 \277(a&>Q\240\017>\232\202\353:\320\325\346>\376\324\270>\340\312\310;t\357\021\277\371\277\303=\t\377b\275U\3734\276\256\365\005\276\311\346\212=\315uz\276w\025\262>c\321\324>7\033\313\275\240O$\277Di\357=$\321k>K\257\r=2\217\334\276\242\321\025?\340\020\352\276H\247\276\276\372\320%\276\025\000c>X9T\276\271\374\347\276QN\024\276=\252\3559E*\314\276lx:\276\232Bg\276\313\326:>\333\247\343=\364\301r= c\016\2762\005\213\275\304\010!>\0221\005\276\240\211\340>k\017;\275\306\026\222>\360\242O\276\271p\220\276\366\321\331\276D\300\261\276\202\305\341\275I\364\342>\222y\204\276\r\340\275\276\204E\205\275\327\240\257\275\017\271\251>\262\336\003<qZ\000\2776\002\361=\224\336W>\300&\023\277\014\223\271>\245\240#?\344K\210=\322\000\256\276\224\275\245\272\240\340\242\276u\002\252>\005\305\257>\210FW\276\245I\001\277\222]\351<\221\325\235\276z\344o\276\013AN>N\177\026>\226\nj=\351\324\205\276\020>T=(\2332\276N\264\013\2765)\205=\236\352\020>\276\207\253>\036m\\\276@M\255>\220f\314\276\253$\262<H\032\274\275\036\376:\276\037\242\361\276\266\326W>\265o\216=-%\313=,\237\225>\311\036!\275\200e%>\nK\\\276\333\255\033<;6b\276]\212k\276)y5\276\003xK>\032\030\231=r3\334>\"\216\245\276\341\177\003?\247\221n\277\2613\005\2763\304\221?\276\237z>i5\344\275\317\367\323>\337\340\373\2761\224\263\276\210h4\276\'f\375\276\242\264\317?\311\037\014> \357U>\014\260\217\276Y\372h??tA>\021\033\254\275_$t=Z\365\331\276LlN\277\365J\031\277\212\310p>c\321\204>\301s\277>\373\\\355\276\271\302;\276\352[f>\314\356\311>\010\311\242>\010v\374;\1770\360\274\305\311=>\2279\005?\007\353\317\276rj\247\275\274\315[=\324e\341>\214\204\036\277\363<\330>\016O\337\276\231\365B\276\010=\233\274\253\347D>-\2257\275+M\312\276o*\342\276/Q]\276|\'&>\264\345\034\276\014\002\213\276S?\337\276b\025\357=\311\034\213\275\220h\002\275\263{\022\276\316\210\n?\206r\n?\356B\023>\357\347T\275R\233\270\274:z\254>\207\371\262\276\017\227\214\276\325[#\276\272\203\000?_\014e>\317\203;>\372~\332>\234\031\235\275\264vC?(D\000\277\252\202a?\027H\250?(\325\376=\312\245\361<-[\003\277\236$\335>(\327\264=@\244\217>\177j\\\276<N\341>L\216\023?\243u\224\276\340\363\303<d\257\267>I\200\332\276\233r%>\367\351\310>m\347\333\276\035w\"?`<#\277\231\365\322\276\373\256\010>\241g\343>\323\301z\276P\001\260>\322R\031\276\004Vn\276n\243\241\277\226[\272\276\346\">>k\016\340>)\313\260>4\272\223>\365\020->\331w\345>1\264:=S?\237>\323M\002>\261\341\351=x\227\233>\311<\222\276*W\250>\234P\250\276J)\000?@\030\030>\023fj\277l\225\200>4\277\332\275T\343\r?Yn)=\034\010\211>\216\257\035>\233\254\321=\245II\276 A\241>\360\371\221>\315\344\003\277\341\013\023>\244S\307>JAW>t\2655\276\271\374\347>\336q\252\277\2721\035>\317\203[>>\005\300\276\314\321C>z\031\225>\202\035?\275\345\320\262>\304%\247\276\t\306\201=\t\212\237>j\030\236\275\0221\205><k\307>\261\341\331>*W\370=\222?\230>{\210\006>\262F\235=\360\247\006\277\263\322\364>v\303.?S\2269?LO\370\276\306\277\237\276\353\035\256\275\370Sc>Q\332\003?\023,\276\276\027fa=\256\365%\276\210.\000?\362C\205=MJ\241=E\022\035>\210/S\275!\006\232=r\245\036=\003>\337\276{\210F>\206\033P>\343kO\2761\315t\275\224\244\313>\324}\220>\027\237\202>\006\365\375>(~\014\276\037\242Q>\222\\\276>\033L+?G ~\276Z\022`>IK\205>\213l\207\277\017\177M\276\002\274-\277\372\n\202\276\350j\233\276\215]\"\276\350\277\247=\204\365\257\276\335\352y>RI}>Z\365Y\276\004\347l\276U\022\331<\363\001\001=.9n=!<\332=Xs`\276U0R\277\377\004\207\276\367\3073\277A\232I?\306P\336\276\324\267\334\276\372\266\240\275\213\375\235\277\261\207\226=\313\020\037?\230\243\367\276\216\351\271\276\366\177\316>\"\211V\277\353\305\030\277\000:\254\275\332\003\335\276-C\234>@\207\031\276\210K\016>\216;e\276(\233\262\276\322\035$\276(I7\276\360\247\006>\001\336\202?\225`1\277\220\332L?\247?\003?nL/\276OY\215=\215\356@\276\276\023\343\276+\023\376=!v\326\276\177\244\250>\026\373K\276\307\200\024\277\226\t\217>\226C\313\276%X\234>~\030!\277\262hZ>\370\302\344\275\261\247\235>\337l\223\2764\020\013=h\350_\276\234P\230\276^\242\n?\'N\276>4\242\024>\235h7>V\274\301\276\1771\033\275\'\276Z\275l\354\222\276\002\202!?F\210\341;\313\363(\277*:\002?\311q\367>^c\227\274\361\200\202\276\306\026j\277\035 (\277\262c#?\304\261\216>\343\245\273\2769(\001\276\230i\023?\320\362\234>\244\3376?=\362g\276\276.\243=\227V\343>9(\001>(,\021\277\317,\231>\025\214\212\277\361Ff\275\360\372L\275\366#\225>z\222O\273\370S\363>\0221\205>\267\013\r>\340\333\004\277\247\226E?\t\371\340=\332\341\217\275\361\364*>)\355-\276\375\202\r\277\202u\\=}\312\326\273\325!\247>\022\3353=\327\022F@f\367\324\2763\334 \276\330\236Y>#J\273>\215E\323=\313\234.=m\217^=D\300A?\203\335\320\276*\220\031\275\270\344X\276\326\377\231>e\336\252<\363\253Y>\010 \025\276\230\206a>hzI\275\203\371\2307\315u\272\275\022\332\242>\262\205\220\276j\336\301\276\207\334,>\367;T>\326\2208\275\274W-\275<\367\256>\330\360\204>\0053\306=\263\265\256>V\274\201\276\360\371\301>^\021\\>\037\272\240<\347\306\244\276\n\364\211<\227\034\367\2753\026\315\275\217\245\017>\230j\306=\300\t\325>q\003^\276\326\216\"=\236\322\341>\265\377\201=\033L\223>0G\317\2758\2766\2765\322\322\275N\271\">*\000f>!L\233;\n\204\235<]\341=>jM\243>\r\216\022>\367\314\362\276\356\353\300=\346\256%\276\230\206\241\276\353\034\033?\\ \001>?\343\"\276 \230C\276\334\272\273>\364\375\324\276\211{\014\277\272\2038>eSn\275?tA>\254\305\207=\264\223A\276\243\351\214\276\250o9>u\257\223\275\213\340\237>\350\301%\277\205\322\227\275\361\364\212>L\216\033>!\002\276>L\211d=\030>\222\276\263\314G;\247\"\245\276b\204\300>a\211g>\254:\253<H\212\270>M-;>\211b2=H\277=\276\326\343>\274d\222\361\276E\330\200\276odn\277M\204\275>\214\326\241>\203nO\276z\344\217>\327\027\371\276e\034\243\275\327\340\330;W\354\337>\235F\332=\2279}\276\325\354!>\315\036H>K\253\241\276$\177\300>\206\346*?\326t\030\274\227s\351=L\340\326\275\261l&=\264;$\275\000\214\'\276\317k,\277\253&h>%z9>~R\275\276\254\307\375<\rl\265\275\'\027\203=\243v\277=\362$)\276\330\365K>;\252\332\275\342u\235>\270\257\363>\3333\003\277\304\010\301\276+\301\202\276\367\222&\276\320%\234=uv\202\276\332 ;\277\205%\216\276fe \274I\200\312\276\237\037\006\276\373W\306>&SE\276R\362\n>#\273R\275z\245\314\276u\2238\276\335\315\303\276nL\017>\232\316\236>\340\363C\275X\035\271<\307F\020\277G\003x\276m\342\344\276\002+\207=\253>\267\276 c\236>]\247\031?\371\024`>\004\306z\274o\365\374>tA\355\276\374\306\227=\365\204\325\276\201[\367\275\215\321\372\275\343\374m>\372\362\202>Y\335\352>*t^\275:\351\035\2763\026\255\276F\353\230>6Y\243\275\354Q\270<:\257\021>s/\260=\212\024\024<\211^\366>\320\2700=\363\037\242>Gr\311\276\377\317A\276\325[c\276#J{\276~\303D=\"5m<IeJ\275\3750\222>\020]P>_b\314\275\273\325\223>I\021\331\275o\365\314>8\333<>\201!\313\276$E\344=\222\263\320>\030\2254\276\265\213i\275\010s\273\275\256\273\231>\312\213\254=\215(\r>\306\247`>3\304\361\275\"\253\273\276\347R\004?#\333y>\256\365%>x\177\374=\266\333N\276\367\037\031\275t\265\025\276\315\256\273\275\371\017\351=\014\217\375\274\370\031\267\276\267\n\202=\343\215\254>\252\232\340=\225Hb>9\177\223\275\010 5>\274\311o=2U\260>\207\247\307\276\210\362\205\274\247\313\202>\016\025#=RDF\275\364\032\253\276\273D\245>\033L\003>\374\336\226>\266-\232>0L\246>\250\035\376>{0)\275\323\274\203\277\304>\001=\037J4\275\335\356\245=\304%\347>\234\242c\276\347R|>\236{O\2761\224+\277\353\250*\276l\tY>\006\327\\=\216X+\276q\003~=\276\2410=\336\253\016\277\224\336W>\302Qr=\307\235r\276Kv\354=\242E\326>\373\2269\276\341\317p\274S\264r=3\371\346\276\266\271Q>\003\2251>;\031\\\275\026j->\t\304\013>\317,\371>x\356}\276\\=g>\257w\377=\331\202\224;\264\037\351=B\316\273\275\254\034z>\357 \346\276\331\010\244>\315\344\333\275\312\211\366>\203\335\360={k\220>\201C\210>KY\266\276:\036s\276\206\257/<\304_S><\210\255>\3328\n\277\275\000\253>\234\334\'\277\230ic\277\2451:\276\340\236\247=\215z\330\276\335\007 ?9E\277\277\272I\364?\352\004\204\276\026\303\225=\017\356\016\276\023,\316\276\256\363/=-\tP>\270\201\361\273.\220\370?-\262\035>\375j\216\276\r7\200>e\337\025?W\004\177\276\274W\215>\301\312\221\276\241\363\332\275J\262\256=-C\334=\330\365\013?\217\245\317\275\207\242`\277a7\234\276\313-\215>\333\304\351\276\363\336\275\273O\3510?H\334\033?\301s\357>\204\330\271\276\342\006\314\276\237<\354=OXB\276~R\375>\277FR\275\352\347\215>\200e%\274w\333\265\276v\340\254\276\1770P>\371\364\330<\253\354;\276\023\325\233\276bJ\204>tA=\276\215z(>^\021\274\276\275\343t>j\331z\276\257w\177\276d\257??\"T\351>\352\312\347=\256\022\334\2761%\322>\250\343\301>\303\266\r\277\203\027=\277N\200\341\274\376\324\030\276Gw\320\276qr\007\277\216\351\231>\235g\354<\242\356\223>#\333\311>O;<>X\347\030\276\263\315m>\313\271\204>\302iQ\277\246\'L>\327L\216>\232\010\213>\202\305\321\276\262\205\020\277T\343\235\277\261\341i>\0015e?\030>\n\277r\334\331>\233\350\363\274/\027\301>\333P\261>r\376\206>\200\324\246<\037\021\323>\204d\341>Zd\003\277\205w\211\276\\\254\010>\222y\244\276\005\027\013>\367\3518>O\314\212\276\333\334\330\275\\\217\322\277\377!\255>\272f\222\275.\220\320\276Q\334q\274\003}\242\274F\231M>XVz\276\021l\001<0\r\203\276\224\207e\276MhR\275\214\203\313\274&\036\200>m9\247\276\236{o\276\316\2458>R\325D>\251\373`\277\246a\330\276\342\257!\277C\377\244>\322\035D\275\307F\340>\311\223\244>\371\275\r\276\032i\351\275\350\237 >\365*\262<l\317L\276\030`\177\276\250\030G>\317\203{>\250\343)?\214\370\016?\342u%\277\016\333\266\275\333\024O\275\321\221\254>\343\337/\277z\302Z?\020u\237\276\224M\031\276*\251\203>Z\330\203>\321\350\016>\005\027K>\205\010\270>\034\266\235>$\321\023\2775\t\336<*o\247\276y;\002\276i\374B\274\001\023 ??\035\257>\206 \'\276?\035\237\276|~\330=\005\206<\2773\371\266>7l\273>\230/\177\277zV\322;oG\310>\335}\016=\351e\304>\262*B\2742\343\355<\373\\\355=?\343\">\300[\300=\275\030\002?\207\376\001?\336\260\235>\014\007\"?\257\316Q?\330\2369\276->\005\276Yn\311\276\317\332u\277\235.K\276\035\003\032\277\016g^>:\036\243\276\021\307\272>\316p[?\312\032\325\276\356\316\022\277\320\3256\276\246\362\206>\016\207\205\275~t\272>\353s\265\276\202\304\226\275\215\270\000\275@\207\031\276c\356z>D\372\315>\316S]>\212\315\207>f\332f?(\017\253>1\316\027?C\034K\277\025\000\003\277\372\355k\276\326\255\236>\332Yt\275\320a\236\275`\310\n\276\0324\244>Ui\253=\367\036\016\276\352x|\277H\376`\275g\233\023\277\020;[?\177\243\235< {\275>\270\001\037>\314\177\310>D\300\221><\245C\277Q\203\351>\335\352\371=+\030\345\276\224\274z\275\243uT>\036\246\375\274\t\212\337\276\376\356\235=\214\3261\2767\210\026=\233=\020>\370k\022\276@\030\030\277E\236\004\277\34756>\247\005\217\276\226\225\206>\017\326\'\277\006\236\333>77\006\276\2132\033>f\367,\277\344\352\021<\261\334\242\276\257B\n>\274\221A?\204\330A?b-\376=\322\343\017?\347\374\024\275,\361\320\276lCE\276\274Wm>\333\212}\276\372\362B>\341\267!\275\323\336\260\276AJ\314=\213lG\276Z\204\202\275\3436\312>\n\327C>\304\010\241\276$\227\237>\020\257+\276\023\362\201\276\315\036H>%\351*\277e\374\033?\243\257\340\275\370\215o>Y\300\304>\304\224\230\276\005i\346\276\363\345\225\276\201\354u>>\350\021?\227\213\250>\325\317\333=\314\267\276\275q\3467\276\355\3607\277\240T;\276&\030N=\313g\351\276\232\266G\277\365\326\240>\327\022\362\275\261m\221\276|\325\n\276\241i\211=\203\300j>\243u\364>*\251S\276k\237\216\276J\230\211>\234\030\262\275\316\252\317=!\310\221\276\'\210\332>J\014*@\207\026\001?\345\n\277>C\305X>\367;T\276\177\243]=$;\000<K\240R;z\3079\277\351\324\345\276r\375;\2744\205\216\276\314(\266\276\346\222\212=\340\333\244>\313\234\376>\214\326\361>\207\242\000>tF4>6\347\200\275R\325d\276\257|\026\276\002)\221\275\373\"\001>\276\366\314\275\026\244\331=E\r&\276\033\177b\275\343\374\215>\036Y/;\202\377M\276\213O\001>sc\n?\231\273\366>\'\203\243\276\024\005\372\275\212!\231\275:\314\367\276Mg\247>n\243\221\276\215^\r=g\3556\275\235\177\273<7\252\263=\257B\212\276\335\357\200\276}\313\034\276JF\016>M-\333\275\365\333\227>a25\276\253#\207\275\246\320\371>\367X\032\276\241\236!:9B\253:\215b\211>\002H\215>7\303\355>UjV>\356%\235\276\317\332\005?\207\247\'?q\311\241>\353Ud\275\317Nf\276\220\210i=\203Q\311<\021\215.=\275\214\342=9\321\356=2\254\222>k\016P\2765\007\210\276\004\255\220\276\007\364\035<\013E\272=\023\'W\276\277`\207\276\305\033Y\276/Q]\276\374\030\363\275C\377D\276\345\263\004\277#\020\277>\266\370T?_{v\277\200\361D?\026\301\337>\017b\347\276\376\361>>\232\010\213\276\035\347\266\275\355\323\241>\204\273\303>\374\373\374\276k\016\220>$&\250=B\225\032\276K\037:\276u\260\356\276\203\300\032?\240O\244\276\204G3\277\313\276+>:;\031>M\022\013=6\223/\276\'kT>\310\357\255\276\267\177\265\276\014\310~>\344I2>\236\2305\276\361\322\362:\3058\037>\200c\257\275\245,#\276\177\336\224=\035r\243\276>=\266=\273a\013?\277}\315>N\227\205\276\nj\370<\031\305\322>n\372\363\275\350\300\362<)\\O\276\374\030\243>\336q\232\276\257%\004\300\367\004I=D\206\205>g\0174\276\017b\227\276%\314\364>\032\300\333\275k}\001\277\r\211\273=\240\032\357\276\020\257\373\276\347\306\364=\244\343\312=\035\000\261=\331%\032\277RI\275\276\250\216U\275&\337\014>]\0263>|,\335\276\273\233\007>c\1779\276h\221\375>\3377\026\277\365\326 >zS\241\276\315\224V<\367\314\262\276\323\244\024\276\315#\377\275LR\231\274\214\204\206>\237\001\265\275\374oE>h\t\262\275\340\333\014\277}?\245\2761|\304\276\234\032\210=\331w\245\276\030Cy\276=\336\232;\243\257\000\276>\"\246>\274W\275\276\353pt\275q\217\r\277M\241\203>\264v\033>k\261\200:[_D>\314E\354>\026L\374<\317N\206>n\213\242\276\354\335\277\276\266\363\035\2766v\311>\303\266E\277\362\315\246>x\271\230>C\034\013\276+\366w>>\313\323>d\003\311\275\005\027\353\276\203Os=\277H\250\276\210F\307>a7\214\276Z\021\225\275R,\367=\351}\023?\332 \003\277;\252\232=jMs?\024\355\312>\362\014\272\276*t>\276\321y\315=\352\004\024>K9\037=\340\326}\276C\004\214\276\345X\203:1\316\337=\314\227\007?\375\0234?qr_?{f\331>d\0369\276M\020U>\177\023\312=N\016\237\274\3019\323\276\030>\002>\034$\244\275\210\021\222>TW~\276\323g\207=H\247\356\275\033/\005?YQ\243\276W\354\377>\"\211\006\277\2608\034\276f2\274=6 \202=2=a\276hz\t=\214I\277=\3711\346\275\017(\373>p\351\230\273\031 \221=Qk\002\277\241\022W<\356=\334=\354/\313\276\004\255\000\276\37065?a7\334>\246D\202\276>\262\271=y\036\274\276<\024\005\276\002e\203\276Y\027\227\276\372\010\374\274q=\n>\0256C=\024y\222>\351&\021>\266\277\263\275OX\"\277\256\201\005?\362\265\'>\025o\004\276y\001\366\276\210\021B>\257i\224\272\364\0254?\330\365\253\276\362^\345\276\273+;\275\330\203\311<\343S\000>\345\325I\277\321\005\265>n\027\032>\034\013J=|~\210\276\371jG=\373\"9?\367\257\004?b\020X?\255\210\032=\232w\274\275v\246\220>|\200\356\274\014\260\257>\357\312n=\256\360N\276\217SD?\214\363\037?x\177\374\275\317\332\255\276\\\311\276>\347:\315\275\3274/@\237U&\275\350\366\032?Xs@\276\234o\004\275\320\014\302=\315\311\253=\200}\024\276M\363\346?\207\247\327\274\034_[>\"\251\005\275\t\212\337=Ed\250\276\356|?\276\353\377\234>\026\207+?\255\205\231\275f\2758\276>\005\320\2765\230\206\274\202r\233=4\327\251>zS\321=VHy=C\377\304>\321\256\242\276\274\2219\276BC\177\276\271\302\213\276\245N(\277\314E\034>\031\2548\275\035r\223\276\225\324\211>\333\242\254>\2136\307<\225fs=\361\364J\276\214\276\022\277\030\262:\274Rb\227=\021\341\337\274\177\026\013=`\345P>,q\323\273\252\267F>\r\375s\276P\302,\2767\340\343>\343\031$\277Z\360b\276\236z\244\275\252C\006?7O\365=\302i\341>\225\234S=FE\034\275\221a\245\276\367E\235;\034x5=\217\336\360\274x^\212=O\260\377\2746<\355>\027H\200\276C8\306=v\033\024=\312\246\\\277\000\256\204>\317f\325\275k`\003\277\226\225&\276\335\224r<\271\3072>\211A\340=\206\217\000?d\220{\275\376\231\001\275\311\345\177=\014\223\251\276\004\342\365=5\322\002\277~5\'>\025\221\001>-\317#>C\347\265\276\254q\226\275\005\335\256\276O\222.>\275\247\362\274\\8\240\276\027\274\210\276p\224\034>9b\005?xE\220>A\202\232\277\017\264B=\333\247c\276\303\365\250\276\214\363\207>\362\322\235>\313\234\016>5\360\203=\256\273\311>iW\301>\032\243\025\276\257\231\034\276mV\005\277\212\315\007\276\305\311]\276\036o\222=2\346.\275\3436\232>d\222\221>\202\213\205\276S\320\355\275!Y\000\277\023\232\244\275\327\022R\276\3544R\276\033\236\336=%X\\>>xm\274JF.\276\216\003\257\274\032\311\032:\312\340(>\216\222W>\260\033\366\275\025\251\320\276&\374R\276\373\"!>1\224\203\276\014\310^\276\362\230\241\275\307h\335=t).>o/i\276^\364\205>\327\240\257<gD\031\277\241\241\377\276\'\302\306\276\277\265\023=\256a\006=F\231%?S\\U\276\207P\005?>>!<\332\254\232\276\220\275\336=\302\300S>(\233\322>\374\3067\276\242\264\367\275#\370\337\275\0048=<\265\334\031=&\001\352>\"\253{>+\030\225\2769\177S\276\r\216\302\276\007%<\277\245,\223>\223\000\345>M\326H\276\321W\020>v\375\342\276|\323\264=x\264\321>(,1\276aO\373=F\261\034\276\362\315\326\276\251i\027=\001\244v\276\376\232\214\276\234\026\374=\242b\034\276y#C\277*\251\263\276\263\230\230>\375\023\\>\312\340h>\343\301\226\274\225+\314>.\037\t=\204\022F\277\004\377\333=\207m+>\202\305\221>\354\371\032=\233=\220\276V\272;\274(\3619=\254\220R\276\307)\252\276I\200:\276(\325>\276=\362\007\276\'\365\205=\301V\231>\003}\202\276#fv\275v\0329?$\227_\276\021\215\316>t\352J\276\245\240\233=R\231\242\275\024\"\360\276^*\266=\017\200\230\275\2608\354>&\246\213=\247\\\201>\334\200\017>2=\261>\232\272\206\272\334.\204\276\341].\275\277\232\203>J\357\213>/\370\264\274\362$\001\277\21372\276\345\230l\275\236AC>zp\367=\036\306$\275\372\263_\276>\350\331=\334K\352>XV\212\276Y\213\027\277\020X\211\276\022\3322>Ed\250\276Z\r\t>\325\225/\276\236\322!>\206!2\275\n\021\360\276V+\023\277y\314\220><\024\005\276\246a\270>\022h\260\275\000\000@>x\356}>\251\237W>\357\2146\275\352\262\330=\030\317\340>\275\035!>\224\372\262\275\373\226\371\275\217\374A?\230L\325\275(\'\332>\264\217\225=\020]\220\276it\247\276\2073\357\276\267]\210>\337\370\352>\"\303J>\223R\200>+P\313=\353\216\305\274<\332\330>I\205\201\276\\r\234>\234\373+<\366\227-\277+\301\"\276\232%\201=[|\312>\r\340\315>\210\364c?\003`|>\374\3778\27582/\277\305\345\270=Z\362\270=\212<\031\277m\255\257>1\010\354\275\267\013\275\276\235\364~\276\312\341\263=^\272\311\276y\262\273=\303\237\241\275\007\231$\276r\212N\276\360mZ>\211\';\275\014\223\035@k`\013\276\252\202\201>\377\tn>\023I\304>I\021\331\275~\262\030<\036\341\224\276\340-\340?\277\322\231\275\323\364\271=\223\214|\276vo\305\274\3166\327\276\332\251\271\274\361K=\275\000\343\231=.s:>uw\235<\210\023\030\275\202\250\373\275\371\201\313=\275\214\002\276\222?8>\356\341\\\273\177\366\343=\270V;\275<\332\030>\027\237B>[\232\273=\225\016\206\276\363vD\276\035 \030>\247\003\031=\005\372\224>\032\300{\276\325\225\017>\320\322\025\275 {\035>\343\373b\275\243W\003\275h\\\370=\331^\213=\252I\360\274\232\223\027=c\271\005>\036\213m=\201x=\276\327\300\326\275nm\341\274\277H\310>6\037w>%\314\024\276\317\025\245\274\023,\236>q\033\r>/Q]>Z\022\240\2763\210\217\275\234\247Z>\372\354\200<\337O\275>\272i\263=\201&\202>\n\241\203\274\030}E>\226\t\217\276;\302\351\2759\227\362\276\254\032\304\2753\334 >\223\035{\276\255\243\272\276\212\345\006\277G=\224>\366E\302\276e\337\345\276\212\216D\276\372\362B\276\241\333\353>\2235\n\276Z\233\206\275H\247\016\276\374\343\275\276\261\020B\273\213q>\276\000\032\205\275d#P\275\237\037\306\276\013\014\211>\336\345\262>q8\363\275\206\311T>\016\254\031<\202\217\301=I\235\240>\0216\334\277\034\354\215=9\227\002>\2176\236\276$(^>\342\220M\275\250\000x\276\211)\201>&\375\275=x\321\027>\301\377V>\370\305%\2747\216\230>\216@\214\276\020;\263\276\026\210\236\273.\377A\276\303\357\206\275M.\306\274w\272\263\275\251\301t\276\342\314\257<\340\333T\276;\375\240\275/\027\361\275\014\\\036=\232^\342<N_\017=3p\300\274\344\024=>\263AF>\273\325\023\276\356\266\3119\257\224e>\354\243\023>t\265U\277\307\364\204>\272\335K<\243\001\374=J^\335=!\222\301\275\260\217\276\276G \336\275sG\377\273\251\3014>MHk\275B\230[=Nb\320\276\354L!\276\222\2569\276\274\261\300\275I\021y>\243=\336<w\331\257=\332t\004\275\001\301\\\276\220\020\345;u\005\333\274}\\\233\276|\231\210=N\356W\2761\010,\276ga/>\350\274\226>\333\304i>\007\227\016\274\272ki>S\"i>}<\031\274\267\014x=Q\024\250>x\226\300=\272\237\023\275\213q\376=\210\235\211>F\013\260=J\357[>\201\225\243=\265\375K>\314(\026\275{k\340<\202s\006>\242]E\276z\307)\276\230LU>\035\000\026<od\036>a\254\312;\240\371\274\275\344I\242>s\272l>b\025O\276\201v\307=\347\000\221>\224\331\260>aqx>}ZE\275\327e\035;\273a{\276\304w\002>\361\363\337<\303\360\321\275\2068\226=6?\236\275P\031\217>/\027\361=:\257\241\276\252\265\260\274\331Z\257\276W\260\215<2U\200\276v\340\334\275\312O\212>\265\211\303\276B`\345\275q\346\027>\265T\036\275\036\026*\276*\n\252;\272g]=\316nm=N\271b>\3171 \276Z\022\220\276\346!\263\275L\212\257=\026O\275\274\005Q\307>\350\202\312>QN\264=\034\323\023>(G\201\274\212;\036\275\n\334\372\276G\346q>\337O%?\037\2715\275\216\257\375\275%X\334=\206\217\270>\217\373V=\312\025\216>@\207\371=\250:\204=\03630>&\030\216\275\224\240?=\016\204D\276\343\343\023=c\013\221\276\361K\315>PP\n\275\017a|\274\006/\272>=\177Z\275\2716\324\275e\253\313=\200}T>nLO>\365\275F=m\215\210\275\032\300\273\275\272\240\376>82??t\352\252=a\211\207>\351&\201>\"\343\321<\314b\242\276D\335\327\276\014vC>\246\013\221=\250o\371>5\r\212\275\216\001\231>\306m4>\371\275\215=T:\330=\006f\305\275\327\022\222>\320\355\345\275k\237\216\274K\036\017=\375\202\035>\202\256=\275\001M\224\276\210\327U>\312\341\223\275b\363\021\276\306m\204>C\034\353\274To-\276\273\320\354\276\235\364\036>\355\266\253>\203no\276\271\210\027?\316\374\352<\2279]>\244\337~\276\367\351\370\275J\321J<\tm)?\223o\306>!\260\022@\356\353\220>\265\303?\276_&\212=O#\315>\322RY>\313\234\276>\256\022\354=\007_\330>\367\222\006\276RD\226\276\236\230\225\276\227T\255\275\2611\257\273I\201\205\275\204\022F\276\2029\232>\325[\003\277\355\201\226>\244\214\270\275\024?\226>\222\221\023\276[\224Y>\324+\265>Ic\024\276b-\256>\235K\301>\021n2\275W\354\237>\335\230\336\275\223o\206\276k\016p>\325[#\276t\357\001>\"\032\335>W\315\363<\007\3230\277C\034\213\276H\341\022\277\253&\230>\217\245\277\276\252H\005\2767\250==\354\206-\275\225\361o\276F{\274\275\001\212Q\275`\315\241\276\315\254e=X\017\251;\201\317\257\276\277HH>I\272\226>\366]\341\2762U\260<\r\375\323=\354\206\215>\274\256_\276\2616\306\274P\252]\276*\306\271=^\021|>\311\253\023>\361.W\276\r\340m>\332\217T\276V\237\353\275\001\2446\276\026\023\033\276\022\302c\2766\315\233>\274\\\244\276\031\347\017>\316\302\256>\022\331\207\274\270\351\027?\321\221T\277\311\345\037\276W>\033\277\313\363\340\276\247\313B\276\317,\251>\210\364\273\276\027\361\035\277\372\362\302>0*I\277\257w\337\276\254\306\022=\275p\247=\234\210~=V\271P=R,\247\276f1\201>C\344\364\274U\301H>\331_6\276\321\"\313\277O?(\274-\006O\275\016\025c\275\234\304\340=\230\300\355=\263\262=\275\316S=\276od\336>\025\000#>\326\002\233\275h\\\310\276kb\241\275\341~\300\274Ih\333\276\300\354~\276\323\366\257=f1\201\276B>(\275\317\240\021\277\214\326\321=\374\000\244\274\010rP\276\313\020\247\276/\335\204\276\"\000\270<0\236a>I\2358?\314b\342=1\355\273\275\226\347!>\373y\323=R\017\221\276o\r,\276FB+?\211^&\276\215BR\2754\235\035\2760\236\001\277:\257\361>\261\247]\276\ni\215\275\001\244\026>\254t\267=\246\233\324>\273a\033>/\243\350\276\371\332\363\275\367\257l=#-u\276\n\327\243\276>\342\374;\242(\360>{f\231\276\312\025\256\276%z\331>!\315\310>\374\306\367\276\317I\217\276V\237K\277\231\360\333>Xs \2768g\004>\"\213t=\313\333q>.\347\322>q\003\276>h\313\211\276\214g\240\276e\215\032\276y]?\276P\252]?T5\321\276\007D\250=\253\262\007\277\204\331\244\275kE[\275\276\366\354\276\355\323\021>\241\020\301>m\251C\275\010;\305=\2721\235>\035\260k\275\233\376\234\276;p6?\255/\322\276\r\375\203\276\205\010\000?\033\365\320=\000o!\276\003_\261\275N\234\034=g\233;\277a\376\n\275\243\351L\276\215E\243\276G\254\245>K\223r\276\0216\\>\214Jj\276\\ws\276\325\004q>j\030\376=k`\253>\367\315\375<\210\235)\277\304\316\224\276Ym~\274%\257\316\275\007\225\270<\271\337\221\276wJ\007\276\275\214\002\276V\016\215=\257|\306>\345\324\256=\226!\016=\204\022&\277H\304\024=\331\353=>\300Jt\273\1770\340\276\243\314&\276O\036\026?\237\347O=\367X:>\356w\350\2754e\307\275\252\202\021\2762\314I=\021\345\313\275\312\303\302\276\343S(\277/i\214\276\301\220\325\275\230/\317\276\264<\317\275Z\273-?d\036\231\276s\021\177>\340\204J?\033d2>Edx>\226\225F>I\272F\276OW\227\275\234\341\206>\367u@\276d\003)\275\321Z\261\275EH]<\003>\317>T\035\362=\035\255\212=3\376\315>\345\270\013?\315\261|\275\020\006\336=\236\360\222< \230\343=\356_\251>\210h\264>nn\254>\371,\317=\246\362\246>\017\356\316>\361\200\342>E\362\225=\201\262\031\277\316\337\224\276|\355\211\2761\224\203>\027\274X\277\372\320\225>o\323\337=\tOh=\257\261\213\276h\350\337>i5D>M\363n>\265\303\317>L\216\253\276`\307\277=\"\2464?\324\016\377=P\302\354>\361)`>\270;k>\251\023\340>\322\035d\276\326sR\277\372\233\200>\204d\201>(D`\276yX\220\2775\357\330>\260\376\237>+\207\266\276k\361\211>\220I\306\276\030\260\344<A\237h\276\227K\364;_\230\254?2=\t\277\313\020\017?,\237e\2754\326\376\274o\330\266>\222\350e\276\311\253\323\276k\232\003@\013\322L>\020@\312\276\362\265\007\277\002e\303>eU\304=#\241m\276O\257\344\276\346W\303>\304\224(\276\255\027\323\276\000R\033> ^??\201\201\326;F\224v<5\265,=Y\213\017?\372A\275\275\033/\335=\023\n\321=%\354\233\275\262\021\350>vT5\276\006\234\305\275\233Z\026>bg\032?\251\366\351\275\256\323\210>\321@\214=D\372m\276\342\344\006\2777\303M\276S\313\366>j\336\361\275\306<\006\274\267E\231\276\207\2420?\241J-?<\024\035\277\033/\355\276\034\266\275\276\0319\013\277\247\005o\276\363<\030\276\354\372M\277\177j\314\276TV\263=i\306B>Wx\327=\021\306\017\275\353\255A>\2338Y\276\326\2208\276OX\302>\253[\235>\343\374->Z*\357\275cz\362>\005\206L\276\323\221\022\274}\221\260\276\251\2459\275c(\307>v\033T\275\266\363}>\374\251\321>\251\373\320>\365\241\353>x\321\027=\201!\253>[\231\300>\2716|?\203/L\276\t\026\327\276\311\260\312\275\346\\\332\276\027\324w\276t\014\250\276\020]\220\276h\225\031\274@M\355=P\215\017?3\376=\275Q\275\265=\265\032\242>f\332\276\276d]\034>\031\311\236<\244\344\345\276e\252\320>W\t\206>\247\"\325\276M\333\177>\007\354\312=\376\267b\277\235F\372>\335\231\251=\310\315\220>\352!\332\2758jE\275g~\305\276\267z&?5c\201\276\021\215\356\275i:\033>R\'\000\276\252C\236>\335\315\243\276\240\342\270\275\334)]\276_\322\270\2762Z\207\276\"\375\266\276\344\332H?\017E\031\277#-\325\275e\001\243\276\273\nI>it\207>\377[\251\276A+\030?\\=\'>(\362\324\2765cQ\277\377xo>\225+\014?\311v\356\276\r\306H=}[\260\275\227\220\337>\207\026y>Gw\340>\266J\320>\234m.>\345~g>\301\377\246>K\345M\2761_\276>\220\332\004\276\000\035\346=\344\367\036?`\310\212\276Z\365Y\276>\320\n\276b\326\373>\210h4\276\376Ha\277\346\007\256=\367u\000\276\035\0032?\315X\224\276\253\317\005?\345\362\007\277\314]\013\277\254<\301=\205\224\027\277v\303V>\230\206\301\276t\0071\276\322\030-<\276\023\223=\301\255\373=\373\3504\276\202\220$?y\351f\275*\306\001\277\223\251\202=\026\030\322\2765c\201\276CV\267>\333\247C\277\002eS>\356\224\036?[|J\276\252f\226\275\225\232\035>\030\354\246=-\354\331\2765{0\277\326\377\031>2UP\276\336\310\\>A}\273>\255\372\034?\303*\356\276V\232<\277\036\334\355\276\314(\036\277Y\300\264>\304%\227\276\362$\t>v\340|>\271\210??\323\244\244\276g\355\266\276\251\274=\276\307\364\264\276\232\266\317>\357 \026\276\233re\276O\314\n?\352[\016\277\367\351\370>RI\335\276\002+G>\376+K\276\305\033I\277`\315!>\277e\236\276\t\304\013\276\255i^>\250\344\274\275\335\352y>\373t\254>\342\222#>\264$\233\273\220\210\311\276e\307\226\276\245\2236\273I\200:\276\261\024I<\257\353w\276\343\252\022>\210\021B\276\\=\307\275\240O\004>#K\346<\240l\252>\031\377\376\275,\267\204>\361F\246\276#\242X\275|\362\200\276W\303\017<\220N\335\275\021\374o>C\034k\276S\"i>\300[`?\027\324\267>\243\036\202\276\247\222\201\274\346\221\217\276p^\034=\221\270\'>\331w\005\276*\307\304=\211{\274\2763\304\021\277\331BP>B`\005?\216;\345>L\211D\276h\256S>A\274\356\275L\032C>\267(\223>`s\216<\232\"\200\275\353V\217\276\362\352\334>8\370\262\276\321\\\'>t\357\261\276\314\264}<\341E\237>O\036\206>\361\3269\275\033\201\310>t\232E=~:>>f\275\330\276\215E\203>\360\026`\277Ujv>\316\032|=\231\326f=D\213l\276\271\034\217\275yu\016\277<1\253\276\251\244n>/\367I\274\363\002\014>\033\201\030>\350\366\202\276\365\241\273>C\255\t\276\264\037\271\276\360\242\257\2752r6>\345\263<>n4\030@q\257\014=!\223l\276\010\311\242>\325\354\201\274]\341\035>\021S\262>\316\302\336=\356\353\004@\366\177N\276\274\2219\276|B\366\274\003\t\232\276\024\320\304\275\307H\366\274\216\006\360>\245\024\024>-\262\035\276\273\3222=\262-\303\275{\024.>z\302\322=\007\010f>\324+-?v\031~<\232\231y>\307.\221>\202V@\276<\332\370\275.\001x\274eS\336\276R\361\237=\377\225\r?\370\215O\276\204\273S\276\203\030\210\275o\240\300=\242F\241=\033\r\340\275\014\345\204>\034\261\326\275\211\014\213>\234\304`\275\254\213\003?4\272\243\276\302\372\177>\270\312\223<\311\345\177\276\304_\303>\021p\010\276\256\330?\276G8\r\276\034$\204=(\327\024\275x\355\022=/\300\376=(\n4>M\207\251:\357\036`\275f\332\036>fk=\276\251\237\207\276\002\267N>\307F\200=u\205\010\274 ^7\276\306\277\237>\304\010\201\276>yx>N\340\014\273`:\215=\306mT\276\314z\261\276\215(M\276\'\203#\273\rT\266>)\260\200\275\232\010+\277\375j\236>k\016\300\276=\n\327\275\251\244n\276\316\3075>\2135\034\275\355\323q>\337\370:>IK\365\276\310\007\255>\222\\>>N\266\201\275\231\331\'\275f\367\004>\217\031\270\276n\243A>F\353\000\277\315\001\"\276\023\362\351\277\337\340\313\276\357r\361\276\'\275\237\276c\264\336>\2402\256\276\036P\266\274_\007\356\276\232|s>\224\203\331<\377\315\313=\212t?=\342;q\276\242\264\027\276\372BH<\036\341\344\276bJ\024?\341\227\312>\372\271\201=\2067\213\275\325\262u\276\000\3063>9(\341\274\243\314\266\276L\337k=\\\346\244>;s\217<;6\302>|D\214\276\004\377\033>!\002\316\275{I\303>\256\274$=\242]\225>\255\300\260\276\317\327\214=\230\027\340\274\253x#\276\320\233J=7pG\275Z\273\275>\302\243\315\2751\353E\276\240\335\301=\005\305\237\276\345\355h\276\256\022,\276M-\273\275?\251v\274\331\010d>f\205\202=^\021\354\276\2026\271=\320C\355<\002H\025\277nQF\2760+\024=w\024\'=\345\355H\276\243u\004\277\02658>\000W\362\275\241\370Q>\225H\n?\337\025\241>\327\206\n>\007\360V>\370Ow=\022\025\252\274\355\266\233\276\236^\271>.\342\253>-\225\227>\241\276\265>\244\031\253>a\026Z=5\361\216\274<\275\322\275\220\236b\275\004s\364>N\264\013>\341\0133\276\305=\206>\276\301\007\277[\266v\276\276\237z\276\177\331\375\275\230m\247=fk\035>\000W\322>\347\035\267\276\310\322\247\276\027HP\276\20338=\315s\204\275j\274t\276\252)\251\275Z\241\210=(\233\362=u\002:>2\346\236>\245-\256\275w\025R\276*:\322\275\013_\277\275\240\335\241=\263\230\250>\034%\317\276\014Y\335\275\305<\213\275\222\226\272\276\035\311%\276\020X\031>]\277\240\276\301\342\300\276\321*\216\273a\211g\276\334c\001\277\320u\006\274\037\200T>\027\016d>8\363+\274:\257Q\276]\371,\276\253\004+\276\305\346\223\276\201\354u\276\037\242\201>\267\2274>\224j\007\277\200\237Q>\314@e>v\026=\274\317f\265>\002H->a\375\357\276M\276Y\276lC\345>\210Kn>\370\215\007\277\352\347\r\276\340\276\316\275\231\270\265=1\316\337=;\031,\277\3603.>5A\024\276\000\213<\275\t\027r=\314{\234=\001\336\002>\230\372y\276\nhb\276/4w>\357\254]\276\203N\210\274\354\022U\276q\003\036>\301s/>2\003U>\026\2449\276 \354\224\275\271\337\201\276\030\262*?u<F\2766\260\265>\251\336\332>\324C\244\276\260r\370\276sf\233=\251\366\t>\276\207\253>w\202}\275\325>\235<mo\227\275^\235\243\276\257\321r\275\202\312\250\276\rl\205\276\271\2455>\244\374$\276\327\335\274</\0271\276Ii\226\275\251\301\034?\204\022\226>\031\312\251\276\014Y\335=aT\202>\026\244\251\276\235\327\030=\223\306H\276\360\371\t\277\224\301\361\276\333\247\223\276 \230\013\277\316\215\211>;\215T\276\001Md\276jM\013\277\253\262\'?\215b\031>\2716\014?\177j\374\275\365J\331?\354\372e\276q\2525<.\034\310>Y\206\370=\030!\214>H\247\256>$a_=.\2200@F_\201\276j\301\273\276\030\354\016?\204\364\264\2754\327\331\276cb\203>\'N\356=\345\'\265=\256\r\325>e\0013\276\324H\013\276w\242\204\275\214\333h\276{\240\245\276\257_0?6\260\025\277\030z\244=\203Q\271>\353\305\000?V\324\260>f\332\376>\253&\270\276]\025\310=\255i\236\276\273\270-\276\242\013j>6\037\267\276\206\217H>\315\222\220\276\367\001\010\2768\333$\277 \230\223>\351CG?{\332\201\276B\350\240\274\"q\237\276\215E3\276\"lx\276\030\225\324=\3019\003>\242(\010?\226>T>\317\024Z>O!\327\274\354\022\025\276\\r\\\275\212Y\017>\337\301\317\274\213\246s>\317I\217>P\344\t>\313-\025\277\243\006\303>B`\265\276\265\211\323\275\301VI\276\317Io>|\235T\274\236)\264\276S\263g\2765\3222>\312\375.\276\200\324\226>\017\326\377\275I.\217\276\033\330\252\276-\006\017\275\033/U\277j\301\353\276#\370\377>\336Y{\275\2755\000?\226\347\261\276\276\274\300\276\342u=\276\2338\311>\373@r\274u<\226>\221\270\007>\254\342\215\276\275\373\343\2767q\302\276\235\364\036>C\004\034\277\210.\350=\275R\326=\203no>\375\207(\300\366@\213\276\333\336n\275D3\017=\362\007\263>\231\323%>X9t\276\377!\335\276\361.\207\276\241\243\225=\030\010\302\275\225eP?\252`\324\275w\2419\276aT\202>\301s\237\276\347\343\352\276\253\tb\276\032n\360>\347\251.>\311v\256\276N\177\266\276{NB?\370S\203>\225\237T\276\303f\300=\241\271\316=Q\240\217\275Y\213\017\275t{I\276_$\264>\r\303\267\276\305\376\242>\324\324\362>\355\231%?4\021v?\316S\255\2765\264\241=\320\'r>\254s\314>V\016\035\2779\264\010\276\366\007J=\251`\236;\206\033\200>\255Q\337>\325{\312=\262\270\377<\341z\324>\226\262\014\276fN\327>\0053\246\275\r\211\373=\371\024\220>\307\325H<\345\270#\277\306\341l\276b\241\206\276}\320\363\275y\314\200\276\311\220\243=]R\265=\261P\333\276\306\341\314=e\245I\276bJ\344=+\204\325\273&\374\222\276\257\316\021\276\016\363%=\231\2736\276\213\375%=0\236\201>\204\022&>9\326\005\276 FH>\341\356\024?\024\355\212\276\010\254\\\2750\3653>\337\032\000?\201\004E=\031\305\022>\362\t\031=N\264k>\240\025\230>\317k\254\276P\344\t\276Kv,>\r\251\302\275\257w\377>\230\336\236=5a\233\275\025:\337\276\232\231\271>\374o\005\276\221\360}\275\236{\237>\226!.>\231)\255\274\203LR\276\344\017&\276LO\000?a2\025\276\217\245\217\276\221\363~\274\314\231\355<\367\257,\276\342\036\333>?\304\206<\266\020\264\276\257\010\376=\346?\004\276\376\267\262\276\007\261C\277M\204m\276\300\347\347>\352?+\275mV\255>\211\007\224\276\365ei=\367\006\337=\353V\017>\316\252\277>\371\276\270\274\300\262*\277\305\254\207\276\221_\277=\003x\353>j\244\245\275\305 \200>\342?\035\275\336\260\025\277z\031\305\276\334K\352\276\215\177\027?\373\226y\275\027\203\207=l\004\"\276\221\')>\030\t\235\276OX\322\276!\260R\276B!b\276\317ej\275\207m\013>\353\034\003>\343\307\330=S\224\213=\006\2015>\250\306\213\276\371\207\255=\007\231d\276\371\275-\276\373:\360\274\327/\330<\003D\001=\336\314\310\275\241/=\274\014\002+\276\341(\371\275\000\251-\276\002dh\275 c\346?\254\342M\276\336\014m\273\337\025\241\2763\371\226>\001\244\306\276\r\216\322\275\211{\334>\351e\024>\010X+<\236\352\260>\234m\216=\243\254\237=\251\373\000=\257\355\215=[\266\246\276\026\030\202>du\233\276\213\032\214\275\207\350F\273dX%>\355\231%\277JF\376\276\341\316E\275\237<\314>\242]\r?{\371\235<\320\'\362\275&SE>\327L\316>B\317&\2769\264H\276\373\"9\2772U\360=P\344\311>w\276\237\276_\322\330=\000\221V?\255\300P>\233\000\303\275\\\033J\276N\271r?aS\'=c\234\217>\026\336\r?\014<7\2755$\026\277\364\243\201\275\272\240^>V\016I@\310A\231\276\325v\023=\334h\200>\305\000\211=l\225(\277\210F\227>\010 5\276\220\020\205=o\201\324>\025\214\252\276n\300\367\276\037\235\032\277(,1\276\233r\365\276V\016\205?\004\255\030\277\237\216\307\276\257B\352>\006/\372\275\002(\306=k\237\276>io\220\276Y\335:?\365J\271\276E\244\036\272-|\235=\363\002\004\277D\372\035?\336Y{\276\027\202\034\276Q\203!\277\261\341I>\2235\352>\256\022\004\277\024y\362>G\311+>\262\364\341=\017(;\276\3060\247<\233=0>o\204A:\342\255s=,X\364;j~!;sG\177<N`:=\265\2469>\224j\237\276\013A\236>\217\337;?+0d\276s\327\322\275r\214$\275\320a>>\000o\001\276\005\243\262\276\267\230\237;OX\002\276#\020\257>F\357\224=J(\275\275\327l%\275\307\235\222>\242E\326>\004sT>\022\210\307\276\2755\020>U\301\010\277c+h\275\rqL?#\370\217>2\003\325=,\237%\277\177\023J>S\313v\276\377\347\240\276ULe=9\232\303\275\306\304&\276\035\254\237\276\265\303?>\2343\342\275\"\247/=\310\357E\2775\3222>\246\325\240>\301\213\036?\333\371\n\300\272f\322>\177\334>=\311q\247>\355\t\267\273[\266\226\275\234\304\000\276\007_\030\276\346yp>/\250\277>]5\257=\250o\251>r\026\346>\343\210\265>\311\310\211>x\323\215\275\244\252I>\375jn\276~5G>\355G\212>\375\244\022\277\252\361R=F\323\231>\022\026\225=!t\260\275\006\236\033>r\277\003\276\257\316Q\276T\310\225\274\340\241\350=\004\312f\276\357\251\234=\205w\271>\343RU\275\356w\230>\023a\033?\255\241\264\275\\\256\236=W[Q\276\'[\217\271\360\242\017\276vTU\276z\302\302\276\004\255 >\252H%\276r\371\217>\362A\277\276\355d\200\276Q\332\003?\026\023{>\331BP>\353\374[<**\321;\343k\337>\277C\321=\237Y\262\276I.\337\276\375\244\212\276[\315\272\2746\310t\277\222y$>9\271\237>\210c\005\277u\005\273=\200\323{=\336T\204=\361\361\t\275\223:\341\276\372\233\020\276ke\322>\212\006\211\275,\364\201\275\256*\213\276\347R\214\276DO\252=y@\331=;\344\246=W\262\243\276[\353\013\276\255i~>\365-#?\376\016E\276b\204\020>\n\272\335\276\350\331\354\276\362\230\001?\033\202\203\2750\332\343<\377\346\245\275\"\211\276\275\217\302\245>_)\013\276\360\304\234\276\031\312Q\277\230\3729>\377\t\276>\005\213\243\275\320\320\337>&pk\276AH\346>\3578\005\276\000\342.\275P\031\377>\356_\331=\255\372\014?\004\347,>ke\242\275p\353N\276l\351Q=\\\346T\276{\367g\276\222\347\232=\277\361\025>N\013\216\276\253\230\212\275]\341\355\276\305\376B?\373\"A>\347\306\264\275\222?\030\276.\342\313>\321\\\267>3\334\240>]\212\333>9\271\317>\3019\343\275\270\344\230\276W\317\t\276k`\253>KYV\277\205\"\002;d\274\034\273\2657\210\276\340g\274\275\274\313\035\277P\031\027?j\274\364=\310\014\224>\257\316\361\275\351}\243>\330\323\356\276b\204p\276\347\035\007\276\231.\244=\274Y\243=\3376\023=\004\311\233\275x\013\004>^\242\212\276[\316\r?Q\275\025>\353\377|\276Q\245&>\372\317\232<m\255\337>B\317\206>EdX\276\336\037\017\276\331Bp\276\316\307\265\276qU\331\275q8\263>Z/\266\276\311v\266?\253\225i\277\271p\340=\317,\271\276\017\264\322>\370\374P\277\032N\231\275\322\251\233>\025R~\276\323\274\203>g\362\255>Uj\366\274\314\177\010?\366E\262>\001\030\017> z\367\272O\351 >Ae<\275\374oe\276\246\270\212\276d\006\232\276\200\232\002\277\270\036]\277\374\340\274=\275\306\356\275\264q\304>\2242)\274h\313\271\276\216\001\031\276z\344\317=&\215Y\277\357\3113?\256\rU\277\2554\251\276<\210e?z\344\257\276\252\232(?\373:\010?ep\264>(Iw\276\261\212\227>\222?X>\025\035\221?\220\275\036\277\336q\202?\021SB\276\222\350U\277i\343\210\276!s\245=\367\344\361?0\r\243\2765c\321\275\206U\214>s\327\242>e6\000?a7L\276M\241\363\276\347\000\221\276j\243:\275\243\002\'=\r\253\270\276\3475\246>\341@\350\276\261\212\037\277\330\360\034?\362{\313\2765E\000\274\223\035c?\351C\027\277wKr=e\245\t>\353s\305>\'\203\263\276\004\004\343\276\273~\001>]m\245>\321\2263\276\330\330\345\2752 {=\325\312L\277\36036\277\277}E?0L&>p[\233=\257\020\014<\207P\205>0\201{>\005\372l\277\325!\247\276\016\370\354>\300xF\276\022\024\027?]\244\020\275\2446\021\276.\220 >7\340\363=\222\\\276\275\002\267N>Ou\020?\\UV?\007\261\363\276\273\265\314\274m7\301<\340\333\204>\335E\270=\317\332\275\276C\306c=\277}=\276\336q\222?\251\275\010=\307c\326>Ra\004?\203h\215=\374\373\214\274\260\254t\275/4\207\276\246\371\031\274y\006\r>>\010A\275*\214\025?\214\206\214<)y\025\276\035U\355\276\023\017h>h\"t\277 F(>\370\3740\276Cs\235\2769(\301>\244\307\237\276\023H\t\275\244\374\204>\355d\340\276Ed\030\277\021p\370>\266\020\304>\303d\002?}\320\007\300\263\230\000?`<\003\276\326\250\307>\203LR\276\213\375%>\326s\242\276\311\345?>\223\001\200\275\371\240\327>\267\264\332\275f\240\222=O\351`>\335\315\023?\303\236\366>\277HH>?W{>EK\236<\255\372\034\277\313\326Z>\245\0244>\264\310\226>j\207\237>\035 \250>]\341\035\276#\204G>j\207\277>H\304\204>\005\213\363>\221\017\352\276\237\315:\277S\352\222=7\027?\275L7\251>\307\235B?X\312r>Mh\262\275\316\337d>s\364(\277\203\300\212>\220\205h\275\204G\313\276wg\r>\275o|\276M\363n\276\017R\246\273\356&x<tF4>\242\013\022?I\364\262>\305=\026\276\220\332\304\276\335\315\343>\262h\312>\311Y\330\275=D\323\276\244\302X>>\226~\276x\271\350\2762wM\276\333\213\250\275e\252\010?\3436\202\277\376bv=\376+\353\275\350\301\275=-!\277>z\307i\276\000R\233\276\251\023\300>Qf\323\276\320\233\212;\024\313\355\2756\002Q\276\362$)>\334h(?L\212\257\275DQ`>\216\351\251\275\322\000~>\225\324y?W\354o>\202V\340=\t\371h\277\232\266\037>#\363\250>\272k\251>\224\244\213>\375\276\237=\027\331\276\276\270\344\000\277\017\271\021\277\'\302>\277\236^A\277\225`\t?Q\210@\276Y4\035\276\014\315\035?\322\030e\277\365\333\307>$}Z\275\031\004\246\276\003[E>5\344\310\271rN\314=\345\233\275\276;\031<\2764\327\271\2766\002\021\276P\302\014\277x\177\274\275\372\n\342\276\346?d\276\343\210M\277\323\370\245=\307\235\202\276\006\022$?\303\266\305>\3230\334\2766\253&?\311YX>#\333\231=\334h\300\275\002\267\016\276\362$\211>\367u\000\277\210F\'\277J\230\251>P\031\237>O@3\277z\374\236\276\256\022,=\333\371^\276\310\230\333\276{\207[\275\333\242\004?)\313P>~\000R>1B8\276\330\273\217\276\347\030\030\277\204c\266=e\027\214\275~t*>_\357\236>y\223\337<\227\034\027\276z\374\016\277\2235*>\246\362F?8\272\n\275\301\377\016\277c\227 ?\250\220+=\340\333\224>$\321\373>X\250\345\276\330\014\260=\307f\307<\\\035\300\275 \265\351\276\200\016S?\322:\n\276\2657X?\266\2044\277\312\213\314<-!\317\276t\360\014=\351}\243\276\231\365\302\276NbH\277\354L!\276c\271E?_F\241>\354\335_\2765Fc?\316R\262\275\324H\353>\253\005v\274\026j\335>\221\357\262\275-\317\203\275H3v\276\245\367-\276kH\\\276\374\030\223\277ff\346\275\212\315G\276\235h\347>\377!5\277UlL\274\025\221\261>\345\320R\277\227s\231\276\341b\245>\t8\014\277_\355h=\354\243S>\360\026\250\276\344\204\311\275\210\364\003?(\357c\274+\373.<\252\232@\276\254\255\360?\247\005\317>\262K\224>{N\032>\340\333\204\276<\240\254>\367\351\230\276\255Q\317>\237<\204?\'\275\357\275\201\004E\276\352X%<\034(0=\235\275\223\275A+\360=b\370h\276\210K\236\276\230\374O=\203n\017\276\346W\343\276Q\024\000\277\315X\364\275\230\335\243\276\\\003\213\276\276-\230\275\233\254q\276\312T\001>^.B\276\366\013\366=\240\246\026?\r\251\"=\315X\344>=\'\025?\345D[\276`\037\035\2768\365\241\275\212\253\232\276h\226\014?bM\245\275\270Y|=\200\267\000>\254\342\215>[az<:#J\276/R(=\267\356f>~o+\277\213\032\034?\003C6\2760\200\260=_$\244\276\261\277l\276\374\2460<1B\030>\216\351Q?/\250\217\276\313gy\276\211)\301>>\"\346=\274y\352=A\202\262\276\005\374Z\275\210G\302\275\000W\362>O#\215>\373\2238\275\243\006\003\277\317IO\276\003\2251>C\004\\>b\276\234\276\204\273\363=\215E3>\205%\276\276!\347}<\275\035\001>F\010O\277Z\2735\277\316\307U>\n\200\321\276\267\226I\275TRg\276\326\255\336=\000\036Q=R\270\236>\302K\360<\003}B\276z\031\365>\201\t\\>\225\324\t\2773\376=\276\252C\016>\204\323b>4\242\014\277\365\241\233>\3429\233\275:\222[\277cb\023\276\307\235\322=\r\376>=[\\c\275\033\236\256\276\016\205O=\021\001\007>\003\t*>eS\216\276\305=V\276*\000F\275Z\201)?9\326\245>cz\362>z\337\270\276 \265\311>F\266S>\351\016\202\276\202tq=T\344\020=\274\221\211>{\244A<\210\237\237=\333\371>\275\354\206\215>A\274\256>9\326\305>\244\252i>C\004\374>c\1779>%X\334>\361\021\261\275{\332A>\252}Z\276\036\2470\2775\231q\2750\201[>\0363\320\275B\353\241\275\244\210,\277\020u\017\277\033/\255\276{\332\031?\267a\264=:]V>\n\205\010>\273c\261<v2X\276R\'\020\277\\\215\314=\006\022d\277\221D\357=+\023\256\276\332\341o>7\362\212;q\311q\276\257\224\265>\202s\026\277-!\027\277\264\345\354>@\030X\276\371\024\220\276\210F\027>O#\r\276\"\340p\2766\261@\274Xt+\275z\305\223=\336\310\004\277\224\372\262\2750G\017>:?\245\2753\247\013>\006d/\276\311v\376=\277\202\024?\\Z\315>\263\320N\274\033i\004\274\350\301\355\276\353\342\026>\260\3112?\251\207\230>\364\211\274<VH\231>\263#\265=\214j\221=\315\036\330>\001MD>\264\313\267=\000\376\251=Sy\373=\205B\304\275L\303\030\277C\342^\276\025\000C>\375\331\237>\007\266\312<H\371I>\325\354a>\347\214\350=0\007\346;\237\253->\0006\240\274ept\276\371\370\204<vTU\276*\035\354\275\3230\034\276\230\027\020?7\340\013?\270\222\335\275\356\356\301=\221,\260\276\246}\223\275\332\033\034\276&\344\203>R~R>\241\333k>(\233\302>\226\347\301=f.p\275UM\320>\337\211\031?\022\203\220>\304\316\264\276\n\327\203\276$\321K\274\020\007\211\274\202\255\022\276u\224\003\275\220\276\311<\270#\004\277\0214\206=\247?\373=.9\216\276\227\305\004\276&\307\335=vT\365\275C\004|>\210c\335=\274t\203\276#\370\237\276\263\265\356\276\352!\032=b\025\357=\232\266\317>M\370\205\276\377\312\032?\252\364\223=\211\230Z?\374\000\304>-`\002>d#\320>Tt\244>\357T\300=\367\006\337\275\367\307\013?\021q3\275\221~\033>\237\345\271>\314z\261>/i4?\004V\216>G\346\t?[\353+\276Z\273m>Z\ri\276vO\216\276\317,\311\276jgX\275J\014\242\276(\233\022\276\315\006Y>w\204S>\350\331\314>\231\2360\276\251\274\355\276T:X>\355\266\013?OZ\270=\356\224\336\276\0054Q>\363\350\306\275aT\362\276H\341Z>\320\362\334>\230i\033?\030\\3\275\216u\361\276\224J\370<\356z\311\275D\250R=\255i\016?\202\213\365\276\244\252\351>\016\2039\275\222\350E\276\232_\r\276\363\003W=\330\322\243\274\375\023\334\275\305\221\007\275\331=\211?\364\375\324\275)\"#>\005\213#\276\363\005-=\303\323\233>\346\221\037\276]3\311>\364\375(@\340J\366=\336\037\217>\331\230\227=\300\"\277= A\261=b\025\337>\004st\276\022\367X\276\275R\226\276\201C(\276Yn\311\276}\2566\274IH\304\275eS\356\275\364M\232=\004\347l>\325!\307\276\002\204\217=\226y+<\307\327\336\276\231\330|\275\231\365\242\276j\274T\276\004\255 >\266\276H\275\300>\372\275y\257z\276\326\215\267=>\355\340\276\241\3701=^\016\233=|a\n?\377u\256\275\3066\311\275X\2505>\314z\001?l\320\227\275Y\242\263\275\"\246d\276\304Z4\277[\224\331\275\230\300m\276\211{\274>\210K\356\276L\032\343\275\304%\347>\376`\360>\330\013\205\274\221\201\274\275\361\026#<\374\306\247\276/\250\257\276NbP>\276j\325>\243\222Z>6\352\201>\314\356\211>4\326\236=t\317z=9\325\032\275\367XZ>\355G*>\270\351\'?W[\321>\355*d\276\266\333N\276\370\245\336>7l\003\277\007\323\010\277f\024s?\206 \'>\302\335Y>\006\017\223=+\207\246>\217r\220\275\351&\341>\005\372\004\276\217\344\242\276\345\'\025\276\253&\330\276\357\341\242>\275\214\342\275\211)\241>\354\243\323\276\033\366;=rP\362>\305\376\202>X\250\205\277\267\321\200>\354\024+\275\275\214\"\276:Z\265\275\200\364\255=\377x\017\277\214\017\263<)y\265=\330+,=\021\251\351\274\234\207\263=\333\304\t>p\010\345>\020AU\273=,\224=\372\355\213>\270;\353=\227s\211>\251\365\376<\244\245\362=_\rP=\360\t#<a2\025>\272\367\020\276#\370\217\276\340\204\"\277\214\021\t=\314w\225;\341@\370\276{\351\334;\242\177\262\276\265\305\265\274\322o?>\035\224\020\276T5\031\277\202\347\336\275\213\2115?\212\310\300\276\301\250$\276\316\307M\2770\360|\276\001\301<>\243\036\242>\213\032,\276\274\226\240>\352\2252>z\252\003=D\300a\276\330\266\230>M\276\331=33\243\276\265O\'\276(\233\202\276\223\030D\276\330\273\317\276\231G^>HN&\275\344\367\306\276_A\232\276\rl\025\276\221\325\r>b\025\237\276g\230\232\275\211$\002\277\325\264K=\262\r\034\275\314\013\300\276j3\216\275w-\221\276\246\270\272\276\235\272\022\276Ab\273=\373\330r:u\345\223>\306\242\351>g\362\315>\217S4>d\036\231\276gaO\276\240\375(\276\027\267\021\276T:\210\276\237<l\276(,\321>\232\3534\276\000\306S\276t$7>Y\300\034?\334F\003?bMe\275-\262\275>v\375\302>\216\036/?\306P\256>\270[\022=z6+\276\037\205\233\276,\224\226;\371\024\300\276\035\254O?\316\026\020\275%v\255=\305\376\362=-&\266>\324\267\234\276\3500\017\277\211\013\300<\262c\323\276\237\260$>\024y\322\275\275\000\253>\010=[\276S\221b\277>\313\243\276n\206\233\276\210\327\365\275\026\030\022\276\243y@=\234\212\024\276\322R\311\2769\356\224>\235\377\r\274\274\256\007\277d\351\243>\256\236s\276\247\2633\276\034\261\206\276Ll\016\277\342:\006\275P6\245\276\017(\213\276\353Vo\276\034\353\342\276\331%*>\237YR>}?\245\276\303\202;=\034\3609\276\315\210\034\274F&\340</\300~>Z\241\210\275\317N\006\277\341\321\346>\206r\">\200\324&>6\315;>\017b\307\2769\356\264>it\207\276\t8\204>\270V{\275\360!\027;\346;\230\275\277\016\234>\243\222\232\275J\n\254<\231*X>\336\310\254>\214\204V>\360\212\000?\251/\013=\204\r\237?\363\004\302\275\230n\302>\366\177N>P\215\327\275\207\247w\276\211}\002=m9\227=\222?8>A\232\261<F\231M\276\231\360k>\210\364k\277]\376\003?N\271\342>\232\266\037>\232\266\357\276\345\231\227\275/4\027>\362wo=W\350\303=r\341`\276\372a\364\276\364\025\344>\216>\306\275\317\367\343>$\016\331\274\021S\002\277P\337\222\276`\311\025\275\024\313\r?O#\215>\232|\303\276\356\316Z>\240\375\010\276\362\014\n\277\345\263\374=\244\344u>A\271\215=f\023\240\275\211A \276X\312\222?TR\347=\372%\302=\260rh\275\217\031\270\276\334\237\313=\241J\255\276\2510\326>TR\'@Ih\213\276\304Z\334>c\231\376<\250\214\017?\\Zm>,\361\220>\355\363\230\275^K\270\276\371\024\260\276T\214\363\274\263\357\"\277\342\257\t\276\003[\005\276\323\333\277\275\355\177\200\275\306\242i>\372~\252\275-\354\351\275p&\206\275\213\246\203\276\022\367\230>\314(V>\256\022\034\277~\035\370=\242\356\003>k\267\235\276p|\r\276\014\224\224<\233\346\235\27682/\276\'\302F>)\256\252>\322\254\354\274+\366w\276\332\033\034> {\355>\274\005\322\275\005\300\350\276\3377^\276\t\033\356\276&\252\327\276H\371\231\276\356w\370>\354\206\r\277\336\037\217\276\207\212\301>0*\001?\341V\013\274\360\374\202=g\321\273\274x\177\034\276\277`/\277\027\274\310=\024\"\220>\033\201\270>\325\t\210>DQ\010?\020;s>\237\216\007>\233Y\313=\257\316\341>\364l\206\276\000R\033?r\304\032>c\013\t\277*\306\231\275mV\375=}\256F\277\035\224\000\277]m\265?\264q\204\275\310\322\267>\341\321\006\276D4z>\2608\034\2765\230F>\334\021N\276\325\312D\276\260\217\316=\037\277\227\276\276J~=\005Q\267\276\256dG>\217\337\033\276\375\2074\276\0054\321>T\035R>\3063h\277u<\006>R(\313\275\035 \330\275\017\264\202>\345\233m>\255/\342\276\274w\264\275<\367\236\276*\306\031>\216\257=\2768\363\313>\254\342\235>=~\027?\341@\250\275\177\023\232>fI\010?\223\214\354>\036\027\225\275\036\033\241>\234\210\236=\371\367)?%z\371>\247\221\346>\205|p\276D\213\354\275\337\032X\277d]\334=\333\336n\275\245\024\264\276Mg\347\275\277C\021\276\205\224_\276\312O\232>k\237N>\372\233\320\276:z|\276\240\303l?\'\240\001\277x\234\002\276\305\217\301\276\252\2701\275\362\007C\276k+\246>t\265\305\276q\033\315>\005\213\003>\034\261V>/\243\350\276\033\361$=\303\326\354\274}yA\276\265\025;\275z5@\275\004\255\000\275\363Y^\2767T\274>\336\037\357\275\375\207\304\276sJ\300<\375\301\320\276~5\017?b\025\237\276\374\2125\275\225\361\237\276]\212\013>\200\231\257=\226[\232\276\030CY>\n.\026\277\212\310\300\276\3062}\275z\252\323>\302/u=\354\300\331>\313\333\031?\324\016\277>a\375\217>\350j+\276\241\3701\276i\000\337\2769\321\356=\235\327\230\276\021p(>T\000l>\230\372\371\275Lqu\276\324\324\262>\246a\310>^.\002>Q\367\201<\3171`>\307\327~>C\377,?Z\360\262>F|\247<DL\231\276\251\237w>\2069\241=V\274q\276\\=\017?i5\344=x\320\354\273P:Q\275\365\367\222=\351\324\205\276\017(\373\276@Q\331\2729\234\371\276:\351\035>\202\377\355\276&\215\021?d\036\211\276\337O\235\277\007\231\304\276+\207\346\276|\233^>\354\027\014\276\332\002\302<9\227\202\276>\"\266\276\353\001\223\275\236{\257\275u\002\n\277<1k>Ve\317\276\325\t\350\276,e9\276*\343G\277*\307\204=;\344&\277\363<8\276\244R\314\275Z\022\300\276F\316\002>+\242\246=\016\020\254\276+\207\226=\rq\214\276l\317L\276\\\216\327<\2343\">)\263a\276\313\271\\\277\363\253\311>\340\234\021>\201C\310>,}H>\245f\217\276\363\223\312>\233\253&=\220k#>\226&\345>S\375\357\273\205\266\234>L\032\343=\247yG<\334f\252\274\267z\006?\320\3256>=\n7>\"\246$>\004\310P\275P\374\200?\244\337\376\275u\036G3\322\214\365>s\327\202>\263x\261<\364\025$>Q\203I>\177\372\257=\214gH?\021SB>\361d7=D\206E\277%#\'?x\264\261>\n\021\200>\002\324\024\276\372\320%>\363\253\371=\217\305\266\274!\255\261\274\374\373,\276\233r=\277\335{\270>We\225:?\221\007>W>k\276s\235\366\276<\240\354=\311q\267\276#\370??\264<\217>\226>D\277\262\327S?\005\3008>\226A5<\323\244\024\276\214\020^\276\004\036\230\2751\231\272>\275:\227>.\220\310?\'\332-\277\000\342\216=\325\262\325\276\356\316Z?VeG?=\356\233\275\215\321:>q\254s?<1\213\276\251\336\372>\322\307\274\275U\301\230?\253\004\273>\251\331c\276\305U\265>V\267\372>0G\317\275\226\t\177>\346\221\237\276~\247I\275PQ\265=\232B\227\276\'j)=\013\230\240\276\216;\345\276Uj\246>S\226a>\335\265\224>\337\370Z\276\377\312*\276fI\200\276\330\r\253\276O@\263>\250\343\261>\021\215\016\276\362\315\266\276\245\240\333\275\321\005\345>1%\322\275\252\324D?k\3611?\343\302!>\022\205\266\275\300\t\205\275CV\027>j\301k\2762\217\254\276\014\352\373\276\254\377\223>\365\330\026\275\331wE\276\242z\353\276\243\035w\275>\225S\275?\000\271>\314@\205\276\326\342\203>\275\373\203\276\262*\002\275\236$%\277\333\277\022>\231\365\">\307\237\250\272\n\021\360=\321t\206\276\247\\\341=\033L\243>\037\235\032>\241\206\217\275\352x\014\2767\306\316<\001\207\320\2750L\016?\320\264D<mV\375\276\223\343\036?N(\264\2761\266\000?\210\021\"\276msc>S\232f:\322s\013=\325\352\253\275\333\277\202>4\021\266\276\245-\256=\227\220O\27628\232\276i\035\225\276\353su>/\206\022\276M\241\263=\331%*\276\210\235i>\262\235\337\276\272k\031\300\365J9?x\177<\276d\3132\275\306k^=\311Y\270=\374\344h\275\266\333\216>\274?\236\276T\306_>~:\256\2761\266 ?5\014\007\277\002\331\313>\232%\001>\025\000\003\276\320\320\237>\275\241\025<\314\177(?y\036\354\2760\236\001\276|D\234\276\372\n2\276\216;m\277\342\001%\276\350\023\371\274->%\276\004st>\241\204Y>&\374\262\276s\333~\275c\264\016\276,}(\276\005\213\033\277\337\211\031>\345~g?1\224#\277\224K\243\275\034\231\367\276W\262\363\276\261\341I\276\206=M>\010\003W?du\033?\351}\003?\"s\300\273\210\272o\276\244\252\t?v8\232\275)\350\366=\344I\022?\r\340\215\276\370\337\272>s\272,\2765$\016\277xb\026\276\323M\262>Z*\027\277\03244\277\226\004h\276\013\361\210\275\263\265\276>\247\313B\276\263\230\010?\3555s;\177j<>X\255\014\276\306\242\231\276I\242\037\277\354\206->\355\3231>{I\223>[B\276>\270\036\005>d#P>@\336\273>\311<2\276\002\330\240=&\254M=\307F\300\276#-\325=\353\377\034>\303*>\276\337\340\013\275\377>\033\277\320\325^?\r\303\'>o\323\'?gD\231>\021p\210\276\234P\250\276hyf?\225\016\306>\\Z\r\276\253\262\357>I\242\327>\003[%\275\240\340:\277R\355S<\320\017#\277s\021\277\276w\241\371=\374\214\313>\337O\315=S\326\312;3\376]\276\263\014\021\277k\016\220\276\016\333\326>\202\250\373=\2074*\2757\030\352\274\275\035\241\275o\330\226\276dX\005\276C\255\371\276\025\310\354<C\214W<\005\2432>\267\rc=\273\355\"\2775\265\354=t\322\373\275\017\013u\276\245\370\370<\037\277\027\276\324\232\306\276A(\217\275\006.\217<\233=P>P6\345=u\310-\276\277\361\245\276\002e\003\277\017\271\271\276u\002\032>\366z\347\276\356%m>\r\2162>\232y\262=\341@8\277\321\221\274>\006\331\222\275\305=\246>\341\354\326<\017E\201<\032\255\376;C\312\317\275\340\326=\276k`\253\276l@D\275\345a\021?#\276\323>\317|\030\2745\360\203\2755%Y\275>\256M>\204\323b\2764\277\272>\320*\263=~\343S\277j\331\n?\2338\231=Y\206(?\013A.\276\227\305\264\276\334c!\277(\362\244>\235\235\214\276U\373\224\276\315;\316\275\031U\206<\262\275\226\275\303\330\"\276\213\246\223>\356Z\362\276\231d$\276<3\001\275H\247N>\312Ta>a\303S><f\340=\020\006^\276\333Pq\276\016\241\n\276*RI\2773\212\005?\232[\201\275\002\232\270>V\016\r\276\377\004\347\276\001\366\321\275^c\207>\241\276\365>4\nn\273\377!\335\276-!\237>\034B\225\275\264<O\276[\266\246>\023\017h\276>\355\360=DL)>\254s\254>?5\376?\254\377K\277}\005\211>\\\036\253\275\332\003\255>)?)?\200f\260\275\271\374\247\276\340\326m?\226&\245>kH\234>fI\200\276\242\013*?\242~\027=\1770p\274\316/\357\273\0221e>\266\204\034>AH\326=\276\237Z\276_)\213\276\365\241\213\275.\347\202\276\277c8=\037\272\240\276GZj\276\357\217w<\232\353\024>d\222\321=0*)\274\246D\202>\260 \315\276\237qa>fN/?\347\374\224\275W\004\177=\364m\201\275\014\003\026<\236\265;>`Pp;\366\264C\276Hm\222>Ou\010?\024ZV<DL\311=\301\220M?/\250\337\276\327\206\272>\000\000 \276\277H(>\304\231?>\313\235\271\275\322\251\353\276s\201\313\274\231\236\240\276\247\3508?\256\330\217\276\251j\222>\237\216\307\276M\022\313\275\0162)\277CV7>P\250\'=H\030\206<\320a\376\275\271\247k\275\341\014>=\313\370\327>\204\365\377\275RI\335\275\215]\202>e\373\020=\345~?\277\201 @=Z\267\301<K<\340\276:\257\001?CV\'\277\276\207;?l\n$=\002\202\311\276\267\264Z>\367\307{\276\004\256+\275\246G\323<oG\270\276g\362\375>t`y\275J)(\277\022\024\257\2764\263\340\273\302\027\006\276C\377\324\276\231\201\272\276\001\340\270\275^\021\274\275\031s\367\277z6\313>+\301\222\276n\371\310<\025o\324>!\007\365>\325]Y=9\227\362> \357\325\275iVv\275\tm9\276\202\254\247<\202\220\214\276j\366`\276\013\014\211\276\032lj\274vO>>!\2602>A\237H>\263\230\230\276\374\307B\275JFn\276q=\232\276\205\261\225\276\355\r\036\276\270@\002>f\210C\276\364\340N>F\231\315\276\3372G\277\222\313\377=*t\016\277\322\251\003\277\006dO\276\306\205c\276\336<\325\276bJ\264\276E/c>=\325\001\276D4Z\276;p\276\276\225\237t>\031\255\003\276\375\023\004?t\007\021>\025R\036>\335\315\023>\210F\367\275\364\303\210\276\367\253\200=\360\334[>N\264k\276X\377\007\2760G\217\276\214\333\230\276|\325*\276O\222\336\276Q1\236> _\242\275@\336+\276\364\340\016\276\n\2001>\260=\263\275\020\314\031?z6K\276{\367g>\333\371~>T\036\335;\2240\323\276\361.7>3\247K>\3603.\276\206q\227=\333\242\254=\272\275,?g\'\343>\376}F\276\025\214\272>\2755\220\276\235\272\"\277+\2076>\274\257J\274\255\027\323\276\311\260*>Z\236\227\276\212\216\034?\255Lx>\334\2355?\235h7>\254\2558>\303\365\310\276~t\352>\203\206\316>;\302)>\224\366\226\276\210&\365\273g,Z\275z\374\336=+j\360\275 {E\277\355\r\256\276#\020\357\275\337\026l=W{X=,+\315\275\256\360N\2760d\005\277\214\271\213>{1\224>\3019#>#\370\337\276\030Cy>\371\332\263=(\270\000\277\257_\300\276\010>\306\2753\207\244\275\310\264\266=\372~j\276\350\356\004<B\317\006\277\342\001\245\276{\367\007>k\232\367\276\346\004\355<\3122,?\352\004t\276E\022]\276i\035\325=\214\020^\276.9\236\2762\254B>\025\214*\276\360\205\331\276S\005C\276|D\314>\372a\024\277\366z7>\213l7?\260\254\364=\243@\237\276\273\013\264=\264\001\230=~\343\253>k\202\030?\177\023J>\306\030\270\275y\006m\276\021\344`\276\206\311\264\275\3650\264\273.\342\273=5\007\250>\271\210\357\275\230i;>W\354\317>\241J\215>\323\301\312>\242\177\242>&\337\354=Q\332{\277\237YR>\371\300\216\275\275\035\001?\366\0136>k}\021\276\206\217\330\276\253\262\217>\323\366\337\276\233\346e\277\'\245\000\276Z*\237\276\\\345I=\205\261\265>\355\201\226>t)\216\276\365\331A\275p\232\236=\333\205\206>\346\005\030?\364\303\230>og\037\275\3711&\276\276\274@\275\274\\d>CVW\277\307)\372=z\374\336\274\n\327#>\202\307w\275\2510V\276\006/z<\207\026\t\277h\263j>\"\246$>\205\316\213\275\0363P>\263)\207\276\231\236\020>\375\202=>\326\213\201\275\305r+\276\355)9\275\302\205\274=\332\033\020@\006\240\321\274\346\005\030\275\034\262\201\2743m\217>\313\363\320\276\207\334\214\276n0T=\316\031\035@~\214!\277$(\216\276scz\276\320\355\245\274O@s>\234\242C\276\255\332u\275\370S\263>j\331\332=\201\3514\274\377!=> {\315\276\361\273\351\274\276\244\221\276\020t\264\275\035 8>\273\321\007=\2402\216\276iW!\276_`\226=\316\3430=\343\031t\276\365\234\024\276{1t>\211zA\275Nz\007\277>\005 \276o\202\257=\261P+=\307)Z>7\246\007>\260\376O>\224\207E\276 &a\275\340J\206>\261\304#>\254s,\276\002\361z=\261l&\275\367;\004?\177\373\212\276{N\212>\363\223j=t\006k;U\022\231\275\361\235x>X\034\256>\016\241\372>5\263\226\274\261\371\330>\031\255C>P\252\215\276\220\275\216\276\201[W>=~\257>Q\332{\276\243\254_=\201\004%>\341z\224>_D\233\275=a\271>\305\217\361=\004\377\313>\257\316\241>\266\276\310\276\341\177\013\276\233rE\276\307\327^\276F\224\206\277=,l?\343\252\032?\2343\302\275\007|\216\276\224\331\340=\203\244\017\275\220I\206\2759\016<<\334\327A>7\3759\276\352\317^\276\026\027\307\275\263\010\305\275\377\221\311\275z\302\242>*\306\371\275\034\321==\016\363\205\276\235\021\315\277\315\222\220>a\216>\276\360\2775\276q\311\361\274qZ\360=\3539I>[\261?>\340\326=>\214\370N>\232\316N\276ioP\276T\255\005\275\256dG\276=\nw>\323\207.>\037\363A=\177>\000\274`\352\307\275\235.\013>?n\177\275\375\023|>\256\273\251\276\366&\206\275\320\325\026>.\377\001?\347U\035\274\315v\205\274\244\344\205\276D\033[\273\270\006\036?\003#\257\274,\361@\276\302\211\310\275\300\005\331<.9\256>#\363\250>\200\017^=UM\020=\271\307\322;r\304\312\276\263\014\361=\033\3650\276\202s\306>\333\026e\276\032\372G\276\343\252\222>\031\305\362\275z\215\035\276_\355h\275\330\330\r?\370\3354=9\264\230\2763\213\320<G\346\021\276n\372S>\334\327!>\255\360\323;O\222\356\275\313\241\005?#gA\276~os>\354L\201\276h\221->\236}%=\014\004\201<B\263k;6\260\r?\234n\231\275\025\221!\276\321?\241>\206 \007\275\265\251\272\274\017\356.>K\345\r?\237v\230=\341\321\206>\344\332\320=j\274t>\204\273S>g,\252\276M\2058=2\221\262=T\035R\276\304_\323=3\304\361\275\315\351\022\276k\016p\276tF4>\245k&\276\345\270S\275\350\237\200\276\016\334\201\274\234Q\363<\256\360\236>\240\303<>K\310\327\276\310\357->\177\366\223\276\233Z\246>\0162)>_^@>%\002U<4\326~\2755F\013>\201!\353=\274=\010\275\227\034\227\276\037\364\254\276\225\232]>\364\246\242>\377\312\312<+\373\356\275\261\335\235\275\2446\021>\371Iu\276\27164\276\270\006\246>\006\201\245>d;\257>\351C\247>\266\370\024\276Q\203\231\276E)\306\273\335 \377\273k}Q=.\343&\274\252\363(=\361\200\362=\327\206\252>$\355F=~\035\370=+\331\021\277\013\266\021\274\220\024\021>\3274\357=6?]\272\326\034 \276\264\221\313\275\2304f>O\0041\275\'\210\312\276\0049\210\276\306\242\331\276\037e\304<\377!\035>\007|>\276K\352\344\276{\275;>\207\277F\2760\022z>\3578E>\303\013G;[\355\301\2755^\032>\346Z\224\275\257\224\225>>\350\251>+\373\356=o\r\354=\251\244N\276\313M\324<qZ\220>\034\360a?*l\253;\232@\021=\310\007\355>\025:/>\300\316M=X\312\022\276\205\353\021>\301V\211>\372\263_=\205\353\341>1\266\020>\341Dt\275\237\310s>\320\227\036=\325!\307>\332r\236\2762\346\216\276\213\303\331\275O\314:\276\377\004\267>5)e\276\3441\243\276>\223}\274$E\204\276\030x\276\276.\312\014\276q8\363\276\277\266>=4\272#\277\t\304+>2Z\'>\263\357J\2762q\213\2757\372\270\275q\344A\275\312T\201\276\244\344U\276u\002\372\276D\213\214\276\211\316\262\275*:\332??\214\360\2762=\031?\265Og\276\240\211\260\274y\006\235>\037K_\276+\244\374\276\352\004\354?y\222\024>\311\037\214>d?\013\275\206\217H\276\214\333\210\276/\206R\276\312\246\004\277G\271\352:\217\374\001>\303\330\n\277\033L\243>\336T\244>\213q~\274\007\010\266\276\017\271\271>\231\360S?\312\375\376\276\030&\203>\'N.>\007\316Y>\236z\204=v\340\\\276\276\274\000\276\225\361\357>\375\023t?\302\300\323\276\025\343<>\226\004h>\311\223\304\276\357\217\207\276\224\336\267\274\324Cd?\201\t<\276\037\277\027\276\265\246\371=\2137\202>y\006\035?\262\200\271\276\352\005\237\275\233\376\274\276r\376f\277\263#\025=\351H\256>\270\036e\276\311\037,\276#2\354>2wm>\216\036_\276\342#\222>{k\320>c\013a>\357V\226<\344\203\336>\314~]\275\306\341\234>\311 w=\3024$?\216\0060>\022\275L=L\375\034\276\371N\014\276(\nt>\202\377\r>\202\034\024=\002\361\252\276\023\270U>`x\305=?\221\'\276%\223\023=\034\360A?\024\350[?\320\rM=p_\227\2764.\234>\035 x>\342<\234=\306\205\023\277\375\331\217=\'\256\031\274\376\361\336=\372\270\366=\255Q\257=v\246p\276c~.=p|\375\276Mg\347=\212;\236\275\376+\013\277f\024#?`\351\374<aqx\276\331\353\335\2751\323\036?5\230\326\276\257\316\341>\240\006\302;\256\360\256>\314\013\240\276\364\032\213>\025\343\374=\217\307\354>\016O\277>\223R\000?\332\217\224>\304w\342=b\333\242>\223\214\\\276\234\242\343=h\350\037\276\253\262o>\331\261Q>\'\203\203>I.\277>\340\363\003\277|\325\332\276\307h}\276[\316\005\276-!_>\371N\014\276(~L>e\374{>R\021\002\274?R$\277k\016p\276\323\331\251>\231\323\325\2764\363\344<\0054\341\276\360\277\365>\324\232\266>\272N#=\317\201\345:\237\253-=\264v[>\275R\226\276\303\330B\276\366\321)>\332\377\000\275\014wn\275\004U#\275\350M\265\276\316\252\237>1\323\206\276\360\247F>\226!N\275\252C\376\276\306P\216>(~\214>\034\231\327>\320\362\354>-`\322>N\271\202\276\340\204\202\276\326Vl>\227p\310\275\343\215\374>,\362k\274\177\274W\276\304\224\230\276\"l\030>\340\240\275<F\224V>\263\315\035?\365\363\006\276\311<\022\276\275\214\342\276(\325>\276\225\326\037\275d\222\321\275\370\031\037\277\237\"\307=M2R>\323j\010\276\026\207\203>\370\337\212=\362{\333\276\256\330\217>\247\221\226\276\214\271K\276\212\253\332>\3603\376>\327\206\n>\276\237\272>\342\344&\277\035U-\276\256\330_\276\314\321#\276,H#?\310\014\324=&\337\014\276a\303\243>\231GV?\224\331\300>\257\261+\276\344\367V\276\251j\202\276u\345s>\314z\021\276\250\306K\275\005\250)\274@\373!\277F%\345>\205\231\266\276\tP\203\276\214\333\210\276\245\240\253\2766Y\203\276\002\331\353\276\214g\320=\3436\312>\242\321\005\277\242\356C\276\250W\332>\373W\026\276\016\332\253;`\310\022\277\327/x\276<\210\275\276\334\021\276>p_G\276\254\305\207>5\014_>\273\270\235>J,\204\272\252GZ\275J\3560\274\002\016\001?9\016|\275\326\342s>\324E\n=\235.K\276p\013\361;\351\361\033>L\337k\275e\342\226=\023\325{\276\313\333\201>\245\203\025?w\370+>\324+%\276\235\021\345\275\037\235\232>\007\353\257>\234\247\372\276\205_\n>\350\366r>W[\361=\332r\336\276:\222+>\314\262\247\274\300!4?\226C\273\276\227V\033?\'\302\246>\376\362\251=S\226a>\010\262\371\273\225\270N=/i\314\276C\342\276>\251\332n=)\313\360\2766\315\313\276\366E\222>$\227_>&\304\\=)\350\366\275\276\244\t?/\243\030>cz\202=R\233\230\276\\w\023>\033\r\020\277M\363\316=p\355\004=\373y\243>\326S\253\274v\340\214\276\261\247]\276\010\003\317\276\177\023\372>\231\273\006?n\337\243=\374\2156\275Ec\255\275\224\373\255\276\223\000\245\2767\250}\274\370\374\320\276\260\254\014\277\335\315S\276\2343\342?\0358\007\276+0<?m\255\257>\342#\322\276\367\344\201\2764\272\003\276\210\021\202\276K\352\214?\027\2671>l[\204>\271p\200\276%\222H\276W]G=\314\227\367>\273a\253\276\215\177?\276\320\233\372\276A\237\310\276\037\200t\276\017(\253>\336<U\274\317\024\032\276\301\034\375>b\241F?N\234,\277\315\257\206>\347\252\371<\322\030\r>f\367d>\216\001\031\276OuH=,\274+?\270\036\025?\277\2024\276\226\t?>\344\367\246>\344\332\320\276\020\006\316\2769\356\264>k}\031?\014\037\221\276\324\324\322\276V\023\037;\316\245\250>)\263\021?\375\207\004\277\205\261\005\276\221~\003\277pB\201\276x\271\010>_\357>>\353\255\201\276\241+Q\275\216\006\030?\371\275\215\276Dnf\276\007B\242>\314\321\003>\321[\274<\312{f\273\234\371\265=#2\354>\346\226\206>,\016G>\270#\374>\260\033V>\214\271k>\375\244\212>\006\330\367\276 \226\r\275xb6\276\365\366\347\274\305\0339\276\032n\340\276\235\205\315>B`\005\276\211A\340=\037\205S??\343\002?+0$\276\271\337!>j\244%>fff>\200\'\255<D\030\177=v\032\211\275N\013\216>s\327\362>\356=<\276\322\251\213>\034\2616\276\373\311\030\275*\035\314\276\266HZ<\006\022\244\276\263\323\217\274\350\207q>YQC>\313,\202\275\177j\274\276$E\304>:\006D\276o\330\326>\341E\337\275=\325\241=\217\337[\276\265\025\033>\010\217V>W\225\315>g\233\373>B`\r?\203\372\026?\375\274\371>0\204\234\275GZ\252\274TrN=F\261\234\276a\032\006\275\327\372\">o\022\203<x\357\210\275\210\205\332=\242E\226\276.\2175=(\017\253\276X\342a>\205\231\366=iWA>\007\261\223\276\225\364\220=\321y\375\276@\336\253\2762rv>\357R\017<j\242O<F\231\315\276V(R\275Q2\271\275\253\004+>T\035\032\277\274]\257\274\366\t \275\366E\002\276\256\266\342\275\363\002\354\275\372\263?\276\017E\001\277&\342\255\275\300\004N\276w\276_>\206\311t\276\225e\010>6\310d>\'\210\212\276\320\320\177\276\330*\221>V\267Z>\214\020^>\377\347(?\037\364\254\276\214g\020\276V\016M>z\033\033\275=\n\327>\343p\306\276\035 \310\276\234\334\357\275\226\317\362=\213lG\276\277H\310=\316S\315>\007|\236\276J)(\276)\256\022\277\325\347\002\277[\010\322\276\006\330G\276\333m7\276\"P\275=5A\224>>$|=eS\316>9E\247\276`\310\352\275\312l\020>\266\271Q\276\330\271\251=\330*\361>@\374|\275WC\342\275\266\275]\274|a\302\276\272\240\376\275\352\225r\275AgR<\202\347&?\372\320\245>\363\216\223\276B!\362>T\000\354>\024\313M>\245k&\276N\321\301\2763\033D\276\223\306\370>\306P\316\275\227\250>\276H\327\361\273-C\024\277\325\354\341>\0220\272<\376+\013\276r\245\036=\246\270j\276;\307\200\276\036\376\232\276\341\227\232>3\341\367>0\r#\277\236\013\203=\223:A>#g\001\277\"\216U\276q\346\227\276-$\300=\023~\351\276\000\000 >\277\267\t\276 )b>z6K>\200\357\266<S?\357=\022K\252=\223\035\273>\307.\021?\212W\331\274\243\257\000>YP\270\275\310\230\233\276\016\204\264>\363qM>\310\352\246\276\373\313\016>\177\245s=L\375\334>T\377`\275Ic4>\005Q\267>DQ\340\275z\215]>\2343B?w\020\233\276\251\244.\276+M\212>BZ\203\275\355\266\013>\213q\376=\031\037\346<+\023^\276\227\250>\276\243;P?=\327\227=\370\215\357=\253y\216\274\335\014\207\276U\023$\276\036\341$\277\223W\207>\366b\210\276oG\250\276\332\033\274\276\364\246\302>S\005C>76;=\3435\257\273\017\326\257>eS\356=\323\237\215>\374\343\315\276\206\346:>\223\251:\277\260U\202;\327\335\214>\342\344\336>\365\235\337\2744\272\323\276\334\364\347\275\3274\237\276\267\356\246>\365\020\r?\236)\344\2763\033D>\3500\177\276r\212\356>9\326%>\000\343Y>\320a>\275\265l\255<\210\327\325>W\354\327?2Z\347\276&rA\274+K\224=\300&\353\275\375\301\010\277\032Q\032\276,\267\264\276o\022\333?\216\001Y\276g\n\315\276\373?\327\276\350\273\233=\242\r\300<\336\253>\277\353\370\324;\276\023\343>q\346\367>I\200\n\277-\t\300>\367u\030\277$\267\306=g~\365=\267\n\242\275\320\266Z\275\207\246\354\274MJ!>\325\t(>\201\225\223>!\254\206\275\217\302u\276p\224\254\276\347R\234\276Q\367\301=@\0231\277\214J\352=\006\273\321>\000\256d\276\000\256\034?\245\277\227\274\350\336#\276_\324\356<\035r\223>\005\206\214>+\374\231\274<\244\270\275,\267\364=cz\322>\203\206~>1%\262\275C\220\003\276\332U\250>\313M\224=\352[\346\275\000\256\344\275\360\212(?\000\306\363\275\340\200\026\275\246\320\211>r3\334>\344\017\206>\364\340\216>\272\332\232>i:;\276-\356\277<\374\251\261=\251\336\002\277\336@\334\272\236A\323\276!\345\007\2764\242\204>\336\310\034>Ic\224\275pB!>,e\211\276\306\334\225\276y\036\234=\276\274\240>O]\351>\275\306\006?\351+\210=*SL=\245\244\307=p\353\356\275\231\203\240\275\336v\001\276\"\253\333=\3744.=\r\032\232\276\254\250\221>\320\nL\276\267\356\306\276$\271|\276:\006D\276q\033\r\276\020\006\336=\332 k\277>\313\303>Qfc\2769\326E>\271\210/\276~\306%>%\257\256\276\2132\213>\tp\272\275k\361i\276T\310\265=\036\341T\276i\214v\276\334c\251\276\233\003\204>\233\003\204<\230n\302\276T\251\371\276X9T>\271S\032\276\255\027\003>\027+\212\276b\363q\276\245\367m>\306\304\346=\242\177\302>x\356\375\2759\321.\275zna\275%]\363\275\022\2107\276\314(V>0F\244<\034%o\276y]\277\276\237\253\335\277{\210&>\365\276q>v\211\332\276\207\242 >\363T\327\276\376C\032\276Eg\271=\3372\'>\333m\027?\034B5>\365\367\222\275m\034\221\2757q\022\276x\356\355\276g\355\206>*s\363<\\\036k=\267\013\255>\"\032\235\276t\014H\276m\220)\276\211_\261\274\367\006_\276\255l\237\275A\202\032\277\346\3501=g\363\230=y\036\234\276\024\355\332\276\355\330\310=\350M\005\276\020\351\267\276&6\177\276zp\027\277;\337\007\277,\324\232>TW^\276\203M\275\275j\205\251=\214\205\201=N\321\301\276\005i\326\2760\365s>\203\206\276>\223\343\276\276\226\t\377=\013\322L\276\373\005\273\276j\244\345=E\360?\276\261\026?>\305\217\341>\334-I\274\024\214\357\273\032\371\274=\026\336\005\276-]\301=\017\321\310>Z\201\301>\271S\372\275\244p}\276\317KE=<N\261\276\313J\023=3\304\361>9(\221\276\303\201\200\276\3535\342;\324`\352>\007\231D>\277+\262\276~\035\370=\225`\301>\363\312\365\274\301\250D>\010w\347=T:\230>\361\327$\276\324\273\270=,\020\235=P6\205\276\201\320:\275J\2309?\327\216v\270\3749\205<\031\311\276\275\320\362\034>\243\261\226\275X\250u>\315\222\300>\342#\202>\000%\364;\356\'\303\275\257w\177>\237\345\031\276\257\260\340\274e\363\002<A\364\244<\r7\360>\376\324\020?\242cG\275\267\264\032\276\207\242\200\276\037\200\324>\245\026\252=d\257\017\277O\036\326\275\346\223U=`\037\275>$\227\257\276\347R\214\276\033LC\277\355\321@;\260\347k=\036\247\350=$b\n=g~U\276\200+\251\276G\311k>\276\336=\276\033\361\204\275N\356w>\217\307,\277r\334\311>\227\312\233\276\252\361\322=\307\200\254>\366\321\231>\221\n\263>\354\022\265>\\T\213<\256\360.\276\275\214\222\276\337\370\332\275\367u\240>j0\235>\002\324\324\275\356%m>X7\336<u\310->]\025(<=~/\276\306\334\345>\223o\226\276*\343\237\276I\365]\275d\352\216=pw\326\275[B\376\275\373\256\250\276\t\376\327>\327\367!\275\311\310\031>,+\255>#\371J=\216\001\031>7\341\036\275\2276\234\274A\202\262>\217\302\325>\030}\245>J\007\023?\365\326\000\276\243\351\214>\314\321S?\213\340\007?*RA\276d@6>*\251\323\2770L\206?9\234Y\276e\374\353>\325\312D\275\305\376\202\276\370\252\365\276\r\375S?\272IL\276t\322\213\276{\277Q<\202\312\210>\206p\314<7\375\311>m97\276\337\340\203?\367;t>2\003u>WC\262\276N\013n\277\313\367\214\275\025\214:?C\312\217\276\300\225\\?(\233\"\277\330\r;\276\230\027\010?<\024}?\024\005*?\321t\226\276\344/\255<T\306\317\276\316S\375>\023\'\027\277\311\002\006>\204\365\357\276\247\2633\276\210\021\262\276\320\017;?\270\351o>\234\334\357>q8\203>\310\265!>\363v\244>B>\000?tF\364>\277\014\246=QN\\\277\221\'\311\276\265\211S\276\022\332\262\276\351\016\342\275\032Q\222?E\365V\276\036\334\035\277V\237\353>9(a>C\037\254\274\027\331v?\017\013\205\276\203\211\277=\277\202\024?\201\354\365=\\\252\322\274xz\345=\247\221\016\277\340\333\204>\'k\024>\263\3523>\335\315\323>\001\243K<d\006\312\276\372a\344\276\256E\253\275\246\356\312=<\210\235\276\\\254\350=K\253\321>6\002\221\276\260=\243\276W\004W\277`\310\332\276\366#\365>\357\217\017\277g(n<\357\033\007\277\326\342\303>gaO>Z\273M>\2446q\276w\241i\277\257\224E>\300[\230\277\261\334\362\276\220\371\300=\016-\342>\305\217\341\277\316S=\276\231\330\314\276\244\215[?&\337$\277\232B\347\275\262c#?\3544\322>\331%\212\275\363\037\"\277\033*\226\276ni\265\276\024\263V?\372\325\334=\225`\201>\274\262K\275F\321C\275\357\217w\277~o\363>\350\021\303=t\322\273\275\362{;\276r\026\006?\303dj?\254\031Y=;\001\r?\340\326]>\373\005\353>\206Z\223\276\356\353\000\276\305U-\277\331\3167=\217\302u>\201Ch\276\351\324\005?k\267\005?\320\362,?\367\222\206\276-x\261\276H\334\343\275\376\324X\276\314\227_?R~J\277v\032\t\276tA\315\276\213O\341\276,\324\332=Wx/\277\226&\245\276Gr\231\277\274!\r=\272\243?\275\360\212\340\276\212\310\300\276p%+\277.\004\311\276[_D>\222\350\345\275\346\221\017?\241\204\021\2779\3216?\221,\240=\313\370\227>\3024,\276i\251\034>=,\024>\222t\315=\341z\224>\212\002\375\275\021\036M?al\241=@\373Q>\232\266\007\277\266\276\020\277\270\0066\276&\344\213?\014v\013\277\211\352\355=\\wS>K\002|\2775\322\342>U\244\302>R\270\216?\214\204\266\276\243W\003\274h\002j\273\206\346\372=\316pC>\021\307\032>\206r\222\276_$$\277\t\304\013\277D\213,>0/\240>\264\002\263\276\310\007}\276\326\037\341\274\252\361\322\275\353\3058\277*\035<?M\326\250\274Y\370z\275\000W\n\277[\\c\275\373y\223\276\336\216\360\2750\365\323\276\203\3350\276\360\276\212\275J\322u>8\370\222\2775\357H\277\005\305\027?\275\373\363>I\0219>\024?\016?\261\341\351>\262H\263=\277H\310>\250\030\'\276\270\036\205\276hy\336\275\025\251p\276\001\023\310>\331=\021\277\220N\035>\001jR\277\266\276H>P\337\362=\372D\256\276\237\002@>\275\307Y\275\032\341m\275h\313\211>\343pv\277cE\035?t{)>\242\016k=\025\035)>\251\330\270\275\333\277\202\2764\327)\275h\226\004>(\0206=p_\'\277 \3575>\370\252\r\277\365\276\021>\210\235I>;\250\204\275\377\317Q\277\023\'\027>H\026\020\276\232\261\010\276\376\016\245\276K\352\244\276Y\335\332\276T\343\265\276\324\016\257>\014\315]\277\203\300\232?\223\343N>\021S\032?\222\2275=\375\244\002?,\323\257=\277\232k\277\224\336\'?P\2525\277\362$\311>\270\001\337=\221b\000\275h\003\260\274\223\030\264>\022\210\037\277\272N\243>\373?\'\277o\365\214>Q\240O>0\333\251\272\026\301\337\276\311\3109\276\210\205\332\274\365\200\271=\002\274E\276\217\374\001>\205B\224\276\206U\\\276 $\213\276)y\265\275X9T\276\007_x>\265l\255\276\340\020\312\276\r\216\362\276g\362\r\276\223:!?\035\003\202>?t!\276\2721E?\343\302\301\276ZG5>\302\372\257>\024yR=c\356\222?\231*\230=\264[\013\275\374R?\276z\337\350\276\252H\225>0|\006:n\206\033\276\320\325\022@|\355\231\276\376}\026\277\253&\210\276%=\314\275\225\232\235\275\t\247\005\277*\343\217>L\375\034\276\177\373:>5{`=\263z\307\275\0055\274=e6(>\343\214\341\274r\376\206=\222;\354\274 c\256=5A\004\2774h\350\275\264\223A\275\240\211\300>\035U->eVo=\r\212f\275=\233\r\277;Vi=\213\032,\276\357r\321\275j0\315\276F\tz=\232|\223>\203\243\324>\263aM=\276\331F\276\013\325M\275,e\211>\236{\237\276\350\242\301\275\236\265;\277\266\276\010\276\350hU\275\3063\350\275\007B\"?K\254\314\275#ga>\313\276\213>\331&\025\275D\213\004\2771\010\014\276\231\365B>\204\201\347<\355\2016\276\261\277\214\276 A1=\2716\004?\r\240\004\273\302\027\206>}\261\367\274z\374\276>\302\206\347\275\3603\016>\376``\276\372B\310<\336\222\274\275\217\303\340<o\365\004?\371\367y>\363\033\246=W!e\277\031\004\226?\310\230\013?\267B\270\275\360L\210=\023\nQ>ni\305>c\234\257\276T\311\000\275_\265\242\276\262\205\360>eU\204=\247\313\202=\233=\260>\177\366\343=\322\035\004\275\035\345\300=\205|\240>\377>\343=\002+\267\277\231\236\240\276\362\352\034\276\346>y\275Mf\234\275V\324\200>\3436\n\277a\375\337=Ps\262=;\302\211\275\277e.\276\356Zb>c\013\001>\321?\021?\004!9>\211\265\230>\206sM=c\013\301<z\344\017\277t\014\000?\355G\232\276$\356\221\2755\014_\276\342\260t\275q=\332\276j\244\345=z\337X>\376C\032>TW\256>s\235F>\311\216\r>\263\322\244\274\211#\217=X\216\020=\\\346\024?y\222\224\276+\3667>w-\321>z\374~\276\241\214\'; \265\211\276\234\247\372=nL\357\276\254\377\323>fJ+=\001\3001\2746<]\276d\224\'\275i9P\274\336\345B\276}\226\227\276\236\322!>\216\225\230=\360\346\004<\304B\255\276uv2>\211{l>\017b\347\275\022\210\227=$ED>it\007<\2508\216\274e\215\022\277c\227(>\033\365p\276\325#\215\275%u\222>G=\224\276\037\200T\276B\262 \277\334g\225<\245,#\276|\n@\275\364\246\342>\\\033\212>S\350\374=\207\3712>\231\330|>\246\266\024\275\000\256d\276]\212#\277\027+J>\313-M\276O\351\020?\035\254\377>\221\362\323=\234\304\360>\300\2622\276\301\255\033>\260V\255\275\212\260\221\276\nK\274\274*t~\276^\272\211>\252\232\240\274\370k\342>\274t\213\277Iy\367;\271\215\266>\3475\266>ff\346\275*\217n\275\337\025\301\274\212Y\017\277W[1\276\255/\302\276\260=\203\276\361\315\200\273ms\023\277\327\027\t?\307\021+>\247y\267>\337\340\023?\232\013\\=xze=\304\316\344>\217q\305=\330\236\031>n\027z\276\246\264#\2742\255\215=l\354\022>n\027\212\276\177\244(?\033G\314>>=6\274\276\301\037\277vm\257\275\272,\266\276\006\r\035>h\005\326\276\302\300\223\276\332\346\006\276\2034\223\276\244\252\371>K\002\244\276\242\264\247>\203LR>BA\211\275\276\204\252\275\265l\275>OX\">\301\312a\276\321\350>\277f1\201\276W\005\252\275A\020\300=\202\305\341\2759\234\371=\276\240\205\275\320\362l?m\255\377>\261\026\357>\213\210\302=\355\271\314<#\276\343\276N\271\202>GZ\332>\351di\275\303\266\005>\020w\265=\026i\202=[\353\023?\301\342P?bg\n\276T\306\277\276\335xw=6\257\252\275\'\245\260\276>\"\006\276\020\222e>\341\013s>Nc\273=W\354\'?O\225\357\274\304Z\034>\344\275\272>\n\235W\276\rq,>\212sT\274\206 \'>\322\251\013>\241\326T\276\260\217.>\004\312\246>\255i\236\276_\322\310>h?\322\275\023\nQ>Q\210\320\276\361\327\204\275\364\303H=\333\334X\276\216uq>\034\315\261\275j\244%\276\325>\035\276\334\331\227=\310{\025\276KYF>Q\332\253\276\246\270\n\277\214\370\256>1\326\022<\312\303\032@\201!\213>\001\301\234\275\350\331\354\275\361\326\371<\026h\267=\366\320\276<\030[(>\013\265\316?al\001\276qr\217\276\243;\210\276\235\200\306\276\275\214\302\276S\257\233\275\306\371\333\275\321y\335>\251\237\267\276\252L\014;\020\351\247\2769\234\021\277*:\342\276\371\017i>\307\374\222;F\224\306\276\312\304\255<\264\345\234\276\357\254\215>Q\245\226>\226\354\330>\277+\202;\"\340\320>s.\345\276\361h#>$ED\276=\017\016\276\324\202\227>Gry\275\022\245\335\276anw\275\274@\211=\315\036(>\266\020\004>\210\021\322\2765{\260\276\276\023\023\276\"\303j\276\224\336\347>\277\324\337\276\316\031\261>\2554\331\276\026\245D=<N\341>v2\230><\240\014\277\002\274\005\274\247\225\002\275LD.;\355G\002\277-\225\347>\303\360q\276]\370A=\206r\002>\026C\003\273\206\311\024\275C\214W\274\227\305\324\276\251\3014>\331\231\202\276\037\021\023>\201CH\276\237\002\200>\n\241C\275\024\226\350\276\315\260Q=\362$\t>\240\025\230\276%u\302\276\237Y\002?\334\327\301\275\274\313%?\212t\177=\030}\245=\004\255\000>\035\003\022>\240OD\276\315\001b>a\032\006\275!Y\300\276\303\266\345\276\314*\254=\034\355\230\275B\tS\2766\253\236\276\313-\235>aO\233\276N\321\r\300\353VO\274\370\252=\277\253\314\264=y#\243>\236_T\275\276\331\306\276\337O\315>~\306\005\276K\217&\273b\326K\276>\\r\275\320\017\303\276g\231\305\274g,:\276;\344\346\275\177\336\024>\3437\005\275@\277\357\274:]\026\2763\342\002=\216\310\267=du\253>?Rd\276P\373\215\275\321\005U>\252}\002\277\316\252\317>IK\r?z\031%\276\201\004\365\276\333m\327\275\346wZ=.\220\240\276m\255\237>V\237\013\276\2760\031>\373\350\024\275\200\235\233\274\3578\005>\032\301\306\274\271S\352>\344N\351>\023I\364=$E\324>@\026b\275P\337\032?\272\275\344>\201[\227>2\002\252<\300xf\276i\214V>\312O\n>\302\372\217>\3229\237\275\212v5>\344gc=KY&>\227\305\004>\377[i\276i\343H>e\351\036\274\321\314\263=\0160\363\274\t\376\207\276\031\347\357=\025B\275;(I\'\277\241g\323\276\027\331\256=-\354\251\276\2713\223\275e\374;\276PS\313<\267\234\313=\rqL>->E>s\235F\2768\371m\275\307F >\363\255\217\274\347x\273;\3544\202\276a\216\336\275\243\001\\\276\371f#?\t\212\237\276\326V\314>]\026\363>\010\252\306=F\356i=ToM>\001\244\026?\203\335\300\276\350\370(\275\"\303\232\276\263$\000\277\306PN>EG\022>\210\327\225=>\256\255>t\'\330\274y;\242\276r\303\257=\315\314\354\276Y\243>\276\001\336\222\277\270\256\270\275\037u\205\273\264\260\207>\311\037\024\277\\=\307>35\211\275K\253\341=\341\264\320\276xG\006=\024\355\252\274\003&\220>vm\217\275\315X\004\277\343\216\267=\274\004\307=T\375J=5F\213>F%\305>\243\001\\>\216\004\032=JN\334:\020@*=I\242\207>s\364\030>D\250\002\277M-\333\275Y\300\244\276\367\006\277\276\327N\024\275c\270z=[\353\213>\0216\374\275\n\327#\275\214\020\256\276\373\221\002>c\264\316=\367<\277\275k/\375\273p_\247\276\357\033\237\276e\312\342\273[B\036>\013\3572=\202V\320\276\206\311\204>#\363\250>j\331\332=\022\274\241=\267\234K>\265l\215>\272\203\230=\267CC=\266\241\362>\364\375\244\276\217\302u\276@\301\205\276\256\360\016\276\255\206\324>X\377\227>\312\025\236\276\3166\347\276\314]\013\277Cs=\276\332U\030\277\343\215\214\276\262\021\250>D\371B=\201\354\305>B\t\363=\320\'R>\323\277\244<y\220\036=\314\262\'\275\016\370\214\276\224\244#?\303\r\310\276z\214\262=$\1770\276\tm\211\276\000tX>\267\177\305>K\314\223\2758H\010\275\373\226\371=xEp<\205\321l=\254\220\262\276\223U\261=l!\010>\276\274\220>\2279}\276\201C\350>\206\217\250>\261m\021\276;\250D\274\260 \r?\032\335\321>+\207:@\236\014n>\374o\005\276\206\217\230>\303\r\330\276\275\035\001>h\320p\276w\024\307\275\022k)?\322\344\202=\272\273\256\275\305T:=\217\337\333=X\311\307<(,\361>%\222\370>\'\207\017=O\314:>6\315\213\276\tm\231\276\264\345<\276\372\320\325>\314]K\276\023\364\027=\331%\n>\022\203\300=\272\276\217\274eS\316\276wg\355>\336\260\215>\372\010\234\2756\223\337>y\036\334\276\346\262\021\275\257ZY\276\337\340k>\333\301\010\275\354\022U\276?\2516\276\000\3439>}\263\r>\000\375>\274\303F\271\275\334\272\213\276S\350\234>\313\276\273>\253\316\312\275\342u}>~\214\371\275\355\273\242>0K\273<=Dc\276\256G\221>-\223\341<\210\203\204=\216@\234\276\333\3041?0\365s>]mE\276_\322\210>\352\tK>\270\250\273\273i8\345\274n\206[>\200}\364\275\330q\262;]\031\024\275\226x\300\275\032\340\242\275\007\231D\276x\263\246\275\"\253\033>L\216\253>z6\253\276l>\356>\300&\013>}\225\234=lB\032=\227\255\005\277\375\274i\276\334F\023?\337\375\021\276J\355\305\275\316\375\025\275\302QR\276u\310M\276\007|>\276\315:\343\273\320\017\203\276V\361&\276\361\364\n?\257|\226>\330,W\275_\007\316\275lx\232>J{\013\277\276\336\025\277\231\330<\276\247\313\"\276\025\306v\276\361\235\030>\325x\231>?\306\034\276S\005\203>\327\027i>\364MZ=\357\315\312\273\226!\016>\227\220/\276\275\214\n?\353n\036\276\014\345d>\t\033\036>\340K!=T:8\276\327L\256\276I\242\027>\206=-\276X9\364\275\342\257\231\276\233\346=>\345\263\234>\310^o\276\002\267\216>M-;>^\235\263>P\374\250\276\232\353\304>\3706\275=3\371\266\276+\373\316>\340\326\035\277\362\315\026>\002e\323\276\000\035&>\341E\037>\362\260\020>~5\'\276-\263\210\275&\031Y\276[B\316>\rl\025\276\036\341\024\276\260\033\346>=\233\225>\226\t\257\276iW\341\275r\304z>\302\300+?M\333\377=BC\217>x\357\210=\342;\221\276\323k\263\274\356\010\037\277\024\355\352\276\255\300\320\275\207PE>\321?\301\276\365\326\300\276\343\302a>\331\\\265<x\356\235>\350j\013\277\205|(\277\202s\246\276\377A$=@j\023>\264\223\021\277\211{\374\276C\255\201\277Y\206\250>\326WW\275S\221\272\276K\223R\2760\275}=\\\033J\276?\343\202>\037\235\332\276\314@\205>\251M<>\001\2070?\342\036+>\220\023&=\201C\230>z$\024<x)\225\275\303\323\353=\036\334=>D\213\274\276Q\237d\275\262\021\270>\365\201\204=x(\332\276Z\r\231>\320\264D=5)\005\276@\244\337=\305\346#\276\0015\225\276\244\245\342\276C:\274\274m\2508\277\300\317\370\276\311\037\214<\231dd>\226\260\266=P\337\342\276\037\241&\275\211\261\214=|\362\260>+\244|\276\016\333\026\276\374\337\261=\335\261\030\275\276\366\334\2769\227\262\276\346Y\251\275z\374\336=\233=\020>(D@>y]\217>\016\366&\2758\333\354>\034\353\002>\275o\214>\251k\355\274\370\210 \277\337O\r=R\017\201\276lv\244\275\3230\314\276@\336\353\276\2137\022>\365g\'?\256\330\037\275\360\212\340\276\216\036\377\275|\361\305\275p\266\251\276\213\305\357<\030\317\240\276\"T\311\276\3475\246>\215\264\324=~\000R>\340\271\247>\264\037\231>R\n\032>U\211\222\275\324\324\202\276LO\330>\325&n>\n\334\032>\034\353b\276\243%j;\001\336B\276G\254\265>^c\027\276Ve\007\277\374\030\263\276\030&\323>\025\035\021?\200H?\275h\350\037\276\207\024C=B`\345=\305\311\215>\262\021\010\276\200`\016=\361\235\030\275\014\260/>\311v\276>]\371l>\236\007\367=v\337\261<\353n\336=u\002:\276\023\'\027>\177M\326\275\036\247\270>@\244?>`\223u>\313\276\003?\005QW>\240\214q=\236\357\307\276bJd>\247\250\237\273\333\212=\276\003\314\374<\036\304&?e\031\222\277\222\227\265<\201\354\325>\350\274\226\276\331w\225>\223\000%?}y!\277\226Zo\275\013$X\277\007\261\263>3\340l\275\344\332\200\276Z\234q\275\365\271z>\035\346+\276\026\026\\\274\370\302\324?_(\200\275l\225\220\276n\372+\2779bM>|D\254\276*WX>\304\314\276\274\250\251\265>@\207\211>\372~\212\276f\210\203\276G=D\276\341\013\223\274\2407\325\2755)\265>,\014Q\275\234mN\276\331BP>\327L>>\256\365E>\336v9?\221\270\367\276\"\216\225\2760\273\367>\031\305\322>o\365\\?\010\254\234\277X\377\347\275w\363\204>}y\301>S\350\034>R\017\221>\255i\036\276Nz\037>\263\230\030\276\r\253x>(,\261>\326\377\001\277\322\035\324\276T\000\234\276s.\245\276\000\256\004\276\236$\035\276\177M>?x\356\005\277\026\030r=\003\354\263>w\326\356=\034|\001>f\313(:b\203\205=\353\255\221>\272\203h?k(5=Ih+?\200H\357\276\027H\000?\253&X?BC\377>\204*\225>\362\355]\2756\315c?\303\365\230\277\031\342X\276pB\341\276d\002\236\275~W\\\277l\t\031?\305\033\031?\314b\032\277\2235J>v\303\366\275\352\262h\277S?\357=\343k\317=\266\3704\276\330\236\351>\031\305\n?Qk\032>\351H\236>GU\203>\030\262\312\276\360\026h>.\220\000\277ffN\277\304Z\354\276\224\366\346>\211A\310\277\254\312><\003\317\275\276i\035\305>*W\350\276\232|s>6\223\257>\277\324O>uW\266=\'\245\010\277\262K4>\344\240D>\244r\223\274\275R6\277\362\355\335\274\263C|<\202s\266\276\277\233.=\255L\330>v\303\206>jj\251\276\371L\366\274\362\322\025\277\362\227\226<\204\323\222\276\025t\033\276\311\310y?E\273\272\2760/`>g\233\233\276\036\247h\276\345+A=\213\375\005>-\'\301=J\322M?\002\016\321>\023fz\276_\007\316\276p\2669>\222\225\277\275\253\347d>\310\315\360>Q1\376\276\302K\260\275,\361\000\2772Z\267\276Z\201\221\276t\014\270\276)y\225\276\330\330]\277W\262\013?y;\342\276Q\244{<Z\201A\276\320\355e\277\262\235o\276\245f\017?\035Ue?\233\254Q>+\3368\277\347\030\200\276\364\032\373=E\365v>z6\353=\021\031\206>UM\020?(\017\373>\340J\016\277\227\250.?\032n\020?Jh\001<\211\352\025?$\227O\277\014\007B\277\206\217\230\276\245N\360>\001\373\010\276\025:O>\271\210\257\276u\260>\277k+v\276\3647\201>\216\006(?\016\026\216=\240T\213\276\010 \345\276\273a\253>\2760\351\276\3500??\363\223\372>s*\231\274\261\026?\276\224\210\220\275/\206B?\201\225\023?\324C\034\277!vf\276\207\247\347>\314\264\375=\306\277o>\004\033W\274L\246\252\276\000:L\276k\322\215=\005\262\r<\223R@?%\2220\277\202\034\014\277\022;\t<=\362\227\276b\025\337\276Uj\016\277}\221\260>\323\207\236\276p|\375\276\231J\277=EG*?\035w\212>U\023\034?\tP3\276_{F>^c\247>`:-\275g~\205>t)\376\276^c\207>M\366\217\275Yn\331>\\80??\214\360\276\346?\024?1\224\203>\245\207\301\275@\207\331>\234\335\332<\255Q\257>l\317\254>Q\332\033?\'N.\276\311\216\315\276\252e3\277\265\303\337\275nLO>r\277c>%]\323\276\253&\010\275\374\035\232\276\377!]\276\263\265>\275\016\204\304\276\242\234\210\276vl\004?\275R\226\275j\373\307\2765$\006\277\375\366\265\276\313g\031\2769\177\323=+\370-\275}\263-\276\t\247\225>\236}\205=\017\326\377\275\345~\017?\346\\J\276iR\212>F_!\277\356\224.?\374o\035\277\000o\211?\035\217\331={\240\325=\001\373(>\212\331\\\273\207\212\321\276\'\372\374<\330\365\013\277\'\210:>\366E\242\276\233\254q>\026\244a\277\220\205h\275\323\023v\276l\234\250\273\020\257\023\277\355\273b>\331\261\261>\024\355J\276\346\260{<\204\r\317\274*\214\375\276\260\003\017\277\300\347\007\276f\275\230\275\033\272\231=9\177\023\277{k\010?a\032&>\005\213#>^K@\277\251\366i\276\3643u\275F\010/>F\266S\276f\367\344?\271\340\254\275od\036>\231\323\345\275\347\214\210>\226\317\362=z\307\351\275`\2570<$\227\003@\226[\272\275\002(\306\275+\023~\276\035\311\005\276\376,\226\275r\341\000\276\034B\265\276\223W\247\276\377\t\016\276\250\214\037\276w-\301=\246Fh\275!\223\374\276\367S\3129$\235A=\310|\200\275\200\232:\276f\367\204>\003C\226\275]\334\006=d\2221>+\243\261=.\220\360>\016\370<>\367X\372<<\334\256=\255i\036\276\371\3323\276Y4\335=\005M\313=\321\255\227=YQ\013?\331\316\367=\207\277\206\276\230LU>\231\270\025\275\306\304&>a\375\337\2754\364\317\275\"\340p\276\376\201\222=\257\226\273\274y\0078\275*p\262\275\234\304\340=p#%\275\334K\232\274w\333\005\276\000\035\006\276C\032U\275\324*z<J^\235\276\303\r\370>\347\214h>DQ`\276\210\270\271\274r\210\230\275N\356\367\276\346\221\257>\242\321\335>lxz>cz\002\276o\330\366\275\212\003\210=\321\262\216\275\225}W\276\254\034\212>\350j\213\276\330\365\353>\214gP>W\225\375=\320\017\343\275J\213\':\225}\327>\027\267\321=yu\016\276\273\'\377\276#-U\276\\\003\333>X\255\334>\252\237\222\273L\251\013=@\204\230=hy^>\356\353X\277`\223U>\004\255\000\276\263\014\t\300x\356]>\213\031\201=\363Y\336\275\216;\345=X\342\001\276\207\334\254\276\306\026\242=0\022Z>\262\324\272\2756\315\313\276\320\n\314>O\314:\276\350\366\302>\345\263\274<K\310\207>P\344\t>:\222K>qX\032\275k\232w\276\360\304\234\276\177\301n\276\353\213\204\273\000\306\003\277\242\234H\276\201C(>d#\360\276\333\370\263=R\013\205=\3539)>\026\247Z\275\244_\021<\303\201\020>\344\275\n\277\310B\224=\333\026\225>d\006\022?\177k\'=\307\364$\2768\365\201=\025X\200\275\374\211J\273\231\360\353>}?\025>\227\034W>\221\nC\276\303I\232=\254VF>\361\272>\276\361K\315\276^\200\235\276\r\375\343>\210\364#?\242\356#>\214\271\273\276&\215\321\275i:\373=\177.\232\275\356w\210\276\244\344\305\276\224\013\0359\253\004K>\226\007\351\274\343\215,\276\310\315P\276\260\2544>#-\325=.\312\354<uX\241=\356B\363\275 \265\331\276F%\225>Mgg\276\005n\355>\234\027\247\275\321W\260\276\337\211\031=\222\\\016\277\335\352\271<\247\005\377\276\337\030\242=M\333\037\276\315\345F=M2\262=\034\316<>`\002\367=\277\202\364\275\370\032\302=\201&\342>\316\216\257\273\337\372\260\275\010U\252>\374\336\346\275\035\346[\277{1\024>\002e\303>\365\241k\276\'N\356\275\200\324&>q\252\265\274|e^\275\311>H=\241\326\364=r\304\212>\361)\200>\214\370N>\250 \032;\221\n#\276e6H\274\2132\033>\020\261A\275DQ`>.\220\260>\262KT>\274\226\340>N\234\034\276\363\220\251=\373\005{\276\231\271@\275\367?@;H\210\222\275\027\014n=\007\266\n\276\037\235\312>4\235\375>[\224Y>S\256\020\276\\8P>\200+\331\275\032\213\326>\2510\266>KV\305=E\200\263\275\271\342\342\274\220N\275\276QL^\274J{\003>\222\313\377\275\266\0179\275\242\321\275>l$I=$\321+>\0221\305\275\322\214\005\276\345\'U\276\331\224\273\276\334\200\317\275\n\021\360>^+a\275Y\300D\276\264\253@?\276\274@\276\027\021\245\275\006G\231>\307)\032>\250\214_>Dn\006\275v\211j<?\214\000?;.\364;\345\270S>D\250\342>M\241\363\275~\251\237>8\276\266\276\3539Y?W>\233\276\257y\325\274\256G\261\276\234\026<\276|\325J\275uv\242\276\215,\364:LO\370\276\302i!?\334\235\365>\316\374\332>\337RN=\335$F>T\000,>\\\003[>\034|A>\025W\205\276\240p\366\274\023,\216>w\363\204\276\325\347\n\276\201!\273>\326\341\250=33\323\276W\225\035>M\326\210\276\221\355\274\276\306m\024>\364\3754\276\336\260\255\276M\326(\276\236?\355\274\3063\230>\201[\347\276g\0174>\337\340k>\205_J>\207\211F=\257\224\r@\377>\303\276\220I\206\276n\243\341>]\304\227>\355\273\342>K\352\204\274\332\0035?\247\350\330?\274\313\245>\372a\304>\216\006\010?\201[\267>\232\266_\276\251\274\235\276\205x\244\274\346\224\300= $K>\2029\002?Ic\364>[\266V>_^\320\276\232\351\003\274\035\224\320>\361\021\t\277\334\272\033?\215\321\372\275f\275X>\003}\342=\215\356\340\276\207\304\355\276\355\360\327>\246B\274\275\210K.>\321?A>\225~B\275\210.\010\276ep\344>p\261\242\274Nc\273\275\021\001\007\276W\225\035>\370pi\276\235\235\214\276_\265\302>\300>\032\2760F\244\274\362^\025>\363!(<\244\215C>\341\262\312\275\22017>M\331i<#/\313=\203\243d>\247\256\\>e\252\200>\004\376\025;l\t\231>\230\335\263\276\\\0033\277\302\027\026?1\010,\276[\353+>\364O\300>=\270\373\275v2\270\276Q&{:8\370\"\276\031\034\305\276-C\314\276\334\021N?1\006V\275\305r\353\276&\374\302>\023\3271\275\3329\215\275\314]\313\276\366\013\026>:\006D\276\215\264\204>\000\001k=;\215\364\275&\337L\276`<\203\276\005\243\202?#\333\271>|D\254\276X\252\213\275\2071\311=\256\273y\276\335\3529\276\313\326z\274\360\334\253\276\266j\267=\244\252)>2w)\300}\\+\277\233\003\264\276\307\364$\276h\346\t\275\215]*?\261\026\277>\327\027)\276\177\336\024>$(~>`\352\007\276\206qw\2754\235\355\276\244\215\003?\331\224\003\277\276(\213;2\377\250\275\375\202\025\277\277\321\256=\006/j\277<k\367=\020\222\245\276\352\317>>\300\004N\277\026\336%\276\013F\305\276\010\347\223\275\017\227\334>o/)=\035\2179>\362\'\252\274v7\237\2769\356\224\276\370\210\000?\031\033\272\274{\203\267?\226[B\277t\014\270>\212\260\021\277.sz>\231\360\213\276*:2\276Y\372\000?\314\321\343\275\037\242\t?#K\346\273\356Z\342\276F\225\301=4\200w>R\325\324>\347\306\244\276}\226g\2765\360#=\313\333Q\276\376``<0\365s>\\U6>\026\207#\277\344\240,\277y@I\277\237e\314;?\221\347>\357\217\017\277RD\246=\250\035\036\276\255\300\200>\346q\3368\035X\016=+\030\225>fk\255>\002\2676\277:\314\247>\005\213\003>\353s\005?\'\203\203>P\302\234\276\317,)\276\337\025)?7l[>)\"\203\276\240\032\217\276\034_\033>\355;\320\273\341(y\276]\212\213>.\377\201>[B\376\276\232\010\013?@0\207\276\350\0239\276\313\271\024>Y\302\272\275p\231\013?\334)]\276\363Y\336=1\261\031\276\253>W>\307\021+\276ni\365>\327\331\020=+\244\374=u\002J?\216\351\001?Y\212d=\265\025\213\276\376`\340\275\331=\031>\037-\316:\303G\244>o+\275<M\333\377\275\363\216\243\276\203L\222\276\277H\010\277&\036\240>\302\372\357\276\327L\036\276O]\211\276\362{\333=\032\206\237\276\327\026\036\275z\302\222\276\347\251n\276\251\336\212>,\324\332\275\241-\007\277\237\315\372>\n\333\017=\006/\372\275\013\230\220>\372\'\270>q=\272\276|\nH\277G\003\000?\352@\026\275\216X\033?\223\343\276\276u\253\037?z\374\236>\t\304k\277\177\366#\276\014\006W=\337m^\274\223\377\211\275\370Ow\2754\327\231\276\014<W\276\346?d\276\030x.>`\350Q\275\002+\247\276\346\005\270\276\034\t\224=\341(\371\275\235\364\336\276\254\034b\277C\004\374>\305\343\242\274|\270\244>\006\273\241\276l\262\326\276wf\202<\004\004\303\276\271\374\317?\177\373\002\277\036\304\336>;pN>\317\203\373>\255\243J>\352\354\344>\031\342\010?\310\230[\276\324\232f>\263\352\223>\033\023\342<\334\234\212=\213q\376\275j\207\007?\033*f>e6\310\276\375\244Z>\373\002:=\204\360\230>6\002!?\250o9>\363\377*\275\311\310\271=\326\034\220>\2448G=\3019c\276\211\322^\275\234\334\257>\3647A>\272k\351>\370O7=\253\257\256\274z\374\216\2765$\356\275\373\313\216\276QN\364=Y\372p>#\020o\275\226\004P\277g\233\033>,e\361?\371\004\232;{\025Y=%\257\276>\222\005\374\276\331$?=eS\376\276\'1h>\246\n\226>\205_\352\275\267\227\304\276\372\233\240\276=\nw\276\\\033\332>\314\356\211\275v\2468\277\265\211\203>v\032I\276\003\262W\276\330\236\031\276i\000\017\276\326V\004\277D\335O\277\230Lu\276\263\372Y;\376&\344\276r\247T>E\273J\276\006\330\227>\021\036\r>\236Eo<\017\013\365>W\317i>\356\261\364=\307\327\336\275\303*^\276\370\337\n\276E\273\n\276\376&T\276\373\256h\2763L\022<\346?\304\276\243#y\276 {\255\276D\335\007>w\370\013\276\3063\330\276\315X\364=Y4\215\276W\004_\276\342\344^\276\266\271\321>\247?\013\277*\037\302=\352\004\344>\243y@\275m\305\036>\371I\205\2766<\215\276n\300\347=\013\3572>\212\037\004:\257^\305\274G=D\275\274\221\001\277^\327\007?\364O(\277\014\220h\275?R\224\276K\037\212>\277en>f\367\304=\317I\257>\312\340\010\277T\2519>\212D\374\273}y\001\276\340\241H\277w\0203\277\326:\361<\013$\310>b\370\370>\020}\322\273\263\357j\276uV\253\2753\376\235>\3475\026\276\332\003\r>\361\327\004?D\247g<28\212\276\275\000\213\276\\\003\273>\225+\254\2762Z\247>\345\265\022\275\213\211->\034BU\275l&\217>\206\217\010\276\n\023\306=\371f\033\276vq\003?\266L\206\275I\200\n?\233\377\267=\n\242\016>P\374\350>f1\261>\253A\030\275\363\037\002?G:C=<\367\276>\263&\226\275\000o\t\277\343\2522\276-\t\340>V\267\252\276U0*\276\031\004\246\276\376\232\014\276\230\206\001\276\346\221\177\276\337\246\177>\210.h>w\333\r?\354\3001?)\256*>\025WU\275\313MT;\037\200\324=sh\211\277&6\217\276y\036\\>\377\354\247\276\365`\367\273%u\362\276h?\202\276\320\355\265>#\025F\276\r\216\362\276D\374\203\275\227\2555>:\006\344=aq\310>\236A\303\276\212v\325\275w\326\026\277\205\224\357>\"\032\005\277Z\273m\275V+\223>vl\224>M\326(>\222\221\343\276C\004|\277\267\264\252>\246\n\306\276\253x\343=H\342\345;K\253\261\276A\361\303>Ndf\274\253\tb\275`\254\357\274~:\026\277\002\267\236>\356{\224=\035w\312\276Ou\010\276\363<\270\274\217St\276r\212\336>\372\270\266>\316\374*\276\017b\247>\'1\230\276(\362$\276e\031\342>\252}\352\276\253\333\017\273[\323<>\214\020\276\276L\211\304>\274\\\004?\245\275\261>\263\230\330>e\374\233\276`\352G?A}\273\276\244\374\224\276\247\354\264=\222\221\363\275\213\246\223>\021\305d<^\205\364>7\211\201>\277C)\277\262\272\225=\250\343\201\276\256\273\211>.\312l=8\363\353\276\034\353\"\275A+p\276\361)\220>\252H\r?`\037\215>0\273\'\277\315\314l\276\345a\341=7T\014\276:\222\313\276*R1\277I\364\362=p\354\231\275\234m\236\276~o\343>\373:\360\275\203i\010?\241J\315>\302\335Y>\024\261\210\274O]\331>\237\310\323=7qr>\222\\\256\276\301U\236\274\217ST\276\306\026B\275>\263D>\002\202\251\276\337\303\225\276\035\252)=\007~\324<\314\321#\276\205&I=\330\2369>\270\256\270=\270^\3548\210\237\177\275@M\255\276\033\236^\275Ho\270\274\352\t\213\276\302i!?Q\245\366\276:z\274>qu\200\275\341\264\000?\301\213\006\2772Z\307>\035\311E\276|,%\277\270\344X>\230\335S\276\354\335\017\277Q1N>\240T\213\276Ih\003?\0049\370\276\373:\250?=)\023=\272\3304=\337\211\211\276\027\016\264>,\237\205\276\020u\257\276\217\307l>\r\304\262\274]39>\337\370\332>\301\307\340<b\201\217=\242\227\021\277\302\244\270\275\035w\212\276G\003X\276\313\204\027\277~t\352\275\271\215f\276\215\2644\277k\324\003\276\036\376\372>Cs\255>P\343\036\2756\260=\277\212\222\220=3PY=\263%k\2751\006\026=:z\334>[\226\257<\257|\026\276\010w\227>!<\032\276\354\206\235\276\206\311\264\276\262\205\340\275T\306\217\276\341z\324?\362\230\301>\237vx\275\221a\325\275V\267Z>\216\351\001\277\273`\360\274C\004\254\276\207\026\251?\355+\257\275\227\312\273>\303\235\213\274i7\372\272\236\357\347\275\262\016\007=\216#6\276q\342k\275\314Et\277\211\322\336\276\327\372\302>\244\031\313=\304B\355\275\022K\212=a\303\323>\277\273\025=\031\305\322>\272\275\344=\324}@>t(\303\274\203\372\026>J$\301\276\352\225\342\276\360m\232>S?\277>\346\\\332>U0\212\276\322o\377\276\005n]\276\215z\310\275a\246\215\2764\272\223>tr\320\273\355\201\026\276\327\206\232>\341\321\226\276\243X\276>\224\301\301\276\273\233\347\275K\223R\276\024\007\320\274g\'\303=+\207\206\276p_\207\276\212\3100>\"\373 =\355\360G?:\2571=6\037w\276\305\311]\276\263~3=\2132{\276\320\263\251>\003\\\220;\357\376\230>h\256s>\251\3014>g\3257?\357\033\337<\247?;>\223\035#?|D\274\276\201\t\334\276h\\x\276.VT\2766\310\324\276\321\005u\276\211\357\224\276\271\245\325>\310\2615\275o\330v>\010=\253\276K\362\022<\3122\004>\347p-<e\252`>\2446\221>\207\376\271\276\203/\354>)y\205>\244\252\251>\251lX\275\233\003\304\276f\240\262\276\247\256\\>\027J&=t^#\276\351&\211\277\241\200\355\271w\363\224>\343\302A\276\245\275A>\014\3155\276\230\300\215\276\033\241\237\274\000\346\272\275C\034\213\276\001\030O>\364\243!=\357\376\230\2765)\005\276*\034\301<\214\204\366=\307\272\370=\351`\235=T5\001>\200e\265\276hzI=\372\355\013?=D\203>\204d!>g\355\006?h\316\232\275\226><?\345\270\023>x\321\207>\247\313\342=_\265\022>\230i\353>\301\037\236=\370\302d\2763\026\235\276\251\244n\277\342X\307>cE\315\275c\356\332=\356wh>\354\335_\276\262\023\276\275}^\221\275~\306e>H\304\364\276\376\361\236>:]\226>duk>6<\255>\367\344\241>3\006\3168\035Z\344\2750Go\276\247\257g<\026\301\277>-\317\323\276\223\035\313>\323\244T=\350\3662\276\270X\201>\360\247f\276,\004\003<&}\020\274\231\201:?3\334\260\276d\006J\2761C#\275\254\250a\276<\3663\275\264\216*=y\036\334=C\377\244>\026\301\177>\3475\326>\006\330\007>\274y\212\276\232\266\377\276O\313\257\275\260\033\266\275Ed\030\276\006\365M\276\'Nn\276\217\302\025\276\\\217\002\277x\264Q\276H\0260>\325\317;>g\016\t=\366(\034>\317\332\255>\275R\366>\213\032\314\275\272J7\275\202\377\255\276<\333#<nnD\2772\003\305\276\357\003\240>\206\217\250\276\025V*=\036\212\242>\211$:=c\271\345\275&\252\367>>\350\371>\027\200\306<\"9\031=\3019\003>\250\306\003\277\360\304\374>\375\301\240>\021\252T>\355\236\374=_\230\034\277\242z\013\276\235h\027\275\347:\r\275\255\007\002<\003&\020?\241\204y>\337\243\236=\320\362|>\177\244(>\303\r\030>\233\033\023>R\270\336\276*\214\255\276^\213\3558u\002\212>\0049\250>\204\240\243\274\352\347=?\037\2720?e\344\254=^K(>\231\r\n?\360\212`\276)\313P>\331B0\276>\263$>\200+\031\276oG\230>\263^\374\276B\262\200\274\327L\336>\233=0\276j0\255\276\200\361,\276p&\306=S\263g>d\2221>\225eH=\371\275\255>\310\014\244\276h\263j\276\340\326\275=)yu\275RI\025?\316\374*\276\344fx\276-`\262\276\272\275\324\276\363\345\005\276\001\301\334>\257|\326=\233Z~?\340\201\241=\270\314\311>\027H\220>F#\237\274z6\273\276\316\210\322=\033G\234>\250\251\305\275\310|@=\362\265\207\276\312SV=\177j\314>\274\\\244>\310\230;\276\331\353\r\277\346\221\037\276\315\351R>\212\035\215\275C91>*:\322=*\000\006\276\'\332U>z6k>I\235\240\276Wv\201=\261\334\202\276\0010\256\276}[0\2744\277\212\276\370\302\324>\221(4<\361\021\021>\237\260\004\276\0319K\276\243\222\032\276m\250\330\275\024\313\235\276\177\336\364\276+\030\355?\002\274\215?&p\313=\030z\304\275\255\204n\275O#\275\276\274\315\033=<\2752\276\t\212_?\376}F\275\211\265\270>~o\203\2762U\000\277\342?]\275\274\313\245>tFT\275\213\032\214\276K< \277,go<\017\0135>\313\271\324=\034_{\276O>\275=\265\246\231>=\361\274=h\"\234>(\326\251<\231\360+>\260\217N>\2132\213>6\310\264\276\327\243\020\276\373W\326=\365\234\204>ep<?\234\334\357\275\344\275\272\2761%\322\276\237\260\324\276l>\356\275I\242\227>\362\224U\274S\313\026>\236\014\216<\245\206v\275\177\336\324=\013^t\276d;\217>\260U\342\276\343\244\220=:@\260<\232\224\342\276`Yi\276l>n>3:\234\271\355\016\311=\365\241k>\030>\002\276\374\214\213\2765cQ\276\322nt=\264\345\234>\221\265\006=+\301\202>J\014\342>K\223\322=|,\375>\322\375\274=\225`\221>\365-\323>\221\325-\276%]s\276z\252\003\276\202\305\321\276b\276\034\277]\025(\274\275\035\321\276M\333\037?\267\353%<5\007(\276\254\311\023\275\235\021\365>\260\346 >1\231J>:W\264=\204\236\005?\304\224\000\277\313J\363>\2279\355>\362\357\363\2759\234\031\276\315;\006\277fN\247\276\277\361\365\275Z\360\342=\036\212\302\276]\371L\277O\314\032\276\006*\343<8\025)\276\365\203:<\'\240\351\276\253\260\231<\375\212\220;\3019\323\276\243\314\006\277\304_\203\276Z\365Y>\367X\252\276,e\331\275\335\315\023>\021\252\204>\233\033\323=q\311\361<\362\315\366=fN\247\276Y\340\313=\025Wu>\321tV>HR\022\275\352]|=\364\032\373=\023aS?#\204g>\025\343\314>\227\305\004>B#\030=\003C\346>\'\240)>o\330v\276\374\373\314\276\013\0149\277m\305\356>\277\201\311<$\177\360\275:<\204=2 \373\275\002\237\257\276mV\275\276/il>\001\2070\276\235\017O\2747O5\275\370\031\367>\340-\200>Vc\251=8\273u=\236\261\217=Q\022\222<\365\2761>T\306\017?\300\t\005\276\010r0>\005\372\364>\310$\203\276+\243\221<\207P\325\276\337\246\037\276o/\211>\266\326\307>\244S\027\277\253&(\276|a\362=\220\203\362\276T5a>A}\233\276\371\370\244\275F\353\310>Ra\214>^\327O>\264qD\276UlL\275\035Z\344\276\27550\275\356Bs\276\344f\250\276\261\341\211\2769\321\026\277vl\204\275\031s\027=\034\323\263\276R~\222>\220\332D>\032\300\033>p\224\254>\007\'\202=S\350\314>\241-\'\275\347\214(>\337l+\277B[\236>\026\336\035\277\031\037\246\275\232\316\216>\323\366o=k\267}>X\220\206>\306P\256>\375\274i\276\276\301\267>A\324\r?o.~\274\247\221\026>\235\331.\274@\336\353\276@\207\001?\240\246v>\360\371\301>\353\250\352=d\351\303\2760J\320<\017\357\271=\334\n\006\2745At>\337\025\361>\365\326 >\213Oa>\231\360\313>\024\\\254>\244\031\353>A\274\256>G\003\230\276O#m\276\227\2138>\002\202\371>_Ab?\276\334\'\2758\363\273>h\\\370>\025\306V>\235\205\030<\352x\254=d;\337=D\334\\\275\023\nQ>\342\220\215\275/O\347<\211\322\216>-\225\027\277;\345Q<\312\025\036>\003\262\027\276\342\006\\\276\363Tg>\370\337*>\310\000\232;\335\353\304=v\375\202\274h\"\354=\307F\260\276\363T\207:\251\274\215>L\246J\276\016-\362=\255\335V>\211^\306\275\007y\275=K\037\032\276&\307\215\276h\2563> )\342\275R\3622?e\2464\274_\265\262\274\\\254\010\2760\236A\276\356\261\364\276\231e\317\274\357 6\275~\214\211>\203\372v>yW\275<\313\017\274=\223W\'>d\313\262=\226\354X\276\201!\333\276\300\225L\276u\002\332=B\354L\275\177\370y\275Re\030\275^K\210\2758\276\306>u\345\003?\220\275\216\276\034%\257>\315#\217\276\0162\311\275N|\265<ZG\025\2751\261\021\277\013A\316>O#\355\275S\256\260>^\205,\277+\373.\274\333\212\035\276\214\201\365\274\247\2216\276J{?@\003\322~\274\245L\252\275a\026\232\275\314E\254\276\347\2148\277\350\366\262=\226\004\250>\355\231\365>\270u\027\276\277`\367\275\277a\"<m\250\370>\032\304\207<\231\014\307\275>yx>0e\200=;\001\375\276\221\356\347<\014\007\">\031\255\243\276\226&%>\352\263\203\274u\223\210\276\364N\245=\023D\375\276G\3113?\033\236\216\276~\000\322=\020>\224\274\217\3442\275z\337\310>\307h]\276f\275\020?\245N\300>\301\255\033>\242\263\214\275\021\2416;E\377\272;\332\376\205>l\262\006\276#\363\000\277 $k\276s\205\207\276\376\363\264\274B\317\006>r\304\332\275u\006\306\274\247\221\206\276\337\251\200=e8\236\274\3647\361>\017C\253=\365g\277\276\n\277t?H\376 \276\261\244\\=p\353\036?=\362G\276\331z\006=\325\317K?}\\\233\274\275\377O=#-\005?\266-\272>\361\327\264>\271\307\302\276\344\017\226\276\n\276)=CV\267\275\347\030\220=\352\347M>\316\302\036\276c\177\331\275AE\025\275\334/\237;q\033\375\276\361\200r\276\376\232\034\277.\342\033\277\0010\236>3\341\037?t\007\021\276\216\006P\2765\3222\276\\=\347=\365\276A\277d#p>\271RO\274\343\215\024?\263\265~\2762\217\\\276\364\246j?\005\243r\276\'\021\201=\365\333\247\276$El\277\263\007\032>\226&\005>bj\253=\010U\n>\365\241K\276(\014\252=\246\320Y\276G\254\035?\035w\n>\255\206\004>\367X:\276\274W\215\275\261m\321>\241\363\252\276\"\252\360\274:#\n>\366\013\326>\337\032H\277\236A\223\276\277\232C\276\326\307\003=S\256\240\276M2\222\276I\273Q=3\033d>b\017\215={\275\313\276\014\314\212=Pp\301>\262\205\340=3\033D\276\036\371c\276\227s\231>\343\307\000?\343\215<?\376\232\314=\272\367P>w\276\217\276\356|_>\014\223)>\355\365\336\276\277\202\364\275\260\036w<\031\347\257\276h\350\177\276 *\215<j0\r?\327/\230\276,\324Z\276\332:\270\274\325\225/\276\310{5?P\344I>\201!\033\277\255\372\034\275\2304F\276\0054Q\276\274\263\226\276\373\256\000\277\225\267+?9E\327\276o\365\234>\243\001\034>{\210f\276\201C\310>|\016\254=\267\321\000\276>\226\376\275:#\352\276*\003\007\274\217\374\021?\314\227\327\275.\307\313\275yXH\276\232|\203\276\003\317\275>\257|\226\276\313/\203\274=,\324\275\023\'\207>T\345;=UM ?\273\200\267\275\346\313\033\277RI\215>\352\314\275\274\264L\320;>y\270>\375/\327\274K\002\304\276\342\036k>\037\242\321\275\260\254\034\277\311\310\371\276\253u\"\275x\234\262\276\035 8>\251\371j\275/Q\375=\345\3614<\310AI\276\265\246\271>\355d\300\276\233=p>!\310\221>\225`\021\276\232\231Y\276\304\321\225\275]k\357\274{\275#\277\247\350\310\2769(!\276}\353\203=\362^\265\275\027\271\'\274\322:\n>\267\321\360\276\371I\365\2750/(\277S\353\334\271\251\331#>\256\273\031\276\232\2319>\341b\205>\331%*>\352x\014?\302\372\217>\211\014\353=\363T\307>#\204\227\276h$\302\275\357\033_>\222\256\031>\367\307\013?\257Z\311\276_\230\254\275\355\201\326>x\013$\276\256G\341>M-\033>\225\237\244>\244\377\205=\023\017(>d\314\035\276\261H\270;\365J\331=\261\212\027>X\377\'>\243\314\266>\267_>\275\363\216\343>\361\021\261\275\0049\310>\3578E\276*\343\357>[0\310\271\212\002\335\276>\3509\276\021\252\324\275\005\206\014>\017\271\271>\344,,>\333\277\022>G=,\277=\325\201>\327L\256>\334\177\304=\3731\367\273\347\214\010\276\366z\027\2761\316\357\276\035\254\037>\306\242\231\276\334KZ>z6\233>\265O\347>,\177~=\217\302u>\202\347\236>Z\236\347>\374R\177\276\251\2377>;n\370\274>\313#?>\313\363\276*\251\323=\217\337\353>\205\353\021>\'OY=\210K6\277\221\362K\277r\341\220\276k+\206>\224\301\321=\202V >\204\236\315\275\007\010&=?\237\022\274YL\374>>?L=\346\226v>\t\371\030?\010[\214\275o\3601@\033\330\272>C\347\205\276\306\210\244=P\374\030\276\337\212D\274&\303q\275\310\226\345<\033\r0?\321\313\350\275w\333\305\275\371I\025\276J\265\257\275\n\242\016\276\214J\212>X\347X>\355\231\225\276\034\353\">@3\210\274\341\264@\276\222!\247=\035U->\265\375+>\351}\203>\326\247\234\275\306m\024\276z\232\002\274\366\264c\276Pp\241\276\225\237\324\276\361h\223\276aU==]\376\323>\231\331\307=aR\234=\220\236\242\2748,\r\275\272\367\200>\363v\204\276x\234\262>\322\031\230\275\350\244\247\276\017\356\216>\240\340B\276\027\327\370\274\000\251\275>\224j\037>\231G~\276\200\202k>n2*\275\253\004\013\276\n\200\021\276\221\323W<\273\270m\276;\3745>\273\017\010\277P\252\375=\334\330,\275a\216^>rp\351:\226\347\221\276\370Uy=\352x\234>W_\235=\266\362\022\275\342\222\223\276\337.\240;\237\343\243\275->\005\277\207N\017\275)v\264\275\215\264\364\276F\353\210>\366\353\256\275\223\035\273\275\300x\226>\014\345\304\276\236\352\300\276\327kz=\323M\362\276\261\277\234\276\263\007\272\275\252C\356=K\310g>K\224==L\340\026>Z\r\371\276\rm@=\022\367X>A\202\342\275\00155>\261\303\230\272\310\230\033\2761\224\203>P\252=>\375j\236\276\014\223i\277\204G\273\2760G\217\2769\321\016\276\220\210\351>\374\343=\276\203\300\n\276|~X\276\023\362\201>\275\035\241\276k\016\020\276\217S\244\276\267E\211>\010\254|>\272I,>\307c\326\276\344\021\\\273\266\020\344=\036\247(=f\023\300=\224j\317>\354\243\223>K<\240\276\327\022\262\275N\016\237\272\020\222\005\275\\Z\335>\352>@>\345\320\002\276\324\276\024\274\275\373\003>\277\202T\276\276\0233=\366\321)>\000\213\274\275E\r\306>\325\\.\275\033\236\356\276\006\027\206;\315\314\234>\262\364\341\275\234\2124>\214\276B\275\330G\227>\033/\035>l\004\222>\360\304l\276#\333\211\276\021\374\257>\345{\206\275\326\213\241\276\247\\\341\276\226>\264>^\242z\276\245\364L\275\345b\314\275\331\3167\276\231\365\222>\\w3\276\310\014\344\276c\362F= |\250\274\214\025\365\275\017\013\205\276\304yx\275c\264\216>\252\232\240>\374\000$>\234\373k=\202\214\2419\r\032z\276{k\000\276\035r3\276\220f\314\276\215\356@\277\\U\306>#\2763>\350\023\231\275\235\235\214\276X\255\354\276\335\321\177<\343k\257\276g\355\246>\312\372M\274wJG>m\220)\276\371\327\362\274J\265\317\275\346\256%>\341\264\360>F\266\303\276<\367\216>\301o\203\275A\324\355\276Q\024\010>\236Ac>O\006g\276\233\376l>D\300!?\273a\213>A\202\342\275E\241\345\274eo\311\275L\336\000=`\223u\276(~\234>\361h\003?y\001v>\327KS=\314@E>\321W\360>\357\217W>\334\021\016\276\030\t\355=g,z>\002e\023>o\273\320\275I\272f>V\361\006\276\203\206\036>_\265\002?\211\014\213>\025\214\232>o\323\337=\325\2625<_\265\322\276\036\304\376\276\344\202\263\275\241\363:>?\251\026\276\275o\234>`\310\352\276\205%\336=\210J\203=\004sT\276\255\027\323\276u<\206>\000o\321>\226\t?>\307K\027\276\314\263R\275\346t\251>z\302\222<\377<\r=\220\275~\276\2760\311> \322\317>PS\313>\177\301\356\275Nb\020\275y\223\337\274.\034\030?\034|)?\014\007\242>\335A,>H\334\303>\315\257\006>\024\320\344\276\353\213\014?\337\303\245\275\304wb>l[\034?\210h\364\275Pp\021?\222\223\t\2753m\237\276\330*!\276\256\365\305<\'\365e={fI\276\2073\177\2762\000\224=jj\331\275\204\273\243\276\272f\022\276\314\233C<\007B\022?X\342\221\276\277\202\264\274\255\300\320\275D\030?\275\265\211\243\276\306\302\260=\035\217\001?\267\227\244>\354\243\323\276P\215w\276a\252\231<\035<\223=R\233\210\276l\225 \276(\325\036\276\333m7\276\313\204\177>\2722h\275\323\237\035?\347R\014?\366E\">\221\n\003>\361\200\022\276\201C\350=\307K\017\277\207mK\276\335\014\247\276x\227{?\302\027&>\3225\323\275h\3200>\032\243\225=U\030\033\2771\353\035\277>9/;L7\231?\032\372\347=\023}\276<\220f\234\276Q\245\006\2769\'\266=\255/\n?\271p`>\352vv=\316\214>\275\021Sz\277\354i\307\275*t>\276\356\230:<\330\323\216>\355\360\027\276mS<\275\367;\324>^\242\032>\356\316\032\276[\230\205\275\200\232\n?y@y\276\345\n\237\276\311\310\371\2763\213\220\275t{\311>\001\3661\276\004\220Z\275x\356\375\276b-\036>g,*\277\320\320\377\276\322\343W>\021\337\311>\005\335\336\275r\334\351\275\320\321\252\274*\035\354=[\n\310=I\3642>\351E-=\024\313\005\277\312\305\230\274\207\212\221\276\027\232\313\276(a\006\277\2721\315>\010<p\275=,\324\275\216\351\371\276\032\335\001?\256\022\014\276yun>f\240r>\324\202\027>A}\273\276#\205r=\261\026\037\277G\217\217\276\357\217\307\2763\342\242=\253\2233\275=\nW\275\t\245\257\274\332\3765>\207\247\247>f\206\255=\261\341I\276\200H\037>\242\227\021\276\2553\236\275\000t\330>Q\024\350=!\223\274\276I\364\362>d\222I?\207\341\003\277\035\254\317>\351\016\002?\326n\333>\257\316\201>\347\306\004?\273\017`\276\254\305\207=\006\2015\276a\303\343\2766\310\204>D\372\005\300(\2332\275\370\301\231\275Q\332\333\275D\300\321>FB\273\276\273\3253>TRG\276\203\335 \277=\'\375=\301V)\276\362\265G\277\022\023\324\274\362Ao>\326\346\177=t\030\002\274E\366\001\275l\t\211>F|g>F\316\362\276o*R\276\374\3747\275S\\\245>\312\303b>v7O\276\005\371Y\274\222t\255\276\337O\035?\264\310\366\275Z\022@>\312\375\236\276\320a\236>G ^>m\250\250\276^\235c\276\370\210\030\276\014\350\245\275\331w\265>:;\371\276\232|3\276o/\211>\004V\316=\216\001Y\276\201[\367=\357r\341>\320\325^\277\274\221\351\276\253\256\003\275I\364\362=\206\217\350\276sKk\276\216\036\377\275\r7 \275*\214->\275o\374=\242\013*>\237v\370>5\265\354\275\034_\373\275\245\240\003\277\366(\034>Q\210\360\276\355d\260>2\254\242>\342\257I\276^i\271\275*\003\307=c\3214\276k\342\323;LT/>\357\346\351\276\210\021\n?\027H\020>\233\346\r?d;?>\216;\005\277\233\222\254<M\370\345\275!vf=\273~\001>\025\306\226=i\3430?\274\"\010\277\355\201\026\277\016-\302>\233<e\275U\336\256\276:\0363=g,\232<\326\305-\276al!>\331\010\344>\336\223\207>{\2106\277\354\372\025\277,\232\016\277\266M\361\274\20686>%X<\276\344,\374\276}\224\221\274\347\214\010>K\223r>\277\270\024==~o>\002\331\353>\"T\t\276Dn&>\325\335i:\\\003[>\2300\272=-\317#\276D\300\361>\231\316s\273 \320\031\274\203\027=\276b\241v>\333\247C\276s\327\322=,~\223\275;\374\035\277u\345\363\275\236\352\020\2768J\026?\333\026%\276\352\350\270\275s\3648>%\351\332\275d#\240>\212\002=\276*\251\323\275\316\031\321=\021p\370>5{`\276\357\341\322\276Nz\337\275\037\203\225\274;\374\365>Cs]>\325[\003\276\267\227\364\275\200\202K>I\021\371>\244?\217:\254V\006\276\034\315\021=i\251\374\275\251M\334\275\025\253\206\275\243u\034\277\0364\233=\205\264\206=qr\037>\371\2039?@0\367>\027+\232\276\271\252\214>\346\226v>(H\214=\313\256\305\273C\033\000\275S?\217=\254\346y=\300>\212>\024\313m\276\367\257\004?\334h\220\276\030!\014\277bg\352>/\212\236<\264qd\276\332\217T\276\200\362\267\275\033\273\244>|\270\204\276\363Y\236<l[t>\305 \020\276\204\236E?\325!\347>\246\233\004>\351\016\"\276\355\013h\275\343\031\024\276\222^T<\361\200r>\357\341r>\375\023\314>\274y\352\276b\204\240\276\025\221\261><\301\276=i\251\034?Q\367A\276\026\023\233\276<[v;\211{\024\277b\020\230>\226\262\254\276\031\221h=B`M\277\266\370T\276\251\274\235>\362$i\274\331=%@-\262\215>\370\215\337\276]\026s>o\236J\2763\376\375>\254\213\333\275g\355V>xE0\277\270\225\236=\246\322O\275]\247\301\276k}1\276\351\014\314=:@0\276\220\367\212\275\372a\364>\010\217\016\277\206\234-\273kH<>\225\361\257>od\376>:u\r?\177\023j\276:\006\344=\337j]=!\222\201\275B^\257\275\010u\221\274\357 \246>\316pc\276C\377D\276\007\316\231\274\360\334\353>\233Z\006?vO^>\200+y\276@\366\372=m:\002=5\007\000\277\347\303\223\275sK+>\253\347\224>\211Da\275\273\016U<\324}\200\276Z\273m>\254\034\n\277\353\213\204>\343k\317=\336q\n>\035\350!=F_A>\177\371d=\036\371\203>\366\227\355\276\232B\207>b\2416>\347\035G>\355-e\275\3578\225\276\3333+\276\245k\246>Q1\356\276\226\347\361>5\265|\277aO;>e\374\033\276\337\211\231\276\357\311\223>\361\326y\275\371,\217\276\316\245\000\277q=j>\320\362\\\276\23051\2735{\220>t\2655\2776Y\203>\265\246\231\276I\364\022\276\373ys\276\222\221\263>\225\324\331>\330\236\371>\376\2672>\206\003I\277\315\344\233>7\215m\275y]\217\276\266\204\374==\017.\276\311\2533>\271\374\'>~\343\003\277\342\351\325\275\252`\214\277\347\000\361>p\224\004?X\377\247>l\262\206>\307J\254=\211$\372\276_F1>\313\326\372>\243\006\323\276\254\342\275>P6\345=\247?\373=%z\231>VH\371=\234\245\204\275\016\333\226>\273\355\002?f\210\003\276\313\271$\277\351`\035>iR\352>y\351&\275\263AF\276\210\272\007?\026\030R\277\224j\217\276\274W\315>`<\003\277\305 \360\276uY\314\276\2338\t\277\360!\027<\3063\330>\013A\376\276HP\214\277\315\312v=\335^\022\276\004\377#\277\241\367\306<]\026\023\2767\200\310:\343\252\362=\301o\303\275\277\361U>\324\013\276\274\224\301\261\276\360\304\234>\250\000\330=Q\366\226\275\214\326q\276\251\207\230\276\205\261\025?\363\253\211>\361\326y<F\261<\277\376}\006>\223\030\004\277\360m\002\277\266\326\207\276\364\211\374=\005\027\353\275g,Z>\356\316:>O?(=m9\027=\342\344^>zS\021\276\004V\236>\277\267\251\275\306\205#\276\205zz<\360\304\214\276S\005\303\276k\237\216\276p\353\216>\035\311\205\276B&y\276\217p\212\276\211\0074\276\013^\364>\251\023\030?\363Y>>\347\214\350=\'\211\305\275\0221\225>\276\023\363=\221\320\266>\017\227|>Q1\316=\0216\204\277\302\372\177\276\214-\004>\366(|\276\221<!<\253\225\231>K\257\r=S\320\355=\200}\264\276\356\353\000>\033*f\276\020X\311\276\034\322(\274\230\211\242=\215b\251\276\312\375N\277\320\320\217\276\204G;>m\250\230\275\215E\023=\\\001\005\275\221\355\\>it\247>\372\362\202\276S\226\341\275%\006\301>\010V\265=\244\210\274\2763nj=\325\225/>\352\262x>\254X\374\274M\020\345>\337\211\331<\357U\213>\\\003[\276\276\207\013\276\377\261\220\275\021\031\246\276\246\362\226\276}\313\334\276\"7\303<\010\311\262>\340*\217\275\247y\007>\371\024 ?4\236\210<\212\260\221\276\366z\227=c\227h\276\361\327\304\276\266\276\250>\317,i>\032\2435>$ED>\324)\257=U\366\335=5\007\210\276VH\231\276cEM>PY(\2731_\026\277\260\033\226>|\'\266\276\020\314\361\276\202\342\247>\346t\211>p\224\374\275\013F\005>\252\014c=\033GL\276\367\222f\276\"\0312=\321\313\010\2768\363\273\276\\80>\272\240\236>\360\205\t\276\356|_>\003\354\343\275\213\030\226=\333\212\355\276o\365\274>Jb\311\274\2446\341\276;S\350\276\260\003G\276\350\336\243>&\001\312>\362A\237\276\340g\334>\247\351\223\275\235\200\006>S\350\004\277O@\023\277A\324\235\276\013\357\262=`v\257\276\225\324I>/4\327\276N\227\225>l\225\300=~o+\277\022\302\223>\210\272\217>c+\210=\000R\353>\322\343\367\275\373\312\203\274s\364X>\014\037\221>\241\241\217>8\025I\276<\275\222\275X\312\322?I\235\240\276\346\"\376\2767\212,<\305\217Q\276\231\020\3048\261\242f\276\211\2302\276\316\252\267?\322:\212\276\206rB\276\037\020\310\275i5\244>\022\302\263\276\023\325\013\277I.\177>-\225\027\276\266iG\273\024\\\354>VcI\275\321\350.>\3749\305\275`\352\017\277u\253\207={1\264>d\257\347>)\226\313\276\242A\212<uY\014??:U\276F\315\227\275o\327\313<@\331T\276\225\233\310\275a\246\355\2752\223\210\275\375\201\027<\3169\270=\350\372>=be\264\275\213\326<\271\242\356\203\276;S(\276]\247\321=F\2663>Y\372\320\275\276\301\227\274\303,\224=\307\016\312\2755FK>\204\361\263\275\220/!\274\242(\240\276\221\355\274=J$\241>\252}:>D\243\273>\223m\205;\216v\334<\014\260\317\276\363\253y\276\306O\343<\252+\257>\265RH\275\273\270\255={I\023\277s\364\370<\323\331\211\276w\025r>\274\005\022>\254r\201\275\241\333\253=\\r<>\235\200\006>\222\263\360=\317-\264=\t\3767\276\356\316\032\2760\201\253\276\017\227\334\275\252C\356\275\230\243\027\277+\301\342>\207\212\361\275\215\227N\276\205\010\330>X9\304>L7\311=Lq\005\277~W\004\276r\303o\274\313\234\016>\235\200&>\326\305m>\237qA\276\321\005\205\276\266\276\020?#\370\257>\327\370\314<\376+k\276\355\r\036>Ed\030>\033\236\356>\t\340\246=\001\2446>\204\022\006>@\373\261>\241\271\276>\211{\214\276\t\304k>\037\021s>g\270!><N\321\275\010\346\350\273\316S}>N\234\014\2777l\013?\317\236\253=B\262 >-\350=\275\361\0219\277\332\003\r>\301Ts\275%\222\020?\343\337\207\276\2405\277\275\330\330\225>\212\345\226\274+\366W>\307.\021\276\014Y=\276c\177\201\27733S>\217p\002?\345A\272\275\033*\006>\300x\346\276]\030i\274\323\366\317>\3603\276\276\350N0<\257\224\345=6<\235>\201!\353\275\354i\307=\010\350><\211\007T\276\321\256*\277\020\351\307>g\355\226>\035\311\345<>\226~\276\350\244\207\276\325x\311>\031\342\330=\304\353:=33\243\276\242{V=\342\006|\276\227\342*?!\223,>/\250O\276\361h\343=F\2277\275y\220\236\275\343\307\310\276\023\'\367\275\r\032\n?#\020o>?o\332\276\372\320\r?-$`\275\330\273\037?\240O\224>\306\242)\276\277\016|\276\272k\331>xb\326\274\315\036h>\225`\361\275\216\224m\275~t\"\277\305\312\210=\335\352\311\276?\344\215\275\267\'H\275\006\365\235\276b\020X\275\225\202\356\276\000\306S\276\231*\270=z\344\337>4.\214\276s\272L>\316P\\\274\2236\265\275g\233[\276\231\310\026<\003\t\252\276\374\306\027>\316\307\265\276\314)\301\275\340\020J>z\374\216>3\334\220\276\376\324X>XV\312>,\323o\275\177\301\316>\016\241\002\277*\035\234\276q\254\313=\332\376\205>\306\371\333\275s\272,>\323\023v\276\310^\357<\037\242\321\275e\307\246\276e\344\014>K\315>>\006\330\207\276/Q=\276\232\2319\276p\224\274<\370\215\017\277\\U6\277\214\241\374\276\241-\227\276\334\021\216\276\251J[\2758\241\020>\025\343\014?+K\364\274\310\007\255>\237\005!=\205\010\030\276\214g\020>\013\234\254=\2147\350\273\337\246\007\277\304\'\035=\335{8>=,\004?\307\272\210>\201\260S\275\006\330\027?z\344\357\276\302\371\264=\334)\235<\030\t\315>`Y\271\276\227\0347>\315\257\266\276\352\261m=\002\233\223=\307c\206\276\3024L\275nL\257\276\t\371\300>,}\330\276\265\246Y>\365\363\226>\220N\235\276<f@\276I\205\241>\372\246\037\274i\035\025\276\'K\255=\320a>>\277\016\334=\030&\323\275S\263\347>\330\360t\274+\373\256>qZ\240\276\374\376M<\334\361\246=\007_\270=\371\240\007\276}y\241=\027\274\330>c\1779>jMs\276\377\222\2679u\223\010?H\033\307<\032m\325\2747\032\320\276\257Z\211>#g\021\277\352\347\315<!\037\364=.\034\010\2764.\\\276\252-\265=\260\035\014=^\325Y=\014\315U\276[\2249>\024?\022@\302\245#\275u\310\235>\370k2>e\216\305\275\003C6\276\\\343\263=\254\341\"=,e\251?\236\262\272\275<\275\022\276K\313\310\275\225a\234\275\206;W=\361\324\243<\305=\266=w\370\233\276\243\001\034\276~\343K\276\236\007\367\275g\325\327>\301\3420\2768\204\312>\225-\222<\342\350\252\275n\277\234=i\303!=.\344\221\274x{\260\275\005\243R\276^hn\276\307*\305\275\210\272O>\177/\205\274\310^\017>\347\343\032=\204\236\r=*\340\276\275\246\325P\276\326:1\275\013\227\265=~\000R\276\352!\032>\247\005/\276\327k\372<Z\236G>\021\214\203\274\360P\324\275d\006\n\276shQ\275\031v\270\275\214\275\027=\250Rs\276\017\271\031\276\360\277\305>\n-k<b\243\254<\254\3773\276\234\372\000=W\317\t>\264\222\026\275N\177v\274\223\342\303=\026\336\325>\237q\201>C\255\t\276\315\222\220>\r\032:\276\0363\020\275\016\021w\275{1\224>2\350\004\275\025:\237\276)w\237=_AZ\276x\321w>m\342d\276tad\275\344\017\266\2766\315[>\014\002k\276\nh\n\277\202\347>>\347:\215\275\246Dr>\306\304\266>VHy\276\007\3230>\235\234\241<\r\253\310>z\214r=\342\344>\276\201Nw\273G8\215\275\245Ok\2752\350\244=\230n\252\277\236#2\275\236\311#\273\307\021\353\275\024y\222=\265\2469\276\347:m\276\314\2277>h\"\214>r\370$=\265N\\=G\001\202\275\273\362\231=$\'S=X\220\226>KY\006>\271S\272\275\276k\020\2758\023\223=\307\235\242\276ToM\276\237\036\333\274\210\364\253\276\336\002I>\335\230>\276\314\177\010\276\373\256(>\336\216\360\275l\"\263\274\241\204\331=C\256T\274\242\013\352\275\344\274\277=\275\032\240=V\362\221\275\225\324\271\277\244\0275\274c\320\211=\227\001\307=\205_*>\300?e=\336T\344\275\327\243\020\276\226v\212\275\244\245r\276\004\307\245\275]Q\312\274\177j\034>\032Q:\276\227\220\217\274Fy\306\275O\036\326\276\241\202\303=\000\032\305\275\331\224k\276\031\342\230\276=+i=\202\213U>\220\275\336\274\203L\242\276\222\221\023\276\372\013}=[\262\312=7\375\211>{N\032\276\002d\250=\005\335\336\275\002\331\353=\000\344\204\274k`\013\276\025\214\252\2752w\215\276Yn\351\275{@\352:\361\272\036\276\257\224\305>\020@J\276p\316\270\276\356\224\216\274\326&\004\274\310\007\035>\362$\311\276\007\265\037\275\2237@\274 \323\232=>\313\023>\014Y\035>(\'Z\276\035\224\360=\275\343T>\271m\277=\001\373\010\276\224\366\006\276\255\372|\276\352xl>\366B\201\274\245\2066\275\236\227\212\275\347\377\025\275Ed\030>\303\3601>\215\177\337\275\004!\031\276\007B2\274\256\360\256>y\314@\276\236\006\314=|E7\275\3058\277\276r\376\346\275\211\007\024=^\037\214\273\274 \302\275C\034k\276\034\353B>/\243\230=,\017R\274|\325\n\275\016\333V>IM;=\25068=\220J\221\275\225\267\263>vT\365=\242]E\275\247\315\270\275\373]\030\275\345\266\235=\n\205h>\366\r\214\275K\223\302\276\223\030D\276$\013\330= \355?\275\273\355\">t\230\277\276k\267\235>\n\272\375=\034_{>\267\013\315<Gr\251\276\216Xk>\342\220M=I\021\231\276EdX\276\356B3>\013b\240;\355;P;\216\224\215\275\203\333Z\274U\244\n?\274tS>S\315,<\022\207\214=\004\034\202>\372\270v>\004V\316=?\216f\275\331Z\037\276>\"\006\276\362\265g>\371\025\253=\037\235\212>\n\235??\277\013\333<\262\364\241>\257}A\275KZq\275\316\245\230\276\236AC\276\003\231\275\275\211\352-\275\331=y>\300\347g>B&\331>\252@\322\272R\0171>~VY=\207\376\251\276c\n\326<#\335O=|{W<\271\307\322\275\213O!>\212\2545=\273\362\251\276p%\273\274?R\004>\231F\223\274N`:\275t\266\000=\367\222\226\276ML\027\275\231E\315;\"T\231>\350\023\351\276u\345s\276\371\2031?Q\245\006\2763\026\r>\276\027\237\275_^@\276nQ\016\277\374\307B=\024?\"@\313\3707\276t\3579\277\253!1\276\256\020\266=\026\373\033\277\3500\037=\245\277\267\275\017\234\363?Z\273\275\276g&\030\275\302\243M>r\303o<\225H\262>\313\272\177\275\020\257+\277\312O:\277\272\203\370\276\014v\203\276.\377\201=\363\223\n>\013\265\246>\315\226\007<\030\244\317\2734\364\277>1\2243\276-\262\215\2764\325\223<\364\245\227=w\025\202>\353\346\342<8-x>\347\000\321\276t\014\010?\355\r\376\275\207\212q\276M\370E>\354O\302\275\234\247\372\275 \231\216\275b\204P>\351\361\033\276\271\337\301\276\247\005\257\276\351\232\031?\345~\017\277\374\2519?\222\354Q\275\217\033\276\275*\306\271>|~\030?O\351\320>\363<\230>]2N=m\250\030\277\327QU?7\211\201>\320c\224\274\376\232l>u<\226\276Bx4<Q\210\300\276\241\365\220\275Q\332\333>\367X\372=\013\234,=Wx\227\276\244\252\031?\001\366\021\275G\003\370\275\362\352\374>\205\224\337=\\r\004?\313\363\220>8\276\226\276L\303 \277Yib?\351C\027\276\343S`>`\315i?\005\334\363<\225\016v>\320%\034\275<3A\273\035Z\344\275t\322\313>\322\251\003\277\236^\t>F_A>V+\323>\252\266\233<\233\033\223\276UjF?_\2266\275]\337\247=\030\377\343;\020\351\317\277\020\314\021\276HP\034>,\232\236\276Y\335\312>#\025\206>\252\016Q?$\177\240\276\311q\247=\022\024\337\276\274\256\337=/n\243>\2132\233>2\254\002\276s\237\274\275Z\273\355\275O\036\226>;\001\235\276\366\227\375\276u\037 \276\224\331@\276\026\254\314\273\224j\317>lx\n\277niZ\273\330\361\237\275?R\224>h\005\246\276\217Q\036\275\222\350\345\276`\310\312>\n\021\360=\020X\371\276cb\243\276\322\343w>\341@H\276\"\211~\276\241-\'?\212\002\035>\032\333\313=\rT\206>{I\263>\252H\265>\352\225\n\277Q\245&\276\316\307U\276\254\377s\276+M\232>o\rL>JF\316=\025\306f?\2721\275>V\267\032>\324C\224\276\271\374\'\276q $>u\310\005?\357\033\337\275Gw\220>vld\276\341E\277\276\336T\344>\243\0063\277=\234\300:K\310G>O@\023>=\322\240\275a\340\251\276\024\355\332>\320\355\345=\240\303<>\241\271\216\276%X\004?\020\347\341<\366#%>\025\\\007\274\376&\024\277#2l>\264\037I\276\361K]\276\034\231\007?\375\207\024>\177\025\240=\354/\333\276Sx\020=\'\372<\275\r\375\023\276\r\246!\2769E\017?\205@.\275YQ#\276k\231\254\275\345\325\031\2763m\177\276\374\251i?<\332\270>\275\376\244\275\025\000\223>P\215\027>\232\316\276>\212\000\247=\030>\342=eP\355<\205\266\274\275\3539I>5\007\370>\367X\352\276D\213\014\276\3667\262\273\323\237\035>\360\205I\277\244\245J\277\177\366\203\276b\3631\277bJd\276\001\276[<+0\264>\235K\261\276k\237N?e\374\373=\310\322g\276@\331\244>\"\211\036\276\356#\267\275\210C[;L\204\262\273IK\205>C\343\251=Tt\364\276\234P\210>\377\t\016\277TtD\276g~\365\275\252\235a=\"r\272=$E\344>!\310\201\276\267\264\332=\236\357\027\277\261\212\207>9bM\276\225\177-\275\377\317!>\201\316d\275,\202\037\277\3647\221\276\256\330\017?\241-\347\275\343\210\225\276z\302\322\275t\352*\276p%\033>\026\373\253\276\264</\2762\311\330\276yXh>\370\210\270>T\000\374\276\200\237\241\276j\3737\277\034\323\013\277\366zg\277\022k\361\274V\274A?\022\302\343\276\314\263\262\275\276\2441?{NZ>v7\007\277\000\251\315>%\006Q?=a\371>\240l*>b\204p>z\344\017\276h\\\250\276\211^\246\276\376\'?=L\375\254>\327\300F\277m\305\276\276\366\264c\2768\204\n?\247\"u>U\336\336\276_\007\316\276\203\300J>\r\253x=\023a\003>\356\010\007?\177\331\035>\2201W>\233Z\346>E\266\230;\332\022\003<p\227\235=\253\347\364>\"7\303>}\221\260=\277C\031?X\220\346=J)\310>\230/O>\322\254\314\275\337O\265?\342;\021\276\200`\216>\306\374\\=\320\233\n\276\263\230\370>\266J\340\276\t8$\2777\211\341?\240\340\262>\031\214Q\275\225\202\006\277o\r\214\276\374\3067\276yX\270\276m\250x>X\347\270>\3441#\276y\222\264\276\"T)>[\\\343\274@M\r\2766\223O\276\025\035\001?B\351\313=\001\2446\2761\323\306\276y;\242>\236\265\333\276J\322\245\276\237\002\220\276\033G\354\275\223\035\313>v2X\276\242)\273<\370\337j>\211\357\204\276sK\273>\021\307\022?7\363u\273`\345\020\275\200-\217\275H\304\244\276(\325\216>\376\016\005>\241gS\276\361\327$\276\203\300\252\276\232\261H\276\276\023\023\276\353n~\276W&\024?\237q\201\276\350\274&>\331=\251>\261m\221\276:\002\270\274\301\377\206\276\344\203\256>\034|\201>\312T\001>\252\232x?\266-\232>\257_\320>\003>\377=Qk\312>\354\206\255\276\255L8\276d;\237\276YQ\203=)\226\233\276\335\322\032\277\245\240\033>\375\023\334\275\236\262Z=\376\232\274>\335\352\211\276\334\272C\277P\215\257?\035rS\276\200E\276\275\233X\200\275U\373\004?\2657\330>\371\240\327>\235\235L\276j\023\'\276\236\322\221\276\254\346\271\274<\203F\275\314\227\367>J$\261\276\271\302\273\276U0J>\333\334\310>\347\027\305=\345\263$\277\370\340\225\275A\274\016\276j\366@>\364m\001\275J\262\016=\026\366\244\276\365fT<\245f\277>\212Y/\276{.S=T\346\246\275\253!\021>\301\255\373=\354\335\277=\2343b\276F\323\311>x\356\035>\373t$?\230\243\007>\000o\241\276\240\303\374\275\205_*>\361) >u<\006>\311v\216><M\346<*7\021=\267\177\325\276\020`l\273\010r\300>\003xK>\224\301\321>\032\206\337>J_H=\035\224@\277&\215q>\347\216~=\373\256\010\276cz\"\276\247\221\366\276\322\035\224>\034%\257\276_\014\265>n\243\001?\363\253\t\277\233=\220\276I\326\241\275\350\336\223\276h\226D>\375Mh>\236{\217>\275\306N\276]\247\201>6\253\376\275\262h\372\276\004\253j\274l\230\241\274\350\274\346\276\322\251\333\276P\344\331\276\211\225Q\275\206\217\010\276\314^\226=\274\314p\275%\006\201\276\266\020\324>\214\276\"\276\030C\031>\r7 \276\326\342s\276\207P\005>\000tX>m\255O>\013$\230>\\\254(>\336q\332\276&\305\247=\244\210\314\275\230\300\235\276&\2527\277\203/\214>\231\022)\276\222\263\360\275L5\223\275\357\311\343\276\373:P\276(\270\030>\273\230f\275\013\255\030<u\315D>\325\t\310=\355G\372>q\217e\275\377\312j>\023\014g<&\0360\277\313\276\353\275\361\324c=\336a\311;\370\315\263\273xb\266>\346\0058>\376}f\276\257\353\227<\210Kn\276\343k\377>\017\264\222\276P\031\337\276BC_>\271\337\241>\264\223!>2\254\">\233 \272\276l\3542>\271\302\373\275n\332\214\275\036N\340\274\361\021\261\274\271\374\347>\324e\021>\267]H>\017\227\214\276\207\2121>J)\010>\335^2\276\302l\202=\016O\217\275.V4\276\345\263\024\277\311\037\004\277r\304:>\035\346K\276 )\302\276p^\234=\234\304\340=\014<\207>X\305;\276y#3\276\334h \276\305r\313>P\374\230<\023a\003\276\nh\032\277\225\016\266\276!\002\016\276a\213]\275X\220\206\276z0\014\272\246\355\237>l\317,?\361\235\250>5\313\n\274\216X+>\271p`\276_\\*=\370\245\216\276\347\035\'>\255i\036>\362\3573\276\304_\223>(\325>\275\312\375n>\272\240n?\277+\262>\'\367C\277!\223l>(\325\356>xz=\277[\230E=8\363K>c\013\241>\233\311\007?\332 \003?>\3133>\343\034\225=\224\274:>\363<\310\276\3539)\276]\334&>\236$\255\276S^+=\006\201\325=\213R\002\275\225`\361\276\037\021s\276\030>B>uv*\277\027\324\367\275\3127\033>\320\270@\277\370+\256\273\205\2316\276}\313\254>\364\375t>e\343\301<n\335\r?\002\274%?\310\265\261>F\323\351> A\221\276\253\225\231\276\310\265\221\276\316\215\231\276>B\255\275xb\346>\255/\302>\212\002%?\270@B\276\361\rE\275\271\031\016\277~\035\010@(~4@\2510\326\276\205\266\334>\303\r`?G9\030=\375\274\351\276\004Z\232=\tP3\276\263\007\332\275\200`\256\276\263\265\336\276e\252x\277NE\n>\230\335\223\276\n\277\244\276\001\023\010?\3539\251>\230\206\261>\236CY=h\005\326>\033\022w\276\206\033x?\364\211<\277\n\370\265\275Q\367A\276|\017\027?C\342N?0/(\277\034\261V=\370S\263>\353\377\014\277e\337\265\276od\036>y\257Z> \360\300<%\222 \277\'\210\032>\032\206\317\275Zd\003\277\031\004\326\275\245\024t>\204\326C=\350\244\227\276Q\301\241\275\251\023x?\221\325\r>\220\203\002?\007\316\311>\317\275g\276t$\307\276\371\367!?_A\312\276\034\231g>\202\347N?\231\2012\277\326sR\277\033\200\215=\366@;\277\201x\315>\027\237\002\276\370\302\224\276\312\303\222?\177\336\304\276/\335\004\276\177\204\341<\217\344R>\314(F\277T\250\256=\225\267\303\2765Fk\276\241\273\204=\017\234\223\277s\272\354=\002\267n=\3230|\275\372D\256\2762U\200\276q \004\276\277C\361>\327Q}?\232%\021\277\340\333\204>\242\262\201=fN\207>L\216{\276{I#\276\240\340B?\200\324F>\233U\037\300\237[h=\214\241L\277A}\353>\232\010\213>\037\241\346\274\314bb>p\266\271=\013\014\251>\236\265\273\276\203\372\246\276\276\301\347\276\260 \255\276\221~{>@\0231?\204da\276 \265\271\276\245,\303=\274\"\030>\034\266-?^hn>\365J\331=\364\303\210\276@j\223\276\032n\020\277\024\261\250\275\321\313H\276u\345s\276\212\260A\276U\030\033\277\231\330$\277\003&\360\275[B\026?<\367\216>p\231\243\276\247\226\035?-#\365<\320~\034\277\201\230\304\275\004\347\314\275\263\322D>\356=\334\275\022L\265=+\373&?\227\312\023\277j\0306\277BC\027\277\347\303\223=\371\236\261\275\342\222\263>b\205\033=_A\332=5)}?\343S\360\276H3\346\276\300\2622?D\300\001\277\262\327\273>\007%$?\360\247\346\276F\316\002>\343p6?\272\3670\276/n\203\276H\247\376>\360\212@>\323\3667\277\312O2\2778\333\334\276\231\273\326=\241g\223\276l\317\354\276;\344F\276/lM\2752\311\030\277\300?\245=\214\017\263\274\214J\312\275|,-\2775)%\2777\246\347\275\351\205\226\273\330\360\224?\t\371\000\276B\005G\275\033G\274>T\000\014>\204\323\202>#-M?z\305\263\275\363W\310;\000o\321\276\345\320\002>\353\220S\277\311\310\211\276y@9\276\203\335\020\276Xs\220>UO&=\245,#?\263\007J\277\240\246~\277\006\201\025\276\027\324\367\276\351\324u\276\303\360\341\276\013\232\026\275\350j\333\276\266\333^\277\3166\367>\247\005/>4\272\013\2776\0021>\350jk\275\370k\242\276\252\2320\277\333\371~>\235\362(\275x\271\250>\016h\351\274Hm\032\277\216\003\217=\000:,\277\226\262\234\276~:\276\276M\241\263>Q\275=\2771[2\275\374\035\332\276\233\254)\277\177\373\032>\361.\327=\267]\010>U\373\024>\3269\306\276\374\373t?Ou(\276\035\346\273\276\345\2703?Ra\314\276\270\003\225\275\230n\022>9\235\244=\2554\t>\350j\313\276v\303\306>\004s\224>P\337\022>{\332\341=o\2730>\367\344\201\277HN\306=\372\355\013?\\\311\316\275\325\347\n>\314(F?w\025\n?\226\t7\277\323\207.>\340\333\244\276\241-\347\276\274=H\275t)\276\276\300&\033?5^\232\276I\242\007\277\341\321\206\276\230\372\311>\341\227:=\n\364\t\276\207\371\n?\350M-\277\345\n/>\020\351\247\276\\Y\302=\253&(\276\205\353\341\276r\210x\275s\235>?\337\300\244=\304\316\324=\3269\006\276x\356\275\276\347\214(\276{\203\007\277*RA\277\242\357\256\275\366(\\\276\244\210\014\276\371\240\'\276D\206\365\276\340J6>\306l\311<o\022\003\276\361c,?P6\205>\315\004\303=\371\275\235>\231\236\320>\317\275\247=\341\177k>(\363\017\275\231\022\021?B\262\360\276\346?\334?B\006r<\3641_=\354\372\005>\227\256 =*\220\231=\355\232\020\275t$\207\276\254\034\372?\230n\022\276\342\036\333\276\016\244K\275\343\374m\276W\004\037\276\002\2029\276\340\234q>\026lc=\376\324\230\276\014\352;\276k\267\035>\372%\342;J\225(\275yv9=nn\014>\020X9\277\002\274\305>\236{\237>\230\027\340<\353\377\334= \265i\276\305\003\332\276\331\231\002>,\237%\276\217S\364\275\025\305\253=\237[(=\314\356I\276\341\010\022\275\014WG\275\202\342\327\276\300\347\007\275\343\215L?4\021\266\274\250\213\224\274_\014\005?\272\332\n>\t\026\227>>\"\266\276\246\n\226>\362\315\266=\226\347I\277\237q\321\276|\'\346\275\326\250\247>\002\016\341\275\035U\315>\r\211\273\276\376\267r>Mgg=\240\025\230>P\374\030\276\001\366\021\275IK\265\276\222\005\214>\333P\221\276=\177\032=\340H\240<\337\0328\276\324\202\207><\244\230\275\020y\313\275\226[Z\276&\215\221\276Ul\014=\257\010\216>\032\335A>*t\276>\361K=>e\344\214=\201\354u>RI=>\024\350S\276\234\242\303=\256\022,\276A\021\313=\2760\371\276\344,,>Q\275\265>\374\0334\275\335\263\216\275q D>h\313\211\276\005\243\202\276i\034\252=\0220\272=\"O\202\276\207\247\327\277\201 @=\246\233\244\276}\2218\277k\237\316>1\3236\276C\342\256\276\206 \247\276\362\357\223>>x\215=2 {=\030!|\276\036\371c\276\254\250\001>v\246\320\275\316\245\310\276\262\327\373\276o\330\026\276?\251\026?\376\266\247\274d\345\227;\037\200\024>\3058\037>\303\201\240\276\271S\252\2760/\220>\212v\305>Lk\323<x\263F\275\254\307\275=\272\2038\276w\333\205\276\025\340;\275\\88\277\310{U\276w\276\'\277\255i>\276\364\303(>l\227\226\2757q\022\276\220\203\322=\301SH\275\257^\245=m\377\n\276\021\252\224\276\261\334\322\276\317\367\263\276\335\315\263>?\343\002>\267\370\312\273e\031\"\276\243\036B>1\323\026\276\013$(\276\031\001\025=A\362N<CJ}\273\365\2761>\223o\226\276\246\325\020\276_\322\230>p\353\316\276_$4>\2410\250=\02215\277\353\377\234\2750\r#>K\310\347\276\347:M\276\017\270\216\275\214\2046>\372D\236>\203\333\332<\036\247H>\005\243\n\277f\2402\276\276\207\253\276Y\016\031\274\022\300M\274\344\276\325\274:@\300>UM\320=\253&\210\276A\274\216>\344\300+\275\026\373\013\276\234\304\000\276\363\216\263>:\222\273\276\247>\260=\"\252\220=lw\217<\362{;>\355\360o\277\031\312i>W\004\317\276\350\336C\276\256*+?\023a3\277!\260\022\276H\334\033\277\235\253\234:\350\371S<\366\227\315>s\200\000>\370Pb\275\'\240\331\276\263\356\237\275\224j?\276\362\260\020>\316\210R>\217\344\342\276\010\001\371\274\017\013\205\276\007B\262\273\026\336=?\273\ni\276\376}f\276\374\030s\276\312\032\265\276\213\250\211=A\361\323>\204\330Y>\226&%>\0319\253\276c(\027\277U\373\364\275l\354\n?\374\306\227>\000\251->\244\302\330=<f\020\277\3711f\274l\004\262>\251\336\232>Sy\033\276\373\256\250\276\221\233A>\331Z7?R\'\300\276\354Q\030\276\026\332\271\275\020\222\205>\255L8\275\256\360\356\276\025:\237\276\352xL\276\241J\375\276\213\246\023\276\217\337\373\276w\204S>\361\200R\276g\362\315= $\213\274u\310\r>vq\333\275]P\337>\271\215&\276E/\343\275\3024\274>\206v\256\275\333\374?\274P\344)>\362\014\022?x\2641>\355d\200>\262h\032\276\305\346C>;\344f\276\272\203\250\276\352B\314\275\253y\016;/Q\r?D\335\347>\352[v?qU\331=\247\0100\275\265\211S\276_{\206>\217\000\216\275\344\367\246\276\373\256\230\276\324\200\001\275\273oF\273\242(\240>A\016\n\2760\360\334>\217\252\026?#\3339\276\234\305\313=qr\277=}\"O\276\332UX?0\236\341\276\023E\310\274\211A`\276\243X\236>\320\017\343\275\037\021\263>B\006\362<\360\245p\274IhK\276l\354\242>\251\026\221<\325\t8@Y\300$\276\356`\304\274IK\005>\207\032\245=\340\333\224>\207S\246\275\to\017=\020X\311?\237\002\260\276\222\257\244=P\343^<\212\310\020\276\357\311c\276ni\305\276CqG<\210\236\024=_{\306>x\356\275>t{\t\276\370\215\237>\264u\360\274<\300S=\323\023V>\225\232\035\276l\2600=28j>\346y\360=\322\306\321\275\213\375%>\322o\217\276(D`>\016-\222>\356\261\364=yu\276>%X\034=\233=\200\276\274\360^;Nb\220=\23389>;\307@=\317fu>d\314]>o\273P>>\3751;\270\222=>7\340s>\325\375\255\273\254\220\022\276\350\366\022\276\300\t\005>5F\253\275\3536(\274\240k\237\275\246\'\314>\323\206\303=\263\n\233\275\304\261N>\263\354\311<\tlN<[\323\374\275\254\034\252>\214\363w>\236\322a>\273\355b\276\273\265L=\022\371\256\275wg\r>Z*\017>\202\377\215\276\332\354\243\273\007%\354>\245\203\365=F\010\217\274N\013\216>\246\320\251\276[\010\262\276\013A.\277\360\304\354=\243Xn\276\010\021\272\273\205_\212=\203\370\200=\315\344\313\276\020?\277\275\222!\207\275\366(\034\276r\371\237>\231\233/\275\367v\213\275\257@4=o\273\220\276c\321\304>:\225L=\340\241\350\275\273\177\314=`v\017\300:\222\313=|\233\036\276i\000/\276\n\205\250>\333k\301=\375\3665>\314\264}\276F$\252=\317Q\"\274\301\2205\276\360m:\275+\301b>\310x\264=\301\312\341\2762Z\'>\333n\202=G\346\321=`u\304\275\335\007\200\276\356ZB=)?\231\276k-\314\275M\020\345\276\r\253\370\275j\371\201=\274?>\276\372\233\020>\253\006a=\305\215[\275E\332\306<\244\372\216\275\261\304\263\276]\335\221=I\273\021\275B\262@>\363<X>\301\312\341=xE0>7\216\330\2743\033\224\276\032\250L\276 \357U>\320C\255=!vF>.v\273=[\261\257>V\202\205>\257?\311=\212Y\277\276y;\242\276\246|\210=I\200\272>\310\007\375\275\247\\\301\276<\367~\276\235\205\215>W\t\006\277\231\330\234\2763\033\034\277\254\034\032>\356|\237\276~\214\231>\177\244\210>\363\002,\276DL\t>\370\245\336>G\0038>=~\357=\251\331C\276: I=-\tp>\023\n\021>\224\373]>\335\230\036\275\273\362Y\276\206\033\220>\274\0052> \357\265>\371\332\343\276\261\2127>/\2438>x\234\342=a\375\237=\005M\213=\303d*>C9\221\276\231\273\026\276 F\010>\037\272\240>L\211\264\276\245\240\033>\243\222z>3\334 \276(\325~>R\n\252>\235F\372\276i\3412;w\205\276<\345\'5\276\031<\351\271\322\342\214<\345\357\036=`\002W\276\231\360\233>U\243\027=A\357\215\2758\025i\276\364\303\230\276\025t;>\351\016\342\275M\333\377=\220\334\232\274\216\314\303>\210Fw\276\310\322\227>\355\330\310\275K\344\202\274\244l\221\274[B\236>\222y\224\276\311Y8>\260\2176\277\260 \315=\237\216\307<\260 M>\272\367\020>\227;3\275f/\273\275K\315\036>^\235\343=\245\370\270\275py\254\275\023)\r=X\251 =j\366\000>o\365<>G\217\337\275\320~\244>\372\355+>\244\337\376=\335A\314>7\303\r=\007\262\036=\246\270J\276\363\310_=\304\264o=V\364\247=\327gN\275\247\350\210\276\357\033\237>\223o6<DP\265=\253x\343>\276\366\314>f.\260\275\024\010\233=\013\267|=\252`\324>\325\313/=#\370\277\276\365\276\301>\202\347\336\275\263\322d?8\367\027=\004V\236>$\321+>\267\263\257<\323\274\033\277e\251u\2757\375Y\276\311\257\237<\350\274&>\353\034\203\276\2721\275>\332\217\264\275\336\253\246>J\233*\274F\224\366=\370\252\325=-\230\370<`\223\025\276Z\201\241\276\"T\251>$\326b>\310\352\016\277|aR>\374\211\212\275\357\346)\276\026\337\260=h>\'=J\n\254\275Y\335\252\276\273)e\275U\244\"\276\202s\226\276\013\230\240>\007_\230>\333\205\326>M22\276\302\335Y>\365fT=\3063(\276O;\374\275\320\355\265\276*\035\314>w\235\r\275q\033\035?x\013\304>\334Fc>\353\034C\276\306m\214?\303\3650@m\220)\276\211]\033=!\223\214>\005\305o\276I\364\302\276\007|\216\276ZG5\277m\255O>\363T\307\276\373\350\324\275\001j\022\277\327\3006\276\207\026Y>p_\007>w\274I=yY\223\274\321t6?2>\314=X\312\322> {}\276bgz?\311\260:\277IK%=\224\302|\275\333\277R>\247tp>\234\026\274\276~R\355\275\002\267\016>`<c\277,\324\352\276\315>\257\2754\364\337>\360k\244=\024?n\277\241g\223\276\3225\323=\377\t\236\276\246\372\204;:\351]>\200e\025\277\rlU\276\341\177\273\276M\333_>#\025f>P6\035?\311q\247>x\177\334\276\365\363\006\277\316\245 ?\307\021S\277\211\230\322\275<\240\014>o\201\224\276\027\267\221\276\021QL=\262F\215\276\316p\003>\246\233\004>\377\t\006?\264\310\246?82\237\276\240\207Z\273\376\362I=\311\345\257\276\035=F\277\221\233A\276\365\204\r\277S\256\240>c\264\336>\027\237J\277\313J\323=\231\r\222>\17700>\231G\026\277P\215\207>x\266\307\274\353n\036>\371\367\271>*t^\277\344\240\364>\005O\241<\363\0372?\334h@>ga/\276=\362\327>\303d\252>8g\014\300}\221\320\275\0358O\277(k\212\273\303\r\010?\377\004\247\276k\0160>\0049\010>\313\276\233>\203\300\n=Y4\255\276\234\334\217>\233\311\027\276\212<i>\312\246\014?&p\233>5\265\374\276e\344,>T\000L\276vl\034?@\244\357>\331\3167\276\037.\031\276\323\331\251\276\037.\031\276\235\327\030\276\257\353\327\275\231\273\026>G\347|<\033\330\372\276\341b\365\276\372\233\020\276\021\337i>\001\301<>N\030\203;T\000\374\276\303\360\341>\027X\021<n\206\333=\225\017\301\275\"\375\366\276<\245\013\277~\251\317>\212\216\324>t^3\277W\3153=u<\006\277\005Q\207>\356=\314\276\235\021\245\276*:\022\276\370\0317>\346\2565?8\025\351\276FC\006\275\024\313\275>\335AL\277,\274\373>\025\343\004?\361F&\276\037\200\224\276\\\254\020?/n;\277\376`\340\275\205\316\353>%u\202\275\264\345\234\276\306PF\277/\2113<TR\227\276\305\2171\276\360\334\003\277\033\330J>Y\300d\276Ic$\277\3750b>\300>\312>\237q\001>\220\332\244\276B!\242>\306P\016\276\031sW=\275\030J?\233\033\023>\260\311\032>\245-\216\275[\353+>H\247\356=\313\333\t?\237s7<$\t\202\275\226\004\310\276\345\271>=\010\311j\277\017\0166=@\217\007<W[Q\276\273\320\034>\244\337\376\275\006\365\355>\236$\005\277[\261\'\277JFN\276\025t\253\276@\373\301\276\206Z3\276\215E\263> $\333\276\203\300\202\277!\005\217=\240\303\034>\274W\215\276\253\262/>]\247Q\276\024\313M\276\013{B\277\207\371\202>\355d\220\276 \357U>4i\023=\302Q\342\276\233 \n\276\353\3426\276\355\030\3548\037\021S=\277`\007?\353\213\034\277\265O\227>\300\354\036\2767q2\276~\343\023?\253[\355>\324C\224>\241g3>E\r\266\276A\016R?.\347\022>%u\"\277K\000\376<\301\344\246\275\177\206w\275\360\334\253>ws\'\273\035Z\244>\217\252\206>\022\240\326>B`%\276]\026\303>\370\031\027\276\036P\366>t)\216\276\250\343q>:\036s>]\212+>\256\273\371\276{\024^?\334\325+=\361F\206\276C\3058>\"\246d\2768\370\202>Ouh\276\360P\244\276\304@W<\210\327\035\277:\036s\275\244\337\036\276\222\263\240>\275\0302?\317I\317\276\267]\210\276\303\236\026\277\361\203\223\275\361.\267\276a\032\006>\355\231\205\276\206=\355\275\352\225r>\272N\243\275\335A\234>\317\203\313\276\241K\230=\340\241\210\276\'\245@\276\231\273\206\276\315\222\000\277\212<)>s\2361\274l!\270\276=\017\216\276|\265\203\275\205w\001?X\220f>\013\230\220\276\347\251\016?:ue>X\312r>\301\216\277=\203i\230\276ga/>\233U\177>\267$\207\275(\270X\276\020y\213=n\2435@\225\013U\275\314\013\260\274\231\323E>\037\327\006\276BC\037\2765\007\250\276\275Tl\275\353V\317>\375\370\213=\314Fg<!v\006>Z\rI\275\342#\202\275h[M=,\237\345\275\n.\026>\206\311\324\276\350\274\206\276\333m\327\275\237q!>O\254\223\275r\334\211\276\366#\225>\270#\234\276u\310\315\274\364O0>\235\327\030>\347\337n\275\017\234\363=-?\220=i\214\326\275\363\223\252=Q\274\252=1|\304>\372\320e\276\270\351\257>\013%\263\275\336!\305\275\206\254n>333\276c\227\210\275\212\260\001>\250\374\353<\350\025\257=\345\230\254<b\363q\275czB>\327\335\214\2764\242\364>q\215\317\2726\315\033\276F|\367\276z\374\036\276\272I,>\342\006\314\276\324G =$E\004>r\302\244=\254\3773>-!\237\275\302\206\247>\262\235O>$\271\254\276\234\305K=\306P\336>\303\266\365>8\241\020>\312\375\016>\252+\237\273\256\266\362>(\017\013\2751\010l>\336\306\306=\022\024\257\276\343\306\255=\221\362S\276\331\\u=\025R\336\276\301\252\372<\371J\300=T\033\274=\\\252R\275K\345\215\276\251M\254>\254\377\023>\264\260G\276\177\366\023?\030}E=\213\211\315=J%\274<\357\217\367<6v\231>G=\244\276\210KN=\010=[>\030xf\277\004\3425\276\372D\036>\225\324\t>\236)4\276\317\025\305=\n\200\021\276\005i\206>3\212%\276p\316H\276ca\010\275\310\014\244>\264\034(\275\030`_>uX\201=\225}\307>OX\322>\220\367\272>1\262\304\2756v\351>=\236\026\275[\323\274>\325\312\324\276\341(\371\274\203\370\300;\355\330h>F\355>=\236\027\335\272\'\367\233>\272N\003\276g,:\276\377\t\016>f\2758>\352\300\203\271\n\0241=\271\374\217\277ni\365=\365\326H?=\270\353>\031Y\222\275\003\262\027>\304_\013\277r\304Z\276(\017\253=\315\006\271=\355\236\314\276\352\225\342>8M\037\275\247\\\201>\364\032\273\276=\270\333\276+0\004>\264U\311=\0260!>s\200\000\276\211&P=O]\371\275p\264#\275{\203\'\277<\367F\277\256\022\214>k+\266\276\353\375F=\201[W>\313\363 \276w-\221>A\2677\276\014\310~\276\330\323N>1\224\303\276[%x>\213\372\304\275#2L\276\244\031+\276\007\323p>J\007\023?\251M\\>\225\267\303\276\317\215\237\272\302\372\177\276\341\356,\277\033\330\n\276\270\254\242=du\013>\373\221\"\276\247t\360=\n\023\306<\344.B\275\206=\335>\373\313\356>\350\244\027> \177)\275\353\311\234=\0363 \277G8\275>\016g^\276 \014\234=\222X\262=\252\361r>\\U\326>4\327\351=\236\265\273\276\235F\352\276h\320\200\276\243#y>G\260L\273Sy[\276Cu\363<\226\004\250\276\353\250j>\367E\235:\275\030*>6\345\232\276\021\307\372\276Ou(\276\364\371\250<\021\344\220>\254\377\033\277+\244\034\276\217\307,>\250\000\330=W\262\223>V\237\013>\013\265\226>\001\336\022?\233 \212\275\251\336\332=\331|<\276\201\354\025\276\272Nc=\377[\251\276\363\347[<\247y\007\276?7\264<\354Q\230\276\216\036\377=\327i$\276\326sr>\215\3568?\327\027\351\276\200\267\220\276*\214M>U\366\315>p\224\274\274B\ts>\373=\261=\014s\002\275\232_m>\n\242\016\276\362`\013\275\"\303\n\276\213\211M\276\201\3514\2745\230\206>M\020U>p|\355>\347:\315\275n\372\303\276\263\007\"?%@\275\276X\342\361\276\010\217\026\276\345\362\177\276\304\224H=\335\r\375;\232%\t?\244QA\275\036\033\261\276#\335\317\2742\003\025\276\033\324~=\005\300\370\275\003`<>&\303q< )\242>\034\323\323=\377\004\027=\343\302!>\375\244\332\276\002\324\324=\345\n\277\276\037\205\353=\212\217\017\275\010\224M>Z\330\323=x\n9\275\205(\337\274/\246\271=\276\331\246>\372\263?>!\037\204\276\033\330\312\276K!\220\275^\022\307=\275\217\243\274r\341\300\276\001j\252>K\352\004\2766<==\237[h<0\236\221>\370\2108>\020u\337\275\306P\356>\020X\351?\230\372\371=\004\004\023\276\002e\263>\013F\245\274\213\375\345\276\332\377\200=~W$>\000o\311?(,\341\276Z/\366\276@\336\233\276\035U\315=\013F%\276\252\3612\277\300 \251\275\251\272\354\273\355\r\276=\264\223\221\276\025\214R?io\340\276\237Y\242\276\277}\035\276\207\304\315\276}\313\024\277\006\177\177\275\330\273\237>\231\0203=E\022\215>S\320\275>\237\315J>@\023!>r\212N\276<\332\370\275d/\312;\265O\'>\006H4\275\"\340\320=\314B\273<}\320;\277\022\245\005?\235\327\330=\'\332\025=\334)\255\276\005\305O\276\022/O\275\234\334/>4\200\027\276\324`\332\276\302\2752\275~:\316\276\225H\302\276\234mn>\006\236\373\275io\200\276Qf\223\276\332\033\374\276\016\363%>;\373\252=\272\203\330\274\304w\342=\253\t\032?E\3607?\223\214\234\276\336TD\276u!\266=cb\303\276\362\315\326\276\322\303\320<\233\254\021\276d \317\274\310\211\300\273\306\247\240\276h\263\352=X\377\267>n\372\323\276S\350|\276\303*\316>T\214\203\276\232\316\016>_{\206\275\353s\205\276Y\027\027\276\356=\254\276\320|N\274G=\204\276w\276_>\256\r\305>\356\224\016>`\345p>\336Y\373=\013\265\346\275h\\\030\276\352[f\275 $K=\207\334L\275F\224\256\277C\311\304\275\037\200\024\276?R\004?\342\344\036\276Ae\\>\225e\310\276\307\235\222\276\2176\016\277\202\342\007\276p_G\276\324N\003:\316\031q\276P8\273<\327\205\037\275\245e$<b\333\002>L\211\204\276\256\363/=\020\004\310={\332\341\275`\352\'\276\300%\240\275\017\264\">\313e\243<\035=\336>\244\031\213\276\017\017\301=\002\016A>u6\t;\207P\365\276\363\002,\276\211^F\275E\275\240=\223\212\306<\247\350\004\300e\307f>\272\275\004>nnL\2763\033$>\224j\037\276A\020\200\275\n\277\224>\372\320e>\371\367\001?fk=>\242\234\230>O\257\014?m\250\350>\250\000\370\276~\214\031\277\334\200\317<O\222\356>2\003\345>\007\010\016\277\317\024\312\276U\276\207=\300\315b\275\200}\024>:u\345\275\355\323q\276\'1\350>\356y~;l!\000\277\255\300P\276\016\370\374>\240\303<\275\362{\033\276N\234\234\275\320\322\025<\0358\327\276\031VQ>}\005i\275\267\234K>\273~\001>\035r\363\275u\002\332\275\001\336\n\277\177\336\224>B\317\006>\262h\232>L7\231>\260r\230\276\006\204\266\275\265\246\371\275vq\353>\007\232\317\274\320\321\312=\341\177\333\276\242zk\276^c\227\276m\305\216>fN\327=\365\271\312\276.\220\340=\330\360\264\276s\272L>AJ,\275\220I\246\276K< \276\254\221\035\275\024\"\220\276(a&>\333\371\016?\021\250\236\275JD\370\274.V\024\277r3\354>gG*<nQ\266\276\215\227\216\276\226x\240>]\376C>\274\0052\276\257\224\005>\212\310 ?\2402^>\333\213C\273u\315\264>/\243\330=J\225h=\340\276N>\213\303\331\275\0049\350=\330\236\231>\017\321h>\233U\277=\366\227\005?:;\t?\033/\035>l\004\002\276\034\356#\275\343p\226\276\2446q\276\236\024\034\2738J\356>`v\257\275\240\206\024<\256\022\014>\244\210\254\276^\203\236\275 \230\223\276Y4\335\275q<_=\034\306\356\273\325!\227\276(\'z\276-`\342\276\246\320\t?Y\373;\275\212[\205\274\024\320D>\223o\026\276^cW>\000p\314=p|\215>9\267\251=\344N\251>\234\212\344\276\021\036\275>\211\007\014\277\021\337I\276b\333\342=\002\274\345>\031\255\323>|\n@?\224\207\345\276\350j\273\276\327\300\026\2777T\214<\237v\330>x\356=\276P\377\231\275\254\255(?\222?\330>\r\340m>,eY\276y\351\346\275\330\r\273>\372~\312>_{f\276R\272\264\275\212\037\203\276\0049\330>+\023~\276oG\270<\177\336\324\275\203/\014?-\013\206\275\357\346i>\306\026\342>6\223\257>\211{L>\2343b\276\033\0176\2757\246\007\276\223\035\273=\345\263\274\276\000\342\216=\n\272]>\213q\036\276=\325\261\276,\361\200\276\266J\320>Nb\370?\370\215\237\2765$n\276U0j>\213O\261\276\371NL\276-&\206>\025\000#\276*:\372?R\200\310=\036\337^<\364\246b\275\3603n\276\nK\214\276\335\317\311\275{\364\206=\356B\023\276\240\032O\276^cw>\314]K>\202W\313=s/\220\275\267\010\214\274\313\276\233\276\377[\251\276\323\023v>\277}\035\276^\200\215>z6+\274\267\227\204\276/\340e=\013\230\220>\325!\017?F^\326<\201\004\005\277\357 \246>\252\234v\275\034\353\002?\014<\207\276-C\334=<1\233\276\301\255;\276\220\367\352=\001L\031=\2716\264>\240\341\215\275\214\020\216\276\366#e>J\355\205\275\346tY>\245\240\333>\177M\266>P\215\327\275\244S\347>\221,\240>:u\205>\355\266\003\277\266\016N\275\344I\322>\215\234\025\277U\373\344>\225\232]>\017E\261>\247\226-\276\350\207\021>|\270d>x\321\267\276\013*\312=_\270\223\275?W\273\276\264\253p\276)\320\007\276\306\247@>\202\377\355\275-`B>\352\004\264\276\005\372D>\300\352\210=\233r5?\255\372\034>\206 g\276T\035r\2760\273\227>\006F^\275\004\312\026\277*W\210>fl\310=\302\206g\276\247\263\323\275\351\321\264=\263\230X\276\r\032\372\275U\244\002\275\235\364^\276pD\367\274\207\3408\274(~\304\277\341\264\000>w\025\002\277\306\212Z>\334\021\006?\366\013V>\355\266\233\276#\204\347\276|\233>\276Ac\306=\372\'x\276I\327\314\275\321\005\365=\311\223\204\276\372\n\202>f\202a\274\336\253\346\276*\343\277>=\233\225\276\273\233\007\276\300!T\276Nz\037>8\020\202\276b\0208\276<\210\335=&\001*\276^.\">h\\\370=\257\224\305>\201!\213\276\321\005\205\276\036m\234=tA\275\276\331Z\357>\211\322\316\276X\250\265\277\302Q\222=\346\221?\276\260\003g\276\352]<\275\212\253\n\276\305U\305\276YU\212\273&p\233>\330*!>Ve\177>\010\220\241=\310A\351>\006\201\025\276p\224\004\277P\337\022>\016O\357\275=D\223>\316\210\222\276DQ\000\277\350\336\263>!w\221\275h\320P\276\337\032\330\275\266\271\361\275B\t\363=nQ\346\275J&\'=\262h\252>\360mz\276\026\336\005>29\225=\'.G=3\304\361=\277d#=\351}C\276\213O\261\276Dn\266>\nh\022?O\256\211=&\215\201>\277\373\031\274\203\241\216=L\340\026\277\225\202\376\276s.%\276[\226/<\224P\272=\326\031\237\275\014\310\336\275\373\"a\275]\372\227;@1\262=\274tS\276<\275R\275+\336\250\275+\302M=\022\2107>\266\241\342=cb\023>6:\247\275\325\004\201\276\206 \347\276\372\'\370=W\354\317>\370\245>>R\'\200\276B\t\363\275P\307\343\275\003`<>\205%\236\276c\227\210\276\350\244\247\276\\=\247=\277}\005?\216\222\207>\241Jm\276\014\261\272=\351c\276\275\370S\363\276#g\201>\032\243U\276\270\036\305>W>k>J\007+>v\031~=\007\233\025\272\354ms=4\242\024\2761\266\260>\322R\371>\231IT\275\347\373i>tb\217<@\336\013>\204\360\230>\371NL>\006\004\2578!\310A>\005\371\271=#\333y=%\006\261>\366]\321=\266\275\235=R\270\336>2\257\303\275Qk:\276\224\336\037\277\264\310\246\276\356^.=5{`>(~\334\276\363\253\251\276\222;\254\275UM\220>$E\304>\371\243\003<O#\355=\334\235\025\276E\r\246>\214\272V=\220i\355<\25099=\200\323\273=3\025\342\274m9\327\275R\325D>2\254\322\276\'\367\233\276\234\026\274\274\3436\212\276\323\301z\276*U\242\274#\333\231\277B!\222\276C\305\230>\300\t%\276DL\211=9\'v=\344\017\226>\205_\232>\367X\352>\211\007\204\276m\032[<\322\035D;3\373<\275h\226\344>\253#G=<\365\210\275\276\336]\276\020#\024\277]\371\354=@\244\377>\302\206G\276\004\034\362\276$\356\001?\340\020\212>\342\314\317\276h<\221=\357r\321\275j\331:\276_\324\356<\367\036\016\276g\233\333\275\014v#\276\224\373\355>\365\326@>E*\004\277\351\232\231>\271\215\276?\311v\216\276]mE>O@\243\276{\203/\276\265\340\305\276\270\035\232\275_\357\236\276\270\036\305?S\221\312=\206 \367\276~\306\245\276\242\356c>@jS>\241-\027\277\251g\241\275\000\035f<0\022z\2764\277\272\276\226\347a>\\=G\276k`\213\276\005\250)\276p\261b>\210\017l\274\263^\354>\335{\310\276\310{\305>\214L\000=\327\335\274\276\364\032\213\276\373\\\315\276\332\311 >\367\314R\275Hm\222\276\211\231}\275\260U\222\276<\203\226\276\253[\235\2765\t\336<\2549\200\276\017\n\n=x\3217>\344\367\246\276\205\353\001\277\224\244\213>Z\360b>\013\014\331\275I\205q>\030x\356\275Z\020\312\2740\365S>@\331\264\276\225`\361=.\342\333\276\202\377\355>\241\326\204\276\324\324\202\276\025\000\323>[H\033<\'ji\2755\360\243<\314\'\213=\272\024\327\275K\260X\276M\204\235\276~\251\317\276\363\216\263>\013{z\276P\215\207>t$\027?Lpj<\037\365W<\334K\332>\215\227\316>e\252\340\2753\026->\233\376\354\275\331w\225>\331\224\253>~\251\317\276\342\257)\276\362\230\001?#\370_\276r\212\006?\244\245R\276\267z.\277}\320\023>\372\362\222\276\030Z\035\275\205\261\305=\362^U>U\366}\276\213O\261\276\340\203W=R\n\032>\341\013\243\277\224\336W\2763Py\276\177\242\222=t\352\312>\321zx\275\362\014\332\275\257\316\341>y]\237\276\355\330h\276\321\313(>\301\342\360\275\022E\022<\271p\000\277!\005\217=\033\236^>du\003\277\305U\025\277\373\226\211\276\246\nf>\214g\200>\267zn>$\264e\276\030!|>\271\210\357\275\240\375H\276^\272\211>\034_[\276\246\320\031\276\213\375%\276fk\335\276\037\2777>\225\237,\277K\002\004\277\021\036\r>j\274\334\277\347\3064\276M\241\003?I\021\211>\332 \323\276!\260\242\276F\010\337>\261\301\242\275v\246\320=\237\260\004>vl\204>\247\006Z\275W\262C>\372D\236>W&<>\336Y\253>\347\030\020\276D\027T\276\367\2231\275\302\372\017\277\327l\245\275\013\230\000\276Ox\t\275\025\255\274=\320+^\275\313\276+\276\365\363F>\023\233\217\276CV\367\275>\320j\276_\354=\275V\237\233>Sy[\276\242\234(>\277+\222>\361c$\27728J\276\327\243\300>\236\322!\276\346?\024?Rd-\274\177\244\310\276\323\336\220\276G\254%\276\026\373K\276\355\r\216>\226x >\002\016!>n\300G>\377\004\247\276O#\315>\021\252\324=\t3\355\275?\251V>\214\333\270\276M\370\345\275<\206\207\275\213S\255<\013F\365>ga\357>K\004*\275 )B\276\\\255S\275\267\270\306;-\225\027>\241\333\273>\216\001\211\276s\205\367>\337\207\303\275\005\372\004\276\227\2130\277\351C\207\276\307\272\370\276!\315\330\276\320\263\001?&pK>!\310!\276\371\017)>\265T\016\277\225\237\304\276}\005\251>a\377u\275\204\272\210=\026\336\205>\363\2163>\013{\312\276\316\031\021>Y\213\317=5\021\021\274\'f\215\276\207\277\346=\331\260&=\347\030p\276YQ\203\276U\331\367\276\301\342\260\276%]\003?\r7 \276\351\232\351>\341E\277>\024?\006?o*\342\276d\036\251\2764h\010>\370\215\017>\356\230:\274N\267\354:\253\004\213\276\3127\213\276s\327\302>r\371O\276\007%L>\334c\331\276\261\026\237>\"\246\004\276z\245\024\277\301s\357\275\312\026I=%u\n\277C\305x\276\376\013\304\275Zd[>\214f\205\275\001\366\241\276D\336\262\275\023\017\270\276?:\265\276\376\3552=.\255&?U\366]>[\261\007\277\306\304\326>ND\177=\324+\005>M\020\365\275M\326\350=!\316C<6\352!\275\261\304\003>m\342D\276\202\305\001>\325\317\373>\371\204\354<\243\006\003?*\251\243\276\210\037\255;\"\032}><\024E\276o\r\234\276\270\036%?\237v@\277\316S\035\276\235h\027\276)>>=\344I\302>\n\2001>\262K\324>\334\272\033>\257%\204\276\313J\023>\345\266\375<\227\312{>\222\\~\276=\327\267\275\360\212\000>0\201{>\360\332%\274\211$z\276(D\240\276\261\277,@\211z\001\275&R\232=\375\372\241=\244\344\025\276\326\034@\276\"\340\020\276\245N \276\272k\241?\255/R\276\351F\030\275\317\330\227\274\300\260|<\305;@<\201!+\276\256\022\314\275\372\263\337=\177\331\375\275\017|\014<\007\323\300>\266\276\210\276\311q\267\276\302\206\347=\257\355\255=M\021`\275\313\202\t\275J\230)\276\303\327W<\241\367\246\275]\341\035\276\004\255\220\276<\210]\276)v\264=\313\276+>Re\230\275\303\201\320=\362\352<>:\257\221\276\024\355J\276\212\253\232\276\016M\031=\244\245\222\275,\324\332=>\226^\276T\341\257=\214\370\016>\321\"\033>\356^\356<`\005x<\347p\215=\345\271~\275\277\327\220\275 Fh\276\220N\335\2757\250\275\275\277`7\276\223\215\247\275\231\323E\276\305\217q>\006L\220>b`\302;O\257\244>\177\300\243=\207\334\234>\225eH\276y\006->\204\236\215>\021S\202>\303\365\350=\005\027K\276\3024\354>0\236\001>\326\3423>\013)\277\275\025\255\\\275\365\241K>\241g\303\276\322\373\326>\254\250\021\277\234\341\206>\214\203\013=0\330M\276z\030\332<\365\275\246\275\2402\216>\233\217\013>\306\277O>\211\324\224\275\227\305\204\276\277`\027\276\024\320\004\275\346\220\324\274D\211\266\275MJ\221\276aT\322\275\262F]>\261\341\221\277F\353\010\276\210\205z\276\023\324\220\275\356\262\277\275u\217\354\274\002\331\333\276[\231\320>\351\324\025\276ih\250\273_{\226\276:\314W\276\315!\311\275\260Ub\276lC\005>\357\035\265<\306\324\';\373\313.>%#\207\275\253\224\236=/Q\035>*\304#\275i\035\305\276Zd{>Dk\245=&\217\247\274{\370\262\275+\3667\276X\032\230=\374\251\201>\327\211\313\275\247Y\240\274\362`\313\275\300\316\255\275\260u)=\374\030\003\300\023I\324>\000\000\320>\0214\306=\353\034C>\370\210X\276\353s5\276\"\000\270=Dn&\276\233\036\224=\005\032\214\275\240\211\240>>\263\004>\033\016\313<\370QM=\235F\332\275\022\302C\276\371\024\000\276\221D\357\275\311\216\235\276y\224\212\275z\245,\276T\254Z=\321\"\333\275C\342\216\276*\250h=\343\374m>\203j\203<B\317\006>s\202\266\274{\333\314\274~t*\276\204.a<-\tP\275\200+\331\275\246\267\177\2754\021V\276\340\276N\276\274\313\005\275*o\207>\267\270\006=0\r\223\276jM\203\276\356\261t\276\'J\302\275j\030\376\275#\276s\276\252+\257\276`Y)>\230\372\251>\361\327d>\224/(=\256\017\313\275N\227E>I\252\245;|e\336<\340\355\346\273\370\252\325\2763\342\302=\034\266\215>\313\242\260\275\2721\375=\274y\n\276j\002\373\273\030>\002>\301\312A>\356\224\256\275\343\337\307=W\227\323<>x\215\275]\212K>l[\244\276:\004\216<\324`\352\276\212v\245>\344\3676>C\312\237>\335A\014\276\200H\037\276\026\030\362=\236%\210=\235\205\215>\266Jp=\372\322\233=x\321\327=.\305\225>->\325\276\020>\224=Q\335\274\275\007%\214\276\275\035\341\275vT\205\276\246\n\206>cb\363=\17700>\343\337\207\276\254\2202>R\270\236\276\'Nn\276\350\022\016<\025\003d=/\335\004>W!%\276\3377\006?\317,\211>$\326b\276{\240\225\2760\236!\276\244S\027>\030\225\264>\211`\034\275P\217H\273W\317\271\276.\312L\276O\221\203\275;\342\260=g\355V>\321WP>B\210\032\274\237\252\202=HN\206=g,\252>\224\373]\276\031\034\305=6\223\357=Ll\036>\376\343\316\273\340\331\276=vT\325>\306\277\337>\224\301\021>\177\366C\276\311\260J\276\353s\305\276\370\031w\276A\016\212>@\371{=f\301D\274\335[\221\275\250R\003?\343S\240>\226\310\252;\272\203\330\275OT\333;\303\201\020\275\313H\235\275\343p\346=\214\020^\276\357 \226>UQ\234\275\005\027k\276\322:\n>\243\332q9\3441#\276\267b_>\310\010\310\275d$\233=\223\343n\276\301\250\344=\023\356\265=u\037\020\277%>\367<\225HB>\017\356\276\276\270\314\t\276\266-\252>\250\305\300=\223\030\014\277\345\362\337>u\223\200?\321\256b\276\372\n\242\276\331_\026\276\005\027k\276;6B=t#\214\275\014\\\236\274\274\2268@M2r=\206\0330>T\251\031>F|\007\277\202\347\376\276\320&\247=\367\005t\275\365\020\275>\316\215i\276\370\213\331\274\"l\020?W\263\016\275!\315\250\276E\201N\277\374\030\363>\265\375\373>\\8\000\277!<:>\27609\276_\n\017\275\206r\342\276d\223|=0\201\213>\333\371\236>t\265U>\020#\304\276\315\351\022\276m\377\002?`\260\333\275\007%\214\276\335\014\367\275\323jH>KZ1\275\261\247\r\277]\371\214\276\240\211p>D\372\025\277\177\207\002\276\377\262{\276A\361\343\275B\t\203\276aO;\276\265\025#?\326\250\'>\034n\321;\025\214\232>r\341\030??R\304\276\252+\337\275\013\230\220>\310\322\227>8J\336\276\030`\237\2762\252\214\2747\215m\275-x\t\277\207\304}>N(\264\276\322\035\244>2\254\242\276\'f]\276\353Vw?\020\006~>\345a\341\275_\014\035?\2759\034\275\231\201\232\276\245\024\364>\276jE\277G \016?z\031M?\323M\n\277W!\005\277\247\004D<c\354\304\275&6/?p|\235>\022\203@\276\225e\250>U\014\241;\270\351\037\277\350\2071>+\207\306\276\354h\234\275\221\323\227=\301\342\200>N\177\206>\032Q\252\277\212\223;>o\236\022?\243\001\254>[\353\313>\204\204\250\274\355d\220>\334\rb=\302\243->\024\007\260\275\225b\307\275\005\027\253>+\207\006?\314(\346\276\0220\272\274\206U$?\014\036\206=\222\263p>\000o\241\276J\007\353\276/i4?\333P\201>k`C?R\233\310>\374\373\214\274\037e\244\275\334\272\333=h\313\271\274d@V\276\267\264\002\277\035\001\274\275z\374\216\276\322:j>\017\265\215=\327Q\r\277\333\334(\277A\274\216\276al)?\212\315\207\276\177k\247<\226!\316\275\341\013S=8\331\306\275\032\250\004\277R\'\220\276b\020\370>\231\201\252\276\305\3762\276\204J\274=^\235\323>\374\000\244>\222\"2\276\213\246\243>\274$\256=\022kQ\276\347\214(>V}n=\202\034\024\276\236A\303\276\273\017@\276\377\225\225<U4\226\275\214\271K>\031Vq\276\334\365\262\275\254\305\227\276 \357\205>\232\322:\275(aF\277\205wY\276\267\322\313=\344,\274\276\273|\313=\220\240\310\276o\r\024?\005O!\275\226x\200\276\320\362<>\020u\037>{\301\'=\266\020\344=|\270\304\276\236A\223\276\216\351\331>\261\341\251\276\2402^\27682?\277\327\372\222>uY\274>)\313\200\276\307*\305\275\323\207\356\275\334\364\367>\027\361}>\255i6?\220\203\302>\343p\026\277\237\310\263\275\367\006?\276\225`\001\277h\314\204\275\301\377\026\276v\211\212\275\317\240\261\276\025R~>\376\016e\276\375\366\225\277\333\367\250\275\350\207\001?\271\211\332<i\306\002\277\310\352&\277*\032\213\275\255\372\204\277W&\034\276\271S\032>3\371\006>9\177\023\276\225\202\356>\302\022\317\275\231*X\275\355*\224>\222\314\212=\274\256\177\276\326\220\230>F_A\276\227\377\220>\326\220\370=\366#\205\275o*\262\276\3063H>\034_\373<\332\003\235\276\376\016\225\276L\303\300\276\341]\016?F\323\351\276\316\2102>9\234\271\276\210\205\332\275\260U:\277\371I\225>\254\342\315\276\201\317\027\277\347\214\010?\355\323\301>\344\240\244>\377x\357\275\001\207\320\275p%\233>|a\202\277\010rp>\201&\222>0\236A\276\352\312\'\276{1l?\255\247\026=\\\311n\2765C\312\275R~\242\276\006\022\214\277\332\311\260\276\300\262\n\277\000\000\270?n\213\242\276\017b\347\276yX\210\276:z\334>\262\235o\276\374o\225> \r\247\275?:\025\276hy\336\275\307e\334<\376+\313\276\332\033\\>\344\203\036\276\302\206\007>^\242\332>\356\261\024\276\232\010#\277\260\254\204\276\320c\224\275m9\327=U\301\230\277\214\271+\277P\225\245;\317\206<\275\237\315\222?\340\204b>\026j-\276^\235\343=\007\353\277=\246\355\337\275\367;\024\276\371,\317\275\253\262\317>\246\n\306\274\007|\276\276|a2\276\200\361\274\276\276\331\266\276\242E\006\277\373?g\276n4\370?\211\3213\275\340\333L?\345\no>M22\277PS+\2767\216X\276E\365V\275tF\\?\225e\310>\377>#\2759\321\236\276 \230c>\005\027k>\325xI>\252\267\006\276\033\r`\276/\335\304\276\352\262\330\275\037.\211\276\230n\202>\007%\014\276_\014e\276\272\240\316>\266\271\001?\200H\217\276:\222k>\333L\305=\222t\215>;S\350>\007\360\226>W[\301\276TR\367>M\363\376>?\375\247\275\344\203\036>(\362\344=\'\204\216<\325\312\344\2762\311H>z\031\345>\r\375\303\276+\373N\276\r5\312\275\336\253\266>\342\222\013?Z\022\030\277=a\311\275z\245\254\276+\331\021\276\034\006\223\275\014\036\306=\351\267\237\276\034\010\211\276\005\305\007?\000\221>\276\210.\010\276\260\032\360;@\205\303\275\344\203\276\276;\215T\276\010wG\276\270\257\003?`\037\315>\331=9>\026u\234;\321\005\365\275\316m\302\274\221a\205>^\202\263\275\032\213\006>\212\037\323\276\007\231\264>R\017\221\276T\251\251\276\210\203\204\275\023\233\257\275\013\322\314>\177\023\252>\277e\216>\035U-\276\027\361\335\275\016\2760\276m\034\021>t#\254\275\367t\265=d;\237\276\257\316\241>FB{>\276\237:\276\023\325\333\2759\356\364\276\270\001\337>zp\247\276\266\363\215\276jM\203\276}\256\026\276/\2062>\364l\326=>\\r\275=~o\275>y\370>\316\031\361\2765\265\274>{\240\245\276\177\275\002\275\204d\001>j\025\275\275g\n\035\275Z*\317>\246\270\002?\344I\322=.\305M?\241g\203>6\0377\276\035:\235\275\247\352\276\275&6\037\276\335\007\340\2759G\235<\340\204\302\274\327\027I>+L\337<Z)\004\275J{C\276?R\204\276e\344\354=|,\375\275UM\320=\'N\276\276\320~\344=\023\233W\277O\351\010\277\241\241\037?\251\373\200\2767\371\322;b\020\010\277\030\260\304\275\314\013\360\275\203Lr>\275\343\364\276}\"\017>/k\242\275it\'\276\270;\013\276\027a\252\275\367\307\333\276\252`4\277\265\372j\274&\344\243\276{fI>\\\254h\276\262W+\272\376H\321>W\004?\276\020]\320\276\242E6>>\"&\274\306i\250=\224\336\'?\231d\034\277\330\266\010>.s\252>\024\320\014\2773P\311>T\000$\2775D\225\275K\345\235\2763\371&\276\260\376\237\276\'\245 \276\r\375[?\202\220\274\276\264\314\242\275\244\252Q\277\375\274I\277\3578\305\276-`B\275{\244\001\275\031V\021?\236\265\023?\025R>>\346\"\376=Vc\251\275\027\324\247>\\O>;\301\377\246\276\266-\010\272E/#>&\351\022\272\333\277r\276\265\224\342;\315;\276\276Ih\353>\\w\223\276\333\303\036=\037\272\020?\272\370[\274p\2669\276_$t>\363q\335>CqG\274\206U\374\275\305U\345\275e\344\214\276^\364\365>Ym~=\031\215\374<\205\231\226\276\014\310\236\276\233 \n?6v\271\276\263\357\252>\371\331H<\224j?\277\'\024\342=\3268\233\274\317\020N\275\200H\377>\212\223\333\276\346Y\t\275\327\3006>\270u7\276\277\016|>28\252\276\371\367\031>\006*c\276\006\r\275>*\344\312\275\r\250\267<A}K\276\002+\327\276\271\305|<\302\275\262<\033*\366>A\202\032?\'\024\202\276\332\341o>L7\t\276\224\331\220\276&\307\235>\022\203\000>\256\360N\276\201\225\203>\2067\253=\303\323\273>\367\006\037=D\300\361>R,w>\016\204\004\276\221B\271=\220\367\002?D\027\204\276\272\367\000\277q=\"?\362\315\026\276\267*I=\377>\003?o\202\357\274\\\035\000\275)\320\227\276\343\210\025?\010UJ\276\3377~>\021\031\326=\226x@\276#\370\027\277Dn\306\276Z\330\013?$\177P\276x\264\321\276fk\235\276_$\344>T8\242=\300<d\275IK\345\275\263\315\215>\001\207\320={UB;c\177\021\277\270#\274>\272\332\212\277\274\263\366\2752w->\337\370z>\001\301\254\276\002\331\373\276!\007\005\276O\006\027\277it\227>\005n\035?8\363\253\276F\261\014\277\350j+?&6\237>\320\270\030\277\213\032L\2765F\373\276\327\335|>\373\226\031>\201CH\277\332r\356=\245\275i?P\374\030?n\337\303=\205|\260=r\304\312\276\366\177\276\276\200\324V\277\303\330B>\016\020\024?\304w\362><\275\n\277|\270d\275b\025\257\276\363q\355\276\324H\033\277\336<\325<6\352\341=\226C\213?z\374\236>S\350\214>\234kX\275\230n\262\276\305=\346>,\016\007>J)\010>w\366\265\275\227\213\230\276\202\213U=\023\325\213\276\235h\177\277O@\213?\"\246\014?%X$\277T\251\331=A\361\003\276M\025\204\277\265\025\333>\314\177\310\276g\233\003?[B\236>\204\360\010\276\206\311\264\276\334K\232>\251\366\021?@0\037?\203\025\'<z\344\017\275\205\010\020?\351\361\003?n\024\231=\030`\337\275\213\374z<-x\321=\235\200\246\275nm\341<\343\374\215\276\375\301H\277\033\330\312\276<\210\375\276W`\330\276\036m\034?\203Q\311\276\244p]>\346\256\225\276\273\3253\2760\360\334>\277\236\217\275F\261<\276\320\270\240\276EG:?\335$\206>\030!\334\276\242\013\252\276N\321\241\276\327\206\002?\003}\022?e\245\251>1\3236\276\002\326\252\275\346W\263\276g\'S\277m\377\372\276\200\324\006\276)\\\017\276\376eG?\036\376J\277Q\332\353\276\014Y\025?$\013X>\241J\005?\342\036\013\276:z\254\276\244\337\206?\300\316\215\275;p\356\277A\274\256\276F\353H>\322\373\016\277\n.\246>\000\251m\276\233\003\304>\232\224\002\277w\204\263>\323j(>\007\266\272\276R\232\r\275q\033\005?\334h\200?i\306\002?\332\311\340=%]c?5\014\027?\374\214K>\340\276\356>\020X\311>\255\335\246>\021x\273\273\375\202\315>y\001\366\275\340\234\021?MK\214\275Gw8?\3706E\277\001M\214\277\317\240\241\275\005\305\237\276\361)\360>\355*\224>\360\333\220<\234\247z?:\006\304>\236\007\247\276\355\201\266\276\226C\253>w\333%\276\317\203\033?\236$=\277\256\273y\275\323j(\276\031\342\000\277\336\260->\355\330\310>\244\215\343\275\365\241\373>-\t\260>\307\021+\276l\317L>g\362\335>I\272\206>\347\214\210\277\t\033\336\276s\235\006\277\362\2600>\014\007B>Z\020\212\275O\006\227\276\227\377\220\276<\275\002?\306\205\323\276\363\254$\274-&\226=\243\222\032>\273\360\203\274\304\010A>Y\372\320\275\035w\312\276j2\303=\213O\031\277\014Ye?\274\313E\276%\313I\275b\276\314\276\277\016\254>m\235\311:\321<\000\275@\331\324=\246\320\001?\2755\360\275\207\334\334>\342;\241>\200\202+>?\214\200\276\004\034*\2776\002\241>\002\274\265\276\210\205\212?\232\231\271>82o>\237\312i=2U\360\276\243\257\320\276CV\247>Z\365A?\200\324\266\276\221\355|\276\031\004\026?33\243>\273\233\307>\025\306\326\275:\036\363\276CV\227>\007\323\260\276\250\035>>\255\206\204>\340\241(>\241\020\031\277\3122d\276_\014\265>7l[>\267z\356\276\361.\247\276M\370\345=\252\016\371\276^\327\017?\321\2263\277\345\'U\274F%m\277\350Np=\315Z\n=Tom?\273a\313>\374\030\343>\017\356V\277\30244\277\352!\232\276g\n}>\"9\231\275;\031\354>\363\037\"\277`\352\007?\2451\232\275\301\342\240>G\217\027?\317\332=?d\314\275>Zd\213\276\356B\303\276\300\317\210\276\343\031<\277\216\006p\274\242(\030?\242\234\350=\n\235\347>\204\236\r?\245\240\373\276\r7`\276\246\320\211\276\340\333<\277\347\030\320\276\027\274h\276\214\020\336\275\246\355\037\276\372\324\261\275+\373\256>\266\370\034?\361K}>*V\255\275\020\006\036>\303\273\334\275\305=\226>G &\277\1770\200>8\241\020\276R\'`>\260rH>\211A\340\275\026M\347=)yE?N\'\031\275+0,\277\333P\361\276\370\375\233\274\264Y\345\276\210\327\025?\357\001z\2759b=\277\330d=?{14\276\255\374\262<I\205\021>]\304\267\276\270#\234>pB!>|\270\344\275dW\332\274\307h5\2772\254\322\276\342\001%>qUy\2777\303-\276\034\316\234>\337\025\261\276\014\345$\27728\032\277u\345\223\276\374\250\006\275K\003\237\275\200\234\260<?\306\264?\236@\330<C\377\304\276l\354\242>K!\220=\323M\262\276\361\272\276\276\005n\215>\217S\224?\222\223\211<\315\314\314>\342\351\225<\177j\214\2767T\274>U\336N>,\253\237;\034\231/\277\3269\266>t{\t>\345\320\"\276dC\222:\025t[\276`\002\207>\373?\207>\225\202\016\276A\002\220\273\032\367&=bJ\364>\254\255X>\242(\320=\2716\344\276E\236\244>\227\312\253\276\205\316K>\002\274e>\223:\201\276\203\206\336>\375\250\341\273\2721\375\275\255/\262\276\243\351L\276\311uS=\267E\351>2=\221\276\211\357\224\276V}\276\276\370\031\227<\2029\352>\203L\342\276z\307I>\347o\"> )\002\277\313\276\273\276zS\321\276\234\026\024\277\331\010\204>\n\200q\276j\244\305\276\351}\343\275\205|\200>UPQ\275\204\360\330>\243\314\226>\036\304\216>\274\313e>+\366\347>\264\307K\2759\326%>Y4\255\276i\000\357\275.\3423?\343p\306\276\274t\023\276\0010~\276$\326\302\276\371I\035\277\000\221\276\276\215\177\337>/\250\317\276S\350\254>{\210\206>E\360\037\276\362\260\200>6\352\301\276?\035\257>\010\315\216=\037.\031\276E,b=u\002\332\275\201\225\243>\354/;>\337ls\276\221\355\274\275\267(\223>D\300A\276iR*>\325\t\270\277<f\000>\225\277\326\273\365\020\025\277\200\271\266=jj9\276\247\"\325=\225\177\255=\323j\230\276\361.\267\2760\330M\276\236$]\276\315\001\202>\021\374\257\276\345D\253\276^\235\203>\352\225\022\277\261\334\322>\3122\204\276H\371\311>\006L\200>\254\034\232>K\260\010?t\265u>\022\367X>`X\236=\222\006\267=h\005\226\276TW\376=\201>\021>Q\367\261>u\223x>^\327\337>\377\317\341\276\300x&>KvD\277\210\272\317=X\343l=x\013\344>Q\275\365>\370k2>\202V\340\276\031\004\346>\253\354\373=\210\205Z>/\244\243=\247\347\335\273$\264e\276\235\326\215\275\370\337\n\276d\351c>J^=>T5a>\0216\374=\221&\236=)\306\036\274\226\354\030\276\262\270\237=B\317\346\274\205\034%\273\307\327\336\275\314]\333\276(\017+>\324CT>V\231\311=\327\300\266\276\354L\341=\322\373\226>\255\335\026\277\351\016\002\276xb\206\276>\313\023>)\355m\276\240\032\357\275m\255\317\276 \230C\276\271\210O>b\363\361\275-\317\263>\010\256r\274L\303\360\276\227\312;\276\362$\211\276\250\036\251\275\"\032\335=\217\374!\276\237q\001\276^\021\214\276\357\311\243>\360\277u>[\224\331\275\243#Y>\247\005\007?.v\273\275L\211d>\225\361/\276kH\354\276w\276_\276\371N\334>\230n2\276-x\241\276\366\227\235\2760*\021?\230\025\312==\n\247>@\211O=\374\030\223\2764/\207= )\202\2762=\241>\224\0235\277O;\004\277\205%\216>\251\301\324\276c(\267>\305\0339>c\234\377=\016\025\343\275\272k)>\3602C=\273E =d\257\207>\277\267\251>\023\177T=\305\311\335\276ge;=iWA>y$^=\203n/>F|\347=\242\227\021>\333\304\211\276\202o\232\274,e\211\276\205w\271=\306\205C>\335$\206\2748J>\276X\255\014>\020\257\233\276\017\271\021\277\3642\022?<f@\276\272\205.\274\300\tE\276\330(k\275\242\321\275>5$\016\276\373\221\">\010\311\242>\3711N\277q\254k\276g\017t>\310A\t>\310\322\267\276i\214\206>\326V\354=\323M\"\276#\275(<QNt\276\334Q\367:+5\033\276A\267\227>\016\020\214>\274[\271=Y\337\200=]m\035?VJ\217\275s\272l\276\233\346\355\276HRR<jjY\275j\301\013\276R\3553\276vp\260<\255i\256>S\\\205>\025S\211=Q\367\001>:\314\227>\277\361\345\276\367\307\373\275S=\031\275\000t\000\277\330\266\010\276\332\312\253\275i:\033\276AEU\274\210c}>\021\215\336>e\344\234\276\017\321\210>x|\233=\017\017\274;\347\377U=\357\3412>\352\354\344<=\201\220=\376d\314\275\230L\235?\320>\373\273\317\203\253>\260\217\356\2762U0\276M\363\326?x\013\034\2778\205U=\364\246\002\276\310\014\204\276u\253\247=b-\256\276lC\365>\035Z\254?\214J\312\276\250x\267\273\260\254T>\205\'t\274\333m_\277)\313p\276\031\305r={1\204\276+\030\345>I\235 >C\377\324>\314)\201\275\035UM>\216#\026\276\237Y\342>5{\000>~\247\251=\023\2705\276\330\362\312\275\201\313\203=II\017<\007y\275=)\226{>:z\374>\312\300\301\275\364\246\342\276\374\211\312\274B\262\240>W>\213>{\024\236\276\354i\207>\324H+>2\311\250=\356|\037>\023\'\207>1`\251\275\371\332\013\277\336<\325\275\231+\003=>\"\306\275\271\031\236>\007\010&\276\302\022O>K<\340\276\301\034=\275Ed8>\210\021\362>\005n\255\276\321t&?\257%$\275\376\324\030\276\304\316\324\276\035\224@\277\212\260\341=\254\255H\277\351\323\312\275\024{\250=8\370\"\2763\304\321\276\250\251\345=\325&\016\276\356_\331\275-\354\231\276\270\351\217>U\244\">DQ\200\275,H\303\276\356|\037\276\346?\304\277\243#\001@8\020\322\275\027\202\334\276\353\250\232>m\250\030\277\222\224\224=Dnf\276[_\344=4\0216>\332\217\024=|\200n<pa\035\275=\325A\276\006L\340\276\335^\202>c\322_\274\225\323^=\351\361\033>\201\354=\277\272\202-\2755^\352\276\367\036\216>P\344\271\276\205%~\276\361K}>\253A\030=\027\325\242\274\375\202\335\275n4\000\276\313\370\367>\310D\252=\300\317\250>0/\000>&\246\213=\323M\032?\"\211&?C\342\236\274\037.Y?\032\207\372<=\017\236>\254V\206>\371\370\004\275\301\220\025>(,\361=.\3766=a25\276\\\217\302\275c\264\216\274*\250h=\333\212\035\276]\277`\276\301\220\025\2762w\315>\227s\021?5\007 \277{N\372>@\023\001\276\213\340?\276@O\303=\367\217\245=m\250\250\276\035w\232\276\340M\267\274s\200\340=y;\">?\306\254\276\203i\210\276AHv>\315\222\010?\375\367 =\032\372\267\276\353\377\334=\206r\202>8\330\233<T\2519\276\323\336\000>\005\244\235=\226\317r>\367\314\322\275%\222\330\276\2343\342\276\331=\211>\221\270\327\276\363\002\314\276\311\310\331=\314E,\277\035Z\344>\246\233\204\276\246\320\231\276U0\022\277tF\304>\337\211\031>0\273G>\261\277\214>\'\302\006\275\246\'\314>\010\217\026\277\325\227e=q\254\013\276\034\316\374>y\036\234>\025\2510>\317v\026<VH\211\276?\306\374\276w\333\035?d\256\254\275\206U\014\277l[T>0\273\'>\340J\226>N\264\233>\021\215.\276\273\n\331\276\265\246I\277\267(\363=\263#\325;}yA\276\312\375n\276\344N\t\276\013c+\276\372\233\020>\030[\000?Yi\262=a2\025=\031\004\226=\211A\220>+\023\256>F&`\274k\363\237\275,\306\257\273\361\330\257=:\006\304\276\031\0046\276`\000\341<\274\221\231> {\215\276\237\345\331\276YQC\276\306\304\346=\260\346\200>s\021\037>\361F\006\276\3335!=e6h\276\201[\017\277x\321\247\276Y\206\230\276\352\225\022>)\010\375\271\306\242\271\276]\277\200\276\263)7\276\363\253\251>\344\274\237\275k\016P>\246\017=>\222\"2\276H\341\022?5A\034\277`:-<\327\372\">\361\327\264\276KY\346>\231\200\337\274\231\r\362\275|\362\300>l%\364<\337l{\277E\365\266>\270#\\=0\r\243>}?5>\253\tb>\005\2432>?:\205>\335\3153>\3045\210\273(IW>Y\213\377\276\005\372\004\277y\001\026>q\217\305>e\252\210\277\2613E\276-\t\320\275\374\247\273\275\205B$>\375\331\017\276\302\027\006\276_\264\307=\211)\021?\262cc\276%#g>\341{\377\274\'\210z>rQm\275\0049H>\314zQ>\273a[\276\236\\\323\274\334\235\305\276\000\213\374<\222!\007\275\253\317\035\277H\341\032\276\272\300e\274\313gI\2776v\001\277\331\351G=4hH\276\226\317\322>x\317\201<7\340S\276zqb\275\350\274\306>=\323\213=\"T)\275\236\230U\276g\n\315\276@\207\t?\n\021\360\275\"\216\005@F\010\027\277\253\262\317>\267\010\254\275\351&\021\276VHY>C\004|\276\360\242o\276\0324\024>\277+B>\305\033\251>\016\025\223\276Nz\017?\213\303\331=\336\216\320\276\215\227\376>A\237\000?\357 \366>\314\r\006=}?\365=U\023D>,\016\307>o\360E>\242\226\206\275\202\346s=\310\n\376<\010w\027?0\200\360<z\034\306=A\270\202=>\350Y\275M\241\223>\373\221\302>\323\366\377>:\222+>E\236\364>\341@\000\277&\0319\276`<\303\2762\217<\276\227\034\367=q=\352>o\022\343>\232x\207<\375\274\251>;\307\010?\2201\327\2760\330m\276\005\027+>\026\030\222>}\313\234\274\375\244\022\277\344\021\274=iR\n\2771B8\2766\037\247>~5\247\276\376`\340=\206\346\212\276:\222\013\276:\036s\276\242\233=\275%z\351>\364O\360= ^\247>\200\361\024\277\363vD>\357\214\266=\3060\253\271\260r\310\276\375-\001\274\344Ir\276\355\r\256\276\301\305\n\276d\314\375\276\204\201g\274j\274\034?\353U\344<\360\212\240>\331_\326>\355\r>>1%\322=\250R3\276o/\211>\212\345V\276\025\344\247\275R\357\251\275*W\250\276\371I\325\276\225H\222\276\315\001\"?\204\177\261\275\2510\246>28J\276\330\r\213\276\006\236\333\276\'\240\231\277\215E3>\205\010\250>\312\032U>\017\321h>|\233\316>\246\233\014?`[?=\363\255\217=\246\233$\276B\351\213\275\332\372\016\2731\353\245\275\272\275\344>y\006m\276\206Z\263>\306\212Z>\212\216<?zP\020=L\375\314\2764.\034>\177\274\027\276\271\031\356\276\361\021\301\2766\352\201\275\326\213\241\276f\332\016?H\303\251\275\206\311\024\277\246\235\272\275\336u6=\321\226\363=\316p#\276\010\311\002\276\221\233a>0*\021\277\242\2279\277\033\r\220\276\221\362\023\276>yX\276~o\203>\200\237\221\276\230\027@?\242z+>du\353\275\313\271\224\276\234\026\004\277\227\220\317\275\374\0303\276\003[\305\276\177\3364\276\254\377\323\276\235c\200>zr\315\274\231d\004>n\335\r\276|a\n\277\274?\016\277\240lJ<wg-\277\347o\322>\227\377\300>\244\307\337>u\260\216>\211\322>\276\323\237]>\2407\025\276\216;\005>?W\033\276_)k>\243\254\337<k\223\324\273k\361)>\023\362\201>\241-\247\276\017\271\031>=~\357>U\207\234>\330GO\277[\3234\277\037\021\323>\002\274\225\276\205\231\346\276\216\036\037>\320b\251\275\364\211\\\276k\202\010>\256\323(\276\205w\371\275\314z\221\276\031sW\277kH\374\276\233\3452=\340\276\016\276\371\334\311\275L\303H?\3130.=a\246\355<\245\203\225>R\017\301>:\314\367>$\266\233\275\017Ea\276\227\342\n\276F\224\026\276%\351\372\276\322U\272\273\3745\271>\236\322!>\306P\036?AJ\314\275W\262\343\275$`4\275a\033\261=\324Hk>\223\306\330\276X\033\343\274C\312\237\276S\221J\276\020z\266\276}\320\303\276\215\324\273\275q\033\255\276\343\374\255\276\017\227\354\276C\347\365>\205\316\313>\315\257\226\276d#\320\275wg\355\275\341(\031\277\222\"\262\276\305\217\021>\355G\212\274}]F\275\365\204\305>\356\315\217\275\240T\033\2769\013\373\275~\033\242=^hV\277\317V\024<\236$]\275m\034\261\275)\320\247>\3647\t\277o\201D>z9l\273^\366k=C\004\214\276Nz\257>\277}\255\276\323\301\022?9\326\005>t$W\276\2176\236>\023\017\310>\t\212\037\276\002\274\325>\350\301%?\253x#\277 FH\276\267\321\000\276\336\345\242<\3441c>\207P\005?\321\226\363\275\316\376\000\275\n\205\010>u<\016\277\021S\222>\177\274w>2 \033>{\210\006>E\360g\277\216\006X\277\226v\352<l&?\276RI\035>\221\355\374\275\t\341\261>\027H\320\275LP\303= \230c\276\014Y%?\264\253(\277|,\035\276\345\355\010\277\305\003\032\277\030!\\\276\236{\317=Y\206\030\276\342\222\013\277\372\362\222>\244\210,>\222?\030?:#2?\016\241j\276\221\233\001>\202V\200>\351\324\225>\177<\252:\300\024T\273\247\224\327<\350\377\260:\367\006\037?{\203\237\276\035\254\377=\331\353\035>\217\374!>\333\334x>d:4\275V}2@\350\2378\277kb\201\274\337\340k>\312\211\226>+\331q=\241\241\177>\346\221_>K\253\201\275F\226\014\275\\Z\235\276\266-\352\276\025:O\276\014\257\204=\n\277\344>\021\031\026\277V}\216\276\231\022i\276\315<\231\275\305U\035?\207\247\007?t\014\010\276$\177\020\276C\255!?@\366\372\276i\0355\276\340-p>\303d\312\276Ve\217\2760G\237>\270\257\323>K\257M\274\222z\017=\355,\372\274\330i\177;\205\224\377\276\275Qk\275\234\026\314\276g\233\033>(FV\275h\353\340<\007_\370>qUy>\216;\245\276\300\225\314>\225\324)\276\251\336Z\276\241J\215>\301\312)?W&<>\323\331\t>S\221\n>\004\377\333=C\220\243>d\260\302=\332q\303<tF\324\275y\351\266>}\263\335>T\247\243=\3647\341=\206\254\016>\245\367\255>\254:\253\275\210\272o>\004<\351\274\215\227\316\276\363\253\231>\377\004\327=c\321T>\013A.\276\310\007\025?\023\362\261\276\231\022)\2767\032@>d;\217\276\343\216w=A\361\303>\366\310\213;\236\007\227=\201&:?\377>\343=\314@\225>\252\356\021\275(D\320>\200\361\374\276\"\216\025\276\314|\007\275,e\351\277\331\355\263\274\242},<j\334\273\275\270\217\334\274S\352R\275\230i\313\276\274\010\263\275\324`\332\276\241\333k\276\217n\244=\277CQ\276\302\027\206>\330d\335\276\214\326Q>h\313\371\276\005Q7=l[t\276\031\037\246=\n\205\250\276\'f\235\276/Q\035?\366\317S=^c\027?q\3111\276\252+_>k\267]?@\366\032\276_)\353\276j0\375>m\216\363<\314\013\200\276Z\365\271<2\346\376>\240l\272>\r7p\277/i,>\r\2538=e\252@\276\225\361\337\276\202\000\031=\323\274\343=\335\007\360\276Ih+>d]\334\276\256G\021?\227\377\240>u<\326\276\366\355\204=\251M\334\275\341T5;v\375b\276iW)?P\337\322>\375j\376\276\006\273a\275\035r\263>\305\217\021>\232D=\275\026\373K\276j\331\212\276\311\311\244\275\270\036\305>\344\203^>\003DA\274(~L>u\002\372>\023D]\276BxT\276\245N\340>\001\335\227=\177\373\232>\310@^\275b\276\314\276Ll\343\272V+\323=}\\\373\276\r7\320>g\325G>O#\375\276\231\236P>y\353\374\274 \014\254>\216\001\031\276\305=\326\275V\232\224\276\020\351\247>\365\271\212\276P\374X>\014\007\n?K<\200\276\356\224\256>\273~!\277\333m\027\276\202\213\025\276\004s\324\276f\210\343\276GrY\276\202\220\274>\265k\002=\031\377>>5c!\277c\227h\276\226\317\022>\2510\366\275\324\323\307\275\307\021K\276\257Z\251>\020w\265\275L7i\276P6\345\276\274y\332>\034\316\274>\326\255>\277\245\277\227;\342X\037?\027\331\236>1\316\217>\236)\024>\241\203\256\274\303+\311=\312\372\215=\022\2107\276}\005\351<\220\275\336\275`\002G?\006\201\345\276>\355\360=\352\t\233\276\353\305\000?\300\351\275=\024\355\352\276\327\372\242\276^\327\007?$\017\004=\003\354c>\367:\211\275\337\303\225>.\004y\276,\202\317\276\017\356.\276^\200]>\006L\000>\372\263\337=~\214\211\276Yn\351\276m\220i\276\036\031\253<\235\3278\276,H\003\277\0054\261>\254s,\276\002\331K\276\305\311}<$\003\212;\2133\206\274!\310\221><\210%?\220\240\330>\273\362\371>\274\226\200>|a2>\035UM>F\266\253?\0221\305>\014\007\002>^\3645\276\221~[?w-A\276h\226\014?\277\233\256\275\216;\005>\331Z\017\277\207m\233\276\343\245{>w\204s>\2402\036\276\016f\263\275G\311\253\276\323\277\244\274\316p\023\277b\363\301\276\211^\366\276\345\362\337>\341\321\206\276;\302\351>\022\210\327\275\022N\253>\345`v=fk\375\276%\257N>\352\347M>\177\207b>Cp\334\2743\212E\276\226\225\346=\366\227\035>\376\267\022\276\352!:\276\0216\374=\031\347/\276\325 \314=\354\243s\276JDx\274\'\3026@\243#\211>\230\025\252\275i:;>\302i\001\276\252\256\r;\357V\226;\323\207\016\276\265\025[?\237\3459\2762Y\274=F~\375\274\033\r\000\2768J>>8.\343<(v\331\272I\365\235=\224\302<\274Q\275\305\276uv\242>\231\360\253\276\'k\244\276\004st\276k\237\216<\323j\250\276F\261\034\276\252\325\227=\036\300\242\274io\360=V\322\252\275-\225\227\275W`\310=\204*5>d]\214>\236\230\025>\3578\265>\306\242\251>\222y\004\276\275\251\310\276\257\224\305\276\236\014\016>\315\036(\276k(\225\275\251\0230\276\310\007=\276\035U\335>9_\314=\377!}\276,+m\276\332rn>\253>\327=\002\324t\276\314\013\240\276\347\000\001\276\252\202\321>\313\234.\276\354/;\276\020\351W\276JA\267\274\206ZS>\353o\211<\202\032~\275\263)\327=\314\231-=\324\271\"\275#i7=\014\352\033>cb\243>\344\332\320=J\014B\276\265\303\317>\r\212f=\3154\006\274HP\374\275\374\344(=\314&@\274\244\344\205\276\333\205\206>Z\273\005\277-\354\351>m\214\235=\363\253Y\276\013\3541=p%\033\276xA\304<+\023\236>\323\274\003\276\204\3309>\004\034B><Je\275\2406j\275iQ\237\275^\024\235\275\025\343\214\276\203\315\357;F%u>\271\307j\277\221\'I\276\330\266(\276\234\207S=\207\341\243=\241J\r>\225\020\254<uXa<\253\262o\276)^%\275=\357F\274t{)>\003\321\023\275\342\344~\276\364\370=\276\272\363\304\275\247\005\017>x\321\327=\221a\205\276k}\021>\220\371\300\275D4\372=\020X\031\277\027\235,=\204\rO\276!\345g>g\233;>\017~b\275\376\3217=\373y\263>\034\360\031\276\317j\201\2745\rJ=f\240\202\276OY\r\275\245,\353\277RI]>U\366\375>\266dU\275[?\375<-[+\276+0d\276\267b\237>\326\035\313=\255\030.\274\367\"\332<Xs\000>k\267=>\314\264\035>5\322R\276?t\301\276{\276&=\022L\265<(\322\235=\362\352\234\276*\306\371\275\325\354\001>\260=\203\276\264s\232\274O]Y\276r\212N\276\024z}\274o\325\265\275K\223\302>\346\\\272\276\315u\032\2767mF<G\257\206\274sK\233\276 A\261\275h\005F>\013*\212=\037\236\305\275\350\240\313\275\235\327\030\276t\322{\275\206\312\277<\237<\314\276a\214\210=\275\035a\276t$\327\275\002d\350<\177j\254\276\252+?>\374\343==\267b_>n\300g\274\330\273\217\276|\257F\273\255\335\206>(\200\242=\313\364\313\274\202\344\235\275\3334v\275n\244\314=\247\226\355=\224\366\006\275\350\237`\276_F\021\276\255i\036>B!\002\2758\370b\276\231\323\205\276|(\021\275\233\001\256<7P =\221\325\315\276\226\257K\274\327\206\332\276\240O\004>H\277]\276\tP\323\274\347p\255\274Z\201\201\276Fx\233\275)\005\275\275L`\204\273p\317\363<\203\243\004>\200\265\252=\246\233d>\027\232\020\274c\234?>\310\265A>\345\266=\275\341b\245\275\240Od\276\276M_>\376\362\211=\365\241+>\016\204\004\276\177\332\210=7l\333\276\013G\220\275\312l\320=\371\017\351\275\344jd=\257Z9\276\370p\311>\022\367\210\276\376C:\276\327\022\202\276\320\233\n\276GU\023>Z\360\302>~o3>\303*^\276\250\001\243=\251\336\332=\024\245\316\273\241\276\005\276\260\346@\276$\266;=\000:L<\274\311\357<\375\244\352>\245I\271>\272\362\2749V\237\253>\353n>>v\340<>\261\335\235=\245\024t\276O\036\246>\252\361\202>s\364x>am\254\275<1\213\276\323\336\020\277\373\255]=t%\202\275>\"f\275\311\351k=\200-\257<>y\250>\3647\221>\244\342\377\274\300\262\022\276s0\273\275H3\266=\2608\234\275\346\262Q\275\301\305\312=\335^2>\220J1\274\007\360\016\277\342\\\003=5\267\242\275\263{\022\276\245II>\320\014b=\305 \200\276\242(P\276\335\007 >\333\304)\276\252\014\343<z\215\035>\t\376\227\275~\000\322=T\035\302\276\270\314\251>\361\364*>\\r\374>\313\241\225>\024\320\334?g\n]\276\363\310\237>\337lS>\337\370B?\275\214\322>\030&\003?\032i\211>\251\244:@\305\346#>\034\013\312\275\007\353\217>S\226!>\361\274T=.\305%?\272\236\210\275\3441\223>\002\361\232>\367\303W\272S\263G\276\266\333n=\327/x\276Y\300$>a\032\266>\253\212\272\273(\362\004\276c\356\332\275\311\253S>\317\024\232\275\322\030M\276\010 \305\276\202s\266>\275\251\250\276>?\014\275Yni>\303\272q<\252}\252\276B>(>\213q\006\277\303\360\341\276N\264\273>\340\276\316\275g\017t\275+\205\240\275\"7\323>-\263\010\275\336 Z=\337\207\203=\373XA\275\347\030\320=%]\223>f\275\030\276\366\177\006?\355\232\020=\035\2248?\"\216U\276@\233\301:w\363t\276\3708\223=x\356\315\276\000\256\204>\213q\036>=\n\227\276t\357\341=\346\313\213>i\214\326\275\007|~>v\375b\276\313\271\204\276\027\234\201\275\033\324\236\275]\247\201\276\t\335%\275\245i\020\275B\317\366\276\233U\337=\257w\377=\020]\200\276\203Qi>&\246K\275\267Ey>\377\007\330\274\001\336\">E\r&\277\021\252\324=C\347\205>@M5?\356\353 \276\263{R>2rV>0\273\227\276\264\310\246>\316\210\222\276\2610\204\275v\244\372<{\210F\276\256\330\007\300\317k,>9\227\242=\372~*\276\323\274\303\276<k7>\354\372\205>\332\000\254=\003x\013>W\2649\275\'\366\320;\365J\271\276d\257w>\375\023\274\276\265l\215>\325\347\352\276R\017\021\276\004\347\334\276]\334\226>\374\2511\276\\\254\010\276J$\021>\306\304\006\277A\267\327\275\343\376\303\275\367\006_\2764\327\351>\t\3767\276TW\216>\026\244!?\027\202\234>\036\341T\276\375\366\245\276\2029\212>\033\r\300\276\014Xr=\272\367P>\326\220\010\277q83>H\3044\276\316O1=}\262\"=5\227[=\003x\003?\270#\354>\267\320\265\275\0324\244>H\026\240\276J\265o>\312l\320=p\231S<1E\271\274\236\014\316=\036\215\003=s\2057>\035w\252>\031s\347\276\222\256\031=\306\212\032\276:\262\262=\373\260^\275\331\353\215>\nK\214>\026\030\322>8-\210>[\2249>\357\256s=\210\327\245\276X\346-\275h\256\303>\201\t|\276\351&1>\014v\303>1_^=\020\351\327\276P\302,>h^\016=)\3130\276\2505m\2765F\373\276\355\326r\275\260\254\364\2768\276\226>\013^\304\276\332U\210\276P\337\362\275\261\247\215\276\261\242\226\276J\265\017>\212\037\203>\006L >\010s\273\275#\353\272\273\235\021\365\276^\200\255>\356z\311=\356\351*\275\366@k>\354\206\r>\231)m=\251\207\210>\365\241\353\276\311!\302=t$\327\275\346\350\341\276\362$\331\276\355\330\330>\355G\n\276\212\3108\277v\375\032?\3606/=\357\217\367\276\t\026\'>\265\033}\275\345\355\010=\\2X;Cs\335>\201\353\n=A\202\302>pw\206>r\376\266>\\r\214\276L\211\344>\263)\367>\0054\261>\241\204\211\276KYF\276\201\t\254\276i\251\234>\243;(>{fI\275\350\205{=e\307\206>\016\241\312>\335\224\222=\206=\215>7\216\030>\336\260\355\275C\220#>\201\\\242\275o\201$\277\333\242L>\346\311\225\275\307+P=-[\353\276\212>\277=2=\261>E\360\357>\2721\035>\234\250\245\274\227\304\231\275I\235@=5$\356=\006\r\255>\013\265\226\276\334\235\025>\022\203\200\276\000t\270\275\336\260\005?\256\273\351>4\275\304\274\\\311\256\2762r\266\276\035\224h?\342;\221>\005\206\354\275\222\226J\276f\207\230\275\023I4\276gD\001\2773\302\273=\301n\330=O\314\372\274\016\333V\276\343\337\247>]\370\001=\023\nQ\276o\360\005>\001\030\377\276\2073\007\277!\037\304\276ka\026\275R\325$>\350\207\201>\334c\331\276\307)\212\276\275q\022=\216u\361=\372\270\366=\235\327\010\277RI\315>x\013\344\275\236\014\356>\344\240D>\274\225\305\275\334\332\242\275\350\336C?\267\264\032\276\025:\257\276Z*o\276\345\235\003=l\354R\276\331BP>\335\3570?\261\341-@\016\020\334\276\014\037\321\275\215(\355\275\225\324\271>\372D\006?i\035\025>\357\033\337=N\013.?\236\227\252\275\2554\t?\260\003\347\275\237:\026=\327\300\326=\223R0\276o\240\300\275cb\363=\216\036?>9B\246=\273\320\314\276\262G\250<\330bw=pB\261\276]\032\277=a\246\355=3\212\005>~o\223>\031\377~>a\336\343<\313\333\241>I\331\242=}\222;\275\273\356\215=\212\037\223>A\324\235\275\272\240>\276\210\234>=Z\022 \276\363\3107?\247\262\310=R\014\260=\031\255\343=\223\251\222>\337\302\232=\374\035*\276\364\243a\274\023\232\204=Vf\245;v\211*\276X\305\033\276\254\002\265\275\016Im\275TR\327\276\263\241\023\272\256\266\342<A}\273>\004\301\210;`\345\200>\335\230\016\277\311Z\203=\335\014\367\275\374\344\310=\210hT\276\305\346\343\275R\n:>\0363\300\276F\230\242=it\207\276\033\366\233=\026\030\022>\347\307\037=\340\333t\276\024\313-\276\206\217H>\014\350E=\335\265d\276TVS=xz\245\277\375\022\221\275\327\027I\276\277\324\337>&\344C\276\367\211(;5y\n=\252\361\n?\244\245\202\276\321?\001\276qq\264=\014\007\302\276p%\253\276\000\000\220>TR\'\276\204\360\250\276\224\274\212>\236\322\321\276\320\362\034>\201[\177\277\227\377\240>\226x\200>P\344\t=\250R\343>\226\004(\276,\237\345=\361h\003>&\252\247\276`\223\245>,H\203\276\024\350\323=\036\247\230>\024\226X>\277\323\344\274T\000l>\\r\254>\352\tK>\010\254\214>\010=\233<\360\201\302\273\276\301\327=C\216\215=\253\317\305\276\010 5\276(\016\300=\270?\227\275N\321\201\276vm\217\275g\327\275<\346\350q\274\246\362\026>\204\r\317\2756\345J>\341\354\226\275\351+h\277eq\277\275 ^\367>\351}\003\276\231\236\340\276-&\026\277&\310\210=\034\266\335>A\274\016>\200\361,?\333Pq\276:\316\215\275\324e\021>\236xN=\254\034\252\2764\277\032\276\376\232,\276\255\275\017\2752\346.\276,\361\340\276\326\255\216\276k\r%<mY\276\274\"\211.\277\332\341/>\220\240x\276\233 \352=\222\313\017\277\021\344\000?\210K.\276\356%\235>\326V\354\275\3536\250\274\250\343\301\276wH\221\275Y\301o=\300\317X>\360\206\224=\t\371\340\275<\331\315\273\004\312\306>\\w\023><\245\243>\212\345\026\276\013\357\362\275\220\240\370\275\240\026\243\275\336T\244\274\215E\223\276+\030\025\276\340g\334>/nc\276%u\202>\312l\220>\270\351\017>\326\000\245<\311qg>\330\014\220\275\205\266$?+\373\256>\017\227\314>2\311\020\277\002H\355=c\271\225>E\022\315\276\240\340\342\274/\213\311\276\357T\000=^\235\343\275\247yG>b-\276\276\020#D\275J\322u=\232\316\316=\336T$>f\333\251=\\\003\253> {\275\276\010\001y\274\365-s\275\321\315\236=\354Q\030\276\257_\200\276\213\375\345=\256*\373=\361\021\021>\223\306\210>7l\253\276,\324Z\276\213lG>\334\235\365=z\337\370=\306\206n\275\201\225#\276\206\311\224\276\320\355%\275\274\226\020\276\314\354s=E\365\326\276\244\372\016=0\304\3019\353\213\014\277\036P6\276\217\374\221>\257\316Q>i:\353\276\325x\371>\"q\317\275\344\203\336=28\n\275\320\'r>h\\8\276\206\033\300\2766v\351\276\221\'\231\276\247\2216\276\273a\253>N\263\300\275{I\203\276Dm\233<\037\242\201>g\355\206>\000\221>>\270\351\337>\020\350\314<\244\337>\276\202\312\000?\306\371\033\276\207\247\'?\345~G>\355\272\267\275\267\230\037=J)\000\277Ih\213\276\253\tb\276!<\272\276\272\276O=k}\221\276Di\357=w\333\325>\271\252\374\276\275\246\247=\021\036-\276h\221\355=P\374\270>\326\377\311\276\031\342\230>lx\032\276\344\017\346>\177\366\203\276\204G\333\275\337\303\035?\032n\000\276\370\372\032\275;\031\234>d\003\351\273\355\266K>\036\026\352=\273b\306=\361\325\216=\245fO\276\205B\034?{\367\007>\233\217\353\275m\342\024?X\342\221\276wJG\276\315X\224\276\360\242\027\277O#M?\313\020\367\276\003[e>\364\375\324\275\n\272\035\276\204\r\277>h\"\254\276\311\002&>\214\271\373?`6&\273\272\024\267>G\311\273>~s\237=\226\354X\2764\242\364\275\203\027\035\276\231\323\305>\366EB\276Q\210 \276\t\376\027>\177\366c\276\221*\252=W\315\363\274\234\334\277>\245k\326>\274W\355\275\354\022\325=\010\343\'=\"9\271=\205_\212>\rq\214\276V\232\324\275\244\374\004>\276\244\021?\252e\313\275\373\\\r\276\202\255\242\276S\256p\276$\356\021\276\276\0233\276\247\\\021?\256*\013?Z*\217\276\213l\247>\276f\271\2742\003U\276\210\327\025\277\367=\252\275\274?\276\276\334\t\033\274+\207V\276Kv\354\275$(\256\276\320\263\331= y\307=\271p\220>\347\343z>\204*5\276xE\340>\020\351\007\277X\312\022\276\002H\255\276b\204p>` \210=&\337\014>\324} >\2137\342>\356\261\024>?\035\017\276\271l\224=\347:\215\2761\231\232>\020X\251>X\250\265\276\363\037\002\277\206r\262\276\004\347\004\277+5[\276\340-\350?\212!\271=\240\244\000=h\350\217\276:\2236=g\270\001\276\300[ \276\203\246\245\275L\340\246\276\362\352\334=\350\331L\277k+\026>\234\026\004?\'\277\305\2745A\024=\347\306T>\340\234\301>\247\\\341\275z6\223\277\344\367\226=\273\233\207\276\020;S\276\216\2227>\t\026\247\276\277\232\223\276\035\224\200\276\235\021\005>W{\330<\250\030G>\264\345$?B\262\220>\326\250\027?~:~\276K\315\036\276\305\376\002?\t8T?\021\252T;s\364\230>\372a$>_\226v\275\rT\206=\267\234K\276\224\366\246>\241\271\316=\"l\370\275\020\0053\275\014\223\271\276\035\311\245\276\367\347b\275\027ev\276\3745\271\275\234\304\200>\307\235R\276a\215\263\274\003&\240\276\371I\325>\234\026\004\277c\271\265\276\307\364\344\276}\256V>\017E\301\276M\241\203>\234\242c\276@\366\352\276\351\267o>\3475\366\275>\016^\273\'k\364>_$\364>`V\210=\263)7>-`\302>o/\251>\341\177\013\277M\363\016>al\201\276\301\220\225\276[_\204=\372\320e>Dn\006\276d;\037\276\235\331\256=\250U\224\275N\013\336\276\003\354\243\276\004\312\026\277zp\207>\331\261A\277\303\365h\276\013\265\006\276\205w\311>\362\315V\276g\325\'?\374\035J?Yn\t>-\354)>\036\212\262\276v\376-\275p\231\263\276\363v\204>\213\375\225\276\341\032\310\271O\222\236>o\201\204\276\020@\352\275\260U*?M\327\023=PT\266\275\3539\211\276\341\227\352>\344\367\346>\357 \226=\221_\177=a2\245>e\252`=@\244\037\276\211^&>;\215\024>U\0270\275\323j\270>\273a{>\223\252-\275\350l\001\274\347\343z\276\003`\254\276\222\347z\275\314\264\215\276&\307-?\213\3039\276\036\033!\276\355\231E>\214J\242\277?\000\031\277\315\351:\277\023\233\017\276u\315$?W\004\377\275\346\351\234=\270\257\003>\362\315V\276JF\336\276\221\2331\277\304\010\001\276Q\210\200>\217\215\240>\027+\312\276\007\231\364\2760\236\261\276\304B\215\276\254s\254\276\303G\204\276\302\243\215\276\350\244\227>e\215\372<p\010\325=\345\320\362>\275\000;\276\260\033V\276\334.t=\310\230\373=\316p\003\277\030\t\255\276\342\344\256\2762U\000?3\033\264>|\233~>\244\252)>\240\211\240>2\003U\276=,4>\231H\311=Xs`\276?;\340\274\3706}>\026M\'>\365\204%\276\250\030\007?\356\010g\276\270\004 \275\236\352\020>\374\3067>\251\274%?2\217\234\276\tm\231>\3544\222>\036\247\210>2\311\020?\262\273\000=\276\274\200>\253[\275\275\316\337\324> c\036?\301V\211\276\356%%\277\277\016\254\276\025od>\003[E?\366\356\257\276\004\004S>\237\002\200\276\203\340\221\275\320\362\274\276\\\311\256\276\347oj\277\026\030\022\276\036\376\232\276\3711&>\252+\237\276T\306\237\276\254\034:>(\350\233;\020\\\305=\024\355\022?\247\263\243>\234R\036=\274\313\305>\374\2511\275_\230\254=6<\375\275\263\230x\276\030\227\252\273gD\251\276\021\252\024>}yI?\204\365?>\0363p>U\023\204\276\331\224\333\276a\303\303\276\363\310\337\275\267\321\024@\325\004\341\276\243u\264\2766<}\276#\025\006>o\363\206=\311v\256\276\306\336\253=TW\256\276W\225\275\276M\370M\277\230M@\275\216#6\276(\2708\277\202\034\344>pBA>\362\007\203>/\206r>S\005C>\230Q\354\275d\222\341>\027\324W>[|j\276?\306\004\277\215\316\036\273\377\004\247>n\243\301>\003\2251>u\346\236<_)\353>\265\340\205\276\2240\023\277Z\326}<{\205\005\275V+S>\316\374*\276*R!>\257%\344\276H\214\236\274a\211\007\276\022P\241\275\002HM>\366b\370\276n\213\342>sc\002?\020!.\274\337\370:\277\310\014\024>+\331\261\276\363Y\336\275P\374x\276S\221\n\276\030\225\304>h\350G?%\006!>\202\213\325>\221\323W\274\221\355\274\276\305\034\204\275\372\'\030?\274\005\322\275H\2476?\\=g\276\245e\304=\"T\271\276@j\263\276\230\025\n\275g\355V>\316\031\221>\226!n>G=\034?Ed\350>\333\370\223=b\022n\275\036\214\270\275X\312\022>\'\203#\276U\373\324>\037\205;\277\rl=?0G\'\277\207\376\251\276t\0071?\n\021\360\275FS\207\273\020;S>\336vA\276}\006\024\275\340\234\301\277\360\247&\277V\016\r>\342\351\005\277[}\225=\245fO\276h\003p\275\337\023\220\273I\235\000\276\217S\364\275\005\027\003\277\236\353\373\274\251\245\231\275\324)\017\275K< ?\035Z\364\276\364\032\353\276\366\010u\275\220f\334\276\266\271\241>\3441C\276\334\210\002\272>\320\312>\037\235\232>\241\333K\276\250\305\340\274\323M\202?B\317\266>\301\250$\274\027\331\236>\270#\334\275\214\333\020?\236(\251=o\330\366\275\2132\033>\257\010N\277\022\332\202\276\253=l\275\355\326\262\275v\246H\277B\317\306>g,\032\276WC\022\277L\247u=\207\304\355\276 A\021\277\007\010F\276)\320\007>\211^\346>\300\t\245>O@\003\277\310A)>t\357\341=\003\262\347>\314]\233\276\341\233\246\273\302\026{\275@h\275=\372\270V>\315\001b\276\034_;\277\250V_=\270\255m=\276\206\340\274\007B\022\276\020;s\276\030x\316\276X\342\t\277\321\256\"?\rT\206\276q\217e\276b\370\020?\221\232v=\305\001t<x\014O\275\227V\243>\322\214\005\276\222\221\023>_\322\230\274V\231\311=\222 \\=\240\375\230>6\352\201\276\267E\031\276\223\035[=\201\007F\275L\211\244>\276\331\266>\017\326_>d@\326\276?TZ=\032\335\301\276\347\030\340\276]\026s\277\"\211&?kH4\277\351e\224\276gD\271>3\247\273\276&S\245\276\257\224\345\276.u\260=\017(\023\277\177j\274\276}\005\031\277\276\274@>N\356w\276\335\230&\277S?\217\276Sy{>T\251y>\346y\200>N\356\267>5^\232\276\361/\202\274\027\202\334>5]\217\275(\017\233>\242\234\010\276\375\366u>W\004\177\276\231\365j?w\025\202\276F\"\224\275\r\253\030>\031\347\357\275:w;=h\350\237>w\333%>\362\315V>\026jm\276M\020\325>\222\313\237=^\200\375>%#g>\260\217\276>X\217\273=\237\253\215>\337\246\377=\'\302\346\276\252H\r\277k}\221\276\353rJ=\335\014\007?\017\232]\275\013cK\276vk\271\2754\327\251\276|\'&\276@\244?\276\370\210\030\277)?i\276\367X:\276\375\202\335<i\214V\276\315\257\226>\017\264\302\276\314\356\311=1\231J\276\326;\034\275o%`;\335AL>|\326u\2757\032h?JFN\276z\307\351=\245\203u>\'\367\033>5A\244>\247\345,\273Q\203I>!v\346=\355\201N?\004V\006?P\307\343\276\031sW>\365\326 >\333\2772\277\214\025\305>\337\2119\276t\014H\273\3274\027?]\277\000>+l\006\275AG+=\177j\274\275\343\215,>\214\333\350\2743O\256=\200\361\254\276*\000\266\276\312\025\336>\241\365\220=-\265^<r\247t=A\267\007\277\177\373\232=\244\031\023?\222u\270\274%u\322\276r3\024\277\231\365\002\277)\350\206\276\357\032\364;\025\214:?e\302O>\244\305\031\275\314z\221\276L\212\017\275C\034\223?\250\252\020=\373\313\356=\'\240\371?\322\030\335>{k\200>6\037\'\277g\nm?\331\3167\276\260\003\'\276\275\303-=cz\"\277\017c\322<\000\214\'\276\037\277\017?V+\003?\367\314R\276\n\334\272\276R\n\252\276\240T[>Oy\264\275iRR?\350j\353\275\363t\256\274`v\317<0d5>\216?Q\2755{\010\277rm\350=\360\247\246\276\013^4\276v\246\260\276\007\360&\277?\307\007=\264\345\334\275Dn&\276t)\276\276\351`\235\276D\372\375\276\377\313\225=\206\346\332>\201\004E\276\267b\277\276\333\026\025\277@\030\030\277\320\'r>l&\277>\232\316\036\277\235\364>??\000\271>Pp!?+\211\214\275*\251\223\276\010\217\026>\020z\306\276\304wB\276\257\316Q\276x\013\364>\355\273\362>\301\342\200\276\345\263l?\377\262\003\277\003`\024?XV\312\276\267\356f>\227\250\036?\226&\r?\026\336\245\276\237\345!\277\007\353\377>G\254\025\277D\213\204\277\266\241\002?\203Os\275\333\026\305>q\003\316>\242\177\202\274\004\037\203\274\324+\345=K\352\304\275b\3631>\331Z\217\276\313\370O?\'1\260\277\334\361\246\275vT\265\276\201\t\374>RI=\276\217\245??\306\303\233=\271\031n\276/\335\274\277\3603\276>\020u\257\276[\353K?\232%\301\276\362\315\226\2753\3417\277\255\027\003>\220\242\316< \014\274>7\032\010\277\215\321z\276\005\372\244>r\304\212>>\263<?p_\207\276\220\244d\275\242\014\025\275\024\263\216>\212v\025\276\203\027=?\000\035\206>\203\372\226<_{\026?\237\310\013\277\305\003J<\301\312\211\277r\371\337>d\224\247=-\262\255\276\014v3\277g,\232\2769\013{\276\222\256\331=d\036y<\372a\004\277}\313\314>H\026\000?\t\033~\276\257\316Q>g\233;>yvy=\272\240\356>\350\366\022=\350\207\321=\200\361d?\226\354\270\276\20737?\213T\350>9(\361\276\014\260\337\276\341\013\013\277\372\'8?P\374X>\374\306\327=\253\317U>X\305{>\230L\265\276\3578\r\277\3377\256>)?I?\344\237\271=ni5\276\030\262Z\276\004\220\212\276\335\322\n\276\274\226\260\276\000\221\256\276[\355\241=\210\022m=YQ\263\276\027\r\271=\322\000\036\276\320%\234\274\353\250\n\277\211\357\014?\323\244T\276\345D[>\021\215\356\275\306P\376>\215\226\203\274\304\353R?\225\324!?\335\230~\276\242\356\223>\316\307\245\276|\'\246\276\336\003\264\275\200\273,=\310d\314:\016\331@\275n\300\307\276\0358\207\276\"7C>\216\222\007\277)y\025>^\235\323\276\312\211V?LO\020\277\202\255\322=\300\2622?\224\301\001\277\030C\251\276\264\037)\275\276\301\027?9(\001\277f\203\034\277\242\232\222\275X\250\035\277DQ\260\276\334h\230\277\201\t\254\276\261\026\337\275\231d\264\276\203\371\253\275\233\311w\276\316\335.\274mV5\277\306\206.\275=~\257\275\211\352\375>\226[\332\275\362\357;?]m%\276\014\223\251\276?:\025\276\3333\033?\253\004\373>\232Bo\277\360\242\317>sK\313\276EGZ?\372\263\277\275\211\007\244>\227\034\267>\007~\264\275\026\337\020\275->\265\276\"l\310\276\341z\244>\304\322\000=\247\"\345>\223\030\304\276\250Q\310<du\233>a2\025>\316\307\325\276vq\333\275@\331\024>z\307\351=\342\344\236>\240\025\250>\346\"\316>`\002\367\275Kvl\2761\010\234?TRg\276a\032\246\276\340\276.>n\372\243\276\315\314L>\237\351\245=\246a\020\277\314\013\320>\023\325\013\277\373\221\342=C9\341>1|L\277\343\210\r?\3377>\276\303*V\277\301\250l\277\246\320\371>\244\302\230\276\331\231\002\2758\204\"\277\232\354_\275\3372\'>\305\003\272\276\330d5\277\323\301\332>\313\022\235=mY>\275\332\341/>KY\036?\315\344C\277R\017\031\2775$\016>5$N>>\256\315\276Mg\007?\234\335\332<\260 \275\276\265P\262=\302\243\315=\024\263^\276\315\260\321\2743\3348?d]\274\276\227s)\276\202\034\324\275\305\256\255\275\350M\365>\001\244v\276HP\334?\354\301\244\275\240\246v\276\333\247\203>(\233\002?\307.\201>|\270\224>\177\207\002\2765\357\270?\006\205A\275\336T\004>\300\347g>\342;\221\276]\206?\275)\354\"\275\344\017\206=\211)\021\276\\=\267>\016\025\023?\003}\n\277X\3478>3\033\304>g)\271=%\353\360<\006*\343=PS\273>\020@\352\276\006/\252>\260U\002?\220\275\256>IKE>\333\371\216>\336qJ\276r\376\246\276\210K.?\377>\003\276G\217\037>\360\245p\274\263$\200\276~\035\030>\251\302\237<CV\'?\373\\\215\275\257\261\353\276\210h\264>\262\235/\276;pN>\327\372\322>\301\255{\275|a2>\363V\335\274\262.N\276?\000\271\276\246\n\006?\355\r\376\275m\312u>\r\246\001>\3166w>\233U?\276u\254R\275\255\206\014\277h\226D\275~o3\277JF\016\276\363\216\223\276\276j\205\276\273\362\031\276R\'\200\276\262\327\033>\251\205\022=\226\354\330>\353\213\364>\253\347$\276\272\207\204=\376`H?K\223R\276\243\006\363\276$\227\267\277L7\331>ZGu\276\321\350\236>\262h:\2762\254\242>U\301\000\2773\300\252\273\332sY\275\277~\210=\262\2725>\177\331]>\370\0317\276\233\254\321=\037\275\201\275~:\216\276\376`@>\353\035\356\274\255Q\317\275B>0\300(\'\272\276\177\244\230\276\002\267\356\2750/@>\316\337\304\275`\223\025>C\255\211=&\252\367\276\377\004\027\276\254\214\246\275\034\000;;6vI\276\261\242\306>\243@\357\276\201\317\317=uXa\275\026\341\303\271\023\n\201>\307\364\224>\255NN\274\220\367*>S\313\366>MJ\221>i\035\245>\\\254\270>}yA\276\233\251\220<\301Vi\276\317\024\n\277\370\030l=\230\366\215\275\331%\n\276\273\017\300\276\377>\203>w-!\276-\262\035\276\274\"x>E\022]>bJd>\021\374\337\276\371Lv\275\241\276\245>[\316%=\220\332\004>\363v\244>\362\322\355\276/\300\376>\3127\313\276,\232.\276$\357\\=d\003)\275^cW\276\177\023\372>\265\245\256=L\303\220>\267\352\337\273\305\217\201\276\272\334 \275\021p\310\276\273\233\307\276D\027\244>\375\023<\276\215~t\275\327N\224=~\251\037\277\263\357\272>\325\354\001\276\353oI=\340\202\314=u\223\330\275F\231->2w->\226\225f\276\014\315\265\276\275o|>\225}\327>V\2741?\223R\320=\343\376#\275\354\206\r\276\325\225\237>5\014\337\276\370k\362\275#\300\211\275\357\346!?\331\231\322\276\235\r\231\275H\304\264>?\221\347\276\006\2015>\027\361}>\035\254\317>0\017\031\275\227\255E?\344\367\026>\300>\372\275\016\025\203>\020\315\274=\257|\266\276\2343\242>\205\353\321\2757S!=V\267\312>\376\325\303=\"\3408\277\373\221R\277\273\233\'\276\n\277\344\276\301\216\377<\362\260\220\276\210h\024>r\026\246>f\240\242\276\360\334\033\276\026M\347\275\252+\317\276$\1770>K\345\355>\244\337\236>\020u\217\276!Y\020?6\002\361\275\303\330b>s\272\314\276\202\3128\276G\217\277=\274\350k\276\252\016\231\276\323\370\205\274\356\353\220>\213l\367\276d]<\276\010\254\334\275\002\202\211>\324}\220>\032\243\305\276\003\225\361\276?\343\"?\237\"\207\274>Z\034=3\207\244\275p%\253>\361\364\252\276\030%\310\275\345\263\374\275 \234\257\275\013AN=\"\250\032<`\352\247\276\323j\350\276\301s\357\275V)}\275O@S\276`\352G>\203h-<\214\326\021>\356\2614\276t]\270\275\006*\343\276\003CV\276\031V\221\276\rlU\276\363\223Z?\"\303\n>N(\304\276\362\nD=*8|\275nL\317\274\364\300G=\256\325\236\274\251\373\000\276\335\3529>\336\350#\275\2239\266\275\362\352\234\276\016-\262\274\000\343y>C\305\250>\327\300v\276xb&\277\217\307\014\275t%\202\275\363\223\352=\270X\221\276HPt\277Q1\006?\321@l=\261\341i>{\327 \275\255\335V>\351&\361=\210c\235>.\342\313\276a\303\363>\242]\245\276\272\024\307>\237\315\352>\253\317\005\277\343\376\203\275i\306b\276\312\0325\276\243[\257<\234\334\217\276\261\341\301?\265\316\256;\215(\215\276(,\361>\216\314\343=z\374\376\276\260\2513\275\266-*>_)\033@\244p=\276\331\224K\276\341\321\226>\2555T=\267\2274\276\205wY\276\310$\003>\253>\027>\026\337\220\275\021\337Q?\024\\\374\276\276L\264=\nH\233=\243\001<\276\31260=\225}\327<8J\256>-!\277=\313\370\207>\344f\030>a7\234>\256\274d\274lC\025?\331\227\214=V\324\340\275\027+J>xz%\274\032\027\336>28j\276\326\305\355\275PS\233\276\237\222\263\275\265\032\222>\207\212\361\275\357\254\375\276@\336+>8J\236\276-^l=\301\034}>}\263-\276/\372J>\2073\277\275\203\3350\275\327i$\276\2613-?h\\\310>\261\2774?$%\235\275\312O\n\276\215b9>\307\363\231\274\301\220\325\276s\242\035\277a2%\277\021qs\275eS\316\276\365\363>\277t7\031\273\234Q\363\274\203\335p>U\331\347>\004\004+?K\260\250>\363\002\314=\236\267\261<\2721\275>~\035\030\276\031VY\277\rq\304\277\361\200*?p_\007>\353\250*\276\370\2108>\313\276\003?d;\037\277\376\232\274>s\235&\276/\250\377\276\314zq>\331\317\242\275\264q$\276\324\2027>_\357^>\215\321Z\276\351\016\002\276\t3\275>\304B->Tt\364\277vo\305<J\230\351\275=\272Q\275\322o\237>\325\354\201=\233\346=>\353n\236>\205w\331\276\275\342i=\023,n>=\270\033>0LF>\242\232\222\274\203\300\232>\232\266\357>KZq= cn>\230i\273\276\323\237\005?\353\215\232\275\360\205\331>F\275\226\273<\367\036>\221D/>xz\345\275\021\374\357\275Q\336G=a\375\257\276\013c\033\277\223o\026\277\343\252R\276\336h\021<\274\031\332;\246\r\307=\027\274\350\2752 \313\276\233 \n?/\243X=`<\243=\372\232\305\2750/@\276\2402\276>\007%\234\276\213\375\345\275\244SW>\345D\333\276OZ8\275\222Y}\275\000\216=\2751\'\310=@\207\371\275\274\"\270\276@\336\313>\311\037L\276\352\t\253\276\302\243M\276\253y\216\274\210H\r=\330\236Y\276A\273\303\275\005\372\364>\367\001(\277h\\\370\275\016\363\345=^\242\272\276\003\317\035>k\361i\276?\251\226==~\237>\230\372\371\275O;\374=\331w\005\276\351\230\263=.\377\341\275pBA\276\036\334]\276\026\023[>\0162\t\276\354i\007>X\034\236>\265\2113>_\352\014<\244\202\324\273\021\307\372=\363\037R>6\253\336\276\343\307\210\276\266\241*?\212\315\267\276(\004\233\271\316\2458>\351\0208\275\311\216M\275|\355\021?\327\207u=\020;\303\276:\036\023?I._\276\003>\277<s.\225>\203\335\200>\362{\033\276?\221\347\275 ;\024\274\204\236U\277\t\026_\277f\210\003>%\222\010\277f1\221=u\216\t\277\351+\010>g\'\343>$\326\022\277\023\236P\274\373\221\342\276\177\334~=K\352D\275t\007\031?\241\271\236>9\177s\276V\016\r>\230L\025\276@\3314> \230#>\214\376\206\273;5\267\275\306N8\275\350\331L\276H\371\251\276H\0260\275w\363\224\276s\220\306;\322\030\255\274Y\244\311==\017n>\266-:\277\254Vf\276\3604\271=\367\253@=!\007\225\2763\026\255\276\200+Y\276\374R\357\276;6\302>R\3553>\005\213#\2767\211!\276 \265\211\276t^#\276vTE\277\265T\036\276x\321\027>\264Y\005\277\367X\372=\2073g?\1772\206=B\317\246\275\020]\240\276l\t\371\275\361\327\024\277c\177!\277\305=\006\277\226\262\224?sc\352>6\352\241\276\204b+=\333N\333\274\220\332d>s\021\217>\206\003\001\276\333\300\275=\303\326\254=O]\371=\266\275];W\262\203\276\021\337I>\216\001\331=\364\246\n?\2608\314\276\036\334M\277\335\357\340>\005iF\274H`\275;%X\234\2767\375q\277\277\321\016\275v\303\246>[6\004\274\267E\231\276\275\000\273\276\300#\312\275\370\245\376>k,a=^.\022?\333\304\311=P\001\200>\010U\212\276\265lm\276\021R\267<\203\2429=\205\317V\275\206\036q\275_\320\002\275?\306@@\336\254\301\274EK\236\275\'f\235>\226\260\226=\345\325\251\276r\334)\2761\265\245\274H\341\212?\367\001\330\276^cw\276[\010R>\326\217\315<du\353=p\321\311\274\327Q\325\275 \265I>\334\021N\276\234\371\025\275\367X\032\276\327\243\200\276$\264%\276\027\237b>\"\306+\275\266\332\203=\360\340\207=\205\252\342\273c\271\005\276\rS\033\275\305\003\n\276V\177\304\275\347\305\211<\003[\205>\224N$=d@V\276(~l>\351\233t\275\262K\304\276Y\213\317\275\2176\316\275v\212\225=\364\370\215\276\264\037\251=j\365\225\275a\032F>\360Pt>\210\020W\275N\227\005>^\272\t\276a\341\304\275i\306\342\275\306\245\312=\342\361\243\273\225\232\375\275\347\035\267>\007B\362\275M\370e\276\3434\304<\303\rx>d\003)=\266\271\361=\350\3770\273`\313\253<\356|\237>\306\024\254\274\000oA\276\016\276\360\275\030\225\324\275\"\340P\2768\241P\276a\375\257>\275R\326=\314b\002>\330\273\257\276\224\331`\276\026\301_>\006\365\355\276\254\305\007\276\177\331\375\276\021\001\227>\022\026U=\312\376\371\274!\217\205;\210\021\002\276\024\256\227>ni\025>\264 T=\242C\300\275\313\237\257\275\255\372<\276\226A5=I\205q=u\002:>\254\034:\276\371\024\240\275\377u\216=\341z\244\277\207\375^\275\265\246\031>\027\232+\276\244\374d\275?\251\366\274\006\273A>\261\212\027\276\326\213\341\275\315\"\224=\364\251\203\275\031\034%\276o,h=\256\360.>\025\035\t\276\314\270\211=\345\no\276\350\364\274<\362\352\334\275\247A\261\275;R\235=\321\255W\274R~*\277 \233\244=\034\265B<9\356\024\276\351Em=czB>\235*\037=\320\r\r=\240\2110>\357t\347<\342X\227\276 \014<>\n\007\014\274\216u\261\277\330\330\205>\001\366q>\340\234Q>\205\227\200\275\305r+\276\255Q\017\276\355\3262\275Na%\275\232w<\276\256\201\r\276\034_\033\276i\320\006<\025\220v\275\260\221\204=\006d\257\275\367\257\234\276 \322O\276BC\177\276\352$\033\275\301\213^\276Mgg>\243#\371\275\231d\004\276\273\3253\276\374\305,\275M\326h>\300+];s.e>w\276\337\275\371I\365=L\215\220\275z\215\335=\374\343\035\276\333l\214\275,H\363=Z\275\003=%;\366\275\352<\317:\270\254\002\275Z\rI\276\303\232J\274\024\350\323\275\177\023\n\276\261mq\276H\261\222\273Z\365\371=\24492=\342s\247\274\257_\020>\322o\337=\035\346K\276\320\355\325\276\230LU>\232\224\002>\340-\320=M-;\276\240\340\002\276\254V\346\275\0358\247>\247?;\276_\264G\274\2074\312\275i\214\026\276\314\321C>Nb\320=g\325\207=\231\326\206=\363M\344\273\255Q\217\274nL\317\275\034|\001\276\204*5\276OZ\230\275~Rm>\274tS>#-\245\276\341C\211\274\006Gi\276\363\253\211\276\240\250\354<\356\010\347=\347\215\263\275\302\206\007>\026\366T>*\306y>\341z\264=L\375<>\324~+\275c\234?>\225\232\375\275qU\031>%!\021\273\263$\300<\337\301\217\275\347o\302<\254\305\'>\200H?\274.\004\031\276\255\300\240>\236\014\016>\020\311\020=\211U\315;\302\022O>\032\213\246>\350\336\303\276\265\324\013<2\003\325\276\235\331n\2755^Z>\317\371\311=AH\206\276A\253\202\273|\262$:\272Nc\276G8\r>\274t3>\2242\251=\274\\\204>\rpA\275\377\t\316>\322\001I=\351\232\271\276pC\314=h\256\223>|\'\006>\313\016q\275\3274\017>it??\360mZ>k+\026>\377\007\230\275\2237\300\274\030\354\006\276\242|\301\274\r\213\221\275%\222(\276\357 \206>BC\277>\337\340+>N\013\036>\030!\374=m\002\214=q\350-\275t\264\252\275F\224\026\276\201\004e>]\247Q==IZ>m9\247\276|~x\276\232\353\364=\243\254_<\263A\346\275\257\265\267\275\355\330H\276\224\274\212\276\340H\200\275\r\032z>\225\0166>\324H\213>+\023~\275\356\353@\276[B\276<\026\300\224\274\274,\334;\271\031\016\276vT5>\025W5>\022\245%@\322\035\264\276_F1\276\204\236\335>\302L\333\275T\251\031>\235\235L\276\'\203C\276\345\362\227?\256\365%\276t\007q\276\270\037p;N(D\276\217o\257\275!\217 =j\026\210\275\220f,\275-\317C\276GY?<\205%\276\276\326\034`>:\271\225:\377!\335>\216u\021\276\261\334\302>\320\362\234>D5\245<L\216;\276\373\231\325\273\263\370\003\274\335\014\367\275\\V\341<\223\306\230>~tj\276\312Oj\276%;\026>\263C\234\275\334\327\001\276\351f\332\273\222?X\275~\000\022>\256\330\037>t^c=\242]%\276\2613\305=U\275\234\275d\256L\275\356\010\'\2746#C\275\377\312*\276F%u\276RM\244;\272kI\275\240\207Z<Q\245\326>\017\356\316\275!\224w<S$\237\275k\361\t\276F\266\363=\2279\335=&\252W>J\231T\275k\267=>o\3306>\331\")=\020\257k\274\343\030\251\275\237V\021\275\227\000\234\275\277\3229\275\365\330\266=\220f\254>4Kb\276\\r\334\273\377\225u>y\006m\276\247\313b\277\354\371\272=\214\237F\274:\317X<D\027\204\276\\w\363\274\257?\211<\006L`<.\305\245>\375\372!=\273\177,=\277\270\264\275i:\233>\263\264\263=\017b\'>\200H\317\276\321\2263\275\346\261&\275xbV>\273\'G\277Gr\231>i\000o>\335{\030>\224\336\307\276\265pY\275@\335\200=Sz\206=\277e\016\276B\350\300=Z\330\323=\3274\217\276]\376\223>\021\252\244\276\311w\251<P\213\201=\325&n\276\211\322\336\276X\252\213\2747\246\247\276.\306@\275\270\347\231\275\235c@\276\335\tv\274\242^\360<\030\225\264\276\331\\5\275\312O\n\276\030x\356\275=\233\325\275r\212\016>\201r\200;\001\207\300>\021\251\211=\340\204\302\276\202\342\217\277,\357j\275YL,\276al!=&S\205>\241\202\303\274\355\3607>`\310\n>\232\010[>\263\225W=A+\200\276?\221\347\275\031\255c>\002d\210=\311\223\344\275\375\276\177=v7\217\276\374\214K>T\251\271\276q\337\'\267L\3030\276vT\225>\347\000!\276od^=\237\345y=Y\206\310\276\204\236\215>x\320l=aO\313>\014\255\316<+\244|>\331_\266\275\013\230 >b\241V\276{Ic\276\027\233V=K\037:\274\016\202N=t\230\017\276Di/\275\025\312\002\275\013{Z\276\236\352P\276\'Nn\2767\216\230=@\243\264=\373\221\342\2753\247\253\276\262\325e\274.\255\226\276e\376\261\2759E\007\276]P\337\276\231\rR>\326\006\002<yX\370>\260\216\203=[\010\022>\342\314\337\276\336\345\002>\263A\006\276\312\246|>\217\307\214\276i\306\">\207\304\335>\336\347\270=\364\211|>\301\035\210=S\320M\276\034|\341=\034B\025=\224\3011>\306\247 \276\274\314\260\275\333P1\276\337O\275>Ll\316\2764\275\204\275\246\361\013\275&\250a\274\231\271\200=4\364/\276tA\375\275\312\372\r\275{fi\276\002Hm\276j\274t>i\251\214>\353\377\034>XV\332=C\310y\275\3333\313\274\305\003\n\276\251\2377>\331Z\277\276\233\376\354\274+0\344\275\205\316\253\275\364\030e\275\010X\213=\372\325\334\275\031\004\026>\217\306\301=\246*\255\2757\030\212=\314\177\250\276\221\231\013=A}+\276\312\032\205\276\212\253j\276}$\245<t\357\341\274\216;%>A\324=\276\235F\032=\264v\023?\335\315S>\324\016\217>x\271(>r\301\231\274\236\007\367=\234\243\216=\r\301q=\322\030m\276\231\273v>\027\267\261\276\341\321F=\244ng\275c\321\324>=\'\335\276\007\360\366>?\001T\275\377\262\213\276y\222\204\276\360\205)>\221~;\276\216\351\211\275=a\331>E\202)<q\311\021>\304\316\204>\353V/>\354\206\r\276\216\346\210\275\226\352\202<\222\226\232\276\345\1772=\271\2130\275\370S\263>\220\210I\276\354/\333\276\267\013-><\203f>;6\222\276\316\210\322\275\017\325\224\274\210\235\351=\013F\005>\353\220;\276\247y\007>\242\227\321\275\"7#\276nn\014\276\023\233O>\377\t\016>\210\200#\276/\027\021>\005\305\317=\367u\220\276NbH@\377\353\234\275\014=\342<G\254\305<\377[I\2765At>\010U*>B\262@\276\245\275\201?\313g\311\276\317hk\275\202\342G>\r\377i<}\010\312=\341)\344\274\274?\336=c\3214=\362\315\206\276\276\2106\275|*\247\273\000\256\204>H\026\360=\337\370\032>\257w\007\277\r\216\202>\362^5>o:\027\272+\204\025=\312\2147=\004\255\300>\255k4\275\325\004\201\276xF\033\275\317,\t\276\260\0336<\223\214\034>\2304\306\276H\302>\2757O\245>\264\310v>\207\026\231>?W\213\2760*\311\276\205|\260\276\2446Q\276-\354\t\276\245\024\224=\373y\263\276\340J\026>\373:\020\276ep\024>Gw0?>\227\251\2756\310\244=8\370\302>\275R\226>_^\320>\331A\245=io\020\276\211\265\020?\021\036\r\276q\346\027>%;v>5\230\016?\360\211\265=r5\262\274\301\342\360=\201!\353>r\341 \276\354/\273>Z\202\314=\310$\203\276Zd\233>\257\261K\276\255i\256\276\021\374\357=\266\333\256<I\242\177\277\254\034:>\341\nh=\211\014k>\207\277\016\277\345a!>\211\230r>\373\204}\273\003\321\023\275\\8\020?a\252\231\275g\325\347\275\335\357P\276*\214M\276\315\220\252<\016J\030\276\222\2630>\200H_\276d \317\274\266\204\304\277\344\332\220>\003DA=\226\225f>\022\027\300=\324}@>\2338\371=\001\245\241\274A\361\003>\341@H>\342\006\374\275\201x\235>\355\r\276=\340\331\236<uY\314>\270#\254>\014\002\353=\275\373\203\275.\377\221>\262\233\231\274\303\360\221\276\233X`<\203\372v>}\221\240\276*\035L\276g\361b=\260\002\374<\201\004\205\276\036\371#\2765\264\241\275$\356\301>\214\271\013>=d\212=V}.>\371\332s>\373:\270\277{f\211\276\013\322l>Gr\371\275\365\330\266=\362\356\310<[\266V<$\264\245>\024y\322=\365g\377=\311Y\030>\360\247f>P7P=\20686>\013\357\222\276\350\331,>\214\363\267\276\236E/=\226\3172\276B`\225\276\355\360\327\275\267\356F>\343\210\265>\252\361r\276\025\035\211\276?t\221\276<\203\306>]\371\274\276\002\267\256>\351\016\002\276\342:\306<\340\363\003\276\254\342\215>\247\223\214=\245\203\265\275\035U\r=_\322\210\276\177\373:>`\345\020>\306\242i>\220\275~>h\317%\275\236\355Q<\025\220v=\221\362S\275W\t\246>\330\365\233\276\321 \005=N\230\220\275\351`}\276\007\261\323>_\230\014\276\237\243\037\273:#J>\231\236p\2767\211\261>\"4\202\275\311\216m>\357U+\276\005\213\343>\375\203\250=\200e\345\275<\024\005>\306lI\274\rT\306>`\221\277=\355\201\266\276\230\243\207\275\305\376\362\275\255\335\026\276\347\304\036\275\276\366\214=\331\\\265\274\330\360\364\274\325!\347\276\304\231_>\367X\272>\303\201\340\276\303\266%\276\031\3052>\234\301\337\274o*\202\276\236\014\026\277\324\361x\276\333\211R\275\243\314F\276\270\036\245\276\033\330\232>\351&1\276\211\265x<\264X\n\275\314\321\223\276\307K\227\276\334-\311=B[n>\007\010\346\275\226\347\241\276G\346Q\275\307,\233=\2073\237\276\345\270s\276J$q>\215\2644\276\254V&>\0054Q>3\376\r\277\346\313\273\276\310\265\261\276\215(\r\277\200\267@>\247\352\276\275\304\215\245;\262\200\251\275\206\374\330\273\213\247\276=^c\017?\036\341\224\276\253\262O>g\200\013=\035\346\233>\263^,\276\334h@>\212\345\026>\233\033\243>\n\272=>Z*\217>\360m:\276\014\312\264\275\022\240\226>i\251\034\276\322o\177>P\302\214>\220\367\n\276\271\245\225\276\330\014p\275=a\271\276\241g\023\276:\351\375>\207\247\327=\001\030\257>d\314\335\275W\354\277>4\330T<:\351\215>\206\311\204\276(\363\217\274\352>`>\326\342\323\275\320a^>\222=\202=y\001&\277\336\220\206\275\304\010\341=\240Od>\234\341F\276;\001\315\274s\177u=l]*=\342u\235>\035\003r\276\264\310\026>\035\345\240=8J\256\276S\227\214<\\w\223>S\315\254<\221\n\263\276\035U\315\275\3274\237>z\245,@\210\367\234\275\341E\217>Y\247\n=\356|_\276\006\021\251\275\226#\304\275 c.\276\"\211~?M\326\210\276\372Cs\275z\251X=\334\332\202=N\234\214\276H\212H=.\255\006\276\353o\211=T\343\345\275\304\010\321\276\"O2\276\266\276\270\276/\206\202\276\250\000\030>^\200}>z\374\036>\302\204Q=*\306\271\276\316\374\352\275+3\245\274$\013\330\275YQ\223\276\237<L>\330\014\260\275\334\235\365=\327\243\220\276Fa\267\275D\213\254=\251\023\200\276\304\010\321\2762\217\374\275\316\030f\275\340J\266=\203\210T\274>\005\000>\rq\214=\307\272\370\275\2721=\276\206r\242\275[_\204\276\342t\262\275(\016\300\275\255\027\343\276\317\275\007\276\037\235\372=Q\203\351=;\337\317\275\301S\310;\221\'\311<\236^\311>l\317\274>\020\222%>\214\276\">Y\335\212>\3166\307>\014\260\017\276\347\344\245\275d\222\221\275~\306\205>\212\345\226\276\207\372\235\275\273\267b\275\034\320\022\275A\267\327\275\371,\'\277\021\001\307\276;\337\317=\377>\243\275X\250\345>\222\350\305\276\233rE>\253!\201>\2302\260\275\354\333\211\275.V\364>\2235\312\275\033\240t\275\273H\201\275W[Q\276\347\373\351=\245\203\205\276\n\327\243>\322\310\247=\2760\331\275;\252\032>v\247{=\212\3100\274V\016e\277.\215\237=\300\222+\275j\023\'\276\260\376\017\275\"\376a\275\260r\330\276h\"\214>N\t\250=\254V\346=\307\235r\276\323\207\236>[\230\305=Y\206\250\276~:>>\013D\257=\310~\266\275TtD>9\227\222>u\260\236=[\266\026>\311\216\r\276\177\301\356\275\370S#=\206\223t\275I\272\346\275\243\257\200>\242\356\003>\256\2739>\355\r\236>\253\0056\275\020z\346>;\302\t>\326:q\275\332\002\002\275\246\233\334\277\321\256\202>\033\0227\276\006h\273\275\212\345\326=\3753\303\275\330\365\313\275l-\202;\177\301n\276\000\000\000\276ke\002\276\036\376\032>\250Rs>E\201\036>w\276\337\275\"O\202\276Ig`\275\274\221\031\276v\335\333\274\233\033\223>\351C7\276\272\364o=b\025\257\275\205_\352=`Y\231\276\212\310\320\276\272\275\204\276N+\205=2\003U>\230n\022>\332\221\312\275vp\260\274J\007\003\277O\257\364\276\347\214\230\276o\361\220\275\255L8\275\3642\n\276U\023d\276\211A\300\276\235c\000>\026jm\276\330\360\364\275\300\347G\275\275\213w=\017_\246<\2074\312\275\373\256h\276o\323\237<\246\266\264=\232B\007>\3171`=\222\347z\273\356ZB>d#\240>\017({>n\r6\273\313\276k\276z6K\276\306m\024>O\351@\276\337\370\232\275\362\230\201\276\372\355K\276\n.\306>=\'=>\"\375\026>\324+E\276M\020u>\257[\004=\303G\004>Ed\250\276\n\272\255\2764hh>\262\327{>\365\276Q\276\314\264=\276_K\237\271\036\247\270\276D\335\'>\332\254\372=\005P\314\275\207\211F\275\257|\326=\023\234z<F%\025>\340\234q\276\263$\220>:\314\027>\226x\000>=\226c;U4\226\275v2\250>\3225\223>\355G\n\276\252\361\322\275\337\025A\274\260vT=\262c\223\276P\374\330=\270V\273=\000R\033\276\363\256\232\275 \321\304=\202\312\030>\364\303\370\276n\301\322\274/n\343\275m97\276\307h\035>Y\243\336=3\033\204\276O\002\233=\320\325v\276s\205\227>\374\212\225=\271\031.>\374\373\014\276wg\215=wiC\275\341]\376>)\355m>n4\200>w\3634\276#\333\021?+0$>O;|\276\021\345K\275\263\315\275>\036\341t>\204d!?\010r\220\276\301V\251>\232\261\010\2762\311h\276\232|\363=/\372J\276\244\252)>\003DA\275\272I\214>\341(\211>\340\021\265=\332\003-=W_\275\275\343k/>0\273\'\276{fi>\377\224\252<\324\202\327=\224\244\013\276\270;\213=\257\353W>\025\311\027\275\370\247\224\275\001 \335\273\261P\273\276[\263\025\275I\276R=s\242\335=\250R3>L7I\276\016O\017\276 c\006\277^\200}\276bgJ\276\n\242\356=\230\243\267\276\034\231g>8\204J>\256\266\032@\302\300\023\276\177\207b\276\031\342\270>\216\351I\2766=\250=w\206\251\275-\355\264\275\342X\267?\312\303\202\276-\317#\276Y1\334<\201[W\276\252\272\207\275\277+\002\276\235K\261\276\274\0052>|\362\360\275\016\363\345\275)\257\225=\367;\324=\t\2114=\022N\373>\254\220r<\256\022\014\276-\262\275=HP\274\275\273\325s=\303\363\262=\004\222\220\275t\014h>2 \373\276\373?\307\275\323\207\216=\333u\2519;\252\332=)\355\215\275j\373W=\211^\246>\022\366\255=[\014^\275\035U\335\276KYF>\200`\256\2768\275\313\275\277\177s<\"\337\305=\241J\r\276\266\201\273=\202\342\007\276^\272i>>\320\272>\335\322\252\276\330\r{\276\235.\333>\220\275\336=DL)>\303\236V>&\001\312>\2402>>I\0219\276\373\221\002?\376\267R\276\361h3?`\345\320=X\312R>D\030?\275aQ\221\275\201\004\005>\3230<\275\'ji=\027\017\357<\202\254\247\274\254\255\370\276#\370_\276\0363\320\275\304\353\232\276\307\235\002\277\022\026\025=\361\276\005;\216\312\315<cA!\275\003\354\003>sc:\276\tm\371=}\005\211>U\207\374>\236\352\020\276\273B\277\2750\r\203\276O]\251\276\277D<<\375\331O>\005\305/\276\334\363\374\274\353\342\246>\217S\304\277[%\270\275\035\310:\275\246a8\276C9\201>:x\206=\306\371{\276\216\257\035>h\256\323\275\355\177@\275ff\226\276\337\303%\276\004sT>\236A\003\276\364\246\342=\233 \232>\201,\037\273w\333%\276H\247\256=\276\237\352>\371\020\324<\266\3704>)\"C\274:\351\235>\377#\223=(\017\213=\357\254\035\276;\341e\275\273\355\242\27679\374<\221\n\363>\254\377\363\275\212X\004=\225HB>\370\245\336>\007\316\261\277\344.B=\246\3250>\362\\\337;H\220%;ms\343\275\314\322\216\275\233\000C= F\010\2760d\025>\371\203\201>}zl\275\261\206K=Y\213O\276\246\355\037\276\231Y\025;\365\020\355\276#\275\250;\\U\246\276$\227\217\276\311\312\257\275\300\225\214>Y\025a<\203\372\326=qU\331\275\273\nI\276\016\020\334>\267b\377\275\030\231\200\275\254\377S\276w\204\023\276r\376\366>\002\331\333>E\330p>X\254\201\275]P\037>\320\263\031\276\320\357\373<{\332!?Mg\227>\270\001\037>\013\322\274>\335\230\336=+\336H<\361\235\330\2753\334\000\276\027e\266\275/n\003\2771B\000?\000\214\307>\225\237\204>\314(\226\276\364\326\n\274v\376m\274\230\300\255\276M\0205>j\205\311\2757\211\001>O@S\276\202\255\022>\205w\251\276v\340\314\276\003\224\006=e\027\214<%;\206>\261\333\'=(\273\271\275\324`\332=\325[\003>\202X\266\275\360\026\250>\326\342\203>H3v\276\222\005\254\276?:\245\276\220\301\345;\201M\214;7\3017=-C\274\276\t3\215\276\033\273D>SA\205=x\322\302\275R\362J>G8\215>\031\036\373<\204\r\317\276eU\004<\356w\010\276\361c,\276\253\004K\276\374\247\273=\243\221\017\275\211\352\005?\263^\334>\337\375Q\276\002\016\001>\343k\017\276\203\371\313\275s\200\000>\364\300G=\323\244\024>\340\333\344\276e\307\226>6\253\276>\330\365K>\321\221\334\274\026\2073\276\332\346f\276\373\221\032?\270\220\307\274\254\345N\273\265\032\022\276 \014\234\275\016n\306\273\252\324\014??:5>_\265\242>H\303\211=\311\002\266>\240lJ>\257\316\201>\371Nl\276E\326\232=\"\032\215\276\241\241\277>FB\253>\302\243\315>\026\373\203?d@\026>\241\020a\276\307.\321=\235\365\211\275\020\257\273\276\324\016\377=\230\243\207\275\351C\207>\363\223\022?0\236\001\276\304\261\016>\201&\002>$\356\261>\3638\254\275\273Gv\275z\307\231> cN>\275o\014?3\375\222\274\0362\305=\203\377\010<1|4\277oF\315\274\002\237\337=K\315\336\275\201vG\275\014Y=\276\0221%=\307\234\307\275\023\n\261>\365\276\021\276\002e\263\275.\305\265>:\315\202=\234\371\225>\274\005r\276!\217\200\275K\352$\276\357\346i\276!W*=i\000\037@\311\253\303\276\226_\006=\025\343\374=\372u\361\272\263\315\r\2766#\203\272\264u0\2756<\225?\365\331A\275sde\275\007\353\037>\221\'\t\276n\335m>\255h\263=D\206\245\276\0319+>a\032&\276\007@\274\275\232\224\302\276\226\347\001>\260\344\212=2r\246>\274yj\275\313\020\247\276\000\306\363\275\204\255\'\272y;\302\273\030C\231\276\006+\256\275\361\235\210\276\023\362!\2769\356\204>\206 g>\376*\200=5\230F\2765{`>\035\254\237\276\276\336\275>5F\273\276j\370V\275X\255\334\276\235\205\375=Ym~<\033\r\000\276\344\240d>KY\226>4o\013\274{\330\253\275\010\217v>+\301\262\276w-\221\276Q\335\234\275Di/\276\016J\250>V\232\224>Z~\200\275/kb\275\207\371\222\276\205\t\243=#\204\007>!\007\365>\204\360H>\002\331\213>\007\010\006\2762w\215>\344\364\265\275\235\205\375\275\177\206\227=\321\005\005\277\274\\\264>\027\017\357\2741\353%>\330,\027\275\t\212\217>\361\200\242>\361K\215\276\343k\337\276\253&\250\276\0216\274>\315\257&\276\315\257&\276&\307\275>B>\350\275vO\236>\014\315\205>(\'\312>-\316\230\275\336\345b\276r\341\200>~\214\231>Ed\330=J\230\351\275\3578\265\276\033\234\210=K\257M=z\3746\277\352\006\312=\323\371p\275(\231\234\273\330\360t\276Gw\320=#J\213\276\220f,> \322o>\302\372\277\276)\\\237>\233U\237\276\270\001_>\366@\233>\2755\360\275%\315_\275\325>\035\276\324\rT=&\001\352\275L\031\270<\004\3425=l[\244\276\265T\216\276\010\254|>E\330\360\275\357\306\202\274\343\302\321\2763\212\205\276\027\016$>3\211z=\'\005L\273\244\210\234\276\360\276*\275\301\342p>\221Do\275\241\326\314\277ga\317=\274\"\370=\213\374z<4\242\364\275\231*\310\276w\370K\276\362\3573=GZj>6\006]\275T\251\331\274\347\306\364=\025\343<>\303H\217\2758\204\272>v\372\301\274\221\320\346\276\026\241\030\275\273\233\007\276\336v\341\275\202\250\033\276\304|\371=}=\277\275\0054\321=\241\271\256\276\033\r\240\275\247\313\342<\353\320\237\273\301\255\213>\204\201\347\275\371NL<\355G\212>Y\027\307>\002\324t\276\024\256\'\276\316\246\243<T\251\331\275r\214d=\025\251\020>\252C\356>F\323\251\276Sy;>\233\311\227>\204\326\303<N\356\247>DL\t\2777\032\360\2762\037\220\274\341^\231;W\353\304\275.\377\001\276VF\203=k\202\230\276\350\207\301>h\256\343>\313\326\372=Pq\234=O]9\276\321?A\274\304B\315>cE\275\276o\330v\276\213T\330\276%\351Z>`\315\321>\314@\005>: \t\275\033\252\030<\265O\227>\242\263\214=\350\023\031\276\257|\326=\224\366\306>7\303\275\276E-\215\275\273\233\327>\353n\336=vO>>\2554\351\275\274\226P>E\363\300=\371f[\276\005iF\276\364\032\373=#\020\017>\312\303\n\277\206\346z\276\350\366\362>q8s\275\323\274\003\276\340\2341\276 \322\277>\263\267\224\275\331Z\237>\243\252\256\271\365\023N\273~\341\225:Ql\245\275\373]X\275G\254\205>\271\302{>l\260p\275?7\264\274r\371\017>*W\270>{\364\246\275\263(\354\274\277\202t>\224\274\372\275\371\024@>\237u\215=\271\252\214\275 {\375=~\345\001=h\"\354\275\017\234\303>9\264\370>\242\234(\276\262\364\341==\017\016>\030\225\244>\236}\345<\006L`\275\215\013G\276\252\357|\274c(g\275\027\270\274<\214\271\333>\253>\027?\3437\305=\372\362\002>\327\372\">\031\222\223\275\235hW\276\244\343j=:w;=@\023!>9\321\236>\316\335.\275,\235\217<>\\\362<\223\031/\275B\354\314\275+\331\241\276\t\242\223\273\344,\014\276\301\342\320>\301\344\206\275yuN>\310$\243\275\202\305!\275\330\361\277=\320\232\277=\322\310\307\275&\337\234>m\347\213\276\220\210\251\276\356%\r=ams\243>\010Z\201=\n\242\216\276\002\274\205>\307L\242=X\305[\276\007\360\326\2756\253\036>\301V\t\275\007\360\036@rP\002\277\365-\263=\371f[>\204\323b>\2652\201\276&\305\307\275&SE\276$(\256?wg\355\275\323\244\324\275\217\215`>\325\262\365=\373\221\342\275\350\207\021>\240l*\276\267b_>L\350\211;tb\217\275\272\367p\276\254\305\207\276\316\373\377<\311\260*>\001\335\267\275wgM>\032\335\241>\300\354\016\277\364\032\233=\277}\215>\304w\002>\3436:\276\366E\002\276K:\312<V,\236\275\251\336\372\276\207\277\246<%U\200;\376\324\370=\261\300\267=\245\275\241\275\226\313\246= \356\312\275\330\322c\275\315\344\333=\033Q\220\273\255L\370>\323\366\357=\214\365\215\274d;\337=\225\016\266\276u=Q=O\351 >\257\3537>\315\036\230\276W\317\t=\277I\323\274\331>d\274\037\205k\276\347\027%\275\355*d>\247\347]\274\375L=<B>\310>U\331\207>\014\310\236\276G\217\317>\216\0060\275\325{\252<\004!\251\276rmH>\331y\033\275Yi\322=F\002\262\272\230\335\343\276\262\202\237=\'N\256=\351\267O\276F|G\276\2242i=\345\362\007?\021\345\013=\346\350\021\277`\037=\276\022J\277=\325\225\217>\001\030o\276\237\002\340=7\030j\274\272I\214\276\033\021\014=\\\257\311\275D\335\007>\356\010G>r\334\t>r\337\312\275\307*%=\005\250)\277\320\325\266>3\376\035>\213q>>8I\263=\033\361\244=\231\236\200\276\342Xw>F\2246>E\200\023=\340\272\342\274K\260X>!\007\225\276\374\273\010\274\254\305\347=5\014\237>\036\376\332\275y\036\214\276\231\365\"\275BZ#=\007(\r=\362$)\276\201\004%>\257$y=\244p\235>\003[e\276\325\262\025>B>\210\276\272\240\376>\255Q\017\276\352\262x\276?\252!=\267\013\255\275P\374x\276\260\313\220=\245\275\201\277\301\213^\276\273\320\274\2769\271\177\276\315\3512>_\354=\274\266i\214=g)\271\275\335\007`>\347\035\207\276>\313\363=EG\022>G\217?\276H\371\t\276\345~\007\276\214\363\207\276/\372j>\2407\225\274\365\314\334;\362\260\320\275\254\342\315=B\317\346\275\013$\010\276\227V#>/\243\030>f\276\303\275\3642\212>k(5<\331\263g=\2611\257<i\000O>\r\277\3769\002\232\010?/\372j\276T\343\225>b\3631>o*\202>\332\311\340\275\014\351p=\362wo<\257_0\275\227\312\333=\273\230\346\274\327iD\276\205\353\321=\317\331\202\275\332\256P<\250:\004\276\300]v<X\377\207>X\252\213\274W\261x\275\345d\302\275\340\234\221<\017b\007>\326V,>\026\336E\276\315X4\276\344\242\232=t\357A>\371\024\000>:\222K\276\233\003$\276j\373W\276\006L\360>\241H7=3k\311=\036\251><N(d>\254\2151\274\256\365E\275\356Z\362\276\352x\274\276\235.\013\276\013{\032\276B!\202>Ef\216=I\205\021>(\270\210\276\356\353\000\276\005Q\367=\023\270\205\276,D\007=\353\344\014\275F\010\017\276\342\257\t>\244\031+\276\330\236\031>\244\210\014\276\262\324\272=\211\352\215\276\220\244\244<F\323\211>\356=\334>\t\215\300=\207\030\257\275\251\373\200\276V}\356\275\036\300\"\275\255&\231;\030\262\n?GZ*\276\"\340\260>\344\272\311=R\325\364>Y\300\304\276\035\311\245\276\374\306\027\276\263\322\364\276\211\014+>3\033\204\275>\\\362=\240\211\260\276\312n\306=\rl\245>\336T\324>\026MG>\201\354U\276\271S\372\275\342\311n\275Y\213O\276\007\360\226>\r\3011=\001\030\317=p%\213>\374o\005\277O!\227\275\230\2107=\024\350\323>V\323\265=p_\037?\274A\224\275\216\225\270=\224\373\035>U\300\275<\037h\005\276\'\372|=E\022\255>\322\216\273\275zpW>C9Q=\264qD>\244\344\325=c\356Z>z\252\263\276_\265r\276EH\035=To\315\275\004\377;>\030B\316<m\342\004\276\t\033\276>\302iA><\013\214\273u\002\332\275\257%\204\276\346\3146\2756v\251=\344K\310=\373:\200>b\025/\276\264\345|>@\244?\276\316\027\273\2750\332#=:@\020>\370k\022>~\214\271\276\365\326\200\276\303d&@\264\002\003\276\341\264 \276\366\360\345<\010\324\023:\312\211\346\276\013\322\014\276\002.\010\275\036\212R?\026\373+\276\013\265\346=e\001S\276\362\014Z\275\225\372\r<\rT\306\276\232\010\213\276:\333\355\272\017\361\217=\323\244\324\275T\000\034?q\311\241\276\300xf\276i\251\234=\354\206\r\276ms\243\276\035\310\272=^\021<>!\254\306=\274\\\004>\256\022\014\276P\027i\275Z\273\355\274\005P\014\275\032\245K\275#\276\023>\007\010\226>^\022\247=\337\2119\276\223\251B\276c\264N\276B\316;=\257\224%\276\356\010\247>\275\304\270\275\t\337{<\331Z\337=\376}\006>\005\335\036\276\201C\210\276\014\002\353=\221\320v\276\311\216\315\275~\306\265\276\271\337\001>\270 \333\2747\272\224\273\231G\216\276\035\224\220\276\324\016_>\327\300\326=R\006\263;\021\374\337>\241\241?>\026\301\217>\021\214\303\275\303\273\214>\270;\353>ke\">-\005$<\354\335\037\276\341(\311>\004\037\303=0\r#>o\r\354\2750G\317= A\361\275\314\227\247\276\346y0?B&\351\2768\276\206>\232?\306=\2338Y\276\2551h\275\273\233\'\276\177\274\207>i5\344=\311\036a=\302\027&=+\301\002\276`\224\240\275\227\345k\2744\020\253\275\261j\020\275!\315\210\276\263)7\276\302\022\257>\216Xk\277\227\344\200\274\325>=\276\225+\034>\206\033\200>\241-\347=\250\214\337\276%X\334=\212\002]\276\244\344\205\276\n\327#\276\247t0\276\263\230X\276\330\357I\275\273c1=\243\001<>\270\351\317={\332\341<\007\353\237\275\n\240\030=\\\000\032\274\374r\346\274\341E?\276l\225\200=Xs\000>{\300\234\275\233r%\276\224\331\220\276V\361\246=K\345\r>\350\207\321\275\344f\270\274\232\010\033\276j\301k\276\313/\203<\024?\016\300p\353\376>\014\002\373>zp7\275\\Z\215<\026\023[\276\374\343\215\276\304%\247=:\314\327\275\n\200\201>\230\372y>[\261\337>\304\261\016>\217S\364=\270uW\276K\037\332\276\244ng\275\021\254*<x\227K\275\013)\017\277\005\250\211\275\2721\035\276t\307,;H\277\375=i:[\276\354\027,\276d\0369>N\362#\275\336qJ>\313\332\306\275\312\375\316=K\037Z\276YQ\003\2752=a\276)\320\'>;S(\276W\350\003\275d\261\315<A\202B>D\300\301=B&\331\275\305U\325\276o\360e\276TR\007\276Y\206\370=2wM\276`\345\200\276\316\252O\276\017\177\215>\206\003\341=\351`]>~\2149<z9\354<\341&\243\275|a2\276\210\3275\276\\=\347=\234\242\203\276\363\312\265=\220\024\321>!v\006\276$\321\253=\224\207E\276\372\233\320=\332\033\034\276Zd[>\206Zs\276+)A\273\341\321F\274|\324\337\274\016\202N\275\001MD\276\214gp>\313g!\277\273\320<>\224j\177>\200`N>ep\024>\374\030\243\276\247\006\232\274\027\202\334=\025\306\266>i\035\325\275\210\201\216\275\"T)>D\372\355=%\257\216\276\377\262;\275\200\324\346\275w\2419\276\313\333\201\276N\177\226\276]\247q>R_\226=o\201\264>\230\332\222\275\013\265\006>[\266\226\276\306m\364=\340\363\003>\037K\337=\021\036->\324e\201\276.\220\340>s\200@>U\366\035\276\233Z\266\276s\021\337\275\206!\362<\227\250\276>\247yG\276e\247\237\274\036m\254\276\271\215&\276\t\271\234:UM\260=&4\311=Q\203\351<\211\230\222\276R\233\210>H\247.;\013Fe>\003C\026\276b\276<>_$\364=\333P\201>\230\3729=\'k\264=dX\345>\r\375\363>\003\355\016\275\355\202A\275\371I\025\276\004\255(\2777\246\'\276R\325\204>\361\021\201>\210\200C\276\347\251n\276\302/\r?\021\307\232>o\272e\275S\327\220;\266J\360\275\215]\"\276HP\034>7qr>\360\2775\276\330\266\010>\344\275\n\2762\311\310\276\213o\310\275\350\371\223=c\230\263\275\3269&>$E$>\2201\027>\213\246\263\276h\221M>\n\243\231=\263\267\264\275\365\204\005>\203\372\326\276\344I\202>\276\207\013\276\231\r\022>\334F\013\277\373\005\333\276\376+\003?\374\030\323?Y4]\276X\347\010?p\266\t?Bx\024>\036\026B\277\254:+\275O\036\246\2766\315\353?\210\200\013?\376e\307>#\202\261\2757q\222>\361\364\272\276\240O\004>\256\232g\275\256\022l\276\257\353\367>m\377j\276\005\250\001\277\377>#>\315\344;>\202\034\224\276\373\350D?r\376&=\321\256R\277\324C\224>\r\251\202=\247w1\275\343\210\025>j\3369\277\020\351\207\276\235\205}>\222\\>?\340\332\251=\303\rH\2773\376\375\275\022kQ>8g$\276t^C\276\004V\356>77f>\270#\334\275\010\313X\275%\004\313=%#\017?FC\306=\261\247\235\274\260\003\007>\3539i>W!%\276\263A\206>\250\306\013>\276\207S\277\253\t\342\276\217\307L>bN\260=\236^)?\260\217\036?;\001\315\275^\272\t\276\330\323v?\314\264\215>\275\373c>\001\336\242>-\262\035\277\360\205)\276A+\020>\301V\311\276y\\\324\274\227\312\373>?\221\307>:;\031>\362\265\007>9|R<\311\350\000\273\331=\371>\005\305_?&\215Q>\225\202\016>j\205\211\275s+\004\275Y\213\017\276E\rf>\207\030o\275\026j\r\276\241\326t\276g\0174\276\243X\256\276\224j\257>\t\371\340>\254\250\241\276\336\216\200\276\260r\020\277\230/\217>\317\367\203\276?\306\304\277m\347\353>Y\027\207>\302\241\227\275%z\031\276b\326k>*\r\353;mW\250=\020X\371=F\323\211>\341\264@>N{J=\310{\005\277\276\023S>\002\274E\275E\330p\276I\021y\276\257%\004\277\313\363\020?}\262\202=\247\226-\2761\353\305\275\301\342\360\274\223\375s\273\033\365\020>\"\032}>\363\002\214\275G\346\261\276\256\r\025\276\376C\022\277\221\320\266>\213\246\263\276\332\341\357=\203\206\216>\034\010\231>6\310D?\007\353W\277\033\201\370=\314\007\204\275+j\360\276\225}w\276U/\177=k\232w=\2652!>\006d\357\275W\317\251>\267E\271>\372\355\003\277\274\313\365>\t\247\005?\273\n\351>\010\245\3659\3231g\274\262/\231\275\335\352\271\275-x\021\277\353\305\220\276\326R@=@\336\033\277H\304$\277p\356\257<\334ci>\250U\364<\372\n2>S\350\274\2760G\257>\267\n\202=v2\330\276\277C\241>\370p\311>LkS\274\302\370\351\274\336\310\\\276\273\0170\277O]\371\275\373\\\235>A\232\361\276\257%\304\276\335^\302\276\271\374W\277\257\353\267>8\3334\277\211\322>\276\251\023\200>\200e\345=j\331\332=\2003\347;o.~=l>\016?\027\232k>\0015=\277\\ a\276X\347\250\276\027\016d>\273\2705?]\334\246>TR\347\275\354Q\210\276\252C\256>\3745\211\276\254\034\332=N\227%\276A\232\031?\005\213c\276\022\024\377>\242\356K?5F+=Yni>\r\212\346<\3544r>\210\330\300\275\302i\241\276\016g>\276\255\335\306\276\313-M>l\004\222\276\273De?\325[\223\276\033\201\310>3\033\364\276\n\277t\276]\376\203>\020\351w>\212\002\335>\r\303\267\2762\254j?bJ\244>|\201\031=H\033\007?AHn\277\375\273\276\275\214\363O\277d@\026\277\202\377\375\276\010wG\276\222\"\242>\324e\361\275\350j\253>.\004\271>\323\023>?\213q\036\277\360\334{>\211\014\013\276\360\212 >6\253~>\341E?>\027\202\034>eR\243=\314]\213>J{\003\276\242(P>.\034\230\276\323w\310\273QN\024\276$\t\242\275\tO\310=X\347X\276Y\243\036>\315\006Y>\334\200O\276o*2\276\277\232\303>\024\"`>P\215\267?\275\035!\277\341E\177>s\272,\276\336\220\246=J)\350\275v\033\324<\000\214\367>4\2007\276\224\023-\276\035 \000?Wx\027\277Q\367A>\251\366\271\276\300>\272>A.\361\274P\252\375\275(~l>\211A@>\022N\013>\004!\211>l\354\022\276S\226\201\277\202\347\316>\212\037\243\276S\\5>R\270\256>\231\022\t\277\036\371\323\276\024\260]=\024\005Z>\352\004\364>du3?zp\'?\016\020d?$\271\234?7\216\270\275\303\240\247\273%#G>k\361i\277\230\300M>\251jB\277\350\0231?2w\315>\352!j?\271\032Y=\204\022\346=\372\355\203\277\200`F?\340\276\022@\261\337S\275xb\266\275\216;e?\304|\031\276\216#\026\277\322R\231>j\206\224\2756\253\376=\360\334\273>\260\376\337\276w\333U\277\311\037\314>O\036>\277W`\010\276dX\305>\304\353\372=\"\211\236>\301\255;>f\210\263>\374\251\321>\005\300\030?\022\024\277\276\232B\347\275\023\017\350\275\306\304F?\032\335!?c\177\331\276\237v\250>\337lC?\230\372\231\276\317\275\267\276!\310\241\276=+\311\275\205\266|\276 \014|\276\213\032\024?p\315\235<\010\254\234\276t\265\365>\336\005\312=:Z\225\275Zd\233\276g\233+\277\225\232m?\305=V>\336<\325>=~\317\276\224K#=\211)\261\276W[Q>\260\276\2529KYF\276\350\366\302>=,\344\2762\311\350>\205\316+>\217r\220=\026\030\322>o\273\000?e\215\212\276\017E\031?\341\013\343>\201\354\365\275\302\372\037>s\273\227={\024\206\277\202\347\006?\036\300\"=\262K\224>)\226\353\276\031\312A\277\354\331\263=0d\345\276\231\323\r?\035\346\013\2776\253\036\276Y\335\n\276Q\243\220<\255i\036?\037\277\327\276\n\272\355>\315X\024?\312\246\214\276.\346\347\274Ral=\2407U??\304\006=\317f\365\277\270\"\261<\002\324\324\275\254\305\307\275\375\023\374>t{)\276\256\r5>\266\363\215\276\263A\306>u\331y\273\211\352\r\277\274\263\366\276\300&\273\276L\032\263>\211\265h?\232\006\005\275\020\351?\277l\317l\276\242]\005\276O\257T?\177\373\312>\245\275\301\276 \357\245\276lCe\276\233\311\207\276\207\371\322\276\207m\003?_\007\316=f\367$>\323\336\300\276\003\354K\277\235c\360>:@\320>al\021?\026j\335><\335y\275\016g~?\322\373\346\276\377\351\006\275m\377Z\277\027\232\313>{I\343\276D\213\274>\010\217\306>\230\300\215>\036\247x\277\337\025q\277\244\252\271>\330G\227>\252\361\222\276Y\372\360\276|\230\275;*9\'\275\266\020\034\277\037\277\037\277I\327\234>\221\233\261\276Y\300D?M\0254?JAw>\037.)\277\254\312\276>\021\344\200\276\334-\311\273zS\241>\355\201\026\276\325!\227\276\276\366\314\274\253x+\277\003\354\363>\270;\213\276\035\224\020>\345^ \275\363\001\241=\312T\211\277\204d\321>C<\222\274J\007+>\226>D\277\366(\004\277@\366Z><K\220=\245kf?\243\004}\275<f\360\276y@\351>\010\224\255>\271\307\n?\232%\301>\272I\014\277\363\223\n\276\265\246\371\275\313\363\240\276\030}E\277\202\342\367\276\263\265~\276S\320\315>\365\276)?\330\236\331>\270XQ=\311v\236\277\\ \361\276\366(\214\277C\220\323\276\332\037\250\2744.\014\277\256\201\255>\017\227\004\277\313\2763\277\214\020&?\257w\237>\325\262-\277\307.\t?x\2306\275d;?\276\377[\351\276\306\371\333=l!\230\276\014\312\264=1\227\264=@j\363\276\006\2015?\324\231\233\275\356=<>\212\001\022\275\217\3373?\324\361X\277\352\3544?\347\000a\2764L\355\274\027\2671>3\026\025?\273\355\362>\321\352d<\240\375\010>F_I?<\367\036\276\376\016\325\276\211\230\022?P\001\360\275\323j\010\276\267\227L?\316S]>.\034h\276K\345\255\276!vF\276q=j>\204~&\275i5\204>\371\024\220\276X\347\230\276\314\177\250>\323\331\001?\201\004%>\025\035\t\276\324\232\246>\200e%\276\023\2705>5\265\214>\220k#>\244\3028>\373\350\304>\377\312J>\027\3615?c\177Y>z\337\030>\325\225O\2766\223\217>)\320\347=\r\375\023=(\017K>J\014\252\277\235hw>{\024.\276\263\352\363\275\2505\r>\323\336\010?\330\365\013\277\313g\351>u\345\013?\214-\204>827?H\304\024\277\264\345|\276\342\006\354\276\023\326\246\275\006*c=U0\352\275j\244\265\276\2235\252=\032\206\037\277\317f\245>x\227K?x\356]>Y\027w> h\273\273!<\032>\375I\374\274\330\020\234\275^\235\243=4\364O\276\230/o\276\237<l\276\311q\347\275\235\021%@\251s\373;>\355\320>{h\277\2757\377\217=T\0352\275O\005\334<\367\036\216>\275R\016?\204\273s=Z\273M>\331B\260\276\360\247\006>\252\016Y>\025\033s<\026\336\345\275XV\002\277\270\222\255\276\036\304\356\276\204\r\217>\024\257\222\275\323\244\224\276\340\204\302=\370q\264\275\273\264a<\250\030G\276v2\370=5\357x\276<f\200\276L\303\020>i\306\">\314(\226=q\347B<\2760y\276\'f\375=\275:g\276\350\237\260\2766\037\207\276\235\021\345=#\370_\275\004\346!\2740\330\315\275|\270\364>\277\013\273=\311\345\277\276\033\365p\276\225\016\326=\366#\225>\275\214\262\276{\2405>\031\377>\276\007\323\260\276V\016\355\275z\252C>A\361\343=O@3>\351\016\">\341\324\007=\317\240\341=7\340s>#g\241>K\352\244>\340\241\230>\367Xz>\370\210\330\275j\373\027\276\322\035D=Ll\236>H\341\372\275\t\3767\276NbP>\217\3056=\320\270\020\276V}N\2761B\030\276\026\334\257\275\217\344\202\276b\363\031?\016,\307\275Q\245\346<\323\274\003>\021\252\324>8\363\313>\365\326\220>uY\014\276\371\367\211\276\0162\021\277\0358G>1\266p\276\331\353\235>\024\"`>\257\223\372\274p\261\">\027\237\">$\271<\276]\304\027\276\023\017H\277\347:\r?\256\266\002\276\005Q7>\235hw\276\246\270\212>!\007U\277_$\324>\370\0317>\271\3417\275M\274\243\275\316\214>\275\306\371\333>\324}\200\275\004\342\265>\374\000\324>.\220\000\276x\013\264>\352\222\221\275|\234)\275\2554\t\276qZ\340\276<0\200\274\237\310\323=\364mA\274\322:\352\275\237\253m>Yi\322\274\345\320\322>,e\231<\341E\237\276\356B\033?h\\\020?+\366\327\275\232\036\271;\246\233\244\277,\202\177>\"\304\225<\260u\211=\3539\t>%\025W;\272I\374\276e\302\017\276c\177\231\276\216[L\275\336$\002\272\000\306\263>Z\022\240>,\362\353<3\026\375\276<k\027\276\277`w\276\335^R>\360\205i>0dU\2766\223\257\276{\273%\275\223\337b\275\262\272\325\275b\326\233\276&\036\220=\010\346\310\276^\016;\274\003}\342\275\244\374$>\372(\203=\021S\"\276\342\006\\\276YP\270\275cz\022\277\nK\374\275\250:\244>\305\003j\276\262K4\276\243\217\231\275n\337\243<\001\301\214\276\257\316!\277\3711F>fI\240>%\257n\276\224\210\260=\\r\034>\315\311\213\274%\222\350=@\336\373>\220\332\364>\317\203;\274\271\302\253>\252e\233>\251M\334\275\275\032\200\275\224\023\r\276\033L\263\276\334)\235\274\344\332\320=E/\243\276\235\235\014\276f\203L>\327\025\263=WC\"\276hx\263=\204\327\216=ToM>\354Q8>PSk>\010\002\204=\245\024\364=\341zT\2761\013-\275\377\225U\275\346\353\262=>\355\240\276\n\327\343=\243#\371=\013F\345=-\n;\274\345\355\250\276\221\270g\276\211+\302:bi\300=\273a\033>}\350B>\230/\257>\251\331c>:\006$>\211\230\322=\2451*?\262\200\211>z\307\231\276e6\350\276\316\245X>e\344\254<\332U(\276\205\316\313\276\03175=\374K\034\274\334\2355>\353\250J>\\r<>\322\343\347\276\026\366\224>\321\226\203>\267\321\220\276s\331h\275*\343\337=\027\267q\276P\344\t\276%@\235\276\310^\017>\336\002\251>\211A\000>\337\032\330=7\340\363\275fI >!\037\324>\346\350\021\276\177M\026\276t\007\361\275z\031\005\276[\320\273=\355\231\345\2756\260U=1\353e\276a\306\224\275\217\344:?\363\037\n\277\235c@>\365-\243>$\264\005\276\\\252\222\275\362\226k\275\001kU=7\030\312\275\004\312\036?\016\363\345\275\267\356F>Z.\273\275\306\334U\276\247\351\263=\265\025{\276\243\351\214>E*l\276\314\177(>h\263\"?G\217_>t^\263\276\023\017\010>A\361\343\275\243s\276\275\3711\206=?\377==nQ\246\276\360\212\260>\340g\034\276\037\021\263>\324+=?*tN?,\202\377\275\347\214\350=\305 \300\276Z\365\031\277t\322S\277\346\311\265\274\020z\276?\263^\014>\305\033Y\276\226C\273>Mg\367\276\344\240$\276\242\361\244\275p%\033>\303d2@\340g\314\276\211\322\036\276\014 \234\275\025t\333>\205$\263\275*\343_>L\340V\276\207\212\021>h\313Y\276\264\002\023\277\r\032\032>\367ZP<E\022\315\2763\334\200\276\037\327\226>\037\277\227>\257@\364\274\347\373\351\275\3542|<)\355\335>\242~W=\311\002^\277\350\366\202>\2505\315>,(L=\255\243\252>k\016p>\312O\n>|\271\017\275\376\322\242=N(\304\276\357\251\\=[\316\225>Sz\246\274\026\373\233>*\251;?\2068\246\276M\276y\276\"\213\264\275\231\323\345<R\357\251=Z\365\001?5FK>C\347\365>\3500\277\276;\374\225>\355\236<\276\273\270\335\276\014\352\213\276Mg\227>\314\231\255=n\246B=\253\223s\275\3328\202\2763\033$\276\274\313\225\276\333\242\314\276C\305\370\275p|-\276\241\326\364\276\005n\335>Sz&<\017\321h<\304_3>?\214\320=o\267\244<\3436\"?\310\007E? \322\017\276\351`\255>\243\351\354=\210h\204>\336\223G>j0\r>h\320\020\276\033\273\364\276R\233X\276\306\277?\277\314b\302>\312\246\\>[\034_\273c\013\301>\221aU\276\253\tb\276\370\210X>\013\357\202>\256\021\201=\376\324\300\277\232\231y>\006F\236=\340\237\022=`\352G>\336\223\007\276V\360\273\275\031\004\206>X9t=\203\333Z=\035Z\304=\030L\262;\241\333\253>\000\221>\276\353VO>{\330\253=2r\026\277\343k\257>\225~\002\275\374\374\367<\347\251.\277\270tL\275CV\027\276\244\250\263<\177O\314=\035s\236\275\236^\351>i\306\342\275\370\337j>\315\351\n?\304[\247=\243;\230>]\247\021=\327L\316>p\353\376\276\361h\203>[\231\360\275\370\337\232>\331|\334>b\025\277\276\013\322,>E\236\224\276\242\177\n?\376H\241>\263\265\236\276\n\242\256\276\266\200\020=@\373Q\276\230\372\231>\301\255\033>\'\244\265=\364\025\224\276Di\017>\226\225\006>n\300g=B\225\032>/\250\217>P\373\215=\216;\205>\023\n\201\276x(J\276\235\205\375=h\"\254>\260 \235>v6$\275\244p\215\276\036\033\241\276\"\253\313\276\007\353\177\276\334)\r?\361\364j>\275\251H\276I\205\261>\221\'\331\276\377\312\n>!\313\202\274\324+e\2764\021v\276\014\260\257\276\207\371\002\277R\'\240\275\351\324\325\276\244\0326\275\217\031(>Q\2755\275GZB\277%@\315>\341\262\312\275\363\216k?\3171@\276|\270d\276)$\031\275\263^\034\277Z\r\031\277\342\314\277\276\367wv=r\2474>;\337\317>\241h\236\274\"o9\275\221\017\272>f\332^\276\376&\264=\'\024\">\324\232\346=\032\213\206\276\352\260B<\340\363c>\2235\352\275\177j\254>5\t^\275\232\260\375<\205\0108\276\205\224\337\275\311v6?0d\265\276\362\355]=\000\214\327>\373\221\342\275\316\337$>H\0260\276&\214\306=\236\230\265>\244p\315>\372\325\234>\204*\245\276\212\260\301\276&\252\207>\275n\261=x\264\321\2764\205\336\276<\245\243>\254\311\023\275\312\303\242>\223:\241>h\221\235\276\nJ\221=\204\201\307>\352\354\304>\265\211\203>\374\232\033\274\341].>J\230\251\276\t\341Q>F\224\366\275\t\372\253=\372\325\034>\020\257\003?\335\352\211\276\356\223#\273\200`.>\323M\">\237\223\276\275\003\354\343\275\237\310\323\276\244SW\276q \344\275\004\255\010\277\357Uk\276$\237\262;\'N\356=\340JV>\274\256\317>q\033M>|\355\031\276\324`\022?\350j\213\276R\'\240\276\367\3518\276\300!$\277\177.\032\275\376U\221\273\024\"\000>\242(\240>pw\346\276\306\242\351=\003C\206>;\307 \276\262\272\325=Z\022\030\277\026\204\222\275\347:\315\275\377 \222\275\326\305\275\276\275:g>\306\304\346\276\023\235%=\037K\237\274P\374\330>\245\203\265\276M\362\310\273\243#)\277\252\324L>\013\014\271\276\253\"\\\274\020\222\035\277\327L\236>\2652y?\271\374\267>r\032\302\275\257\010\376\274i\340\307<l>F?\327\366v\275\230L\005@\207\304\255>4\205\356\276&\030\316\274\331\224\333>z\302\022>\027\2671\276\222\226j\276=a\t?\006*\203>(D\220\276\rl\245\276L\375|\276O]\t?\262hZ\276\357\2228=?\251\246\276x\013\304>\376+\333>\'f\235\276\232\010{>\331=\031\2767\306N\275\347\343z\276EK\236\274w\241\031>\265O\207\276sc\032>;\031\254\2768\363\003?j0\315\275-\317c>,+-\276\030}\205<\3062\235=Y\243\276\275Hm\">\006/z\276\343\031L?\252\267&\276\317\203\273=\032\2466\273\223\306 ?2=!=N\264\333>\354Q\270>+\244\214>ZEA\272\231\2025\275\241\370\021>\235\276\236\275\016\335\354\274\266\241\002?\240T\213\276\230\335\343\276R\266\310<X\312\222>\352\347\255>U\331\207\276\202\220\254=)\"\203=\203L\362>\202\220\314\276\346\350\341\276\1770\020>\"\032\335\275\267b\007\277\204\273\223>\317\205Q=bJ\344\276\032Q\272>\021\000\234<`\345\320\275\374R\177\275\nh\022?\355\266+\276\003\t\312\276\177j\264\277\003\375\317;N\177\226=\353\250\272>\220\203\322\275%z\351>\363\216\243\276\020u\317>\333\371\276\276\356w(>\306\212\"\277\372\270\366\275\330\r\033>\245Ii\275\230L\265\275W[\241>\225\236\211\275\202\217\201=\350\242a\275\323M\016\300n4\000\276\334c)\276%;\026>\333\212}\276\211_\261<:X\237>\340J\016?\'\026\225\271n\336x=\'\240)>\'\275\357\275\264\345\274=\234\212\004?\276\023\243\276\032\2435\276\225H\002?Uj\226\276\022\367\330\275\353\220\273\276\177\244\310\275\331B0\2760LF>\255L8\276(I\367>O[c=\216u\021>}\\;?CT\301\275<\024%\276:\222+\2764K\342\276Z\r\t>\270\006\326\276\247\226M>:\351\035\276s\327\242>F\010O>\267]H>1%\002?>\"&\276x\271\210>\2554I>\341~\240=U\022\031\275?\213%\2759\3564>\202s\206>\252\232\340=k\016\020>@P\256=\334\236\300\275\177\336\324=\242\356\323\276\204a\000=~p\236=9\321\356=\237\253\r\276nR\321<#gI\277\211\230\322>G\003\370=\334\364\227\276\315\254\205\275\327i\224\276\202\342\007\277\270\344x>\350\277\207\275%\222H>\211$:\2764.\\\276\255\333\240\275\302/\225\276xz\205\276f\2402\276*\3069\276\225H\262>\177\023J=\3274\257>\014\315u>\326\255F\277\3171\220>rm\230>\334.4\276\216\006\360>\224\336\267>*t~\276:!t\275\240l\272>%\256\203\275$\321+\276\336va\276\267\013-?\027\324\227\276\356\316\212>2w\335>i\306\302\276Lq\345>0G\237\276&\215\321\275\036P\266\276\222?\270\276\337\303\245\275\261\372#\275\"\260\315;\177\207\342\275\216#v\276k\324#\276Fq\330;=\270\273\274\203\3726?\300\314\267=\311\260J\277\355\266\253>\346\313\213>\010Z\001\276^\364u>|,}\276#\277\376<\\\001\245\275\221\362\263\276\t\341\321=\315\257\206\276\334\235U>\212Y/>R\355\223>i\247\206\275d\2221>\236\007\207\2768-8\276\231\236P>\241\020)\277\016\243\200\275H\334\303\276\221\nc\275;\201\372\272\301\220\025\276&\031y>AH\026>\341\177\213\275\257}A=\252\014c=TR\227>A\364$<i\343\350\276\343\245;\276|\233\376=@\023a\276\032i)\276\320\362,\277\274W\r>\337\207\003=\307h]=\252\202\221\276\031\034\005\276\265\213i=\331\230W<0\017\271=\266\020$\276\243;H\276,+\275\276\356B\263>\232Bg\276\317\240\241>3\371f>v7\317=\301\342p>\227\377P>L\245\277=\372\270\366=\325>\275\276\256\360n>4\277z>\342X\327=\212Y\357\275z\307I>q=J>3\226\037\274T\214\013?\332 \023\276\361F\006\276\017C\313=%\222\010>qr?\275\336\002)\276\005\243\032\277\205%\006?/\300>>\237\253\355=ni\025\276tF\024\276(\325\376\275J\322\265>\313J3\276\302\205\274\275Q-\"\275n\243\201\275U\301\230\276\214\333h\275\366z\007\277\0216<>J\007+\276\360\304\354\2755\014?\276>y\300?\221\'\311\276\267&]<\030>\242>\223\362\244;\3328\342\275\357U\233\276\241\020!\276_\230\010@k\202\330\276\210d\310\274a7l\275\371\024\220>Yn\211\276 {=\275h\316z<\341]N\276\272\273\256\275w\326\356\276\215E\363>\tPs\276\267(\023>@j\263=\251.\240\275\242(p>\244S7>\030`?\276\323\237\215>\270\344x\276\232B\'\276K\223\322\275zpw\276j49\274]7%\274\221\355\374\275\320\325\026>\306\371[>\341E?\276\003#/\275Z\324\247\274\001j\212>\"\340P\276=\231\377\274\260\311z>W@!\275\366@\233>\355\360W\276\245\203U\276]\026S\276_\014\005\276\352\314==\341(\371\275\205^\177=f\273\302\275N\321)?Q\240\337>\365\363F>\202\034t\276S?O>\314@\225>\301\213>\276\333\023\311:\212W\031=\357\341r>\206 \007\276\273\3629>\367\313\'=r\030\214=\261\304\003\276_\014\345\275Z\201\261>\367;4>\323\237\215\276\r\253\030\276\026O\235=\211$z\276\250:\304\276\357\376\350\276}\350\">\233\033\303>\217\374\001\276z\374^\276\324\324R\276\021\031\026>\351C\327\275\212\037\303=\223\375\363\274y]\237>e\337\025?\312\211v>\260\254\304\276VG\216\274m\250X>\222t\315\275n4\200=\247\221V>\213\375\305\277P\344\t\275\302K\360\274\316\215\211>\276\331&\276S\263\207=\275:\327\276\306\205#>\330\323\316\2766\036,=\202\034\024=;\307\240>\316\245\230>\001\244\346\276K\223\"?\302\335\331=\253\004K\276\256\201m>\222\342\210;\025:o\276\022\024\377\275>\320*>\032Q\232\275\207P\345>RD\226>\263)\207\276\315\222 >\"9\031\275\000r\302<\023~\211\276\232\261(>\205\231\326>\2029\312\276\366\013\226>i\252\307\275K\260h\277\256\323\210=\214\204\246>\270\2243\275d:\224\275\361hc\276)\256\252\275\242\356\003\276|}\255\274\213T\230\276\337\025!>\227V\003?W\226(\275\2406\252\273\210\205Z\276\2340\201\275\330\360\024\276j0\235\276\305\346\343=\224\240?<\275:g\276-\t\320=\212\223\033\2768\333|>&q\026\275~\035\310\276\227\377P=\370\215\257\276h\316\372\274\034\321\275\274p|\355=`\223\025\276\263\230X>\207\250\002\275\207R\233=ni\r?}\005\t>\235w-;\024?\246>}\221\300>\332\001\027=\341\r\311\275\254\377\243\276\354\027\254\276Gq\016=\307\360\030=\230i[\276\234\334\017\276\332\254\272\276uvr\276tA\255\276\350\365\'=\007B\202\276e\211\316<\214\017\223=\266\241\222>\\q\361\274\n\022\333<\002c==@\373A?\243X\016>j\373\017\277\0051\220\275\365\326@\276\034\360\251>\014\002+>F\224V\276G \236\276\354L\221>\177\023\232>L\377\022=-`\262\276\202\034T=\033\r\340\276\273\177\314\275\355\360\327=\307\020\240\275/i\234>ZGU\277\255nu>\274\350\013?\341\227\032>Z\201\321\276\211\230\202>\331\261\321\275n4 >\020@*>\236)\024\276h\221M\276\244\030\200\275\265\243x=\\U\366\275Ab\273<\251\035\264\2734e\247\274\020\3141\276\010w\227>\002\274%>\237\260d>\341\227\212>\243\351\214>\223\035\033>\252}Z>+\331\021\276l\262\266>\324\2707\275W\t\226\276\374\251\361\275\252H\305\276\013c\023?h\"L>t\007\361\275\247\"\025\277\242\356c>\217\215 \276\026\366\344>\346y\360\275J`s=\262*\302\275\305\254W>^cw>(\270x>\335\265D>\243;\010\276\241e\275=\000\035F>.\004\371\275J)h=\263AV?o\022\003=\302\3003?\316\031\321=B[N\276\006/Z>}\320S>\244\302X\276\0325\237\275\214\326\021>:X\237\275.\032\222=\354\301\304\275\372\362\302>\226[z>\275\000\373\275\010r\320\275\241\370\021\276$\326\222>\346\\j\276\1770\320>Ot\335\274ni\265\276\271\306\'\275v7\017\276\376\265|=\243\004}\274Q\366\026=\233Zv\276\025\251\240\276\352>@>\217\215@?\340\326}\276\307\2728>#\276\323\275\214\020\336\275&\2527\276vT\205>\005\300\270\276Vd\224=}\221p\2765^\312?\305&\350\273p\010\245>A\267\267>\231\273\346\276\267(\363\275`\347&<\323\266\253\273\204\236\315?\264\345\274\2763\376\315\276\247\007\205\275\204\330Y\276\222\263\240\2767\303\275>\215E\023\276\313\021r=\265T^\276\2201\227\276*W\370\274\311\223\004\276BF\033;\200\272\301=\371I5>\367X\032>`\260\273=\237Yr\276\247\313B>U\367\250\275\245\203\245\276B\354\314\275c\227(\276\250\214_>\355\273\342=\207\2070=j\301+>(\232\207\274\304\314\276<\360\205\231\276\207\371\362=\342X7>(D\200\276~\0002\2760\236A>\300x\266>`\253\204>\335{\030\277\026\0302\276\315;N\276\367\217\305\275T7\027=\016g\036\276\327\300V>Ed\210\276\240\2118?\320\320\257>\273\324\210=\275o|\276\244\215\263>\221\016\217<\003>?\276\256\273\271\276\352\225\262>\336\253\026>u\315\004\276\2034\003>!\314\255=\300\262\022>c(G\276\274\005\022\276\321u\341<R\270\336\275C\034\253\275\026\301_\276~W$\276\2304\006>\306\247\030\277N\177\026\276\270\222\275>\215b\031\276m\032[=33\363\275\300\347\007\276M\2413>\332\255\345<}\313\024?%\223S\275H\341\332>\262c\363>\274?~>\022NC\277\\U\366\2747l{>\233\346}>\373\221\002>8\366\214=4\021\246\277\215\200\n=\315\261\274=\345\362\177>\207\206E\275\364\373\376\274Y\206x\276\201\262\211>\350\274\016\277e\031\342\275Z\201\341\275\273D\245>\033d\342>>\263\264\276\313\370\327>~\307p\275\347\304\036=\371\367\331\275\"T\t\276\252`t\276\325\225\317\275\030}E>\212t\277=\314z\021>\333\242\354>\300\347\007\274`\310\212>/\243\030\276>]]=\340d\033\275AgR\274\222\350e>\262+\255\275Q\367\001>\007B2\276u\002\212\277b&\233:\215z\030?\223\0005\276\215E\323=[\353\213\276#\025\246\276\373\226\001\277[\224y>\217\245\277\276 \n\246\275\213\211\215>T\306\177\276(I\327\275\177j\234\276\"\032\355\276\275\251\310\274\'\332\325=p\266\271>\023-\231=\223\251\"\276\300\347\'\276\377D\300:=+i\275\235K\021\276\313\234\006\277\343\337\347\275\331|<\276>\226>>\036\371c\276H\304T>^c\027;\'P\304\275C\222\031\275\003\354\203\276\303*\036>\t\247e>)<\310=\270\351o>\364\032[>!\006\232\275\307c\246\275J\230!\277 )\242\276\206\311\204\276\010\346\010\276G\254\265\2765cQ>l\225@\276\240\246V>8J\256\276\007\2613=\267\234\313\276,\271\n=xE\360\275#J\033>\010r\365\273\240\032\237\276\376\267\222\276\303\236\246>\362\231\214=\372aL\277x&t\275q\033\215\276L\340\266>\267F\004\275%\222\350=\201C\010\276\234\341\226>j\207\337>\250:\344=\243\257`\276\237\000\212\275G\254\245\276[$\355;\374R?>\265\250\017\275\222\\\026?\005\250A\277d]\\\2755c\t?\2240\203>G\346Q\276\325\\\356<n\213\222\276WC\002?G\311\353=\022\332\242>L\216\213\276\322\216\033=\334h\240\275\327\276\000=iV\266;\353\305\320\276\236)4\276\230QL\276\255i\256>\234\341\006>\267{\271=|\3620>tC\323\274\365K\304\274\301s\217>T\304i=\221\017\312>\315\351\222\276\343\031t\276 \322\237\276a\303\243\276\236)t\275\000\251M>\371N\014\2761_\276\276\023)\315<\324`\032=\371\206B\274}y\241>[\230\305=\314\321\003\276v7\317>\222\221\003?\232w\334=?\251\206\276\031\003k\274kFF=r\371O>4\365\272\274\037\240\273=\312\032\005?\201\313\203=%u\002?\250\253\273\2746\002\221\276\262KT>\215,2:+0\324\276\"\253\333=\r\211\373=\353s\225\276#i\227=\302\022\017\276\254\342\255>\224\301\321=u\216\001\276\273&$\275\312k%=\342\222\203\275\340\020\212\276\251\366\t>\306i\010=\022\302\263\276\202\305A\276\330\201S>5\321\347<\353q\037\275+\030\225\276<1\013\2765\265\254\276\021#\337;\313J\023?\373\005\233\27633S\276\000\306\343\276z\214\362<\nh\342\276,\016\327>\364OP\276_\321-\275\026\0302\2762\346\236?\"T\251\276<f\340=\013\230 >]P\337\275\013\016o\275\366]\201\276s\004:\272\317f\021@7O\025\277Z)\004\275\325\tH\276\26071=q\033\035\277Z\360\242>\204\360(\276\323\301:\276n\335-\276\375\202\275\276\373\221\242>\216\314\343\275\366\013V>\302\025\020\275X\250\325>\346\014 \2744\200W>\036\247\250\276t{\t>)\355\r\276{k \276g\233[\276C\216\255\275~\304\217\275\301\304\237\275I\235 \276\001\277\206=\332\311\260>k\326\031\275v\303\226\276\2201\227\276\367\311Q=LTo\276$\t\242\275\200\202k\276\243u\204\276\255L\270\275EdX\275,\202\037\276 \t\273\275\267]\310=\357\217\227=b\326\013>\256F\366<\202s\226\276:z\234>\330G\347>\356|\037>>&\222\275[\261\177>\214\326\241>g,:\276\3542\234==\325A>$\013\250>$\326\342=\361\2002>\365\020\315\275]\341\275>\351}c\275l[\324\276\336\037\257>\277\272*=\244\344\325\276\311\306C=\370S\013\277A\237H\274.\342\003\277~\035\250\276\353\377\214>$\1770>\222\347\372\274p\353\016\276E\201~>\\=\207\276\003`|>\231\363\214\275\326p\221<\346\317w=)\226K?\242\013\n>C\220\263\276W\317\311=\256d\227>\210\367\234\275\344\024=\276>?l>(~\264\277N\263\200\275\017\n\312=s\200\020?j\207\377\275\001j\212\276\303\r\030\277VH\371>b\363\221\276h@\275<\246\270\352=`\037=>\221a-?\372\263\337\276O\314r?W\004?>s\343\314\273\250\000\010?e\215\032>>w\202\274\371\275\215\276\253&(>\336\311\207=E\201>>\273D\365<\nh\342\276Q\332\253>[\353\233\276\022\242\234\275\244\210\014\276-\317\003>\202\220\334>\253x\343=E/c>\314\353\210\274\037\021K\277\347m,\275y\262\273\275\245\203\245\276:\351\375\275:\257\261\276\262\364\221\276\212\253*\276\321\0024=\346\221?\276\024\3503>\373\313\316>^\200=\275Gw\320\275]\277\320\276\225\324\t>C\034\353\275\336Y;>\\8\220<\250\344\034\275\356_\001\277\347:->\360\340\'=\330GG>e6\210\276\2402\276\276y;\002\276\242]e\276\\\254\010>\311\345\277>v7o>zpw\276y;\302<\202\312\370=K\352\004\276\014\352\333>\251\0230\276\2304f\276@0\307>\365\276q>\331|\334=&\337\354\275\003[\205\276\211\352\375\276\017([>Q\207\225\274\217ln\275\017\'0=I\235\240\276Z\236\227\276\341\264\000\276/\210\210\275u\223\210\276\007\353\377=YQ\003>;\374\205>\375\333\205\275\027H\300>\360\026H\276|\362\000?0\270\013<\257\353g\277\317f\325=@\301e>\031\004\246>$\271\\\276\362^\225\276/\246\231\274\315;.>\213O!>\035\035\327\274O\257\034\277\343\374M=,\361\200\276l\t\371\275\231G\376=\252\267F\276n\372\303>/\0279\277\262\021\330>\216u\341>P\344\251>\002\274\025\277\r7\260>\302\027\226\276\271\2161=<\275\322=\0055\374\274&\215\021>\366\356O>\007\266*>\263{R\276<\005/\273z\245\014>\342\222c\276#\020\277\276\007\3230>\334\200\317>Z\236\247>o\360%>\002e\023>z\303\235=\256g\010=\354\300\251\276#\022E\275\214\370\256\276-[\273>\rq\254\276X9T\276h\005\016?i\343\250>S\227g\273CV\227\276\242b\034>\034_\373=\020\222\005>P9\206=\025t;>\275\377O\275g\230Z<6\260\345>\326\220\310>]\026\263>\335\315\323\276\255LX>\034%\237>\263x1\272\214\271+>v\340t?t\233\220\275Wx\267>Q\203)>\356t\214;\312\250r=|\357/\275\033\r\340\276\315\223+\275\364\246\"\276\003\224\006\275$\177\020>3\334\000>\300\317\000?\304_\023=F\224\206\276\002\202\231>\305 p\276\256*{>#\025\226\276\356\316\312>\224L\216\275#\204\'\276\206:,<\307h=>\240\303\274=\371\251\340\273\235fA\275l\225\000\2767T\014=\253\347\344\275\033\201h?Gwp>]m%?\001M$\276\305\033\331>/i\014>\031\034\345>u\002z\276\302\335\351>\346\"\216>q=\372?\336v\341\276m:\242\275\tlN<`!\263=R\017\261>\2446\361\275\352\264\216\275\235\021\001@\235\364\036\276\327\302\314=\022\367\330\276l&\237\276\n\327\223>TtD\276\340\234\321>\\=\247\2751@\242<\316\246#=\363T\267\276(\233:?#\363\310>\324\324R>\357\033\277>\336\310|>\342\257\331>\357\254]>Q\313E\273\253&\000\277o\022\323\276\246\200\264<+\333G\275\t6\256\274\264[\253\275\336\037\357>TR\307\275\204\201\247\276o/i>\003>\177\2766\253>>P6\365\276\242\234\230\276\334\201\272<\022NK\276}\226\347\275\212\002]>\352\225R\276\340\326\355\276\376_u=P\302\254>/\243\230\276*:2>#-\005?J\322U\276\206=\355\275\257\006\250\275CU\314=\302\300\363=xE\220>\022\275\274>%#/\277\034|a\276\233r\305>\204*5?\235\205\255\276\027\021E=\360\334\373>\254\342M>\347R\334\275\010U\272>G >>\367\257\334\276\014\007\242>%X\274>\356\261\324\276\333\2772?\322\035\224>\317\201e\274#\333\371\275\004\306:\275\202\255\322\275\334\327\321\276\312Oj>\223\343\016?\204I\361<G\3461>\250:\224\276\335\355\232\275\313\326z?\2652!\276\354\026\201=\n\272\035>\251\207\330>R\233\370\275\363\002,>\335@\241=\177\331\325\277\310\352v>sh\221>jj\001\277\311\216\255>\021\337\001\277\n\326\270\2748\363K>\230\335\223\274P\252\215>2s\001\275\377\354\007\276b\020x\276\225\360\204<\035Yy\274\365-\023>;\304\277=i\343h\276?5\226?z\252#?\225\324)\276%\314\364=\377\347\240\276y\222\344\276\213\3755\277b\363\241>\205\353\231?e\252\300\276\340\202\214\2757\026\024\275\n\364\t>-\354\t>J\007\373>\357 v>!\345G>\352>\240>\246\265\311=\332\346\206\2769\227\002\276\004!y\276X\305\213\276\233X`\275ep\244>A\202\002\276h\320\020>\355\365\356=\365\241\213>R\355\223>\371,\237>\314\264\r\277\320\270\200\276\320~\204\276a\216\356>j\023\267\276\216#\006\277\032\250,>\020\222\035?^\017f=\233\346\315>8\025\331\276\314z\221\276\005P\014\275v\340\234\276\225H\342\275h\263\352\275>\3133>\351\324\265>\261\304\263\276\362\322\r\276J\266z=\321t\366=\210\327\245>D\372m\276\353\250\n>\304\231\037\277\306\334%?\255\335\326\276\010\351)=\325\262\265\276\303*F\277\020\262\254=\032\300\233\276QNT\276\3373\262=\266\326\207\276\0324\024\276KvL>\246D\322\275\002\267\336\276<f\200\275X\310\\=W\264\271<d\351\363\276\262\205@\276Y\372\320>\230\300\315>\202\347\356\276m9\327=\333m\207>\237\310\363\276H\026p\276Uj\366\276\241g;?\361c\214>f\275\350\276\003x+\276\222\\\216\276WCb\276\370\374\220\276\345\360\311<\035\346\233\276F\316\022?\274W\315>\377\317!\276\200\323;\275N\360\255=^\200\005?wJ\007>\363<\250\276e\374\313>Ae\374>\014<\027\276\316\303\211=\021\215\376>4\364\317\275\210\200#\276=,T\276w\204\343>6\253\316>\342\314\277\276\005\243r>\023,\016\277a\303s>tA=\276\005\305\317=M\326\310\276\230n\362\276[\353\233>\203\335\020\276\324\235\247=cE\r\276\330\273\317>mV\r\277\207\212\021\276,\267\324\276\027H\020\276K\332\236;\001O\232\275\206\033H\277\236\322\361\276\346\313#?\276\331n?\310^\017>\306\026\032?/\351\336\273\221\233\021\277d#P>\tP\223=\025\000\003>\351G\303<\314(V>\334\272{>\346\313\333>\016-\262?\037\277\027>g\233\233\276\275\343\204>E\360\237>a7l\276\031\312\t>\327\0279\2772s\001\275C\306\203=\302Q\002\277\320\233\372>@\336\023\277ffF>G\217\337\274\275\030\312\275\305 \360=\035\003\362\275\n\235\327=\334)\255\276\336\260\r?\336Z\246\275\014\352;>\244S7>m\220\251\276\340\333\024>\233\376,>\266\271\261\276A\274\356\276\241\332\200\275\245\275\221\276\030\262z\276Ovs\275\346\313\003\277\005\243\322\275\303\232J\275\002.\310<\202sf>\267\265\305\275\227\250\336=\225\322s=X9\014@77\006\276\361F\006\276/\335\004>\224\023\275\276\243\036B>\202\255\022=9(a\275\304B\325?\263\352\263\276\222?8\276\270@b\276b\206\306=^\200%\277#\0261=3\026\255>\365\204E>\3274\357=\355~\225\275\010\003\017\276\376\017\260<$\177\260>)\313\320=n\334\242\275\3647\001\276t_N\274\263\\\226\275\010\312\355\274\001\023\230>\032\372\'\276\200\232z>\360P4\276\216u\361\274\350\023\331\276J\242Q:\316\245\230\276\205%\336>\010 \325>aqx=\331\227\314=(\233\222\276\001\366\221\275e\302/\276\244\376:\275\260UB>V}\036\277\nhB\276\226[\332\2744\276o\275l\t9\276\3274o\273~\306%?\233 j\274x\264\361\275\r\211\273>\351+\210\275/\372\n>}\313\\>\'NN>\230\335\223\274\372aD\2766\345\n>(a\206\275\242\234\230>\262\241[=\3436\212>\005\246\323<\262\274\313\275g|\277\275^\000\320\273z\252\303\276\"\303\252=\310^o\276\212<\t\2775\357\370\276\001\366q\276\313\017\334\274\261\277\234\277\013\357R?\177<\252\272\223\030\244=\251\210\223=&\374\022\276JbI\275\n\201\274=\016\333&?O2\003\274\n\242\356=\356\263\312\275\261\304\303\276V\324\320\276\006\022T\276\331=\271=\277+\222>4\327\351\275:\311\026=\263\014\351\2770\236A\276\024\004\017\275\006\273!>\023fz>\001\275\260\275\216\222\247\276\267\177%>\313\016\361<(\nt\276\375\202\255\276\227R\227\274\244\344\305>\017\266\330\274\357\346\271>\022kQ>\220\026\347\274\262\023\336<\317\334\303<\362{\033>>\264O\275\330\266\210=\325\312\324>6Y\363>\311\037\014>\253x#>\013\234\314\275\314@\005\276\215\356\000\276\366\231\263\275\266\241\362>\331\353=\276\360\243\232<&S\205>\317\203\233>\033\330\352\276\304\224h\276\217\215\300=\276g\244\275\017G\027\275\300<d\275\336\260\355=r\026\366\276d@\226\276\"\337\245<\212\345\026\276P\216\202=\257\010~\276\342XW\276\251\274}\276\022\210\227\276\275\031u\275<\245\003?\214d\217=\217\251\273\2754H\301<\215\200\n\275\241\275z<J\270\260=\033/\035\276\276j%\276W\004_\276\270;K>\356\261\024>*\3069\276\215\016H\275(I\367>\265\0322>\207\242\200>\013{\252\276\256\201M>\023\nQ\276\346W\243>\032\335)?!\004d\2755)\305>\241\271\216>SB0\275\035\034,=\000W\202\276A\324\035\276N\234\034\275\264s\232\273P\001p>\252+_>|\356\204<\321\223r\275\340\326=>\2657X\276<\240\354\276\262\325\205=\204dA\276\251M\274>\342X\017\277\335\315\023>\375NS=\274\263\326\276\312\0325=m\305\316>/47>\311\002\006\276\342;q>\253E\237\273\027\r\231\275\373\005{\275\225+\034>\235\205\235>~\344\226\275%\351z\276\217p\332\276\263\007\332\275:;\031\275/\336\217<\323\023v\276\306k\336<%@\315\275y\004\267<\017\234\363=\310^\217>\374\336\306\275\303\266\305>\"\033\010\275HR\322<\361\324\203\275O\002[=\206\342N\275\242\177b\2761\231j\276\307\2728>\223WG>!\3158\276\010\004\232\275\200\016\363=\033b<\274Nb\000?S\226\201\276x(\332>&p+\276\2176.\276\356\010g>\031\312\231>U\337\371<yX\350=\236\230\205\276\201\262)\276Gw0>\264\030a\273\366\321\211\276C\036A\274\267\227\004?A\274N>\354QX>\360\242\357>\224\244\013>|D,>\311Y\230=)\313p>\3058\257\276D\243[>D\300\261\276L\032C>\324`\032\276\252}z\275\016O\177?\274\226P\276%;\226\276\377[\t>#J\033>Z\360\262\276\217\250\320<\361\021\201>\220\024\261>\361\272~>I\272&\276\310\315\360=\247t\220=9\356\264>v\211\312\275fI@\276us\261=\3127\333=\004!\211>\311<r\2747\303\r=g,\332\275VH9\277\232\353\364\275\243#\371=\307e\274=\003C\026\277\205\013y=N\321\221>\317\275\347\276\007\360\366>6\315[>\226x\240\276\232\316\276>\364\375\324\276s\242=>]\303\254=\213\306Z=D\300\201>\347o\342\276\353n\336\275\274\005\036@\345\321\215\274-C\\\276\235\022\020\275\254\034\332\275=a\251\276s\272\014\276\017\013\265\276J\014\252?\020@*\276\270\006\366\275\216\036\237\276\326\342\223\276\324\201\254\273\273\233\347\276\367\253\240\275t\007\021>\264\216\352=\255\245\200\274rP\002>N\264\273\276e\3375\276w\021\306\275S<S\272T\000\234\276\341b%\276\237\315\352\275u\217\314=\020z6\276\266g\226\276\271\337\261\276)\320g>\345\362_=Z\203\367<kH\334\275NE\332>\034\323\023>\233Z\366\275\340\271\227\276D\250R\276$bJ\275\341(\271\276@\366\352>$\324L\275c\320\251=\2755\240>\363\377\212=\016\025\343\275\367\216Z\275\'\207\257=\355\272\267<s\017\211<\024\"\320\276U\207\\<\024\350S=a\375\337\275\010r\200\276p|m\275\330\266(>z\374>>\245\275A>\255\335v>\272I,>\353rJ=\331\007Y\275\013\322\274>\374\035\212=vq\233\274\226!\256\276~\030\021\277F%\345>\326Vl>Me\366\273\216\006\360<\274\"X>\033d2>\254\250\001\2775F\013\276t}\237\275r\371\257=\332r\236\2769\271\177\276\374\000\004>\355\231\305\276\216\006\260>\230\243\267>\211\360\257\274X\034\236>\033*\326\276\230\334\250\274O;\374\275\317/\n=\\<<<\310A)\276\020\351\367\275V\324\220>\243#\221\277\314z1\276\364\246\242\276\345\345z\273\220OH=\027\323\014\275\366(\234\276MM\202<\377[\t\2765{`\275_\3228\276\335^\202\276\363q\355\275\373\313\356\275r\374\220\275\371\331H\274\271nJ=\206\003!\276\345\357\276\275\016J\030\276_)K>\245\276,=[B\356\276\026\026\\=\364\337\203\274T\216\t\275(,\201\276l\004\262\276\375\244\032=dZ[\2751^3=\361h\003\276-\010\205\275\213O\221>\311q\347\2755\357\310\277\313\370\327>\214\370\356>[\353K>\251j\002>\232\231\371\276\377\262\253\276\325\004\321\275ZG\265>M\204m>\370\252\325\275\305\376\262>,\200\211=\367[\233\275\345D\033\276w\333%>\'\302\006\276\223\034\260=L\3406\276\005\372T\277\357\313\031\275\212\002=\276\023\270\265>\340\204\302<\020u\237<EGR\276\341].=\237\217\262\274\177MV>~\251\037\276\002\017\214<`\253\204=\321ua<\221\')\276\210\274\205\275\217\374\201\276\274\"\030\276\344/\255=\200e%>\274\226\010?\270\351O>|a\202\276\263\357J\276\0015\225\2764\277\332\275\037K\337\276\247\350\010\276\256\022\234\2768\363+>RD\206<*\211\221\2735\'\217=\355dP\276`Vh=\034\266\215\276\210F\367\275\274?>>_\014%\276^\330\232\274\312l\260=\207N\017\275U0\352=`\315\241\276[_\004>T\345\233\275A\324\255>\321?\261\2765@)\275M-{\276\227RW=\267(3\275\37459\276\225`\021>\001\373P\277\240o\213=$\013\250>\t8\324>\341D\264\275\2408\240\275-\006\017\275[\t\335<\035Z\004>ffF>\177\373\312>\363\310\337=\261\304#>L\216\253\276\330\273\377=\212\345\326\275s\234\273=\3603N>\227\346\226\275E\201\256\276\n.v>\214\204V>q\033\235\276\367u`\276\253\262\257\2762\311\010\276l[t>$\264e>\032Q:>\211^F\276Gw\340>\nK\314>V\267\372\275u\310\335\276\r7\000\277\233\002Y=[{_=\360\245\360\274.W\277\2745cQ\276\342#\342\275\037j[\275:\257\021>\244\344\r?\202\000\231\275%]3\276\235\272\242>\200}\364=\263\357\312>\240\340b>l\317l>\314\n\305\274\331\224\313\275C\220C>\373\350\024>\244\3028>\037\021\323>\375\237#\276[\316\345\275?\251\326\276A\016Z\277@j\343\276\217\031h>,\267\204>\211\230\202\276Y2\007=\237\037V?\377\262\333>io0>[\317\260\275\341\022\333;\035=\376\275\007\266\n>\227\0347>\345\320\222\276v\211\272>\257\013\237\275\023\233\277\276\251\207h=m9\227<\367{=;\275\373\003?\030[\230>\013c\253>j\030\236\2762=\001>\250\251\005>)v4\275\305r\273>\316\2458>\365g\177\276\010\346\310\275\260<\010=F\266\363=\327\372\002\277\360\026(\2769\264H@\270\006V>\\\346\224>\370\374\200>\334\361\246\274\340\326}\276\2034\363\276\322\375\034\275\226x\020?b\367\035\275s\272\354\275\273\321\307<\251\336\352\276\374\373\314\275\203\206^>\377\t.>\320~\004\276\375z\317;\034\315\221\274&6?\276i\000\357\275\313J\023\276/;\037\2743\341\347>\276O\025\275Nz\317\276\336\345\242\276\334\200o\276\200\020I\274\351\361[\276\034\2616\276\303\201\260>\245f\237>>\\R>\201&B\276\207\247\307>\224\336\367=\232w\254\276\362\014\022\277\262KT><\366\263=\222X\222=\276\336==\230n2\276k\237\216>\201C\270>pC\214\274h\313\371=\244S\267\276\000\343\251>J\007K\276\215\264\324\275 \n\306\275/\374\300=v7\357>\025t\273\276e8\036\275l\004\202=\263\352\203\276\263\014Q\276\266\201\233=E\237\257=\331B\220>(\325\376\275+MJ\276\364O0>\377\tN\276!=E=\3578\005>F\316\002\277P6\325>\256\323(>\235d\253=\365\202\317<\226\t\277:>\350\211>\206U\354\276\005\335>>Tt$\2770*i\276\2754\005=\347:M=\326V,>\275\306\216\276\037\370\030\275qU\001?\250o\311\276>\005\200>\211]\273\275\311 7=j\207\037>;\344F\276)\320\227>\355\236\214\276\331|\254\276\232\261\350\275\251M\334\276\321\225\210<\360\300\200\274\333\212\035>\263\265\236\276\216\2227\276\35790\273J\317\364\274d\314=\276eR\243\275\252\202\241\276\305\201!;\014\223I>0\275}\275\003x\213\276\007_\030=\215\177\177>\312T!>@\024\254\275\227\034w\276`\002\267>\021\001\'\276\251\274-\277#\020\217\276\340\332\211\274\255K\215<\353\345w\275\342\351\205\276\010\224->\306\212\002?N\234\354\276\315\310\240\274\372~\312>\256E\260;\207m\013\276\210\205\262\277m\250x>\323\301\252>\256GA>\263\357\252>L\246J\276\0162\351\276%\314\024\276(a\246>\017\326\177\276\214-\304\276\225~B\275\023\362\241>\301\213\216\276<f\240\276\r\303\007\276\226x \276\016\202N=tFT>\rT\006\276~\251\317\276\253\262\257\276l\354\022>\252e\353\276i\343\370\276w\333\245\276)\"C\276\023\017(>\234\277i>\216\345]\275\343\214!=,*\242=\302\246\016\275\262\0223\275\207\247\017\277\006\r=\276\356\006Q<,dn\275\027\267\321\276UM\220\276\220\021\020\275\000\251\215\276EG\342\276\rp\301\275\304\224\270\276\254\220r\276#\025f\276,}h>`\254\217=\313e\243=\006.O\2757TL>;S\010\277\0221\305>2rV>\334h\240>\000W\302>\002\016\241\276a\211g\276\016\333\026\276v\375\002>\023\361\326<\262\021H\276*:R>kH<>\372\230\217=\236\352P>7\030j\275P6%>\013\r\304<CV7=vWQ\273\331\222\372;\'\277\005\275+\336\310>\276\244\361=\365\326@\276\"\211^\2760\366\036\275\247\313B\276\032i\211\275j\333\260<\315\222\000=\367\006\217>\354\022\205\276\3435/\274\236#\222=\226\317R>8\242\373<\320\'\022>\342\002P\274#\241\235>\217S4>\341\013s\276\246~\336=o\273\260\276\027\272R=d\262x=,.N\275\242\t\224\2745\007\310\276\351H\t\273O;\\>aO\233>u\224\243=q=\n\276\300\005Y\273j\030\336\276\274\"\030>\306\250\353\274\307,\273\275\330G\347\275\022\332\022>\233\033\323\274d]\234>\267E\021\277\2505\235>\235\022\260\275i\341\262\274\345\'\025>j\331\022?x\356\215>\320\270\200\276\212\002\375=gU\225;R\355\323=\007B\022>\307.\261=\305\217\361\275\343\244\220=\303\365\350>\027\324\027>x\177\254\276\370\031\207\276/Q\315\276\357\000\017\275\007\322\005=*o\327\276V}n=\300!\304>\320\270\030?;\252\252>K\257\315<\017(\333\275\371\273\367<\325\"\242\275\034\010\311\274\2073\177>Y\370z=\247AQ<\242\265\242\274J\225\250=\374\343\375>*\000\306=\352>\340>g\177\200=\271\373\\\275R\270>>GT\310\2750\272\214\270\202\344\035\275\227\342\n?\035\254_\276@\023A\276\006\201\225=\224\366\006>p\010\325\275\010r0>\344LS\275\233U7@\264\253\200\276\027\016D\2769\320\243=gH\225=\232B\007\276\0319k\276\007\3230\276&\307U?\256\r\305\276\352[\246\276i\000\357>\360\212 \276\204G\333=\346\221\377\275\257%$\276\362\345\252\273\321zx<\273\n)>U\301\310=\0055\274\275#\271\2009\232\224\342>\240O$>\307)\372=j\366\000>\273\325\243>\245\275a>\261\277,>fN\307\276\037\2421\276\350\274\006\276\030w\243=\374\310m\275\362\357\223\275j\207\217>\236%\310;\341(\311\276\262\333!:\244\247\010\275\364\250\370;\351\322\277\275\032\335A>\200\324f\276\2243\224\274\210F\227>\345D\033\276\274\256\037\276\306\247`\276\213\337\264=/\026\206\275\356\353\200\275\367\257L\276\006\r\242\273<k\227>\351\361\213>\032i\271\276\320\355%\275\245\275a>4\202\255=B\252\315;\t3->\206=M\276a7\004?}\320\363\275*\034\241=\334c\211>\233\035\211=\252\232\200\276\253>w\2762r\366>\0010\036>YL\354=NB\311\275\330+\214\275\007\266*>)y\325\276\200\324f\276q\346_\277S\320\235>\205>\270=\025\343\274\276\303\3601\2766\260\325\276\223o\206>~\035\270>\021p\010>\017cR<\343\210\305\276J\361\361\274F\266\023>V+\023\276W\260\215\274X\220&>\255\366\220\2758\333\034>\021\337y\277&\373\347<\235\022\220\274Zd\253\276E\330\360=\346\036\222\275V\232\264\276\252H%>\307cF\276\022\3322>\205x\244=\022Nk\276\342\346T\275#\204G>\252\324\014\276$\360\307=\312O\252\276\263\231\203\275\256\r\025>\267zN>x(\252=\303\273\\\276\0260\t\277$\013\030>z\215=\276\232`\270\275\206r\342\275OX\002>TT\235=\214\276\002>\223R\320=&p\353\275\346\312\200\275\313\234N>\345\270\023\276\210\364\363\277n\242V=\3251\035\273\340\271w>X<u<\307\235\262\276\370\252\325\275\222\226\272>\343S\300\276\313J\023=\232\0070\274M\326H\276\215zh\276\270\222}\276u\002\032>x\227\313\275+\2076\276i\340\247\275\222\313\237\276\321\256\">9b\005\277\242\227\341>\200\324&\276f\332\376\275oJ\231=\257\264L\275I\272F>\3323p:\271\210\217>\004\351\275\273\235\200f\276\252eK\276\260\217\016>\300!\264\276\216s\033\275\200H\377=\205\3531\276\302\300s>\352\350x=\322:\n>R\233X>\000\035\006\276\323\365D=\264\362\201;\024\\\314\2758J>>Z@\r<\335\0147\276~\035\270=Gwp>bg*>\351\016\342=\266\326w\276E\022]\276\326\255\276\275iWA>k\267\335\275\016\276\020\276\204\236\215>\301\220\245>\\8\020\276~\247\311\274\021\215N\276(\325>\276\220i\355<\'\370\246\273\335\315\263>\341\321F\274\332 s>X\377\347=\02658\276\315\344\253\276\324D\277\275\365JY\276\314\3239=\273FK=\255i^\2766Y\243<\274?\216\276\223\343N\276@\366\372=H\304T>w\326\016\276\3536\210=\'f\375=]\0263>\026\241\030\275\013An>&U[\274\230\211\242<\247y\247\276\2755\020>d#P\275\220\334\272=\317Io\276kc\314\275\222\263P>U\243\327<R\'\000\276\220\240\330>nl\226=\305\235\034<\331_\366=R\230\034\274\203/l>Tom\276\0324T>\020]p\276U0\352\275\225\237\024>\005\300\310>i\251\214\276\350\274F\275Uj\226\276\n\2001\276\241\326\204>U0*>\342#\342\275?\251\226>\r\211\033>\366\0136>\330G\347=\312k\245\274\325\"\302=\372a\004>\272K\202\275\244\302\330\275\272Il>\220\203*?G\217\257>\342 \201\275\234\024\206=\250\3076\275\260r\210\276\007|>\276uu\207\275=\017.>U\301\250<\267\2325=\266\241\202>TR\007\276\020\\\205\275\007$\201\2753j\276\275U\331\027\276\344K\210\275\323\274c>\316\210\202\276\205wY>l\352\274\274*\343\037\276\3633\032<\010\252F\275\025\307A\275x\234\262>\270\006\366\2759\271\317\276\200\237\361=6\315{>28j>\370\337j>s\364\370=]P\277=\255Q\237\276\270X\021>>\227i\275\334\021\016\276\365\363&\276l?\231=[B2@Gu\272=\312T!>\\\314\317<\272M\270\275\336\346\255\275\337\032x\276]\026\323\275\223\251\262?7\211\201\276\360\371\341\276^f\230\275ep\024=f\301\204\275.\305U>\356=\\>\252\2021>\323\026\267\275\344\272\251\274\036\341\004\277\332U\250\275\352\223\234\275\362\262\206=\363v\004\276\013\010m\275\020#D\276y|\326;@\331\204\276\276j\345\275\367u`\273\236\006\254\275\226x@=\262..>\333m7>\213lg\276\355\327\235=Q\332\233<\0010\036\276f\367\224\276->\205\276)uI</\317\024\274\226\350\254\275\017{\241=\036\341\024>uv\362=\203\372\266\276\325\317\313>D\301\214\273L\213\232\275j\3361\276\'M\243=\302\333\203=t\t\207=\002\361\332>l\t\371\276N\227\205\276,\266\311=,J\251=\365J\331\275\027*\237\275gD\351\275\017\227\334=*o\247> {\275\275\373\226\371\275\005\206\214\276Q\025\323\274\264 \224<\340\3303<\010\254\214>f/[\274B?\323\274\220\332\244\276\027\267\321\2756\352!>\243\314\326\276\013\265f\276\331%j\276\215\264t>\217\247e<F\225\341<\256\021\301=\263)\267=\026\373\213=\242E\026>\021QL=\374\251\021\276\370\335t=\237\315\n\276#-\325=\224\244+>Y\213\317=V\016\r\276\340\205\215=h\263J\276\037\205\263\2776\345\n\276\301n\350>(\362\344\275]1\243\274*\253i<\256\234}\2756v\t\276\037\235\372=\366\227}\276]\304W\276\032\2435\276\303\360Q>V*(\274\241,<\275\211\204\245\273\204d\001\276\037hE=\202\220L\276\266\241\262\276N}`\275s.E>\274\350\253\276\001M$>\324C4\2767\212\214=\212\347\214=\000\306\203>@\030\230>\007\2613>+l\006\275\254R\272=%\351Z\276~\214\371=B$\303<\352\317.\277\266\271\221>\215\177\217>\275SA=\263$\240>.\312L\276\325Y\255<\334\200O\276\265T~>0\177\005\275\276\301W\276\207Sf\274T\346\346<\341@(>\376\267r\276\350\202\212\276\033\273\344\276{1\024\276P\216\302\2757\247\262=\033/\335<\266\023\245<0\365s=\330d\255\276o\rl\276\203\031\223=\377\347\020>o\365\334=\216\314\243>d@\366\274\362w\357<U\277\322\274\rR\360;\312\302\327\274\371N\234\276\005n\335=:@\360=\205\316\253\276+P\213\275\355*\004\276\200\322\260\275\275\214\">S\\\205\276Z\020\312\275\351\267\317\276\206U<\276\356\224N\276Q\021\307=\331Z\277=Z/F>pB\001\276vO>\276\014\315\265\276\350\331\234>\021\344`>!\352\036\276\270\036\265\276\202\213\325\276F\315\227\275{\210f>\'\021!=\352B,\274^\236\016\275\355DI=\364\246\202>\253!\361=\356\355\026\275\310\3526\276m\305>\276V\321D\273\222\"\362\275Fyf\275\353\034C\276i\251|\276\213l\007>A\274\356=\231\017\210\275\262c\343=\322\3061\276\341\264`\274]\206?\275\022L\265=4\275\244=\005\213#>\001\030\317=\021\031v>\263\320\216=\316\307\025>m\214\035;\263\322$>\006\235\020\275\013b`=i:[>+P\253=\333\205f</Q=\276\250W\232>\235f\001=\2721}\276 )\342=w\275\224\275\235\362\250=\265T\036\276\222\263P>J\265\237>\206\217(\277X\220\346\275\177M\366\276\342\344>\276}\320\243\276g\234\206=|\361\245\275\335\315s>\221aU\276L\375\274<\rl5>\220\210\371>o\360\005>:\036s>\nK\034\276\326\342\343>MJ!\276)\355\375\276\003}\002>\035\224\360>\201!\013>>\"&\276\361F&\276\3475.?_\014\205\275od\236>\350jk\276\233=P\273|\'&>L\374\221\275:\010\272<\227\255\365\275\214\365\215<\323\237\355>\236\357g>\364\246\362>[_d>\230\027`>\202\213U\276\265\334\031\275\265\2113\276\3063H>tD\236=\320D\370>uY\014\277:]\026\277\2352\022<\211\231\235=\006\213}\272G8m\276\3019C\276\271\337\241\274\020Xy\276\244\245R>\264V4<\251j\262\276\221\355\234\275\003\2251>0\202\006\275Q1\216=\320\233\212\274\271\030\243\275|\013+\275r\212.\277\023a\013@\365\204\325>\217\304\213=\300\317x>\0363\320\275\331xp\275\3023\201=\263$\000=hyV?\324\232\346=\205w\271\2760\236\241\276\250\303\212\275Ra\214\276M\274\203=\035\252)=T\307*=\345\320\002\276\200\232\232=\263\014\321\276\266\271\201\276U\207\034>a5V=Z\201A>\343\3078\276\005P\014\275\211\262\267=\177\301.=.O\214\273\351F\230\275\206\254\236>}\320s=b\020\030\276\315=\204=4\277\332=R\327\332\274~\311\006\275\336\347\370\274\267\227\004\277\2657\210>1\014\270\275u\037\010\277Q\026\031<\212\260\301\276\3328\342=\267(3>\231\273V\276Y\276.\275\346?D\276\337\375\241>\343q\321\274\357\341\222\274\200J\025<?\343\302=\370\337\232>*W8>>\350\211>\306\334\025\276\253\t\002\277_\n\217<\322\030\355\275\214\363\247\276\217\376W\275_(`\275E/\303=\022\210W\276RC\233\275\307\234\307\275\201$\254=\022\332\362\275X\312\262>\341E\037\276\257\261\213\276|,\005\277\032\027\016>/\336\217<\311\310Q\277\253>\207\277\031\0345?\022\210W\276j\023\347=\276\333\274=\344f\350\276\372\'X>4\242$?1|\304>\223\000\265\276\0260\341>\027\361\035\275\355D\311\275\254\220\032\277\202\342\267\276\377>C>\250R3>\340\276\016>J|n\275_)\363\277\261\371\210\276\307\021\333\276\332\305t\275m\3125>\253\264E<\317Nf>\031\255\343\275\274\226\200\276C\220\323\276\272N\003\276\275RV\276T\213H=\320\320\177\276N\362#=\213\375\205\276\311v\336>\325\"\242<\244\215\223\276\350M\205\276\010Z\241>\025R\036>\333\3456\273\326\253H\274\263#\025=)Bj\274\030[\230\276\372\n\222=\322\251+> F\020\277\221,\340\275j\274\364=\260r(\276.V\224>?:\025>\000\214\'\276\027\271\207=\315\257\246>\203\243d\276`9\347:l!\000\277\013\265f>?o\002\277=~/>\000:\214>?T\232\275\203\3726?K< \275\224\241*\275%\222H\276P\307#\276\3645K=\351\362\206=GZj>\345%\377\274\'kT>\254sl\276\033\233\035\275>\350Y\276n\027\332\276\177\025 =+\373\256\276(\362\344\275:ue\276\326n\253\276\206\346\352>\003\010_=pw\206\2767\216\230\276\t\304\333\276\335\352\371\275\264\260\367>y]_\276\200\014\035=\033d2>\025X\200\274W`(>\352\317>\276\366\177\016\275\353\375F\275J\007\253\276&\0360\276\334\233\237=\213\304\244=\272\275d>\333\334\210\276\032\027\016>\235\364~\276\022\024\217>\331+\007\274\007\316\t\277\020\256\200\274\362^\005?\357\003\320\2761\266\320=\322\251\353=\320D\370\276\t\247\005\2762 [>P\215\027>]\247\341\276\024\313\355\275\256\r\305\276\205\231\226\276\\=\307=\3269f\276\213\300\270\275\r\246A\276M\363\376\276\002\237\177>\224M\031\276\355\266\353>\352\354\344=\360P\344\276I\327,\277\207N\017\275X\347\270>G\217\177>\265T\216\276j\023\347=\030x\016>eSn>\351Cw\276\200\267\000\276mVM?\343\245\033\276\342\222C>\245\025_<Ic4\276$\234\206\276\202\034\304\276\235\235,>\251\032\030\27433\243\276\264\253\260>\317f\265\276\3171@>1\353\225>\024\263>\276\216\222\327>\276\274\000>\257Z9>\267]\210\276a\246\255\276\346t\251\276\\\346\204>o-\023\274\204\273s\275(\231\234\275\325&\216>\345\320\002\277\375\274\311>\335\014\227>l\007c=\003C\326=\354\300\351>9dC\275n\335\315\276\315\001\202>!v\346\276\371\017\351\274\214\276\262>>\263\244\276\314\013\340>\217\215\000>\344N\t>\254\220r=jMs\276Gr\371\275\360\210\n=\3065\236\275@U\340;\320\263\331>\034\010\211\276z\252\363>\244\337\376=\360\213\013=[\231\220>\000\216\275\275D6\220\274\352\"E\275J\014\"\276*\035l\276\316\377+\274e6\310=\204\022\226\276\350jk\276x(*\276F\266\263>;\001M>2\254b>4\235\275>P\031\257\276\270\222=>l\225`>\013AN>\377[\t>9\361\265\275-&6>\374\373\014?\224\373\335\276\320*s\275\263\322\004?v\246\360\276\351H\346?\t\026\007\275\356|\232\273\345D\313>9\230\215\275\302\027\006?I\327\254>\243\222\212\2764\242\234?\372\010<=3\212%\276 c\026\277Nz\337\275\224\373\255>\302\022o\276\313\326\022?\273\177\314\275\n\334\272>\245I\021?\2068\266\275/n\223>\306\300\232\275\034_;>\202\347~\276\355\231\r\277!\260*? \322\017\277#\370\337\275L\213z=\372D\236<\306\212\252\276o/\351=\241+\021\275s\327\002\277\204*\305>\013\322,\276\006\365\215\276\276je>\037\235Z\276\362\357\203\276\254\250A>o\330\006?!\260R\276\274XX=b\025\357=\262\327\333>\377\347\360=,}\330\276\220\273\210\2750\360\\<\276\336=>\3377\276\276M\204\315\275\010r(?\237<\354\275\260\254\364\275\236\007\367\276M-\333\275\314\177H\276[\353\233>\270[\222<\370\210\310>\037K\237\276\302\243\005?\322\030\355>\374R\317\276o\r,\276\336\223\267>\025\035\331>\020#$>\316\215\371>7\340\243>Eb\242=\344\275\252\275fff>\354\254\314;\251\373\000\276\262c\243\276\320~$?\200e\005?\355\266+>a\216\336=~\030\361\276\221\017z>aO\213>o\201\304\275P\252\005?\262..>7\303\r>1[\262=\273\307\343\273\302\022\317\275~:^\276\337\370\252>\005\375\205<\027\203\007\275\003\t\022\300\030\n\270=\022\240\346\276IKE\276\354\335_>\254\213\033>1\353\205\2765\270\255<\202\377\355=\213\0306=\005\334\263\275Z\022\260\276\312T\031\277\360\242/>\262\0172\2754\272\343>\350\300r=\014\\\276=\210\241U\275\243y\000\275\271\337a>l\354\322=\"lx\276K\260\310\276\203\206\256>\007B2\275\212\310\260>\n\235\327\275\376\267R>[_D\276\rl\305>\005i\036\277\314\264\035>\006*\303\276\345\'U\276\306\304\306\276$(\376=\210\364\273\275\241-\347=\330b\267<\233r=\277#\025\006>/Q\375\275\266-\312\276\252\202\241>\234\371%\277\032\206/>j\373\247>U\301h>p\224\034\276\353\252\240\275\003\317\355\276_$4\275?t\3779\t\213\252=lB\272=\024\" >\215\234\225\2763\342\202\274\030\262\032\276\226\t\037>(\016\240\274\340e\246\275\307K\027\276\360Pt\276\313\363\000?\217\372\253=T\035\022\276\235\272\222\276\312\256\017<\n\235\327=\3224\250\274\351\267/>yu\256>\275S\001\275\311\216-\2768\2766\276(IW>\357\217\367\275wL\235\275\342X\027>;\374u>\200-\257\273\270u\207\276\313\333\241>\211\225\321\274\310\010\250=\334\204\233=\364\340\256=U\301\010\276\310\230\253\2765Fk\274ga\277>-\354\271\276\322\000\276>\255\027\013?\313G\367:8\370B\276\215\356@>\177\301N>WC\202\276B\354\214\276Z\365!\277\026\373C\277N\013^\276\303\246\204\273\302\300\323\276\373\"\001>\377\317\241\276\"q\237>\3750\002>X9\264\276\223WG\276\361)\260>\376e\307\276\353\034\003?\321\"\033\276\264\216\352=\223\251\302\276\315\006\331=\002dh;k`+\276\227\220o\277\002\331\213>\366\227]>\204*\205\276\242\013J\276\2136G=3\030\303=\226\262\204?\033?\036<\2379\253\275\352\221\206\274\231\rR>\262\327\233>\207\341\243\276E\203\224\275\245\300B=ff\306\276\233Zv>\322o\037>\236\265\273>\225\361O>*W8\276\254\305\247\275\372\355\233>\233\217\013\276\345a\201\276\207\341\203\276\222\263\360\275YQ\343>\217\031\230>\351HN>}]\206;\257w\277=]m\325\2766\037W\276\260\254t>&\345n\275\'\245\200>\014\007\n\277\330\361\037\275\200\272\241\275\3019c=\362\007\003>\210\271\244=\326\034\340=\033\022W\276e\337U\276\272\275\344\275\310\265\341\275\036\376\352>\274\263\366=nma\274a\216\336\275\201\225c>\362A\017>\002\237\037>\261\232x\273\336\037\357<\256*\253\276\375g\255\275d\254\266=R\200h=\235\021\025\277\217\307L\277\217\031\250</4\267=\357\254\255\276\354v,;\034A\252\274/i\014\276\210\272o\276g\362\255>\2176\026?\206U\214\276H3\326>\271\374\247>\r\375\203\276\224\244\213>\'\210\312\276du\253\274oG8>\331_\006?`v#@\243;H\276\024\005J?\373\221\"\277iW\001\276!\260*?\305=\366\276u\310M>v6d<\030[H>@\276\004=\375M\010\276S?\257\276\372~\"?\024\350\223\276q\311\241>\2762\257\275N\227%\276\226!\336\276\037\364\014>{\210&>\034\316\374<HP\374\275\326\034\000>\032\243\365=\242\356#>Q\240O\276\006F\276=\317\203\003\277\266\333N>\212\002\235\275&\213\373<\341z\344>&\252\367=\263A&\276\367\307\253>o\331a\275\272,\016\277!\037\204>809<_{\006>\177\331]>\275\310\204\275\260\346@>\340J\246\276\364\372\263\275\322\343\327>\361\021\241>\344\024\035>\233 \272>\003\t\n?\024\005:\276\357\036\300=p\226R\275,\267\024>;p\316=\235\364\216\276\231*\350>\251\237\227\276\312\340\230>\035\311\205\276\354\335\377>\204*\325>\013)\377\275g\'#>\306\026\n\277\315\257&>\030\317\240<\0015\265\276\'\302\306\275W{X<\327O\177\275\325\225O\274\243;h>\326\034\200\276\205\316\013\276\225E\201=\267z^\277\267\227\264>3\371\226\276\236A\303\2767\246\017\277\276-\270=\326\3423\276\236$\005?\\ \241\276R\362\372\276|\n\220>\217\3025\276l\354r\276\035\224\000?Z\330\023>\036\341\014\277\302\212\323<\020z\266\276\016\241\332>od\276\2751\231\n>`\324$\273\312O\332>\313\367\014=\211$Z>\254\213{\2766\223\317>p_g>\207\376i\276\2554\211>1`\251\275]3\t?\365\363\246>\27164\276\020]p>@\331t>\302\206\007>\007\360\326=\323\210Y=fk\275\276N\356\027>\320\355%?\307\364\304\276\037\277\267\276du\233\276\274?\256>\222?\230>\002\324$\277x\013\204\275gc\205\275\023a#?;q9\275W\t6>\325>]\276\202\342\307\277l>.>\222y$?\256\201\235\276\361.\327>\302\300\363\275DQ \276\325\227\205\275n\2132>f\367\024?\255\325C;\247\226-\275^/M=\204\360\350=l!\010>\241\237\311=d\314\255\276O\351\220>\3536\250\275-Z@=d\314\315\276\307\235R<\337\032\030\275\255Q\237\276\"\375\366=\222\226\212\2760F\204\275?\000\331\276\344N\211>\243Z\304\275\205\266\\\275\315\257&>p\t\300<\005\335\276\276\262F\035\276\274t\303\276\"OR>}\350\"\276\014\037\031\277\313\333\341>\013{z>(\367\026\274\250:d\276rm(\276A\232\361=\341\225\244\275&pK>Q1\236>\031\003\353\274mow\275\240T\273>\211\322\036\276\007%\274>K\002\024>\360P\024?C\256T<\037\205\333\276.\313\327<\224\244\353<,\271\n\275\245N(?\211\014s\277\234P\010>|\017\327=\225\016\326=\246\362\266\276p\266\271\276\206\311\304>]\341\035\276\026M\007\276\204\330\331\276\300!\004?\004\255`>RI\355>\366\014\241\275\230is?\230\372Y\276yu\216\276\220\237\215<\205\231\206>\260\2209\274\326\340\275\275\255n\225=6\002Q\276\314\t\332<*o\267\276L\375\234>TV\223\2754\2007>\t\247\365>\\8p>\352x\014>\364\246\322\276\317\275g\276Z\365\201\277n\243!\276\263\357\252\276n\372\343>\377[!\277=\017\216\276\371(H;\371\275\025\277\231\365\322\276G=\244>\216\303\005\274j0\355\276\235d+=d\260\202=\177\301\356\276\037\2004\276\246\017\275>_\007.>y\351F\276p\266!\277.\254\033\275Z\r\231>\376C\032\276\224\245\326\274\346\\j\276\360l\217=\031\034\345>`v\217>:\004\216\274\232B\347=\345~\227>N\177\266\276\026\243\256=\226[\032\277\305\217\261>\317\370\236\275\333PQ\276\322\251\213\276m\347\213\276(\r5=\204*5\276\310\013\211\275}?\245>\275\306\216\276t)\016\276\244\344\325\275\0049H\276%\222H>\316\252\207\277o\330\266=\320~\344=\314@\205\276B\225\332\2760/\000\276\024\355\312>\225e\250>$%\275=\0260\221>\"\216u\276\350L\332<\260rH>m\305\376=qU\251>\260\217\356\276\334\272\033?\371\240G\276#f\366<shq>\254s\004?N\356\207\276\337\335\312<\216#\026\276\204\201\227>\344,L\277}\313|>\231\236(?@\0308>\3539\271\276\\>R=KX\033=\337\370Z\276\262\235\257\276\002\324\014\277\244\337*@\321\256\302\276e\034\303\275\232_\r>\024\263\016?\270 [=o\365L\277=`\236=\375\207\034\277_^p\277-[\013\2770d\365=\347\000\t?\035\311e\274\241\363\232>\267\013\r\275\261\212\227\276)<h=$\014\203\274\273\227\373<\211A\320\276b\363\021>g\321\233=\205\010X>AH\366>A,\233=\331\316\207>\343\3377\277\247t\000?Wx\227\276\306O\303=X9\034\277\335\265\204\276\032\335Y\277\242\016\313\275\373t\334\276^\327??\205\353\321=\363q\215=\261Pk>\331B\360\276\1770\010?\n.\346>@\244\337=\355\273\342>T\000\254>\352\004\244>vlD>\223\343\236\276\272\364\257\274\273\355B\276\247\221^\277\351\326k\275\000oa>\3745\t?/\300\036>r\321\332\273\3642\002\277\024\354\237\275d\006\312>\241,\234=\220\275~>\000\221v?X\214:=\t\376\367=\220I\326>\322\030\355=P\307C\276\226&\225>ep4\276h\263j?\032Q*?\014<7\276F\323y\276K\260x>\353\255!\277|Dl\276\311Y\350>\203\206\256\276[\266\026>\366EB\276`v\017\276\360\371q?YL\374\276\346\">>oG\370=\236\\\323<^\327\037\277Y\206\310\277\025W\205\276$+?\274\233\254\321=\002\232\010?q8S>\255\300P>`\352/?I\006\312;\377\312\n?X\307\361\274\013\270g\275D4\022?\357U+\276\263\230\030?\355\365.>}\256\226\276\211\357\014?\227V\003\276\275\373c<\244\344\325\276\304x\215=\203n\007?\017\177\215=t\265u>\237\037\306\274\263$`\276\225e(>/\0240=\030}\005\276\007A\207\275\213T\230>\270\344\210\276O\262\225=\212<i>\242(8\277\371\332\203\276\252\324\254>\325\312\324\276#k\215\274\321y\375>\353\255\301>\312j\272<T\214\363=\r7\360\276\004!\031>\307h\275\276\202\305\201>|\233\376=S?\377>Ed\330=Z\360b?|Dl>\353\255!>\261\341\231\276\320d\277=\001\207\220>\273~\t?\316\031i\277\3063\210\2764\205\016\276\0363X?iW\301>{fI\276*\306\001?\330,W=\363 \275<#\241-\276\202\002/=C\347\r?^\022\'\275Q.\255=\233X\240\275nL\017\277>\350Y?0\316\204;\206=%\277\252H\225>T:8\276\301\250D>\252H\345>\2034\223>\204d!\276\350\301}>\360\371\301\276MEO\273\204\360\010\276\005\213\343\276\t\247U?\245kV\277Q\367)\277G\254-\277Z\201\031\277\256\323\000\277Y\300\004>#\370?>\023\233\237\276\223\343.\276?\311\235=\177\336\204>\"\210s<h\320P<a\375\277\276\354\276\343<\206r\222\276g\233\013\277\344fP\277\r\303G=/\206\302\276\354\372\005\276Ll\316\276(\362\244\276\307\327>>\262\272]\277\226!\006?\314E\034>8\020\022\277\361\235\270\276\031\034\325>\250\251\r\277\323\023F\277\243u4?4Kr\277B,v;\304%\347>\300Pr:\202\312h\277\t\376\327>-!\027\277u<\006\276.\313\327<$\326\262>\353\034#\277\334\272;>\276\274P?\010\224\215>\255i\336\275k\232\227>\225\237\324\276\266\271\361\275\234\031}\274\256\323H>\364\032\353\276\225\273\317\274\313J\263\276\203i\210>a\340\031>g\362\025\2773\247\373>P\031?\276\354i7\277\257\010\376\275\343\301\266\275:;\t\277\302\027\346\276\t\341\301>CU\314<\2034\363>\307.\241\276TtL\277\233U\007\277\3479\302\275/4\347\276\362A\317>\264Y5\276\270\006\306\276\317\024\022?\317\203;\276$\177\010?\331\317b=5\025\030\273M\025\034\277\261m\221>\205wY>\261\371\330\276vq\003\277\n\274\223\275J\232?=X\250-?\312l\220\276\250\251\225\276|a\002?P\001`?\014;\214<n\335M\274\372~\232\277h\313\271>\326\220x\276Z/F\276\344\017\246>\266\241\342\275\343\302\341>\216\036\277>6\310D\276\016gv?{\330\313\275\341\007\347<\222tm\276(}\301=\363\253\371=\277+B\276\3163\226=\262F\035\276\021\252\204>\331_\366?g\324<\275\000tX\276\032\2435\276\232\353T\276\236\322A\276n4\240\276w\333\005>=,\274?o\323\357\276\335C\302\274\207\026Y\276\340\021U\275Bx\264\276\215^\255=@\241\036;\367\036.\276\356B3=\340J\206>\300A\233=\000\256$\276\333\026\345=\370k\222>;\375`\2751%R\276e\302\357=\334\327\321\2762\344\030=lx\212\276`v\317=\302\300\263\275\001\336\202>\307.\321\275ZcP\275\005\335~\276\027\r\271\275r\212\316>\334F\243\276\347\375\237=\260;]\274E\360\377=\253x\203\275\204\365\037>Mg\307\276#\025&\277od\036\2761\353%>\215]\"\2762\350\204=\\U\326\276H\335\316<rn\223<\003\354\343=\r\032\252\276\354\335\337=JL\006<\'\027\243=\372r0;\203n\277>j\370\026=\267]\370>\311<\362\274_\322\030>\032\2435>q\254\353>\277\361U\276\363\2539\276\375\274\t>o\201$\276i5\244\276\200H\037>\243;\010\275*\035\354=\353\002\276\275o\201\204\2760/ \276\316\031\321\276uv\222\276\'Nn>\313\241\325>H\245X<\032\300\253\276u\312\243\274\034\3527=\020;\323>\336\002\t\275\351\361[\276z\364\320\272_\264\307<\340+z=\021\036\235\276|ar\276\276\274\300>h\263\n\276eS\316\276\202\377-;=a9\277\336\313\235=\247\221\026>\336\310\004?\035Z\004\276\366@\013\276\304Z<\276\361\364\212>\305Tz\275\242\263\314\274\317\334\303\275\022[\013\274\327L\356>\013$\210>\014\262e=<\370\311=5$.\276\377\317\261>M\024\241=\273\264\201\275m\377\n\276\277d\203=\262c\343\275\216u\021\276\263$@\276*R\261\276\264\223\201>\343p\266\276\203\335\020>*\221\204>B\317\006>J\230\211>\314\227\027\276W\225\375=\347\030\220\276<\275\202\277D\247\247\275\325\260_\274\3578\005\276B\322\'\275\216w\007\275\332qC<\027\016\004=\310\354,\275\030\354\006\276+\373.\276\356\006\221\275C\034+>A\237(\276\247\\\001\276\237\315*>!\007\245\276\367vK={/><T\306\237\276b\241\346\276\336\223\307>\303\201p>@\023\221\276\246\320Y>\246D\202\276\036\306\244<\2034c\275\235K\201>\252\363h\275Hm\"\276\367\221\333\274\330\360\204>T5\001?\367\223\261\275\332\376\025>5\230\206\276h\347\264\274\377\347\320>\020\3517\276\310\226\205\275\244\374$\276\000\254\216\275\024\\L\276!\260\202\276\033\235s\274#\370\337\2742u\267=\243\001\374\275\203\302 \275\216\036?\276K\345m\276L\216\373\275\353\220\253>\221\n\223\276\357\033\237>\353sU\276\302\027\006>\324`\032\276\013\357\202>G\346\201\276\'\245\200\276\013%\023=\002\240\212;\312\032\265>v2\210>\277\236\257=\357 V>\345*V\275\275\3759=\276\244\031\277%\3144>\343\215\254>\351\267\377\276\347:\r\276\302L\333>\367\257l\276\370kR\276WZ\306\274^c\367>i\214\246\276\236+%;\257\224\265\2764.\314>\227\221\232=m8\214\275\232\223W\275\224\336\027>\324`\332==\362\267>\237\260d\276\240\340B>\225H\">d\257\207>\2718\252=\331%J\276\n\364i\276\331%\212>\357 V>]\376\223>w\333\005>\301s\237>\224j\337\275\273b\306<t\265\245>?\270\361;^\327\017\2763\212\r\277\227\220\217<\032\300\273\275\210ht>&\374R>\247@\246\275\010Za>\025\252\273\275\263\007\"?\n\272}>y\001\226\276\3058\317\276\17700>||\302=cz\222>!\310\241\276333>\035\2179>\220\273\010=\332\217T\276\354\3009=\325\004\241>\013\322\214\276\'1\250>\227\2138\276\227\305\244\276\214,\031=\354Q\270\276w\333%>\247\350h>\267\177\345=\205B$>L\250\340<\016-\262>\016\020\314>n\300\007>S\222\365\274\3470\004\274\344\272\251=\205\231\036?\331\010D=\221\270\227>\177\025`=\213\032\214\276\255\360\323\273\344\203^>\354\277N<\204\235\242\275\n,\200=\203\212*=&\374\322\275K\261#\275\310A\211>\241\370\001?\226x\000\275\271p\340=\n\331\371<\234\334\017?\374\000\004\277\256\022\014\277\260\2544>b\363\301>\177j(@3\211\272\275\004\342\025>\315#\037\276\312\211\366\274\245\275\261>\262\364\001>\020;S>\330\360\364?\242\177\002=7\303-\276\001\366\241\276\364\277\234\275\345~\007\277 Aq\276\036\334\335\275\264\005D\275a\376\252\275\321\221\274>\275o\374\275\3706\035>B\266\207\272>\263\204>\364\340.\276rRX\275\223\001\240\275\217\302\245\276\203\342\"\274-\263\210<\201\t\254\276\010\003\257=u\314\231=j\331\252>`\260\313\276\374o\205>S\314\201\275\321u\301=\351H\356\275!\002\316\275\212\310P\276k\202\310=\3603\356\275\345\263\\\276&\215\021\276\355\323Q\276\244\337^>\371\024\000>\310^\257>oGx\276\354\335/?\025od>\005\027\353>4\327\311>\r7 \275\217\252\006\276\365\271Z>\360\332%\275\367\036\256\276g`d\274\001\303\362\274\223\030D>1\316\337=\335\007\220\276\267\356\266>=\233\345>\207\277\006>\347\215\023=\222\350\005>,\274\033\277\316pc\276\372\320e\276\335\014w=\301\250\264>\354i\017\277(\n\024\277\337\303\225>|\355\331=4\200\247\276\204*\325>.9N>\274\313%\276e\252 \276\267\234\233>~nh=\006\310\006\272-C\214>q\001\350<\034\261\326=\347R\334=t\352\272\276\223\000\345\276\332 \243>\374\214k\276\257\226{=0G\317=\204\323\022?5\357\250\277c(\'=\266\332\203\275\317,)\276:]6>\317f\265>\331w\345\276\031\004\026>\372\n2>\014\260\257>%@M>cb\363<\342#\002>\225\232\275\276Ll\336>\002,\362\274\234\026\274\276\355\2016>u!\226\275\001\366q>\245\240\333=\344\201\210\275\326\213\341\275\367u\340\275\0054\221\276\200\202\213>\357 V\276\3058\377\275\2073\237\276F\353\310>M\241\023>\222yD\276\267\234\213\276\010\310\267=\207P\345\275\021\001\347>\366\n\013=\177\244(\276\'\302\246\2760\365\263>\325\317;\276\302Q\262\275]QJ\275!\005\317<[\323\034>\205w9\276O#->U\022\031=\317\275\207<=\016\303=\237\216\307<\370\245\036\277\275\214\202>5\014\337\275\326\342s>6\310\004\276b\020\230>\027\323\361\273\345D;>\243\030\305;\246a\030><\334\256=\0319K>?q\200=\367\351\210>\3475\366=\210\020\327<\337\370\232\276\035\035W=\361\327\004\276\313\370\007?\271\376]\275\t\304\353\274C\343\311\275\212v\225\276D\335\227>\243hT\273\201&\002>\000\251m\276-\314\002\275G\217\337\275\336\260\255\276&\3742\276;\302\351>P\2157>\322\251+\276\027\331\316\275\232\355\212\275TR\207>\223\030d>\322\214E>=\2335\276\225f\363;P\307\343\275\372E\311=\314b\202>$E\344\275\366(\334\276\324\267l>\245N\240>Vc\t\274\347\251\316\275jM\363=\362\315\026\276\363\216\023\277\265\211\323\275e\342\026\275;\031\234=\024\313\275\276\314\227W>\336\2536\276I\205\361=\247\350h\276\310\315\240\276\037\272@>S\350<>\257%\204\276\225eH>\026\3664\276\356%\215\276\341@(\276+\373\016>\3377\036>\225E\341<\300>z>\361) \276\0324\224>\362\"\023=\367\001\250>N\014\t\275\325\225\317=\320\017C\276\215]\342\275\254\255\250\276\240T;\276RaL>a\343\232\275\245k\306>\254\305\247=n\335\215>\026M\'\276\311\216-\276>\005\340>\322\373\266\276\212\345\246\2765@\351<\300\257Q=(\n\204>!h\026<N\356\267>\230L\215?\370\032\242=\262\205@>\361\201\235<b\020\310\276\004\220:>\206\346\272=T\377 =E\330\020\276\241\370Q>I\021\251\276\211\007\204>\326n\033\276;\344\366>\262\327\003\277\021\031v>x\177|=K\310\007\276\246\325\340\276\233=P\276\002\267\356<\013\233\241\275\333\334\330\2757\216X>\2200\214=.\342\233>\270\001\337\275\243u\324\275\036\341\304\276<1+\276\276\274\200\276\351\232I>Mg\227\276\260=\003?\232w\254\276H\376\300\276\277\361\265>\342\255\363<U\207\034\276\035<S\275\222\"\362=\352>\360\276\255K\215<\005\305o\276\377>\203>\214\340\332\273\225\267c>\276\336\215>V\237+\276Kv\314>>\350\211\276\310\315\360=\226[R?P\215\227\276\224\366.@\n\277\004\277\226\262\314\276\360j9=Me\221=\234\242\303>\242\013J\276\'\024\322\276\2235j?\033\363:\2755\265L>\244\375\017=V\270%=\205\317V=\031\034%>\354/;>0\201\033\276\263$\240>\217\034i\274W\352\231\275\261\334\"?\227\353H\273\322\030\355=/jw\274\214\364\302\275\177\244\330>\264q\264\276~:\036>\2451\312\276HS}=\333\304\351>d]<>\221\234\014\275;r\244=w\020[>\331=\371\275\231IT<\023,n\276r\207\255\275\323O8=\370\215\017\276\205y\217\275x\356\375\275\241\204\351\276\356\224\316\275Ou\310>\356\010G\276\2652\241>n\027z\276\214\326I?\314]\213\276\325\007\022=D\024\223=>\006\313\275\217\031(<\355\201\026\276!\001\243<K\315\036>\331\314\301\275\317\240\341\275>?\014=\032\213F\276#\241\335\276t\265\225>\201\317O>x\013\344\276\236\014\256>\322\306\021<\301\375\200\274\033\273\344>(\270\370>\275SA=X9t>\002\267.\276\267\013\r>Um\227\275\010\311Z\277\373\350t\277:\257\201\276f1\361\275\346\350\361\275\337\303\005\277H\026P>\3225#\277:#\n>\203\027=\276|\3559\276/\030\334<\272i\263\274\272\203\210>nn\214>,+\255>X\377\247=d\351\223\2761\t\227\2756K\023\274A\202\202\277\002\364{\274\365/\311=`\315A\276\020\006\336=\243\036\202>\034BU\276\244\376\232\275V\202e\276\273\3629\276\237\223\356>B\354L>C\220\223>m:\202\275\3019\203\276]P_\276V\324 \276\355\201\206>\332\346\326\276\340\276\316=\230\243\'>\366\321i>c\013\001\276\370\374\300>\261\334r\276\030\262\332>al\001\276\365JY>V+\303\276o~\303\275R\n\212\276\322\214\005\276\247\256\\\276\'\024B\276\024\355\232>O\257\374\277a2\005\277\022\367\230>$\nm=V\267Z>I\364\262\276\317,\t?\177\373\272>\177\331\275\276\307L\202\275\300!\204>4+\333\274\270X\241>\227s\211>{O\205=3H\2079 $\013\276\222\313\177>\234m\016\276\204\022\346=\363\223\252>\2652\261>\225\271\371\274$\326B>\334\021N>\'\275O\276\211\352\235>\377\t\356\276n\335\215>S\\\225>\242\361\037\274\\\033\232\276\273\320\234=\270Z\307\275\003\317\375\275\202\312\030>dX%\276\022\3322\276\304\231\037\276[%X>\262\327\373>\330G\227>h\256\023>\363\253\251\276\264\0260;\243;\250\2767J\250;\033\236\336\275>Z\234<b\242\241\275\216\006\320\276\255/R\276\345\325\331>\332\346\226>\212<\231\276\320\321\212=\335\3570>\003\354#>\365\241K>8\242;=W\006\225=\027H\260\275\344\332\260>pB\221>^\364\265>\r\216\202\276\177\207\242>\367l\302;:X\277\276\037\021S\276e\307\006\277\315\257>\277o\240@<C\004\234\276\300\226\327<A\237\010\276\310\007\235>\006*\203\276\231G>\276\000\307\236<J\230\231\276\233\033S>\313g9>\200\324\006\276\270X\241\276Y4]>\307\'\t<t$\267>\315\001\362\276N\234\314>\360\243Z=\251\2377>Cp\334<3\2506\275\356\261\224\276\210\271\304={\275+\277 {=\276\214\020\276\276\341\264\300\276Sy{>h\226\204>Yi2>=~o>\360\340\'\275!\007e\276(Iw\276(~\254>\203\300\002\277h\004\033\275W[\261>\256\330\217\276\330\326\217=P\031\177<\265O\'\276\027\355\226\273#2l>\224\331\260>\347\251\316\275\251\301\304>\222\256Y>\027e\206>/\213i\276n\300\'>\334\233_<\\\217\032\277MJ!\276\257\316\361\275\315\344\033?\023\270\345>i\214.\277\007\353\277\276o\330\206\276\262\020\235<\227\213\030>.\311\301\275\260T\267\275\343\252\202>\366@K>\"O\242\276Mj(=\250\214\237\276U\337y=\214\274\254\273\302\335\331\275\201x\215\276\3751\255<\344N\351\275#\371\312<t\320\205\275\344\332 \277\325\355l\274|a\022\276{\024N\276*\250\210\275Nz\277>\241\241\377<\0160s=k\235\270:b1\312=\\\345I\275\365\276Q>g\'\003\276n\210\261\275\206=\355\275MJ\201\275W!\345\275\370\245\036\276\231G\236\276\347\035G@\200E~\2754\275\244=,\267\004?\"7\223>\265l\255\276\025W\025\276M\025l\276\336\345:?\231d\304\276\251\330\230\275\345\263\034>V\272\233=\366#\005=\352\351#\275#2l\276>\350\031>\202\312x\276F\231m\276vl\004>\014\223)\2765\230\246\276\3544\322=\200,\204=\354\372\005>\215C}\274\001\301\334\276\260ui\275\014\002\013\276\014\007\222\2763\371\306\2768-\370\275\016J\310>\201!\353=k}\261\275\237\216g>\272\330\264\274\033\365\200\276\337\246_\276\035=\376\275?o\n>Z*\017\276q\311\361\275\030\317\000>\375\024\007=j\274\364>74\345<X\3122\276X\255,\276\005\304\244<\200\016s<;\001-\276\273\362\031\276i\220B\275\221\017\332>*\214m=F^\026\275\264\223\001\276e8\036\275Bx\024>\342v\310\275\363<x>\353\213\004>6\0021>\274\005\022\276\322\251K>/3,=\201&\">!\345g\276\213\376\020=\001\301\214>\250\251\005\276j\274\024\276\006\022\324\275o\366\247\275\003&\020>\341]\356\275F\010o>\210\200\033\277l!\370>\231d$\276\303*~\276\345~\007\276\007\230\231\275\323\244\024>vl$>\2701\007\274\215b\031>uY,\276-\321Y=\177\244\230>\225}\027\275\252CN>\200-\217\275\002\363P\275\3578%>\340\276\206\277c(\007>\217\3442\276\006*\243\2766<=>\213\247\236<\357r\021\276;\254p\275qq\224\275\231\273\226>\324C4\275u?\307=\025\343\234\276\300Z5<\3165\014\275\372\320E>?:5\276\341\266\266\274 )\"\276{ju\274\235\021e>\256\360\356=6\037\207\276\225\233(\275\201C(>\362\230\241=\274t\323=\353\346\242\275\321\226s>\350\331,>\000\343Y\275\365-\363\275\252e\353\275\305\307\'=g\\]\273\207\026\311\277$\271\254>\225}w>-\354\351\2745\230\206>\343\210\305\276.\342\213\276>\004\225\275~\214\371=p\266y\276\232?\246=\375g\255=\002\014\313\275N\227%>J)\350\275\333\242\354\276OA\331;\243\217y\275N&\356<\263Af>\260\033\226=|~\330=\344\332\300\276\347\000a\276\307\235R\276\032\206/\276\330\r\033>|D\254\276{N\312>0d\025>\363\n\237\271\370\245\376=:z\254>\"T\331\276\363\035\234=\tl\216=\203\300*>\264<o>\307\021k>\265O\'\276Q\203\t\276:\006d>\314]\253\276\365\276q\276\001\336B\276\234\247:\276<\245C\276\323M\002\276\212\260a\274\222\350\345>n\213\022>+\366\247>\204\022\006\277b\022\216\275\375\274i>\232%\241=\'f]\276\277Cq\276\355\3231>\352xL>Uj\206>z\374\336\275\350\372\276\275\306\304\226\276\321\256\222>od^=\247Z\213\275\336\037\357\275#\020/>B!\002>AG\213=@Mm\2762r\326\275\214-d\276x\321W>>\263D>\034\231\207\276\034\007\236=8\333<\276O<\347\274\313\333\021>Jb\311<\330\327\232=\306\303{=Q\"\323\273P\252\375=&m\252<\372\317Z=\355\360\247\276\263\352\363\275\262\200\211\276\301\377\026\276\227\220/>\2132\333=\261\247\335\275S\"\211\275|\200\216=\025\221\321\276\340f\221\275\3601X=\262\235\017>\305ta\275PS\013>*\343\217>0\022Z>\354i\307\276j\244\005\276\020\351\367\275R\325d\276\337\246\177>\210,R<e\307\226\276\273\270-\276\335\352\271<T\035\022\276%\351\032>\300\377\373:D\246\274\275\035\314&\275\260s\223=\177\274W>4\205\236>jSP;o\360\205>\326\220\210>-\262\235>x\264\361=\033\273\004>\3372\207>\245\332\307>\257\261\003?l\225\340=\264\345\034>\363\223\352\275\247\350\210\276`?\204\275N\013\336\275o\275&<VHy=D4\032>\343\2522>\243\217y\274\212vU>\023I\364=\332\311\000\276\304%\'\276\367;T>U\023D>\273\361.=,\271\252=\r\216r\276F|g>\240\211\360=\013\317\253=K\037\032>>\263\344=r\247\264\276\210\021\222\2762\217\254>\355\236\374=#g\341\275\342\257I>\362^5>\370\374\220\276\377w\004=h\350\037\277\300\"?<o\022#\276O\036\026>\"\2165@\213lG\276 c\376>\277}=\276\241G\254\275\257\223\372\274\373:0>[\323\034>\301s\007?\354|\t\273z\374\376>\2661\226=\013{\332\275\244q\210\275.\034\010>P\212\226\275\310\315p>P\344\331\276\273\177\254=\356\n==<\275\n?\366\013v\276\267]\250\276\250\251\265>\036\376Z=\302\206g>w\204S>B>(>\306m\224\276.\312\314>F%U>\341@\270\276\374\030\223>\000t\000?\005\277\215=\254\342-\276\311\037\214\274P6\205\276L\211\004>\337OM>\005\300X\276z\245\274\276;\302\331\276\255Q\017>zS\361\276\215$A\275\232\231\211>u\002\252>\337\341\266\275b\276|>\323\301\312\276\"O\242\276\\ \001\277g\'C\276\265\340E>\346\350\361\275\016\202\256\275\210.\210\276\035\203c:w\276?\276\226\354\030>)?I>\227s\t\276\325\261\n=g\014\363\274$\264e>>\263\244>\'k\344>\246Dr>4\235\215\276W!\225>\304\265\332\274\266\204\014?\\Z\r>\223o\346>\030!\\\276\264ro\275\'N\216\276\017\013\245\276k`\273>\013\014\031>\031s\227>UO\306\275\n\021\360\275i\002\305<\241\333K\275\023,.\276\006*\263>\257w\377\275L\303\030?\221~\273>\024\260\035\275\334.\364\275*\003\247\275\030C\031>\241\241\037\276a2\225\276RI\335=;\252Z>+\207\026>o\323\337\276\245\024\364=6\260\r\277r\334)>\365I\256\275\343\337\227\276\317\203\373\275\2201\027>\2343\302>\253\004\253>\305\343\242=\233\033\203>\237\221H=Y\027\207\276\306\304f\276\020u_\276Qf\343>\304\010\001>U\3317\276\206r\002>I\272\306>w\020\003?\205|\200>#\363\010?\207\334\004?\023\n\201>\273\'\317\275\302\243M\275\246\233\014?\320\362|=\231G>>)\\\217\277-!?>\242\356#?\201C\250>\3604\231=\275\000\273\276\256\201%\277\036\371\003=f\367\204>4h\350\2753\026-\276\371\3323\276\345\n\357=\206Z\203>\317\240!=Y\206\230\276wH1\275\230n\242>\213\375\345\275\357r\361\276/\336O=\2716t>F\261\\\276\022\245\035\277E\365>\277\276\301\307>\1770P>\253\225\t\276\376\267*?1BX>\333\277\222>4\235}>8J\036\276\306\244\277\275\345\355\250\276\014\315\365=\237\346\304\275\302\245\343\274)\"C>g\233\353>\306y\356;\242\356c>@\336k\276\244\337\276\275\023,\316=\313\326z;\241\363\032\277c\321t>k+\306>k\364\312=\362\014z>\347\253\204=\376e7\275t\014\210>nQ\016?\321?\001>\325[\003>\334\235u\276\324\361\230\276\351\357%=<\214\244;\026\366\244\276\351\323j\275\036\342\037=\021S\342>k\021\221=s\021?>\310\263\253=\307\326\223=\211A\340>\354\206\255\276\317f\225>\"T)>\006d\'\277\233Z6\276F|\307>5AT>\002\274\305\276\020z\206>R\'\240>\365\020\235\276\305\311\035\276.\032\327;.\004\031\276\032\025x=`\260\333\275\2446\341>\246\013\261\275\355\365\016\276\315\257\006>\216\001\251>ZH@\273hy^\276\332\254\232>\304|\211\276\321\221\354\276y#\363\275\276\021\235=\0324T\276\373:\020\276\221\355\334\276=\325A\276R\355\263=\305\217!?\314\263\262\275\362\014\332=\312\371\302=\263\357\312>\3274\357\275|\362\200>\001\301<\276S\365\341\273\351e\024>\016O/> \rg\275\003\317\355>\030BN=\352\t\333\276\344\206\277\275aq\030>\2608$?\312O\022?\222\263@\277\361.\017?O\002\033=pB!\277\276\331&\276\361h\223\276\201\316\244=>\320\n\276Nb\220>J(\275\275\314F\347<\202\213\345\276\201\317\377\276}<\224\275$%}\275\335\352Y>o/\t>\307)z\275\002\240\n\275Z\236\247>P\215\037\2773\214\273\274al\341=*\221D\276#\241\215>\310\322\307\276\333\247#\276/\027!?\313\276+\276T\2519>jL\010=d
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 388
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup"
  op: "GatherV2"
  input: "Variable/read"
  input: "hash_table_Lookup/Select"
  input: "embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "embedding_lookup/Identity"
  op: "Identity"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout/dropout/Shape"
  op: "Shape"
  input: "embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout/dropout/random_uniform/max"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout/dropout/random_uniform/RandomUniform"
  input: "dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform"
  op: "Add"
  input: "dropout/dropout/random_uniform/mul"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/sub"
  op: "Sub"
  input: "dropout/dropout/sub/x"
  input: "dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/truediv"
  op: "RealDiv"
  input: "dropout/dropout/truediv/x"
  input: "dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout/dropout/random_uniform"
  input: "dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/mul"
  op: "Mul"
  input: "embedding_lookup/Identity"
  input: "dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/Cast"
  op: "Cast"
  input: "dropout/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/mul_1"
  op: "Mul"
  input: "dropout/dropout/mul"
  input: "dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "dropout/dropout/mul_1"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/max"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/mul"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/read"
  op: "Identity"
  input: "lstm_fused_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape"
  input: "lstm_fused_cell/strided_slice/stack"
  input: "lstm_fused_cell/strided_slice/stack_1"
  input: "lstm_fused_cell/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/Shape_1"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape_1"
  input: "lstm_fused_cell/strided_slice_1/stack"
  input: "lstm_fused_cell/strided_slice_1/stack_1"
  input: "lstm_fused_cell/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack"
  op: "Pack"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/zeros"
  op: "Fill"
  input: "lstm_fused_cell/stack"
  input: "lstm_fused_cell/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/Shape_2"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape_2"
  input: "lstm_fused_cell/strided_slice_2/stack"
  input: "lstm_fused_cell/strided_slice_2/stack_1"
  input: "lstm_fused_cell/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell/Cast"
  op: "Cast"
  input: "lstm_fused_cell/Max"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/BlockLSTM"
  op: "BlockLSTM"
  input: "lstm_fused_cell/Cast"
  input: "transpose"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/kernel/read"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Range"
  op: "Range"
  input: "lstm_fused_cell/SequenceMask/Const"
  input: "lstm_fused_cell/strided_slice_1"
  input: "lstm_fused_cell/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Cast"
  op: "Cast"
  input: "lstm_fused_cell/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Less"
  op: "Less"
  input: "lstm_fused_cell/SequenceMask/Range"
  input: "lstm_fused_cell/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Cast_1"
  op: "Cast"
  input: "lstm_fused_cell/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/transpose"
  op: "Transpose"
  input: "lstm_fused_cell/SequenceMask/Cast_1"
  input: "lstm_fused_cell/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims"
  op: "ExpandDims"
  input: "lstm_fused_cell/transpose"
  input: "lstm_fused_cell/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Tile"
  op: "Tile"
  input: "lstm_fused_cell/ExpandDims"
  input: "lstm_fused_cell/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/mul"
  op: "Mul"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat"
  op: "ConcatV2"
  input: "lstm_fused_cell/ExpandDims_1"
  input: "lstm_fused_cell/BlockLSTM:1"
  input: "lstm_fused_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_2"
  op: "ExpandDims"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat_1"
  op: "ConcatV2"
  input: "lstm_fused_cell/ExpandDims_2"
  input: "lstm_fused_cell/mul"
  input: "lstm_fused_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range"
  op: "Range"
  input: "lstm_fused_cell/range/start"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack_1"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/range"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/GatherNd"
  op: "GatherNd"
  input: "lstm_fused_cell/concat"
  input: "lstm_fused_cell/stack_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1"
  op: "Range"
  input: "lstm_fused_cell/range_1/start"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack_2"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/range_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/GatherNd_1"
  op: "GatherNd"
  input: "lstm_fused_cell/concat_1"
  input: "lstm_fused_cell/stack_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "ReverseSequence"
  op: "ReverseSequence"
  input: "transpose"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/max"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/mul"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape"
  input: "lstm_fused_cell_1/strided_slice/stack"
  input: "lstm_fused_cell_1/strided_slice/stack_1"
  input: "lstm_fused_cell_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape_1"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape_1"
  input: "lstm_fused_cell_1/strided_slice_1/stack"
  input: "lstm_fused_cell_1/strided_slice_1/stack_1"
  input: "lstm_fused_cell_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack"
  op: "Pack"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/stack"
  input: "lstm_fused_cell_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape_2"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape_2"
  input: "lstm_fused_cell_1/strided_slice_2/stack"
  input: "lstm_fused_cell_1/strided_slice_2/stack_1"
  input: "lstm_fused_cell_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell_1/Cast"
  op: "Cast"
  input: "lstm_fused_cell_1/Max"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/BlockLSTM"
  op: "BlockLSTM"
  input: "lstm_fused_cell_1/Cast"
  input: "ReverseSequence"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/kernel/read"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Range"
  op: "Range"
  input: "lstm_fused_cell_1/SequenceMask/Const"
  input: "lstm_fused_cell_1/strided_slice_1"
  input: "lstm_fused_cell_1/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Cast"
  op: "Cast"
  input: "lstm_fused_cell_1/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Less"
  op: "Less"
  input: "lstm_fused_cell_1/SequenceMask/Range"
  input: "lstm_fused_cell_1/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Cast_1"
  op: "Cast"
  input: "lstm_fused_cell_1/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/transpose"
  op: "Transpose"
  input: "lstm_fused_cell_1/SequenceMask/Cast_1"
  input: "lstm_fused_cell_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/transpose"
  input: "lstm_fused_cell_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Tile"
  op: "Tile"
  input: "lstm_fused_cell_1/ExpandDims"
  input: "lstm_fused_cell_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/mul"
  op: "Mul"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat"
  op: "ConcatV2"
  input: "lstm_fused_cell_1/ExpandDims_1"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  input: "lstm_fused_cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_2"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat_1"
  op: "ConcatV2"
  input: "lstm_fused_cell_1/ExpandDims_2"
  input: "lstm_fused_cell_1/mul"
  input: "lstm_fused_cell_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range"
  op: "Range"
  input: "lstm_fused_cell_1/range/start"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack_1"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/range"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/GatherNd"
  op: "GatherNd"
  input: "lstm_fused_cell_1/concat"
  input: "lstm_fused_cell_1/stack_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1"
  op: "Range"
  input: "lstm_fused_cell_1/range_1/start"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack_2"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/range_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/GatherNd_1"
  op: "GatherNd"
  input: "lstm_fused_cell_1/concat_1"
  input: "lstm_fused_cell_1/stack_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "ReverseSequence_1"
  op: "ReverseSequence"
  input: "lstm_fused_cell_1/mul"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "lstm_fused_cell/mul"
  input: "ReverseSequence_1"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "concat"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Shape"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/dropout/random_uniform/max"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/dropout/random_uniform/RandomUniform"
  input: "dropout_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/dropout/random_uniform/mul"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/sub"
  op: "Sub"
  input: "dropout_1/dropout/sub/x"
  input: "dropout_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/truediv"
  op: "RealDiv"
  input: "dropout_1/dropout/truediv/x"
  input: "dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/dropout/random_uniform"
  input: "dropout_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/mul"
  op: "Mul"
  input: "transpose_1"
  input: "dropout_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Cast"
  op: "Cast"
  input: "dropout_1/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/mul_1"
  op: "Mul"
  input: "dropout_1/dropout/mul"
  input: "dropout_1/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16552117466926575
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16552117466926575
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Shape"
  op: "Shape"
  input: "dropout_1/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod"
  op: "Prod"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod_1"
  op: "Prod"
  input: "dense/Tensordot/GatherV2_1"
  input: "dense/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat"
  op: "ConcatV2"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/stack"
  op: "Pack"
  input: "dense/Tensordot/Prod"
  input: "dense/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/transpose"
  op: "Transpose"
  input: "dropout_1/dropout/mul_1"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape"
  op: "Reshape"
  input: "dense/Tensordot/transpose"
  input: "dense/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense/kernel/read"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense/Tensordot/transpose_1"
  input: "dense/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/MatMul"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const_2"
  input: "dense/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot"
  op: "Reshape"
  input: "dense/Tensordot/MatMul"
  input: "dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/Tensordot"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.397359699010849
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.397359699010849
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "crf/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/sub"
  op: "Sub"
  input: "crf/Initializer/random_uniform/max"
  input: "crf/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/mul"
  op: "Mul"
  input: "crf/Initializer/random_uniform/RandomUniform"
  input: "crf/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform"
  op: "Add"
  input: "crf/Initializer/random_uniform/mul"
  input: "crf/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "crf"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Assign"
  op: "Assign"
  input: "crf"
  input: "crf/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/read"
  op: "Identity"
  input: "crf"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "strided_slice"
  input: "Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze"
  op: "Squeeze"
  input: "cond/Squeeze/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/Squeeze/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/ArgMax/dimension"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ArgMax"
  op: "ArgMax"
  input: "cond/Squeeze"
  input: "cond/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ExpandDims"
  op: "ExpandDims"
  input: "cond/ArgMax"
  input: "cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Max/reduction_indices"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/Max"
  op: "Max"
  input: "cond/Squeeze"
  input: "cond/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/Cast"
  op: "Cast"
  input: "cond/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1"
  op: "ExpandDims"
  input: "cond/ExpandDims_1/Switch"
  input: "cond/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/Slice/begin"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/Slice/size"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond/Slice"
  op: "Slice"
  input: "cond/Slice/Switch"
  input: "cond/Slice/begin"
  input: "cond/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/Slice/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze_1"
  op: "Squeeze"
  input: "cond/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/Slice_1/begin"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/Slice_1/size"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond/Slice_1"
  op: "Slice"
  input: "cond/Slice/Switch"
  input: "cond/Slice_1/begin"
  input: "cond/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/sub/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/sub"
  op: "Sub"
  input: "cond/sub/Switch"
  input: "cond/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/sub/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Maximum"
  op: "Maximum"
  input: "cond/Const"
  input: "cond/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Rank"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/range"
  op: "Range"
  input: "cond/rnn/range/start"
  input: "cond/rnn/Rank"
  input: "cond/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/concat/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat"
  op: "ConcatV2"
  input: "cond/rnn/concat/values_0"
  input: "cond/rnn/range"
  input: "cond/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/transpose"
  op: "Transpose"
  input: "cond/Slice_1"
  input: "cond/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/sequence_length"
  op: "Identity"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Shape"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn/Shape"
  input: "cond/rnn/strided_slice/stack"
  input: "cond/rnn/strided_slice/stack_1"
  input: "cond/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/Shape_1"
  op: "Shape"
  input: "cond/rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/stack"
  op: "Pack"
  input: "cond/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/rnn/Equal"
  op: "Equal"
  input: "cond/rnn/Shape_1"
  input: "cond/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/All"
  op: "All"
  input: "cond/rnn/Equal"
  input: "cond/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/Assert/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert/data_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert/data_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert"
  op: "Assert"
  input: "cond/rnn/All"
  input: "cond/rnn/Assert/Assert/data_0"
  input: "cond/rnn/stack"
  input: "cond/rnn/Assert/Assert/data_2"
  input: "cond/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond/rnn/CheckSeqLen"
  op: "Identity"
  input: "cond/rnn/sequence_length"
  input: "^cond/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Shape_2"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "cond/rnn/Shape_2"
  input: "cond/rnn/strided_slice_1/stack"
  input: "cond/rnn/strided_slice_1/stack_1"
  input: "cond/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/Shape_3"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "cond/rnn/Shape_3"
  input: "cond/rnn/strided_slice_2/stack"
  input: "cond/rnn/strided_slice_2/stack_1"
  input: "cond/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn/strided_slice_2"
  input: "cond/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "cond/rnn/concat_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat_1"
  op: "ConcatV2"
  input: "cond/rnn/ExpandDims"
  input: "cond/rnn/Const_1"
  input: "cond/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/zeros/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/zeros"
  op: "Fill"
  input: "cond/rnn/concat_1"
  input: "cond/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/Const_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/Min"
  op: "Min"
  input: "cond/rnn/CheckSeqLen"
  input: "cond/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/Const_3"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/Max"
  op: "Max"
  input: "cond/rnn/CheckSeqLen"
  input: "cond/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/time"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn/TensorArrayUnstack/Shape"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "cond/rnn/TensorArrayUnstack/range/start"
  input: "cond/rnn/TensorArrayUnstack/strided_slice"
  input: "cond/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond/rnn/TensorArray_1"
  input: "cond/rnn/TensorArrayUnstack/range"
  input: "cond/rnn/transpose"
  input: "cond/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Maximum/x"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/Maximum"
  op: "Maximum"
  input: "cond/rnn/Maximum/x"
  input: "cond/rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Minimum"
  op: "Minimum"
  input: "cond/rnn/strided_slice_1"
  input: "cond/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/iteration_counter"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/while/Enter"
  op: "Enter"
  input: "cond/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_1"
  op: "Enter"
  input: "cond/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_2"
  op: "Enter"
  input: "cond/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_3"
  op: "Enter"
  input: "cond/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Merge"
  op: "Merge"
  input: "cond/rnn/while/Enter"
  input: "cond/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_1"
  op: "Merge"
  input: "cond/rnn/while/Enter_1"
  input: "cond/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_2"
  op: "Merge"
  input: "cond/rnn/while/Enter_2"
  input: "cond/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_3"
  op: "Merge"
  input: "cond/rnn/while/Enter_3"
  input: "cond/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less"
  op: "Less"
  input: "cond/rnn/while/Merge"
  input: "cond/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less/Enter"
  op: "Enter"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Less_1"
  op: "Less"
  input: "cond/rnn/while/Merge_1"
  input: "cond/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "cond/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond/rnn/while/Less"
  input: "cond/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/LoopCond"
  op: "LoopCond"
  input: "cond/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch"
  op: "Switch"
  input: "cond/rnn/while/Merge"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_1"
  op: "Switch"
  input: "cond/rnn/while/Merge_1"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_2"
  op: "Switch"
  input: "cond/rnn/while/Merge_2"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_3"
  op: "Switch"
  input: "cond/rnn/while/Merge_3"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity"
  op: "Identity"
  input: "cond/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_1"
  op: "Identity"
  input: "cond/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_2"
  op: "Identity"
  input: "cond/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_3"
  op: "Identity"
  input: "cond/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add/y"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/add"
  op: "Add"
  input: "cond/rnn/while/Identity"
  input: "cond/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond/rnn/while/TensorArrayReadV3/Enter"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/ExpandDims/dim"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/while/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn/while/Identity_3"
  input: "cond/rnn/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_1"
  op: "Add"
  input: "cond/rnn/while/ExpandDims"
  input: "cond/rnn/while/add_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_1/Enter"
  op: "Enter"
  input: "cond/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Max/reduction_indices"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/Max"
  op: "Max"
  input: "cond/rnn/while/add_1"
  input: "cond/rnn/while/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/while/add_2"
  op: "Add"
  input: "cond/rnn/while/TensorArrayReadV3"
  input: "cond/rnn/while/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/ArgMax/dimension"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/ArgMax"
  op: "ArgMax"
  input: "cond/rnn/while/add_1"
  input: "cond/rnn/while/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/rnn/while/Cast"
  op: "Cast"
  input: "cond/rnn/while/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Select"
  op: "Select"
  input: "cond/rnn/while/GreaterEqual"
  input: "cond/rnn/while/Select/Enter"
  input: "cond/rnn/while/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Select/Enter"
  op: "Enter"
  input: "cond/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Select_1"
  op: "Select"
  input: "cond/rnn/while/GreaterEqual"
  input: "cond/rnn/while/Identity_3"
  input: "cond/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/Select"
  input: "cond/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/add_3/y"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_3"
  op: "Add"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration"
  op: "NextIteration"
  input: "cond/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "cond/rnn/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "cond/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit"
  op: "Exit"
  input: "cond/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_1"
  op: "Exit"
  input: "cond/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_2"
  op: "Exit"
  input: "cond/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_3"
  op: "Exit"
  input: "cond/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond/rnn/TensorArray"
  input: "cond/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range"
  op: "Range"
  input: "cond/rnn/TensorArrayStack/range/start"
  input: "cond/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "cond/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond/rnn/TensorArray"
  input: "cond/rnn/TensorArrayStack/range"
  input: "cond/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const_4"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "cond/rnn/Rank_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn/range_1/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/range_1/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/range_1"
  op: "Range"
  input: "cond/rnn/range_1/start"
  input: "cond/rnn/Rank_1"
  input: "cond/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2"
  op: "ConcatV2"
  input: "cond/rnn/concat_2/values_0"
  input: "cond/rnn/range_1"
  input: "cond/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/transpose_1"
  op: "Transpose"
  input: "cond/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "cond/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/ReverseSequence"
  op: "ReverseSequence"
  input: "cond/rnn/transpose_1"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/ArgMax_1/dimension"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ArgMax_1"
  op: "ArgMax"
  input: "cond/rnn/while/Exit_3"
  input: "cond/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Cast_1"
  op: "Cast"
  input: "cond/ArgMax_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_2/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/ExpandDims_2"
  op: "ExpandDims"
  input: "cond/Cast_1"
  input: "cond/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Rank"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn_1/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/range"
  op: "Range"
  input: "cond/rnn_1/range/start"
  input: "cond/rnn_1/Rank"
  input: "cond/rnn_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat"
  op: "ConcatV2"
  input: "cond/rnn_1/concat/values_0"
  input: "cond/rnn_1/range"
  input: "cond/rnn_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/transpose"
  op: "Transpose"
  input: "cond/ReverseSequence"
  input: "cond/rnn_1/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/sequence_length"
  op: "Identity"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Shape"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape"
  input: "cond/rnn_1/strided_slice/stack"
  input: "cond/rnn_1/strided_slice/stack_1"
  input: "cond/rnn_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/Shape_1"
  op: "Shape"
  input: "cond/rnn_1/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/stack"
  op: "Pack"
  input: "cond/rnn_1/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/rnn_1/Equal"
  op: "Equal"
  input: "cond/rnn_1/Shape_1"
  input: "cond/rnn_1/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/All"
  op: "All"
  input: "cond/rnn_1/Equal"
  input: "cond/rnn_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert/data_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert/data_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert"
  op: "Assert"
  input: "cond/rnn_1/All"
  input: "cond/rnn_1/Assert/Assert/data_0"
  input: "cond/rnn_1/stack"
  input: "cond/rnn_1/Assert/Assert/data_2"
  input: "cond/rnn_1/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond/rnn_1/CheckSeqLen"
  op: "Identity"
  input: "cond/rnn_1/sequence_length"
  input: "^cond/rnn_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Shape_2"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape_2"
  input: "cond/rnn_1/strided_slice_1/stack"
  input: "cond/rnn_1/strided_slice_1/stack_1"
  input: "cond/rnn_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/Shape_3"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape_3"
  input: "cond/rnn_1/strided_slice_2/stack"
  input: "cond/rnn_1/strided_slice_2/stack_1"
  input: "cond/rnn_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn_1/strided_slice_2"
  input: "cond/rnn_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_1"
  op: "ConcatV2"
  input: "cond/rnn_1/ExpandDims"
  input: "cond/rnn_1/Const_1"
  input: "cond/rnn_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/zeros/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/zeros"
  op: "Fill"
  input: "cond/rnn_1/concat_1"
  input: "cond/rnn_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/Const_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/Min"
  op: "Min"
  input: "cond/rnn_1/CheckSeqLen"
  input: "cond/rnn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/Const_3"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/Max"
  op: "Max"
  input: "cond/rnn_1/CheckSeqLen"
  input: "cond/rnn_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/time"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArray"
  op: "TensorArrayV3"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn_1/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond/rnn_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn_1/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/TensorArrayUnstack/Shape"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range"
  op: "Range"
  input: "cond/rnn_1/TensorArrayUnstack/range/start"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice"
  input: "cond/rnn_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond/rnn_1/TensorArray_1"
  input: "cond/rnn_1/TensorArrayUnstack/range"
  input: "cond/rnn_1/transpose"
  input: "cond/rnn_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Maximum/x"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/Maximum"
  op: "Maximum"
  input: "cond/rnn_1/Maximum/x"
  input: "cond/rnn_1/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Minimum"
  op: "Minimum"
  input: "cond/rnn_1/strided_slice_1"
  input: "cond/rnn_1/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/iteration_counter"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter"
  op: "Enter"
  input: "cond/rnn_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_1"
  op: "Enter"
  input: "cond/rnn_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_2"
  op: "Enter"
  input: "cond/rnn_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_3"
  op: "Enter"
  input: "cond/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge"
  op: "Merge"
  input: "cond/rnn_1/while/Enter"
  input: "cond/rnn_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_1"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_1"
  input: "cond/rnn_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_2"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_2"
  input: "cond/rnn_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_3"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_3"
  input: "cond/rnn_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less"
  op: "Less"
  input: "cond/rnn_1/while/Merge"
  input: "cond/rnn_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less/Enter"
  op: "Enter"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Less_1"
  op: "Less"
  input: "cond/rnn_1/while/Merge_1"
  input: "cond/rnn_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less_1/Enter"
  op: "Enter"
  input: "cond/rnn_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond/rnn_1/while/Less"
  input: "cond/rnn_1/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/LoopCond"
  op: "LoopCond"
  input: "cond/rnn_1/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch"
  op: "Switch"
  input: "cond/rnn_1/while/Merge"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_1"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_1"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_2"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_2"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_3"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_3"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity"
  op: "Identity"
  input: "cond/rnn_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_1"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_2"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_3"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add/y"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add"
  op: "Add"
  input: "cond/rnn_1/while/Identity"
  input: "cond/rnn_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond/rnn_1/while/TensorArrayReadV3/Enter"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond/rnn_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond/rnn_1/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Squeeze"
  op: "Squeeze"
  input: "cond/rnn_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Shape"
  op: "Shape"
  input: "cond/rnn_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack_1"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack_2"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/while/Shape"
  input: "cond/rnn_1/while/strided_slice/stack"
  input: "cond/rnn_1/while/strided_slice/stack_1"
  input: "cond/rnn_1/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/while/range/start"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/range/delta"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/range"
  op: "Range"
  input: "cond/rnn_1/while/range/start"
  input: "cond/rnn_1/while/strided_slice"
  input: "cond/rnn_1/while/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/stack"
  op: "Pack"
  input: "cond/rnn_1/while/range"
  input: "cond/rnn_1/while/Squeeze"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/while/GatherNd"
  op: "GatherNd"
  input: "cond/rnn_1/while/TensorArrayReadV3"
  input: "cond/rnn_1/while/stack"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/ExpandDims/dim"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn_1/while/GatherNd"
  input: "cond/rnn_1/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Select"
  op: "Select"
  input: "cond/rnn_1/while/GreaterEqual"
  input: "cond/rnn_1/while/Select/Enter"
  input: "cond/rnn_1/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Select/Enter"
  op: "Enter"
  input: "cond/rnn_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Select_1"
  op: "Select"
  input: "cond/rnn_1/while/GreaterEqual"
  input: "cond/rnn_1/while/Identity_3"
  input: "cond/rnn_1/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/Select"
  input: "cond/rnn_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond/rnn_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/add_1/y"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add_1"
  op: "Add"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration"
  op: "NextIteration"
  input: "cond/rnn_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_1"
  op: "NextIteration"
  input: "cond/rnn_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_2"
  op: "NextIteration"
  input: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_3"
  op: "NextIteration"
  input: "cond/rnn_1/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit"
  op: "Exit"
  input: "cond/rnn_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_1"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_2"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_3"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond/rnn_1/TensorArray"
  input: "cond/rnn_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range"
  op: "Range"
  input: "cond/rnn_1/TensorArrayStack/range/start"
  input: "cond/rnn_1/TensorArrayStack/TensorArraySizeV3"
  input: "cond/rnn_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond/rnn_1/TensorArray"
  input: "cond/rnn_1/TensorArrayStack/range"
  input: "cond/rnn_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const_4"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/Rank_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1"
  op: "Range"
  input: "cond/rnn_1/range_1/start"
  input: "cond/rnn_1/Rank_1"
  input: "cond/rnn_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2"
  op: "ConcatV2"
  input: "cond/rnn_1/concat_2/values_0"
  input: "cond/rnn_1/range_1"
  input: "cond/rnn_1/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/transpose_1"
  op: "Transpose"
  input: "cond/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  input: "cond/rnn_1/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze_2"
  op: "Squeeze"
  input: "cond/rnn_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "cond/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat"
  op: "ConcatV2"
  input: "cond/ExpandDims_2"
  input: "cond/Squeeze_2"
  input: "cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ReverseSequence_1"
  op: "ReverseSequence"
  input: "cond/concat"
  input: "cond/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/Max_1/reduction_indices"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/Max_1"
  op: "Max"
  input: "cond/rnn/while/Exit_3"
  input: "cond/Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/ReverseSequence_1"
  input: "cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge_1"
  op: "Merge"
  input: "cond/Max_1"
  input: "cond/Max"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/asset_path"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../../data/model/vocab.tags.txt"
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../../data/model/vocab.tags.txt_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index_1/hash_table/table_init/InitializeTableFromTextFileV2"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index_1/hash_table/hash_table"
  input: "string_to_index_1/hash_table/asset_path"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "hash_table_Lookup_1/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "string_to_index_1/hash_table/hash_table"
  input: "IteratorGetNext:2"
  input: "string_to_index_1/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "strided_slice_1"
  input: "Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "Equal_1"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape"
  op: "Shape"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond_1/Shape/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack_1"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack_2"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice"
  op: "StridedSlice"
  input: "cond_1/Shape"
  input: "cond_1/strided_slice/stack"
  input: "cond_1/strided_slice/stack_1"
  input: "cond_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/range/start"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range/delta"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range"
  op: "Range"
  input: "cond_1/range/start"
  input: "cond_1/strided_slice"
  input: "cond_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape/shape"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Reshape"
  op: "Reshape"
  input: "cond_1/range"
  input: "cond_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Squeeze"
  op: "Squeeze"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond_1/concat/axis"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/concat"
  op: "ConcatV2"
  input: "cond_1/Reshape"
  input: "cond_1/concat/Switch:1"
  input: "cond_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/concat/Switch"
  op: "Switch"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hash_table_Lookup_1/LookupTableFindV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherNd"
  op: "GatherNd"
  input: "cond_1/Squeeze"
  input: "cond_1/concat"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/LessEqual/y"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/LessEqual"
  op: "LessEqual"
  input: "cond_1/LessEqual/Switch:1"
  input: "cond_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/LessEqual/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/zeros_like"
  op: "ZerosLike"
  input: "cond_1/GatherNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/Select"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "cond_1/zeros_like"
  input: "cond_1/GatherNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape_1"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/Shape_1/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1"
  op: "StridedSlice"
  input: "cond_1/Shape_1"
  input: "cond_1/strided_slice_1/stack"
  input: "cond_1/strided_slice_1/stack_1"
  input: "cond_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Shape_2"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2"
  op: "StridedSlice"
  input: "cond_1/Shape_2"
  input: "cond_1/strided_slice_2/stack"
  input: "cond_1/strided_slice_2/stack_1"
  input: "cond_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Shape_3"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3"
  op: "StridedSlice"
  input: "cond_1/Shape_3"
  input: "cond_1/strided_slice_3/stack"
  input: "cond_1/strided_slice_3/stack_1"
  input: "cond_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Reshape_1/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_1"
  op: "Reshape"
  input: "cond_1/Shape_1/Switch"
  input: "cond_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/range_1/start"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range_1/delta"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range_1"
  op: "Range"
  input: "cond_1/range_1/start"
  input: "cond_1/strided_slice_1"
  input: "cond_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul"
  op: "Mul"
  input: "cond_1/range_1"
  input: "cond_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_1"
  op: "Mul"
  input: "cond_1/mul"
  input: "cond_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/mul_1"
  input: "cond_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/range_2/start"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range_2/delta"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range_2"
  op: "Range"
  input: "cond_1/range_2/start"
  input: "cond_1/strided_slice_2"
  input: "cond_1/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_2"
  op: "Mul"
  input: "cond_1/range_2"
  input: "cond_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims_1/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims_1"
  op: "ExpandDims"
  input: "cond_1/mul_2"
  input: "cond_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add"
  op: "Add"
  input: "cond_1/ExpandDims"
  input: "cond_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Cast"
  op: "Cast"
  input: "cond_1/add"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_1"
  op: "Add"
  input: "cond_1/Cast"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_1/Switch"
  op: "Switch"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hash_table_Lookup_1/LookupTableFindV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_2/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_2"
  op: "Reshape"
  input: "cond_1/add_1"
  input: "cond_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherV2/axis"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/GatherV2"
  op: "GatherV2"
  input: "cond_1/Reshape_1"
  input: "cond_1/Reshape_2"
  input: "cond_1/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Reshape_3/shape"
  op: "Pack"
  input: "cond_1/strided_slice_1"
  input: "cond_1/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Reshape_3"
  op: "Reshape"
  input: "cond_1/GatherV2"
  input: "cond_1/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape_4"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4"
  op: "StridedSlice"
  input: "cond_1/Shape_4"
  input: "cond_1/strided_slice_4/stack"
  input: "cond_1/strided_slice_4/stack_1"
  input: "cond_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Range"
  op: "Range"
  input: "cond_1/SequenceMask/Const"
  input: "cond_1/strided_slice_4"
  input: "cond_1/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/SequenceMask/ExpandDims/Switch"
  input: "cond_1/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Cast"
  op: "Cast"
  input: "cond_1/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Less"
  op: "Less"
  input: "cond_1/SequenceMask/Range"
  input: "cond_1/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Cast_1"
  op: "Cast"
  input: "cond_1/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_3"
  op: "Mul"
  input: "cond_1/Reshape_3"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Sum/reduction_indices"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/Sum"
  op: "Sum"
  input: "cond_1/mul_3"
  input: "cond_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_1/Shape_5"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5"
  op: "StridedSlice"
  input: "cond_1/Shape_5"
  input: "cond_1/strided_slice_5/stack"
  input: "cond_1/strided_slice_5/stack_1"
  input: "cond_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/sub/y"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/sub"
  op: "Sub"
  input: "cond_1/strided_slice_5"
  input: "cond_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice/size/0"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Slice/size"
  op: "Pack"
  input: "cond_1/Slice/size/0"
  input: "cond_1/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Slice"
  op: "Slice"
  input: "cond_1/add_1/Switch"
  input: "cond_1/Slice/begin"
  input: "cond_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/size/0"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/size"
  op: "Pack"
  input: "cond_1/Slice_1/size/0"
  input: "cond_1/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Slice_1"
  op: "Slice"
  input: "cond_1/add_1/Switch"
  input: "cond_1/Slice_1/begin"
  input: "cond_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_4/y"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 19
      }
    }
  }
}
node {
  name: "cond_1/mul_4"
  op: "Mul"
  input: "cond_1/Slice"
  input: "cond_1/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_2"
  op: "Add"
  input: "cond_1/mul_4"
  input: "cond_1/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4"
  op: "Reshape"
  input: "cond_1/Reshape_4/Switch"
  input: "cond_1/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 361
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherV2_1/axis"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/GatherV2_1"
  op: "GatherV2"
  input: "cond_1/Reshape_4"
  input: "cond_1/add_2"
  input: "cond_1/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Shape_6"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6"
  op: "StridedSlice"
  input: "cond_1/Shape_6"
  input: "cond_1/strided_slice_6/stack"
  input: "cond_1/strided_slice_6/stack_1"
  input: "cond_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Const"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Const_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Range"
  op: "Range"
  input: "cond_1/SequenceMask_1/Const"
  input: "cond_1/strided_slice_6"
  input: "cond_1/SequenceMask_1/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/SequenceMask/ExpandDims/Switch"
  input: "cond_1/SequenceMask_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Cast"
  op: "Cast"
  input: "cond_1/SequenceMask_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Less"
  op: "Less"
  input: "cond_1/SequenceMask_1/Range"
  input: "cond_1/SequenceMask_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Cast_1"
  op: "Cast"
  input: "cond_1/SequenceMask_1/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice_2/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice_2/size"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond_1/Slice_2"
  op: "Slice"
  input: "cond_1/SequenceMask_1/Cast_1"
  input: "cond_1/Slice_2/begin"
  input: "cond_1/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_5"
  op: "Mul"
  input: "cond_1/GatherV2_1"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Sum_1/reduction_indices"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/Sum_1"
  op: "Sum"
  input: "cond_1/mul_5"
  input: "cond_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_1/add_3"
  op: "Add"
  input: "cond_1/Sum"
  input: "cond_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/add_3"
  input: "cond_1/Select"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "dense/BiasAdd"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal_2"
  op: "Equal"
  input: "strided_slice_2"
  input: "Equal_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "Equal_2"
  input: "Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max"
  op: "Max"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  input: "cond_2/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max/Switch"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "cond_2/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Select"
  op: "Select"
  input: "cond_2/ReduceLogSumExp/IsFinite"
  input: "cond_2/ReduceLogSumExp/Max"
  input: "cond_2/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "cond_2/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "cond_2/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "cond_2/ReduceLogSumExp/Exp"
  input: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Log"
  op: "Log"
  input: "cond_2/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  input: "cond_2/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp/Log"
  input: "cond_2/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual/y"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/LessEqual"
  op: "LessEqual"
  input: "cond_2/LessEqual/Switch:1"
  input: "cond_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Select"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "cond_2/zeros_like"
  input: "cond_2/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Slice/begin"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/Slice/size"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond_2/Slice"
  op: "Slice"
  input: "cond_2/Slice/Switch"
  input: "cond_2/Slice/begin"
  input: "cond_2/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Slice/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/ExpandDims/Switch"
  input: "cond_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/sub/y"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/sub"
  op: "Sub"
  input: "cond_2/sub/Switch"
  input: "cond_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/sub/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Maximum"
  op: "Maximum"
  input: "cond_2/Const"
  input: "cond_2/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Rank"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_2/rnn/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/range"
  op: "Range"
  input: "cond_2/rnn/range/start"
  input: "cond_2/rnn/Rank"
  input: "cond_2/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat/values_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat"
  op: "ConcatV2"
  input: "cond_2/rnn/concat/values_0"
  input: "cond_2/rnn/range"
  input: "cond_2/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/transpose"
  op: "Transpose"
  input: "cond_2/Slice"
  input: "cond_2/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/sequence_length"
  op: "Identity"
  input: "cond_2/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Shape"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape"
  input: "cond_2/rnn/strided_slice/stack"
  input: "cond_2/rnn/strided_slice/stack_1"
  input: "cond_2/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/stack"
  op: "Pack"
  input: "cond_2/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_2/rnn/Equal"
  op: "Equal"
  input: "cond_2/rnn/Shape_1"
  input: "cond_2/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/All"
  op: "All"
  input: "cond_2/rnn/Equal"
  input: "cond_2/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond_2/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Const_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert/data_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond_2/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert/data_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert"
  op: "Assert"
  input: "cond_2/rnn/All"
  input: "cond_2/rnn/Assert/Assert/data_0"
  input: "cond_2/rnn/stack"
  input: "cond_2/rnn/Assert/Assert/data_2"
  input: "cond_2/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond_2/rnn/CheckSeqLen"
  op: "Identity"
  input: "cond_2/rnn/sequence_length"
  input: "^cond_2/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Shape_2"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape_2"
  input: "cond_2/rnn/strided_slice_1/stack"
  input: "cond_2/rnn/strided_slice_1/stack_1"
  input: "cond_2/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/Shape_3"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape_3"
  input: "cond_2/rnn/strided_slice_2/stack"
  input: "cond_2/rnn/strided_slice_2/stack_1"
  input: "cond_2/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/rnn/strided_slice_2"
  input: "cond_2/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_1/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_1"
  op: "ConcatV2"
  input: "cond_2/rnn/ExpandDims"
  input: "cond_2/rnn/Const_1"
  input: "cond_2/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/zeros/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/rnn/zeros"
  op: "Fill"
  input: "cond_2/rnn/concat_1"
  input: "cond_2/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/Const_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/Min"
  op: "Min"
  input: "cond_2/rnn/CheckSeqLen"
  input: "cond_2/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/Const_3"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/Max"
  op: "Max"
  input: "cond_2/rnn/CheckSeqLen"
  input: "cond_2/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/time"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond_2/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond_2/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond_2/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond_2/rnn/TensorArrayUnstack/Shape"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "cond_2/rnn/TensorArrayUnstack/range/start"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice"
  input: "cond_2/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond_2/rnn/TensorArray_1"
  input: "cond_2/rnn/TensorArrayUnstack/range"
  input: "cond_2/rnn/transpose"
  input: "cond_2/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Maximum/x"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/Maximum"
  op: "Maximum"
  input: "cond_2/rnn/Maximum/x"
  input: "cond_2/rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Minimum"
  op: "Minimum"
  input: "cond_2/rnn/strided_slice_1"
  input: "cond_2/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/iteration_counter"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter"
  op: "Enter"
  input: "cond_2/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_2"
  op: "Enter"
  input: "cond_2/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_3"
  op: "Enter"
  input: "cond_2/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge"
  op: "Merge"
  input: "cond_2/rnn/while/Enter"
  input: "cond_2/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_1"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_1"
  input: "cond_2/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_2"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_2"
  input: "cond_2/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_3"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_3"
  input: "cond_2/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less"
  op: "Less"
  input: "cond_2/rnn/while/Merge"
  input: "cond_2/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less/Enter"
  op: "Enter"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Less_1"
  op: "Less"
  input: "cond_2/rnn/while/Merge_1"
  input: "cond_2/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "cond_2/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond_2/rnn/while/Less"
  input: "cond_2/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/LoopCond"
  op: "LoopCond"
  input: "cond_2/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_1"
  op: "Switch"
  input: "cond_2/rnn/while/Merge"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_2"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_1"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_3"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_2"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_4"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_3"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_1"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_2"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_3"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add"
  op: "Add"
  input: "cond_2/rnn/while/Identity"
  input: "cond_2/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond_2/rnn/while/TensorArrayReadV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond_2/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/rnn/while/Identity_3"
  input: "cond_2/rnn/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_1"
  op: "Add"
  input: "cond_2/rnn/while/ExpandDims"
  input: "cond_2/rnn/while/add_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_1/Enter"
  op: "Enter"
  input: "cond_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Max"
  op: "Max"
  input: "cond_2/rnn/while/add_1"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Select"
  op: "Select"
  input: "cond_2/rnn/while/ReduceLogSumExp/IsFinite"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  input: "cond_2/rnn/while/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "cond_2/rnn/while/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "cond_2/rnn/while/add_1"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Log"
  op: "Log"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  input: "cond_2/rnn/while/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Add"
  op: "Add"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  input: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_2"
  op: "Add"
  input: "cond_2/rnn/while/TensorArrayReadV3"
  input: "cond_2/rnn/while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Select"
  op: "Select"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "cond_2/rnn/while/Select/Enter"
  input: "cond_2/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Select/Enter"
  op: "Enter"
  input: "cond_2/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Select_1"
  op: "Select"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "cond_2/rnn/while/Identity_3"
  input: "cond_2/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/Select"
  input: "cond_2/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/add_3/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_3"
  op: "Add"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration"
  op: "NextIteration"
  input: "cond_2/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "cond_2/rnn/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "cond_2/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_1"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_2"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_3"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond_2/rnn/TensorArray"
  input: "cond_2/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range"
  op: "Range"
  input: "cond_2/rnn/TensorArrayStack/range/start"
  input: "cond_2/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "cond_2/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond_2/rnn/TensorArray"
  input: "cond_2/rnn/TensorArrayStack/range"
  input: "cond_2/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 19
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const_4"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "cond_2/rnn/Rank_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1"
  op: "Range"
  input: "cond_2/rnn/range_1/start"
  input: "cond_2/rnn/Rank_1"
  input: "cond_2/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2/values_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2"
  op: "ConcatV2"
  input: "cond_2/rnn/concat_2/values_0"
  input: "cond_2/rnn/range_1"
  input: "cond_2/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/transpose_1"
  op: "Transpose"
  input: "cond_2/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "cond_2/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Max"
  op: "Max"
  input: "cond_2/rnn/while/Exit_3"
  input: "cond_2/ReduceLogSumExp_1/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/IsFinite"
  op: "IsFinite"
  input: "cond_2/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Select"
  op: "Select"
  input: "cond_2/ReduceLogSumExp_1/IsFinite"
  input: "cond_2/ReduceLogSumExp_1/Max"
  input: "cond_2/ReduceLogSumExp_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/StopGradient"
  op: "StopGradient"
  input: "cond_2/ReduceLogSumExp_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sub"
  op: "Sub"
  input: "cond_2/rnn/while/Exit_3"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Exp"
  op: "Exp"
  input: "cond_2/ReduceLogSumExp_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sum"
  op: "Sum"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  input: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Log"
  op: "Log"
  input: "cond_2/ReduceLogSumExp_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Reshape"
  op: "Reshape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  input: "cond_2/ReduceLogSumExp_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp_1/Log"
  input: "cond_2/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual_1/y"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/LessEqual_1"
  op: "LessEqual"
  input: "cond_2/sub/Switch"
  input: "cond_2/LessEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/zeros_like_1"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Select_1"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "cond_2/zeros_like_1"
  input: "cond_2/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/Select_1"
  input: "cond_2/Select"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "cond_1/Merge"
  input: "cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Rank"
  op: "Rank"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Neg"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "SequenceMask/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Maximum"
  op: "Maximum"
  input: "SequenceMask/Const_1"
  input: "SequenceMask/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask/Range"
  op: "Range"
  input: "SequenceMask/Const_2"
  input: "SequenceMask/Maximum"
  input: "SequenceMask/Const_3"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast"
  op: "Cast"
  input: "SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Less"
  op: "Less"
  input: "SequenceMask/Range"
  input: "SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Equal_3"
  op: "Equal"
  input: "Cast"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "Equal_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Cast"
  op: "Cast"
  input: "SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy/Cast:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Cast_1:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy/Cast:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Cast_1:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "Cast_1"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like"
  op: "Fill"
  input: "accuracy/broadcast_weights/ones_like/Shape"
  input: "accuracy/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights"
  op: "Mul"
  input: "accuracy/Cast"
  input: "accuracy/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/Mul"
  op: "Mul"
  input: "Cast_1"
  input: "accuracy/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "accuracy/broadcast_weights"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/Sum_1"
  op: "Sum"
  input: "accuracy/Mul"
  input: "accuracy/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/Sum"
  input: "^accuracy/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum"
  op: "Maximum"
  input: "accuracy/count/read"
  input: "accuracy/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "DivNoNan"
  input: "accuracy/total/read"
  input: "accuracy/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1"
  op: "Maximum"
  input: "accuracy/AssignAdd_1"
  input: "accuracy/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "DivNoNan"
  input: "accuracy/AssignAdd"
  input: "accuracy/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix/Assign"
  op: "Assign"
  input: "total_confusion_matrix"
  input: "total_confusion_matrix/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix/read"
  op: "Identity"
  input: "total_confusion_matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "Cast_3"
  op: "Cast"
  input: "Cast_3/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "Cast_2"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "SequenceMask/Less"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative/Const"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency"
  op: "Identity"
  input: "Reshape_1"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative_1/Const"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_1"
  op: "Identity"
  input: "Reshape"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency"
  input: "Cast_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/All"
  op: "All"
  input: "confusion_matrix/assert_less/Less"
  input: "confusion_matrix/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_3"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix/control_dependency"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency_1"
  input: "Cast_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/All"
  op: "All"
  input: "confusion_matrix/assert_less_1/Less"
  input: "confusion_matrix/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_3"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix/control_dependency_1"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/Cast"
  op: "Cast"
  input: "Reshape_2"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/stack"
  op: "Pack"
  input: "Cast_3"
  input: "Cast_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix/stack_1"
  op: "Pack"
  input: "confusion_matrix/control_dependency_2"
  input: "confusion_matrix/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix/Cast_1"
  op: "Cast"
  input: "confusion_matrix/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix/zeros"
  op: "Fill"
  input: "confusion_matrix/Cast_1"
  input: "confusion_matrix/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix/stack_1"
  input: "confusion_matrix/Cast"
  input: "confusion_matrix/stack"
  input: "confusion_matrix/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "total_confusion_matrix"
  input: "confusion_matrix/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart"
  op: "DiagPart"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "DiagPart"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "mul_1"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "mul_2"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Sum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "Sum_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_4"
  op: "Equal"
  input: "ToFloat_1"
  input: "zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "ToFloat"
  input: "ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select"
  op: "Select"
  input: "Equal_4"
  input: "zeros_like"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_2"
  op: "Cast"
  input: "Sum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_3"
  op: "Cast"
  input: "Sum_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_5"
  op: "Equal"
  input: "ToFloat_3"
  input: "zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "ToFloat_2"
  input: "ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_1"
  op: "Select"
  input: "Equal_5"
  input: "zeros_like_1"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "mul_3/x"
  input: "Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "mul_3"
  input: "Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_5/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "mul_5/x"
  input: "Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "mul_5"
  input: "Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_6"
  op: "Equal"
  input: "add"
  input: "zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "mul_4"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_2"
  op: "Select"
  input: "Equal_6"
  input: "zeros_like_2"
  input: "truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_6/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_6/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_1"
  op: "DiagPart"
  input: "mul_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_3"
  op: "Sum"
  input: "DiagPart_1"
  input: "Const_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_7/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_4"
  op: "Sum"
  input: "mul_7"
  input: "Const_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_8/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_8/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_5"
  op: "Sum"
  input: "mul_8"
  input: "Const_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_4"
  op: "Cast"
  input: "Sum_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_5"
  op: "Cast"
  input: "Sum_4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_7"
  op: "Equal"
  input: "ToFloat_5"
  input: "zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_3"
  op: "RealDiv"
  input: "ToFloat_4"
  input: "ToFloat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_3"
  op: "Select"
  input: "Equal_7"
  input: "zeros_like_3"
  input: "truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_6"
  op: "Cast"
  input: "Sum_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_7"
  op: "Cast"
  input: "Sum_5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_8"
  op: "Equal"
  input: "ToFloat_7"
  input: "zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_4"
  op: "RealDiv"
  input: "ToFloat_6"
  input: "ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_4"
  op: "Select"
  input: "Equal_8"
  input: "zeros_like_4"
  input: "truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_9/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_9"
  op: "Mul"
  input: "mul_9/x"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_10"
  op: "Mul"
  input: "mul_9"
  input: "Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_11/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_11"
  op: "Mul"
  input: "mul_11/x"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "mul_11"
  input: "Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_9"
  op: "Equal"
  input: "add_1"
  input: "zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_5"
  op: "RealDiv"
  input: "mul_10"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_5"
  op: "Select"
  input: "Equal_9"
  input: "zeros_like_5"
  input: "truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix_1/Assign"
  op: "Assign"
  input: "total_confusion_matrix_1"
  input: "total_confusion_matrix_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix_1/read"
  op: "Identity"
  input: "total_confusion_matrix_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Cast_4"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_5/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "Cast_5"
  op: "Cast"
  input: "Cast_5/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "Cast_4"
  input: "Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  input: "Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_5"
  op: "Reshape"
  input: "SequenceMask/Less"
  input: "Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_1/assert_non_negative/Const"
  input: "Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_4:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_4:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_4"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency"
  op: "Identity"
  input: "Reshape_4"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_1/assert_non_negative_1/Const"
  input: "Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_3"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_1"
  op: "Identity"
  input: "Reshape_3"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Less"
  op: "Less"
  input: "confusion_matrix_1/control_dependency"
  input: "Cast_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/All"
  op: "All"
  input: "confusion_matrix_1/assert_less/Less"
  input: "confusion_matrix_1/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less/All"
  input: "confusion_matrix_1/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less/All"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_1/control_dependency"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_5"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix_1/control_dependency"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix_1/control_dependency_1"
  input: "Cast_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/All"
  op: "All"
  input: "confusion_matrix_1/assert_less_1/Less"
  input: "confusion_matrix_1/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less_1/All"
  input: "confusion_matrix_1/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less_1/All"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_1/control_dependency_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_5"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix_1/control_dependency_1"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/Cast"
  op: "Cast"
  input: "Reshape_5"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/stack"
  op: "Pack"
  input: "Cast_5"
  input: "Cast_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix_1/stack_1"
  op: "Pack"
  input: "confusion_matrix_1/control_dependency_2"
  input: "confusion_matrix_1/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix_1/Cast_1"
  op: "Cast"
  input: "confusion_matrix_1/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/zeros"
  op: "Fill"
  input: "confusion_matrix_1/Cast_1"
  input: "confusion_matrix_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix_1/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix_1/stack_1"
  input: "confusion_matrix_1/Cast"
  input: "confusion_matrix_1/stack"
  input: "confusion_matrix_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd_1"
  op: "AssignAdd"
  input: "total_confusion_matrix_1"
  input: "confusion_matrix_1/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul_12/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_12"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_12/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_2"
  op: "DiagPart"
  input: "mul_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_6"
  op: "Sum"
  input: "DiagPart_2"
  input: "Const_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_13/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_13"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_13/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_7"
  op: "Sum"
  input: "mul_13"
  input: "Const_10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_14/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_14"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_14/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_8"
  op: "Sum"
  input: "mul_14"
  input: "Const_11"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_8"
  op: "Cast"
  input: "Sum_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_9"
  op: "Cast"
  input: "Sum_7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_10"
  op: "Equal"
  input: "ToFloat_9"
  input: "zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_6"
  op: "RealDiv"
  input: "ToFloat_8"
  input: "ToFloat_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_6"
  op: "Select"
  input: "Equal_10"
  input: "zeros_like_6"
  input: "truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_10"
  op: "Cast"
  input: "Sum_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_11"
  op: "Cast"
  input: "Sum_8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_11"
  op: "Equal"
  input: "ToFloat_11"
  input: "zeros_like_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_7"
  op: "RealDiv"
  input: "ToFloat_10"
  input: "ToFloat_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_7"
  op: "Select"
  input: "Equal_11"
  input: "zeros_like_7"
  input: "truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_15/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_15"
  op: "Mul"
  input: "mul_15/x"
  input: "Select_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_16"
  op: "Mul"
  input: "mul_15"
  input: "Select_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_17/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_17"
  op: "Mul"
  input: "mul_17/x"
  input: "Select_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "mul_17"
  input: "Select_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_12"
  op: "Equal"
  input: "add_2"
  input: "zeros_like_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_8"
  op: "RealDiv"
  input: "mul_16"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_8"
  op: "Select"
  input: "Equal_12"
  input: "zeros_like_8"
  input: "truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_18/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_18"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_18/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_3"
  op: "DiagPart"
  input: "mul_18"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_9"
  op: "Sum"
  input: "DiagPart_3"
  input: "Const_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_19/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_19"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_19/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_10"
  op: "Sum"
  input: "mul_19"
  input: "Const_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_20/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_20"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_20/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_11"
  op: "Sum"
  input: "mul_20"
  input: "Const_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_12"
  op: "Cast"
  input: "Sum_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_13"
  op: "Cast"
  input: "Sum_10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_13"
  op: "Equal"
  input: "ToFloat_13"
  input: "zeros_like_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_9"
  op: "RealDiv"
  input: "ToFloat_12"
  input: "ToFloat_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_9"
  op: "Select"
  input: "Equal_13"
  input: "zeros_like_9"
  input: "truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_14"
  op: "Cast"
  input: "Sum_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_15"
  op: "Cast"
  input: "Sum_11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_14"
  op: "Equal"
  input: "ToFloat_15"
  input: "zeros_like_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_10"
  op: "RealDiv"
  input: "ToFloat_14"
  input: "ToFloat_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_10"
  op: "Select"
  input: "Equal_14"
  input: "zeros_like_10"
  input: "truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_21/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_21"
  op: "Mul"
  input: "mul_21/x"
  input: "Select_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_22"
  op: "Mul"
  input: "mul_21"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_23/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_23"
  op: "Mul"
  input: "mul_23/x"
  input: "Select_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "mul_23"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_15"
  op: "Equal"
  input: "add_3"
  input: "zeros_like_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_11"
  op: "RealDiv"
  input: "mul_22"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_11"
  op: "Select"
  input: "Equal_15"
  input: "zeros_like_11"
  input: "truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix_2/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix_2/Assign"
  op: "Assign"
  input: "total_confusion_matrix_2"
  input: "total_confusion_matrix_2/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix_2/read"
  op: "Identity"
  input: "total_confusion_matrix_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Cast_6"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_7/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "Cast_7"
  op: "Cast"
  input: "Cast_7/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_6"
  op: "Reshape"
  input: "Cast_6"
  input: "Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_7/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_7"
  op: "Reshape"
  input: "hash_table_Lookup_1/LookupTableFindV2"
  input: "Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_8/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_8"
  op: "Reshape"
  input: "SequenceMask/Less"
  input: "Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_2/assert_non_negative/Const"
  input: "Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_7"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency"
  op: "Identity"
  input: "Reshape_7"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_2/assert_non_negative_1/Const"
  input: "Reshape_6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_6:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_6:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_6"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_1"
  op: "Identity"
  input: "Reshape_6"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Less"
  op: "Less"
  input: "confusion_matrix_2/control_dependency"
  input: "Cast_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/All"
  op: "All"
  input: "confusion_matrix_2/assert_less/Less"
  input: "confusion_matrix_2/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less/All"
  input: "confusion_matrix_2/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less/All"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_2/control_dependency"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_7"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix_2/control_dependency"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix_2/control_dependency_1"
  input: "Cast_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/All"
  op: "All"
  input: "confusion_matrix_2/assert_less_1/Less"
  input: "confusion_matrix_2/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less_1/All"
  input: "confusion_matrix_2/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (Cast_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less_1/All"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_2/control_dependency_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "Cast_7"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix_2/control_dependency_1"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/Cast"
  op: "Cast"
  input: "Reshape_8"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/stack"
  op: "Pack"
  input: "Cast_7"
  input: "Cast_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix_2/stack_1"
  op: "Pack"
  input: "confusion_matrix_2/control_dependency_2"
  input: "confusion_matrix_2/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix_2/Cast_1"
  op: "Cast"
  input: "confusion_matrix_2/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/zeros"
  op: "Fill"
  input: "confusion_matrix_2/Cast_1"
  input: "confusion_matrix_2/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix_2/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix_2/stack_1"
  input: "confusion_matrix_2/Cast"
  input: "confusion_matrix_2/stack"
  input: "confusion_matrix_2/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd_2"
  op: "AssignAdd"
  input: "total_confusion_matrix_2"
  input: "confusion_matrix_2/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul_24/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_24"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_24/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_4"
  op: "DiagPart"
  input: "mul_24"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_12"
  op: "Sum"
  input: "DiagPart_4"
  input: "Const_15"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_25/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content: "\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?"
      }
    }
  }
}
node {
  name: "mul_25"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_25/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_13"
  op: "Sum"
  input: "mul_25"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_26/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_26"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_26/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_14"
  op: "Sum"
  input: "mul_26"
  input: "Const_17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_16"
  op: "Cast"
  input: "Sum_12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_17"
  op: "Cast"
  input: "Sum_13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_16"
  op: "Equal"
  input: "ToFloat_17"
  input: "zeros_like_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_12"
  op: "RealDiv"
  input: "ToFloat_16"
  input: "ToFloat_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_12"
  op: "Select"
  input: "Equal_16"
  input: "zeros_like_12"
  input: "truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_18"
  op: "Cast"
  input: "Sum_12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_19"
  op: "Cast"
  input: "Sum_14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_17"
  op: "Equal"
  input: "ToFloat_19"
  input: "zeros_like_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_13"
  op: "RealDiv"
  input: "ToFloat_18"
  input: "ToFloat_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_13"
  op: "Select"
  input: "Equal_17"
  input: "zeros_like_13"
  input: "truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_27/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_27"
  op: "Mul"
  input: "mul_27/x"
  input: "Select_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_28"
  op: "Mul"
  input: "mul_27"
  input: "Select_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_29/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_29"
  op: "Mul"
  input: "mul_29/x"
  input: "Select_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_4"
  op: "Add"
  input: "mul_29"
  input: "Select_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_18"
  op: "Equal"
  input: "add_4"
  input: "zeros_like_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_14"
  op: "RealDiv"
  input: "mul_28"
  input: "add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_14"
  op: "Select"
  input: "Equal_18"
  input: "zeros_like_14"
  input: "truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_30/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_30"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_30/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_5"
  op: "DiagPart"
  input: "mul_30"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_15"
  op: "Sum"
  input: "DiagPart_5"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_31/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_31"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_31/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_16"
  op: "Sum"
  input: "mul_31"
  input: "Const_19"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_32/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        tensor_content: "\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?"
      }
    }
  }
}
node {
  name: "mul_32"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_32/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_17"
  op: "Sum"
  input: "mul_32"
  input: "Const_20"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_20"
  op: "Cast"
  input: "Sum_15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_21"
  op: "Cast"
  input: "Sum_16"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_19"
  op: "Equal"
  input: "ToFloat_21"
  input: "zeros_like_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_15"
  op: "RealDiv"
  input: "ToFloat_20"
  input: "ToFloat_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_15"
  op: "Select"
  input: "Equal_19"
  input: "zeros_like_15"
  input: "truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_22"
  op: "Cast"
  input: "Sum_15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_23"
  op: "Cast"
  input: "Sum_17"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_20"
  op: "Equal"
  input: "ToFloat_23"
  input: "zeros_like_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_16"
  op: "RealDiv"
  input: "ToFloat_22"
  input: "ToFloat_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_16"
  op: "Select"
  input: "Equal_20"
  input: "zeros_like_16"
  input: "truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_33/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_33"
  op: "Mul"
  input: "mul_33/x"
  input: "Select_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_34"
  op: "Mul"
  input: "mul_33"
  input: "Select_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_35/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_35"
  op: "Mul"
  input: "mul_35/x"
  input: "Select_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_5"
  op: "Add"
  input: "mul_35"
  input: "Select_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_21"
  op: "Equal"
  input: "add_5"
  input: "zeros_like_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_17"
  op: "RealDiv"
  input: "mul_34"
  input: "add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_17"
  op: "Select"
  input: "Equal_21"
  input: "zeros_like_17"
  input: "truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "acc/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "acc"
      }
    }
  }
}
node {
  name: "acc"
  op: "ScalarSummary"
  input: "acc/tags"
  input: "accuracy/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "precision/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "precision"
      }
    }
  }
}
node {
  name: "precision"
  op: "ScalarSummary"
  input: "precision/tags"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "recall/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "recall"
      }
    }
  }
}
node {
  name: "recall"
  op: "ScalarSummary"
  input: "recall/tags"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "f1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "f1"
      }
    }
  }
}
node {
  name: "f1"
  op: "ScalarSummary"
  input: "f1/tags"
  input: "Select_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Size"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "range"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "gradients/Mean_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Shape"
  op: "Shape"
  input: "cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_grad/Shape"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum"
  op: "Sum"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/Sum"
  input: "gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_grad/Neg"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/Reshape_1"
}
node {
  name: "gradients/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_grad/Reshape_1"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/sub_grad/tuple/control_dependency"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/sub_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Merge_grad/cond_grad"
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Merge_grad/cond_grad"
  input: "^gradients/cond_2/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Merge_grad/cond_grad:1"
  input: "^gradients/cond_2/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Shape"
  op: "Shape"
  input: "cond_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "cond_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/add_3_grad/Shape"
  input: "gradients/cond_1/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/Sum"
  input: "gradients/cond_1/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/Sum_1"
  input: "gradients/cond_1/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/add_3_grad/Reshape"
  input: "^gradients/cond_1/add_3_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/add_3_grad/Reshape"
  input: "^gradients/cond_1/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/add_3_grad/Reshape_1"
  input: "^gradients/cond_1/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/Select"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/Select_1"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "gradients/cond_1/Select_grad/zeros_like"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/Select_grad/Select"
  input: "^gradients/cond_1/Select_grad/Select_1"
}
node {
  name: "gradients/cond_1/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/Select_grad/Select"
  input: "^gradients/cond_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/Select_grad/Select_1"
  input: "^gradients/cond_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_2/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/Select"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_2/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/Select_1"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "gradients/cond_2/Select_1_grad/zeros_like"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Select_1_grad/Select"
  input: "^gradients/cond_2/Select_1_grad/Select_1"
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Select_1_grad/Select"
  input: "^gradients/cond_2/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Select_1_grad/Select_1"
  input: "^gradients/cond_2/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/Select"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/Select_1"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "gradients/cond_2/Select_grad/zeros_like"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Select_grad/Select"
  input: "^gradients/cond_2/Select_grad/Select_1"
}
node {
  name: "gradients/cond_2/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Select_grad/Select"
  input: "^gradients/cond_2/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Select_grad/Select_1"
  input: "^gradients/cond_2/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Shape"
  op: "Shape"
  input: "cond_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/add"
  op: "Add"
  input: "cond_1/Sum/reduction_indices"
  input: "gradients/cond_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_1/Sum_grad/add"
  input: "gradients/cond_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_1/Sum_grad/range/start"
  input: "gradients/cond_1/Sum_grad/Size"
  input: "gradients/cond_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_1/Sum_grad/Shape_1"
  input: "gradients/cond_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_1/Sum_grad/range"
  input: "gradients/cond_1/Sum_grad/mod"
  input: "gradients/cond_1/Sum_grad/Shape"
  input: "gradients/cond_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_1/Sum_grad/DynamicStitch"
  input: "gradients/cond_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_1/Sum_grad/Shape"
  input: "gradients/cond_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/tuple/control_dependency"
  input: "gradients/cond_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_1/Sum_grad/Reshape"
  input: "gradients/cond_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "cond_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/add"
  op: "Add"
  input: "cond_1/Sum_1/reduction_indices"
  input: "gradients/cond_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_1/Sum_1_grad/add"
  input: "gradients/cond_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range"
  op: "Range"
  input: "gradients/cond_1/Sum_1_grad/range/start"
  input: "gradients/cond_1/Sum_1_grad/Size"
  input: "gradients/cond_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/cond_1/Sum_1_grad/Shape_1"
  input: "gradients/cond_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_1/Sum_1_grad/range"
  input: "gradients/cond_1/Sum_1_grad/mod"
  input: "gradients/cond_1/Sum_1_grad/Shape"
  input: "gradients/cond_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  input: "gradients/cond_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_1/Sum_1_grad/Shape"
  input: "gradients/cond_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/cond_1/Sum_1_grad/Reshape"
  input: "gradients/cond_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Shape"
  op: "Shape"
  input: "cond_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/mul_3_grad/Shape"
  input: "gradients/cond_1/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/cond_1/Sum_grad/Tile"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/mul_3_grad/Mul"
  input: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/Sum"
  input: "gradients/cond_1/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "cond_1/Reshape_3"
  input: "gradients/cond_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/mul_3_grad/Mul_1"
  input: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/Sum_1"
  input: "gradients/cond_1/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/mul_3_grad/Reshape"
  input: "^gradients/cond_1/mul_3_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/mul_3_grad/Reshape"
  input: "^gradients/cond_1/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/mul_3_grad/Reshape_1"
  input: "^gradients/cond_1/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Shape"
  op: "Shape"
  input: "cond_1/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/mul_5_grad/Shape"
  input: "gradients/cond_1/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Mul"
  op: "Mul"
  input: "gradients/cond_1/Sum_1_grad/Tile"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/mul_5_grad/Mul"
  input: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/Sum"
  input: "gradients/cond_1/mul_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "cond_1/GatherV2_1"
  input: "gradients/cond_1/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/mul_5_grad/Mul_1"
  input: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/Sum_1"
  input: "gradients/cond_1/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/mul_5_grad/Reshape"
  input: "^gradients/cond_1/mul_5_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/mul_5_grad/Reshape"
  input: "^gradients/cond_1/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/mul_5_grad/Reshape_1"
  input: "^gradients/cond_1/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/Shape"
  op: "Shape"
  input: "cond_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/ScatterNd"
  op: "ScatterNd"
  input: "cond_1/concat"
  input: "gradients/cond_1/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/GatherNd_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_3_grad/Shape"
  op: "Shape"
  input: "cond_1/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/tuple/control_dependency"
  input: "gradients/cond_1/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 361
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Cast"
  op: "Cast"
  input: "gradients/cond_1/GatherV2_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Size"
  op: "Size"
  input: "cond_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/cond_1/GatherV2_1_grad/Size"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_1_grad/Cast"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_1"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice"
  input: "gradients/cond_1/GatherV2_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/tuple/control_dependency"
  input: "gradients/cond_1/GatherV2_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Reshape_1"
  op: "Reshape"
  input: "cond_1/add_2"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/GatherNd_grad/ScatterNd"
  input: "gradients/cond_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Shape"
  op: "Shape"
  input: "cond_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Cast"
  op: "Cast"
  input: "gradients/cond_1/GatherV2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Size"
  op: "Size"
  input: "cond_1/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/cond_1/GatherV2_grad/Size"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_grad/Cast"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims"
  input: "gradients/cond_1/GatherV2_grad/strided_slice"
  input: "gradients/cond_1/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_3_grad/Reshape"
  input: "gradients/cond_1/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "cond_1/Reshape_2"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_1_grad/Cast"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_1"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients/cond_1/GatherV2_1_grad/Reshape"
  input: "gradients/cond_1/GatherV2_1_grad/Reshape_1"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 361
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/tensor"
  input: "gradients/cond_1/Reshape_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity"
  op: "Identity"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  input: "^gradients/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Shape/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros"
  input: "gradients/cond_1/Squeeze_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Shape"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_grad/Cast"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_1"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients/cond_1/GatherV2_grad/Reshape"
  input: "gradients/cond_1/GatherV2_grad/Reshape_1"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/tensor"
  input: "gradients/cond_1/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "crf/read"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_1"
  op: "Identity"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  input: "^gradients/Identity_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_1/Reshape_4_grad/Reshape"
  input: "gradients/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "cond_2/ReduceLogSumExp_1/Sum"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "cond_2/ReduceLogSumExp/Sum"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_2"
  op: "Identity"
  input: "gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  input: "^gradients/Identity_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/Shape_3"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Shape_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_1/Reshape_1_grad/Reshape"
  input: "gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/add"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/start"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/mod"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/add"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/start"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/mod"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Log_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Tile"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Tile"
  input: "cond_2/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Neg"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Neg"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_3"
  op: "Identity"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Shape"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  input: "^gradients/Identity_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/Shape_4"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_4"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/cond_2/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_4"
  op: "Identity"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  input: "^gradients/Identity_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/Shape_5"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/Enter_3_grad/Exit"
  input: "gradients/zeros_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "cond_2/rnn/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  op: "Enter"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Enter"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select_1"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
  input: "gradients/cond_2/rnn/while/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Shape"
  op: "Shape"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_2"
  input: "gradients/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_2_grad/Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_2_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/add_2_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_2_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Shape"
  op: "Shape"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/stack"
  op: "Pack"
  input: "gradients/Slice_grad/Rank"
  input: "gradients/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_grad/Reshape"
  op: "Reshape"
  input: "Slice/begin"
  input: "gradients/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Shape_1"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_grad/sub"
  op: "Sub"
  input: "gradients/Slice_grad/Shape_1"
  input: "gradients/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_grad/sub"
  input: "Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_grad/sub_1"
  input: "gradients/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_grad/Reshape"
  input: "gradients/Slice_grad/Reshape_1"
  input: "gradients/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/Squeeze_grad/Reshape"
  input: "gradients/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "cond_2/rnn/TensorArray_1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "cond_2/rnn/TensorArrayUnstack/range"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "cond_2/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Shape"
  op: "Shape"
  input: "cond_2/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/stack"
  op: "Pack"
  input: "gradients/cond_2/Slice_grad/Rank"
  input: "gradients/cond_2/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Reshape"
  op: "Reshape"
  input: "cond_2/Slice/begin"
  input: "gradients/cond_2/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Shape_1"
  op: "Shape"
  input: "cond_2/Slice/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/sub"
  op: "Sub"
  input: "gradients/cond_2/Slice_grad/Shape_1"
  input: "gradients/cond_2/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/cond_2/Slice_grad/sub"
  input: "cond_2/Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/Slice_grad/sub_1"
  input: "gradients/cond_2/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_2/Slice_grad/Reshape"
  input: "gradients/cond_2/Slice_grad/Reshape_1"
  input: "gradients/cond_2/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/cond_2/rnn/transpose_grad/transpose"
  input: "gradients/cond_2/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_5"
  op: "Identity"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Shape"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  input: "^gradients/Identity_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/Shape_6"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/Slice_grad/Pad"
  input: "gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/cond_1/Shape/Switch_grad/cond_grad"
  input: "gradients/cond_1/Shape_1/Switch_grad/cond_grad"
  input: "gradients/Slice_grad/Pad"
  input: "gradients/cond_2/Slice/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Shape/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
  input: "^gradients/dense/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Shape/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Neg"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense/Tensordot_grad/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "gradients/dense/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dropout_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dropout_1/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/mul_1_grad/Shape"
  input: "gradients/dropout_1/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  input: "dropout_1/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_1_grad/Mul"
  input: "gradients/dropout_1/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_1_grad/Sum"
  input: "gradients/dropout_1/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/dropout/mul"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_1_grad/Mul_1"
  input: "gradients/dropout_1/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_1_grad/Sum_1"
  input: "gradients/dropout_1/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/mul_1_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_1_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_1_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/Sum"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/add_1_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_1_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/dropout_1/dropout/mul_1_grad/tuple/control_dependency"
  input: "dropout_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "transpose_1"
  input: "gradients/dropout_1/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_1"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch:1"
  input: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_3"
  input: "gradients/cond_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/concat_grad/mod"
  op: "FloorMod"
  input: "concat/axis"
  input: "gradients/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ShapeN"
  op: "ShapeN"
  input: "lstm_fused_cell/mul"
  input: "ReverseSequence_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_grad/mod"
  input: "gradients/concat_grad/ShapeN"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice"
  op: "Slice"
  input: "gradients/transpose_1_grad/transpose"
  input: "gradients/concat_grad/ConcatOffset"
  input: "gradients/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/transpose_1_grad/transpose"
  input: "gradients/concat_grad/ConcatOffset:1"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/Slice_1"
}
node {
  name: "gradients/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_grad/Slice_1"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "crf/read"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_6"
  op: "Identity"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Shape"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  input: "^gradients/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/Shape_7"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/ExpandDims_grad/Reshape"
  input: "gradients/zeros_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell/BlockLSTM:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_fused_cell/mul_grad/Shape"
  input: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/concat_grad/tuple/control_dependency"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Mul"
  input: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_fused_cell/mul_grad/Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "gradients/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Mul_1"
  input: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_fused_cell/mul_grad/Sum_1"
  input: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell/mul_grad/Reshape_1"
  input: "^gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ReverseSequence_1_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/concat_grad/tuple/control_dependency_1"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
  input: "gradients/cond_2/ExpandDims/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
  op: "BlockLSTMGrad"
  input: "lstm_fused_cell/Cast"
  input: "transpose"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/kernel/read"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/bias/read"
  input: "lstm_fused_cell/BlockLSTM"
  input: "lstm_fused_cell/BlockLSTM:1"
  input: "lstm_fused_cell/BlockLSTM:2"
  input: "lstm_fused_cell/BlockLSTM:3"
  input: "lstm_fused_cell/BlockLSTM:4"
  input: "lstm_fused_cell/BlockLSTM:5"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "gradients/zeros_like_1"
  input: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:1"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:2"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:3"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:4"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:5"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:6"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:7"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Mul"
  op: "Mul"
  input: "gradients/ReverseSequence_1_grad/ReverseSequence"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Mul"
  input: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "gradients/ReverseSequence_1_grad/ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Mul_1"
  input: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Sum_1"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell_1/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
  input: "^gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
  op: "BlockLSTMGrad"
  input: "lstm_fused_cell_1/Cast"
  input: "ReverseSequence"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/kernel/read"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/bias/read"
  input: "lstm_fused_cell_1/BlockLSTM"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  input: "lstm_fused_cell_1/BlockLSTM:2"
  input: "lstm_fused_cell_1/BlockLSTM:3"
  input: "lstm_fused_cell_1/BlockLSTM:4"
  input: "lstm_fused_cell_1/BlockLSTM:5"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "gradients/zeros_like_7"
  input: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:1"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:2"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:3"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:4"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:5"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:6"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:7"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "lstm_fused_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "lstm_fused_cell_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam/Assign"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam/read"
  op: "Identity"
  input: "dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam_1/read"
  op: "Identity"
  input: "dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam/Assign"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam/read"
  op: "Identity"
  input: "dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam_1/read"
  op: "Identity"
  input: "dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "crf/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "crf/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Adam/Assign"
  op: "Assign"
  input: "crf/Adam"
  input: "crf/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/Adam/read"
  op: "Identity"
  input: "crf/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "crf/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "crf/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Adam_1/Assign"
  op: "Assign"
  input: "crf/Adam_1"
  input: "crf/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/Adam_1/read"
  op: "Identity"
  input: "crf/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_crf/ApplyAdam"
  op: "ApplyAdam"
  input: "crf"
  input: "crf/Adam"
  input: "crf/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "signal_early_stopping/STOP/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "signal_early_stopping/STOP"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "signal_early_stopping/STOP/Assign"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "signal_early_stopping/STOP/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "signal_early_stopping/STOP/read"
  op: "Identity"
  input: "signal_early_stopping/STOP"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Assign/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "Assign/value"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Variable/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^crf/Adam/Assign"
  input: "^crf/Adam_1/Assign"
  input: "^crf/Assign"
  input: "^dense/bias/Adam/Assign"
  input: "^dense/bias/Adam_1/Assign"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Adam/Assign"
  input: "^dense/kernel/Adam_1/Assign"
  input: "^dense/kernel/Assign"
  input: "^global_step/Assign"
  input: "^lstm_fused_cell/bias/Adam/Assign"
  input: "^lstm_fused_cell/bias/Adam_1/Assign"
  input: "^lstm_fused_cell/bias/Assign"
  input: "^lstm_fused_cell/kernel/Adam/Assign"
  input: "^lstm_fused_cell/kernel/Adam_1/Assign"
  input: "^lstm_fused_cell/kernel/Assign"
  input: "^lstm_fused_cell_1/bias/Adam/Assign"
  input: "^lstm_fused_cell_1/bias/Adam_1/Assign"
  input: "^lstm_fused_cell_1/bias/Assign"
  input: "^lstm_fused_cell_1/kernel/Adam/Assign"
  input: "^lstm_fused_cell_1/kernel/Adam_1/Assign"
  input: "^lstm_fused_cell_1/kernel/Assign"
  input: "^signal_early_stopping/STOP/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "crf"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "crf/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "crf/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "signal_early_stopping/STOP"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 31
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 31
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 31
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 31
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 31
          }
        }
        string_val: "global_step"
        string_val: "Variable"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "crf"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "signal_early_stopping/STOP"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
        string_val: "total_confusion_matrix"
        string_val: "total_confusion_matrix_1"
        string_val: "total_confusion_matrix_2"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 31
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 31
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "crf"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "crf/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "crf/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "signal_early_stopping/STOP"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 26
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "global_step"
        string_val: "Variable"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "crf"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/count/Assign"
  input: "^accuracy/total/Assign"
  input: "^total_confusion_matrix/Assign"
  input: "^total_confusion_matrix_1/Assign"
  input: "^total_confusion_matrix_2/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^string_to_index/hash_table/table_init/InitializeTableFromTextFileV2"
  input: "^string_to_index_1/hash_table/table_init/InitializeTableFromTextFileV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "acc"
  input: "precision"
  input: "recall"
  input: "f1"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_211c87299a4c4282b63a7bb33e08b629/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "crf"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Variable"
  input: "beta1_power"
  input: "beta2_power"
  input: "crf"
  input: "crf/Adam"
  input: "crf/Adam_1"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "global_step"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "signal_early_stopping/STOP"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "crf"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Variable"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 388
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "crf"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "crf/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "crf/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "lstm_fused_cell/bias"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "lstm_fused_cell/kernel"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "lstm_fused_cell_1/bias"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "__inference_Dataset_from_generator_finalize_fn_42"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_2"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_get_iterator_id_fn_28"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_0"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_flat_map_fn_45"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "GeneratorDataset"
    }
    node_def {
      name: "GeneratorDataset"
      op: "GeneratorDataset"
      input: "args_0"
      attr {
        key: "Tfinalize_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tinit_func_args"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tnext_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "finalize_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_finalize_fn_42"
          }
        }
      }
      attr {
        key: "init_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_get_iterator_id_fn_28"
          }
        }
      }
      attr {
        key: "next_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_generator_next_fn_37"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "GeneratorDataset:handle:0"
      input: "^GeneratorDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "GeneratorDataset"
      value: "GeneratorDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_generator_next_fn_37"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_1"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "PyFunc:output:1"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "PyFunc:output:2"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
